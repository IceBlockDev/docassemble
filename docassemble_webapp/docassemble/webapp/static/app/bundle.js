/*!
 * jQuery JavaScript Library v3.7.1
 * https://jquery.com/
 *
 * Copyright OpenJS Foundation and other contributors
 * Released under the MIT license
 * https://jquery.org/license
 *
 * Date: 2023-08-28T13:37Z
 */
( function( global, factory ) {

	"use strict";

	if ( typeof module === "object" && typeof module.exports === "object" ) {

		// For CommonJS and CommonJS-like environments where a proper `window`
		// is present, execute the factory and get jQuery.
		// For environments that do not have a `window` with a `document`
		// (such as Node.js), expose a factory as module.exports.
		// This accentuates the need for the creation of a real `window`.
		// e.g. var jQuery = require("jquery")(window);
		// See ticket trac-14549 for more info.
		module.exports = global.document ?
			factory( global, true ) :
			function( w ) {
				if ( !w.document ) {
					throw new Error( "jQuery requires a window with a document" );
				}
				return factory( w );
			};
	} else {
		factory( global );
	}

// Pass this if window is not defined yet
} )( typeof window !== "undefined" ? window : this, function( window, noGlobal ) {

// Edge <= 12 - 13+, Firefox <=18 - 45+, IE 10 - 11, Safari 5.1 - 9+, iOS 6 - 9.1
// throw exceptions when non-strict code (e.g., ASP.NET 4.5) accesses strict mode
// arguments.callee.caller (trac-13335). But as of jQuery 3.0 (2016), strict mode should be common
// enough that all such attempts are guarded in a try block.
"use strict";

var arr = [];

var getProto = Object.getPrototypeOf;

var slice = arr.slice;

var flat = arr.flat ? function( array ) {
	return arr.flat.call( array );
} : function( array ) {
	return arr.concat.apply( [], array );
};


var push = arr.push;

var indexOf = arr.indexOf;

var class2type = {};

var toString = class2type.toString;

var hasOwn = class2type.hasOwnProperty;

var fnToString = hasOwn.toString;

var ObjectFunctionString = fnToString.call( Object );

var support = {};

var isFunction = function isFunction( obj ) {

		// Support: Chrome <=57, Firefox <=52
		// In some browsers, typeof returns "function" for HTML <object> elements
		// (i.e., `typeof document.createElement( "object" ) === "function"`).
		// We don't want to classify *any* DOM node as a function.
		// Support: QtWeb <=3.8.5, WebKit <=534.34, wkhtmltopdf tool <=0.12.5
		// Plus for old WebKit, typeof returns "function" for HTML collections
		// (e.g., `typeof document.getElementsByTagName("div") === "function"`). (gh-4756)
		return typeof obj === "function" && typeof obj.nodeType !== "number" &&
			typeof obj.item !== "function";
	};


var isWindow = function isWindow( obj ) {
		return obj != null && obj === obj.window;
	};


var document = window.document;



	var preservedScriptAttributes = {
		type: true,
		src: true,
		nonce: true,
		noModule: true
	};

	function DOMEval( code, node, doc ) {
		doc = doc || document;

		var i, val,
			script = doc.createElement( "script" );

		script.text = code;
		if ( node ) {
			for ( i in preservedScriptAttributes ) {

				// Support: Firefox 64+, Edge 18+
				// Some browsers don't support the "nonce" property on scripts.
				// On the other hand, just using `getAttribute` is not enough as
				// the `nonce` attribute is reset to an empty string whenever it
				// becomes browsing-context connected.
				// See https://github.com/whatwg/html/issues/2369
				// See https://html.spec.whatwg.org/#nonce-attributes
				// The `node.getAttribute` check was added for the sake of
				// `jQuery.globalEval` so that it can fake a nonce-containing node
				// via an object.
				val = node[ i ] || node.getAttribute && node.getAttribute( i );
				if ( val ) {
					script.setAttribute( i, val );
				}
			}
		}
		doc.head.appendChild( script ).parentNode.removeChild( script );
	}


function toType( obj ) {
	if ( obj == null ) {
		return obj + "";
	}

	// Support: Android <=2.3 only (functionish RegExp)
	return typeof obj === "object" || typeof obj === "function" ?
		class2type[ toString.call( obj ) ] || "object" :
		typeof obj;
}
/* global Symbol */
// Defining this global in .eslintrc.json would create a danger of using the global
// unguarded in another place, it seems safer to define global only for this module



var version = "3.7.1",

	rhtmlSuffix = /HTML$/i,

	// Define a local copy of jQuery
	jQuery = function( selector, context ) {

		// The jQuery object is actually just the init constructor 'enhanced'
		// Need init if jQuery is called (just allow error to be thrown if not included)
		return new jQuery.fn.init( selector, context );
	};

jQuery.fn = jQuery.prototype = {

	// The current version of jQuery being used
	jquery: version,

	constructor: jQuery,

	// The default length of a jQuery object is 0
	length: 0,

	toArray: function() {
		return slice.call( this );
	},

	// Get the Nth element in the matched element set OR
	// Get the whole matched element set as a clean array
	get: function( num ) {

		// Return all the elements in a clean array
		if ( num == null ) {
			return slice.call( this );
		}

		// Return just the one element from the set
		return num < 0 ? this[ num + this.length ] : this[ num ];
	},

	// Take an array of elements and push it onto the stack
	// (returning the new matched element set)
	pushStack: function( elems ) {

		// Build a new jQuery matched element set
		var ret = jQuery.merge( this.constructor(), elems );

		// Add the old object onto the stack (as a reference)
		ret.prevObject = this;

		// Return the newly-formed element set
		return ret;
	},

	// Execute a callback for every element in the matched set.
	each: function( callback ) {
		return jQuery.each( this, callback );
	},

	map: function( callback ) {
		return this.pushStack( jQuery.map( this, function( elem, i ) {
			return callback.call( elem, i, elem );
		} ) );
	},

	slice: function() {
		return this.pushStack( slice.apply( this, arguments ) );
	},

	first: function() {
		return this.eq( 0 );
	},

	last: function() {
		return this.eq( -1 );
	},

	even: function() {
		return this.pushStack( jQuery.grep( this, function( _elem, i ) {
			return ( i + 1 ) % 2;
		} ) );
	},

	odd: function() {
		return this.pushStack( jQuery.grep( this, function( _elem, i ) {
			return i % 2;
		} ) );
	},

	eq: function( i ) {
		var len = this.length,
			j = +i + ( i < 0 ? len : 0 );
		return this.pushStack( j >= 0 && j < len ? [ this[ j ] ] : [] );
	},

	end: function() {
		return this.prevObject || this.constructor();
	},

	// For internal use only.
	// Behaves like an Array's method, not like a jQuery method.
	push: push,
	sort: arr.sort,
	splice: arr.splice
};

jQuery.extend = jQuery.fn.extend = function() {
	var options, name, src, copy, copyIsArray, clone,
		target = arguments[ 0 ] || {},
		i = 1,
		length = arguments.length,
		deep = false;

	// Handle a deep copy situation
	if ( typeof target === "boolean" ) {
		deep = target;

		// Skip the boolean and the target
		target = arguments[ i ] || {};
		i++;
	}

	// Handle case when target is a string or something (possible in deep copy)
	if ( typeof target !== "object" && !isFunction( target ) ) {
		target = {};
	}

	// Extend jQuery itself if only one argument is passed
	if ( i === length ) {
		target = this;
		i--;
	}

	for ( ; i < length; i++ ) {

		// Only deal with non-null/undefined values
		if ( ( options = arguments[ i ] ) != null ) {

			// Extend the base object
			for ( name in options ) {
				copy = options[ name ];

				// Prevent Object.prototype pollution
				// Prevent never-ending loop
				if ( name === "__proto__" || target === copy ) {
					continue;
				}

				// Recurse if we're merging plain objects or arrays
				if ( deep && copy && ( jQuery.isPlainObject( copy ) ||
					( copyIsArray = Array.isArray( copy ) ) ) ) {
					src = target[ name ];

					// Ensure proper type for the source value
					if ( copyIsArray && !Array.isArray( src ) ) {
						clone = [];
					} else if ( !copyIsArray && !jQuery.isPlainObject( src ) ) {
						clone = {};
					} else {
						clone = src;
					}
					copyIsArray = false;

					// Never move original objects, clone them
					target[ name ] = jQuery.extend( deep, clone, copy );

				// Don't bring in undefined values
				} else if ( copy !== undefined ) {
					target[ name ] = copy;
				}
			}
		}
	}

	// Return the modified object
	return target;
};

jQuery.extend( {

	// Unique for each copy of jQuery on the page
	expando: "jQuery" + ( version + Math.random() ).replace( /\D/g, "" ),

	// Assume jQuery is ready without the ready module
	isReady: true,

	error: function( msg ) {
		throw new Error( msg );
	},

	noop: function() {},

	isPlainObject: function( obj ) {
		var proto, Ctor;

		// Detect obvious negatives
		// Use toString instead of jQuery.type to catch host objects
		if ( !obj || toString.call( obj ) !== "[object Object]" ) {
			return false;
		}

		proto = getProto( obj );

		// Objects with no prototype (e.g., `Object.create( null )`) are plain
		if ( !proto ) {
			return true;
		}

		// Objects with prototype are plain iff they were constructed by a global Object function
		Ctor = hasOwn.call( proto, "constructor" ) && proto.constructor;
		return typeof Ctor === "function" && fnToString.call( Ctor ) === ObjectFunctionString;
	},

	isEmptyObject: function( obj ) {
		var name;

		for ( name in obj ) {
			return false;
		}
		return true;
	},

	// Evaluates a script in a provided context; falls back to the global one
	// if not specified.
	globalEval: function( code, options, doc ) {
		DOMEval( code, { nonce: options && options.nonce }, doc );
	},

	each: function( obj, callback ) {
		var length, i = 0;

		if ( isArrayLike( obj ) ) {
			length = obj.length;
			for ( ; i < length; i++ ) {
				if ( callback.call( obj[ i ], i, obj[ i ] ) === false ) {
					break;
				}
			}
		} else {
			for ( i in obj ) {
				if ( callback.call( obj[ i ], i, obj[ i ] ) === false ) {
					break;
				}
			}
		}

		return obj;
	},


	// Retrieve the text value of an array of DOM nodes
	text: function( elem ) {
		var node,
			ret = "",
			i = 0,
			nodeType = elem.nodeType;

		if ( !nodeType ) {

			// If no nodeType, this is expected to be an array
			while ( ( node = elem[ i++ ] ) ) {

				// Do not traverse comment nodes
				ret += jQuery.text( node );
			}
		}
		if ( nodeType === 1 || nodeType === 11 ) {
			return elem.textContent;
		}
		if ( nodeType === 9 ) {
			return elem.documentElement.textContent;
		}
		if ( nodeType === 3 || nodeType === 4 ) {
			return elem.nodeValue;
		}

		// Do not include comment or processing instruction nodes

		return ret;
	},

	// results is for internal usage only
	makeArray: function( arr, results ) {
		var ret = results || [];

		if ( arr != null ) {
			if ( isArrayLike( Object( arr ) ) ) {
				jQuery.merge( ret,
					typeof arr === "string" ?
						[ arr ] : arr
				);
			} else {
				push.call( ret, arr );
			}
		}

		return ret;
	},

	inArray: function( elem, arr, i ) {
		return arr == null ? -1 : indexOf.call( arr, elem, i );
	},

	isXMLDoc: function( elem ) {
		var namespace = elem && elem.namespaceURI,
			docElem = elem && ( elem.ownerDocument || elem ).documentElement;

		// Assume HTML when documentElement doesn't yet exist, such as inside
		// document fragments.
		return !rhtmlSuffix.test( namespace || docElem && docElem.nodeName || "HTML" );
	},

	// Support: Android <=4.0 only, PhantomJS 1 only
	// push.apply(_, arraylike) throws on ancient WebKit
	merge: function( first, second ) {
		var len = +second.length,
			j = 0,
			i = first.length;

		for ( ; j < len; j++ ) {
			first[ i++ ] = second[ j ];
		}

		first.length = i;

		return first;
	},

	grep: function( elems, callback, invert ) {
		var callbackInverse,
			matches = [],
			i = 0,
			length = elems.length,
			callbackExpect = !invert;

		// Go through the array, only saving the items
		// that pass the validator function
		for ( ; i < length; i++ ) {
			callbackInverse = !callback( elems[ i ], i );
			if ( callbackInverse !== callbackExpect ) {
				matches.push( elems[ i ] );
			}
		}

		return matches;
	},

	// arg is for internal usage only
	map: function( elems, callback, arg ) {
		var length, value,
			i = 0,
			ret = [];

		// Go through the array, translating each of the items to their new values
		if ( isArrayLike( elems ) ) {
			length = elems.length;
			for ( ; i < length; i++ ) {
				value = callback( elems[ i ], i, arg );

				if ( value != null ) {
					ret.push( value );
				}
			}

		// Go through every key on the object,
		} else {
			for ( i in elems ) {
				value = callback( elems[ i ], i, arg );

				if ( value != null ) {
					ret.push( value );
				}
			}
		}

		// Flatten any nested arrays
		return flat( ret );
	},

	// A global GUID counter for objects
	guid: 1,

	// jQuery.support is not used in Core but other projects attach their
	// properties to it so it needs to exist.
	support: support
} );

if ( typeof Symbol === "function" ) {
	jQuery.fn[ Symbol.iterator ] = arr[ Symbol.iterator ];
}

// Populate the class2type map
jQuery.each( "Boolean Number String Function Array Date RegExp Object Error Symbol".split( " " ),
	function( _i, name ) {
		class2type[ "[object " + name + "]" ] = name.toLowerCase();
	} );

function isArrayLike( obj ) {

	// Support: real iOS 8.2 only (not reproducible in simulator)
	// `in` check used to prevent JIT error (gh-2145)
	// hasOwn isn't used here due to false negatives
	// regarding Nodelist length in IE
	var length = !!obj && "length" in obj && obj.length,
		type = toType( obj );

	if ( isFunction( obj ) || isWindow( obj ) ) {
		return false;
	}

	return type === "array" || length === 0 ||
		typeof length === "number" && length > 0 && ( length - 1 ) in obj;
}


function nodeName( elem, name ) {

	return elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase();

}
var pop = arr.pop;


var sort = arr.sort;


var splice = arr.splice;


var whitespace = "[\\x20\\t\\r\\n\\f]";


var rtrimCSS = new RegExp(
	"^" + whitespace + "+|((?:^|[^\\\\])(?:\\\\.)*)" + whitespace + "+$",
	"g"
);




// Note: an element does not contain itself
jQuery.contains = function( a, b ) {
	var bup = b && b.parentNode;

	return a === bup || !!( bup && bup.nodeType === 1 && (

		// Support: IE 9 - 11+
		// IE doesn't have `contains` on SVG.
		a.contains ?
			a.contains( bup ) :
			a.compareDocumentPosition && a.compareDocumentPosition( bup ) & 16
	) );
};




// CSS string/identifier serialization
// https://drafts.csswg.org/cssom/#common-serializing-idioms
var rcssescape = /([\0-\x1f\x7f]|^-?\d)|^-$|[^\x80-\uFFFF\w-]/g;

function fcssescape( ch, asCodePoint ) {
	if ( asCodePoint ) {

		// U+0000 NULL becomes U+FFFD REPLACEMENT CHARACTER
		if ( ch === "\0" ) {
			return "\uFFFD";
		}

		// Control characters and (dependent upon position) numbers get escaped as code points
		return ch.slice( 0, -1 ) + "\\" + ch.charCodeAt( ch.length - 1 ).toString( 16 ) + " ";
	}

	// Other potentially-special ASCII characters get backslash-escaped
	return "\\" + ch;
}

jQuery.escapeSelector = function( sel ) {
	return ( sel + "" ).replace( rcssescape, fcssescape );
};




var preferredDoc = document,
	pushNative = push;

( function() {

var i,
	Expr,
	outermostContext,
	sortInput,
	hasDuplicate,
	push = pushNative,

	// Local document vars
	document,
	documentElement,
	documentIsHTML,
	rbuggyQSA,
	matches,

	// Instance-specific data
	expando = jQuery.expando,
	dirruns = 0,
	done = 0,
	classCache = createCache(),
	tokenCache = createCache(),
	compilerCache = createCache(),
	nonnativeSelectorCache = createCache(),
	sortOrder = function( a, b ) {
		if ( a === b ) {
			hasDuplicate = true;
		}
		return 0;
	},

	booleans = "checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|" +
		"loop|multiple|open|readonly|required|scoped",

	// Regular expressions

	// https://www.w3.org/TR/css-syntax-3/#ident-token-diagram
	identifier = "(?:\\\\[\\da-fA-F]{1,6}" + whitespace +
		"?|\\\\[^\\r\\n\\f]|[\\w-]|[^\0-\\x7f])+",

	// Attribute selectors: https://www.w3.org/TR/selectors/#attribute-selectors
	attributes = "\\[" + whitespace + "*(" + identifier + ")(?:" + whitespace +

		// Operator (capture 2)
		"*([*^$|!~]?=)" + whitespace +

		// "Attribute values must be CSS identifiers [capture 5] or strings [capture 3 or capture 4]"
		"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|(" + identifier + "))|)" +
		whitespace + "*\\]",

	pseudos = ":(" + identifier + ")(?:\\((" +

		// To reduce the number of selectors needing tokenize in the preFilter, prefer arguments:
		// 1. quoted (capture 3; capture 4 or capture 5)
		"('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|" +

		// 2. simple (capture 6)
		"((?:\\\\.|[^\\\\()[\\]]|" + attributes + ")*)|" +

		// 3. anything else (capture 2)
		".*" +
		")\\)|)",

	// Leading and non-escaped trailing whitespace, capturing some non-whitespace characters preceding the latter
	rwhitespace = new RegExp( whitespace + "+", "g" ),

	rcomma = new RegExp( "^" + whitespace + "*," + whitespace + "*" ),
	rleadingCombinator = new RegExp( "^" + whitespace + "*([>+~]|" + whitespace + ")" +
		whitespace + "*" ),
	rdescend = new RegExp( whitespace + "|>" ),

	rpseudo = new RegExp( pseudos ),
	ridentifier = new RegExp( "^" + identifier + "$" ),

	matchExpr = {
		ID: new RegExp( "^#(" + identifier + ")" ),
		CLASS: new RegExp( "^\\.(" + identifier + ")" ),
		TAG: new RegExp( "^(" + identifier + "|[*])" ),
		ATTR: new RegExp( "^" + attributes ),
		PSEUDO: new RegExp( "^" + pseudos ),
		CHILD: new RegExp(
			"^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\(" +
				whitespace + "*(even|odd|(([+-]|)(\\d*)n|)" + whitespace + "*(?:([+-]|)" +
				whitespace + "*(\\d+)|))" + whitespace + "*\\)|)", "i" ),
		bool: new RegExp( "^(?:" + booleans + ")$", "i" ),

		// For use in libraries implementing .is()
		// We use this for POS matching in `select`
		needsContext: new RegExp( "^" + whitespace +
			"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\(" + whitespace +
			"*((?:-\\d)?\\d*)" + whitespace + "*\\)|)(?=[^-]|$)", "i" )
	},

	rinputs = /^(?:input|select|textarea|button)$/i,
	rheader = /^h\d$/i,

	// Easily-parseable/retrievable ID or TAG or CLASS selectors
	rquickExpr = /^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,

	rsibling = /[+~]/,

	// CSS escapes
	// https://www.w3.org/TR/CSS21/syndata.html#escaped-characters
	runescape = new RegExp( "\\\\[\\da-fA-F]{1,6}" + whitespace +
		"?|\\\\([^\\r\\n\\f])", "g" ),
	funescape = function( escape, nonHex ) {
		var high = "0x" + escape.slice( 1 ) - 0x10000;

		if ( nonHex ) {

			// Strip the backslash prefix from a non-hex escape sequence
			return nonHex;
		}

		// Replace a hexadecimal escape sequence with the encoded Unicode code point
		// Support: IE <=11+
		// For values outside the Basic Multilingual Plane (BMP), manually construct a
		// surrogate pair
		return high < 0 ?
			String.fromCharCode( high + 0x10000 ) :
			String.fromCharCode( high >> 10 | 0xD800, high & 0x3FF | 0xDC00 );
	},

	// Used for iframes; see `setDocument`.
	// Support: IE 9 - 11+, Edge 12 - 18+
	// Removing the function wrapper causes a "Permission Denied"
	// error in IE/Edge.
	unloadHandler = function() {
		setDocument();
	},

	inDisabledFieldset = addCombinator(
		function( elem ) {
			return elem.disabled === true && nodeName( elem, "fieldset" );
		},
		{ dir: "parentNode", next: "legend" }
	);

// Support: IE <=9 only
// Accessing document.activeElement can throw unexpectedly
// https://bugs.jquery.com/ticket/13393
function safeActiveElement() {
	try {
		return document.activeElement;
	} catch ( err ) { }
}

// Optimize for push.apply( _, NodeList )
try {
	push.apply(
		( arr = slice.call( preferredDoc.childNodes ) ),
		preferredDoc.childNodes
	);

	// Support: Android <=4.0
	// Detect silently failing push.apply
	// eslint-disable-next-line no-unused-expressions
	arr[ preferredDoc.childNodes.length ].nodeType;
} catch ( e ) {
	push = {
		apply: function( target, els ) {
			pushNative.apply( target, slice.call( els ) );
		},
		call: function( target ) {
			pushNative.apply( target, slice.call( arguments, 1 ) );
		}
	};
}

function find( selector, context, results, seed ) {
	var m, i, elem, nid, match, groups, newSelector,
		newContext = context && context.ownerDocument,

		// nodeType defaults to 9, since context defaults to document
		nodeType = context ? context.nodeType : 9;

	results = results || [];

	// Return early from calls with invalid selector or context
	if ( typeof selector !== "string" || !selector ||
		nodeType !== 1 && nodeType !== 9 && nodeType !== 11 ) {

		return results;
	}

	// Try to shortcut find operations (as opposed to filters) in HTML documents
	if ( !seed ) {
		setDocument( context );
		context = context || document;

		if ( documentIsHTML ) {

			// If the selector is sufficiently simple, try using a "get*By*" DOM method
			// (excepting DocumentFragment context, where the methods don't exist)
			if ( nodeType !== 11 && ( match = rquickExpr.exec( selector ) ) ) {

				// ID selector
				if ( ( m = match[ 1 ] ) ) {

					// Document context
					if ( nodeType === 9 ) {
						if ( ( elem = context.getElementById( m ) ) ) {

							// Support: IE 9 only
							// getElementById can match elements by name instead of ID
							if ( elem.id === m ) {
								push.call( results, elem );
								return results;
							}
						} else {
							return results;
						}

					// Element context
					} else {

						// Support: IE 9 only
						// getElementById can match elements by name instead of ID
						if ( newContext && ( elem = newContext.getElementById( m ) ) &&
							find.contains( context, elem ) &&
							elem.id === m ) {

							push.call( results, elem );
							return results;
						}
					}

				// Type selector
				} else if ( match[ 2 ] ) {
					push.apply( results, context.getElementsByTagName( selector ) );
					return results;

				// Class selector
				} else if ( ( m = match[ 3 ] ) && context.getElementsByClassName ) {
					push.apply( results, context.getElementsByClassName( m ) );
					return results;
				}
			}

			// Take advantage of querySelectorAll
			if ( !nonnativeSelectorCache[ selector + " " ] &&
				( !rbuggyQSA || !rbuggyQSA.test( selector ) ) ) {

				newSelector = selector;
				newContext = context;

				// qSA considers elements outside a scoping root when evaluating child or
				// descendant combinators, which is not what we want.
				// In such cases, we work around the behavior by prefixing every selector in the
				// list with an ID selector referencing the scope context.
				// The technique has to be used as well when a leading combinator is used
				// as such selectors are not recognized by querySelectorAll.
				// Thanks to Andrew Dupont for this technique.
				if ( nodeType === 1 &&
					( rdescend.test( selector ) || rleadingCombinator.test( selector ) ) ) {

					// Expand context for sibling selectors
					newContext = rsibling.test( selector ) && testContext( context.parentNode ) ||
						context;

					// We can use :scope instead of the ID hack if the browser
					// supports it & if we're not changing the context.
					// Support: IE 11+, Edge 17 - 18+
					// IE/Edge sometimes throw a "Permission denied" error when
					// strict-comparing two documents; shallow comparisons work.
					// eslint-disable-next-line eqeqeq
					if ( newContext != context || !support.scope ) {

						// Capture the context ID, setting it first if necessary
						if ( ( nid = context.getAttribute( "id" ) ) ) {
							nid = jQuery.escapeSelector( nid );
						} else {
							context.setAttribute( "id", ( nid = expando ) );
						}
					}

					// Prefix every selector in the list
					groups = tokenize( selector );
					i = groups.length;
					while ( i-- ) {
						groups[ i ] = ( nid ? "#" + nid : ":scope" ) + " " +
							toSelector( groups[ i ] );
					}
					newSelector = groups.join( "," );
				}

				try {
					push.apply( results,
						newContext.querySelectorAll( newSelector )
					);
					return results;
				} catch ( qsaError ) {
					nonnativeSelectorCache( selector, true );
				} finally {
					if ( nid === expando ) {
						context.removeAttribute( "id" );
					}
				}
			}
		}
	}

	// All others
	return select( selector.replace( rtrimCSS, "$1" ), context, results, seed );
}

/**
 * Create key-value caches of limited size
 * @returns {function(string, object)} Returns the Object data after storing it on itself with
 *	property name the (space-suffixed) string and (if the cache is larger than Expr.cacheLength)
 *	deleting the oldest entry
 */
function createCache() {
	var keys = [];

	function cache( key, value ) {

		// Use (key + " ") to avoid collision with native prototype properties
		// (see https://github.com/jquery/sizzle/issues/157)
		if ( keys.push( key + " " ) > Expr.cacheLength ) {

			// Only keep the most recent entries
			delete cache[ keys.shift() ];
		}
		return ( cache[ key + " " ] = value );
	}
	return cache;
}

/**
 * Mark a function for special use by jQuery selector module
 * @param {Function} fn The function to mark
 */
function markFunction( fn ) {
	fn[ expando ] = true;
	return fn;
}

/**
 * Support testing using an element
 * @param {Function} fn Passed the created element and returns a boolean result
 */
function assert( fn ) {
	var el = document.createElement( "fieldset" );

	try {
		return !!fn( el );
	} catch ( e ) {
		return false;
	} finally {

		// Remove from its parent by default
		if ( el.parentNode ) {
			el.parentNode.removeChild( el );
		}

		// release memory in IE
		el = null;
	}
}

/**
 * Returns a function to use in pseudos for input types
 * @param {String} type
 */
function createInputPseudo( type ) {
	return function( elem ) {
		return nodeName( elem, "input" ) && elem.type === type;
	};
}

/**
 * Returns a function to use in pseudos for buttons
 * @param {String} type
 */
function createButtonPseudo( type ) {
	return function( elem ) {
		return ( nodeName( elem, "input" ) || nodeName( elem, "button" ) ) &&
			elem.type === type;
	};
}

/**
 * Returns a function to use in pseudos for :enabled/:disabled
 * @param {Boolean} disabled true for :disabled; false for :enabled
 */
function createDisabledPseudo( disabled ) {

	// Known :disabled false positives: fieldset[disabled] > legend:nth-of-type(n+2) :can-disable
	return function( elem ) {

		// Only certain elements can match :enabled or :disabled
		// https://html.spec.whatwg.org/multipage/scripting.html#selector-enabled
		// https://html.spec.whatwg.org/multipage/scripting.html#selector-disabled
		if ( "form" in elem ) {

			// Check for inherited disabledness on relevant non-disabled elements:
			// * listed form-associated elements in a disabled fieldset
			//   https://html.spec.whatwg.org/multipage/forms.html#category-listed
			//   https://html.spec.whatwg.org/multipage/forms.html#concept-fe-disabled
			// * option elements in a disabled optgroup
			//   https://html.spec.whatwg.org/multipage/forms.html#concept-option-disabled
			// All such elements have a "form" property.
			if ( elem.parentNode && elem.disabled === false ) {

				// Option elements defer to a parent optgroup if present
				if ( "label" in elem ) {
					if ( "label" in elem.parentNode ) {
						return elem.parentNode.disabled === disabled;
					} else {
						return elem.disabled === disabled;
					}
				}

				// Support: IE 6 - 11+
				// Use the isDisabled shortcut property to check for disabled fieldset ancestors
				return elem.isDisabled === disabled ||

					// Where there is no isDisabled, check manually
					elem.isDisabled !== !disabled &&
						inDisabledFieldset( elem ) === disabled;
			}

			return elem.disabled === disabled;

		// Try to winnow out elements that can't be disabled before trusting the disabled property.
		// Some victims get caught in our net (label, legend, menu, track), but it shouldn't
		// even exist on them, let alone have a boolean value.
		} else if ( "label" in elem ) {
			return elem.disabled === disabled;
		}

		// Remaining elements are neither :enabled nor :disabled
		return false;
	};
}

/**
 * Returns a function to use in pseudos for positionals
 * @param {Function} fn
 */
function createPositionalPseudo( fn ) {
	return markFunction( function( argument ) {
		argument = +argument;
		return markFunction( function( seed, matches ) {
			var j,
				matchIndexes = fn( [], seed.length, argument ),
				i = matchIndexes.length;

			// Match elements found at the specified indexes
			while ( i-- ) {
				if ( seed[ ( j = matchIndexes[ i ] ) ] ) {
					seed[ j ] = !( matches[ j ] = seed[ j ] );
				}
			}
		} );
	} );
}

/**
 * Checks a node for validity as a jQuery selector context
 * @param {Element|Object=} context
 * @returns {Element|Object|Boolean} The input node if acceptable, otherwise a falsy value
 */
function testContext( context ) {
	return context && typeof context.getElementsByTagName !== "undefined" && context;
}

/**
 * Sets document-related variables once based on the current document
 * @param {Element|Object} [node] An element or document object to use to set the document
 * @returns {Object} Returns the current document
 */
function setDocument( node ) {
	var subWindow,
		doc = node ? node.ownerDocument || node : preferredDoc;

	// Return early if doc is invalid or already selected
	// Support: IE 11+, Edge 17 - 18+
	// IE/Edge sometimes throw a "Permission denied" error when strict-comparing
	// two documents; shallow comparisons work.
	// eslint-disable-next-line eqeqeq
	if ( doc == document || doc.nodeType !== 9 || !doc.documentElement ) {
		return document;
	}

	// Update global variables
	document = doc;
	documentElement = document.documentElement;
	documentIsHTML = !jQuery.isXMLDoc( document );

	// Support: iOS 7 only, IE 9 - 11+
	// Older browsers didn't support unprefixed `matches`.
	matches = documentElement.matches ||
		documentElement.webkitMatchesSelector ||
		documentElement.msMatchesSelector;

	// Support: IE 9 - 11+, Edge 12 - 18+
	// Accessing iframe documents after unload throws "permission denied" errors
	// (see trac-13936).
	// Limit the fix to IE & Edge Legacy; despite Edge 15+ implementing `matches`,
	// all IE 9+ and Edge Legacy versions implement `msMatchesSelector` as well.
	if ( documentElement.msMatchesSelector &&

		// Support: IE 11+, Edge 17 - 18+
		// IE/Edge sometimes throw a "Permission denied" error when strict-comparing
		// two documents; shallow comparisons work.
		// eslint-disable-next-line eqeqeq
		preferredDoc != document &&
		( subWindow = document.defaultView ) && subWindow.top !== subWindow ) {

		// Support: IE 9 - 11+, Edge 12 - 18+
		subWindow.addEventListener( "unload", unloadHandler );
	}

	// Support: IE <10
	// Check if getElementById returns elements by name
	// The broken getElementById methods don't pick up programmatically-set names,
	// so use a roundabout getElementsByName test
	support.getById = assert( function( el ) {
		documentElement.appendChild( el ).id = jQuery.expando;
		return !document.getElementsByName ||
			!document.getElementsByName( jQuery.expando ).length;
	} );

	// Support: IE 9 only
	// Check to see if it's possible to do matchesSelector
	// on a disconnected node.
	support.disconnectedMatch = assert( function( el ) {
		return matches.call( el, "*" );
	} );

	// Support: IE 9 - 11+, Edge 12 - 18+
	// IE/Edge don't support the :scope pseudo-class.
	support.scope = assert( function() {
		return document.querySelectorAll( ":scope" );
	} );

	// Support: Chrome 105 - 111 only, Safari 15.4 - 16.3 only
	// Make sure the `:has()` argument is parsed unforgivingly.
	// We include `*` in the test to detect buggy implementations that are
	// _selectively_ forgiving (specifically when the list includes at least
	// one valid selector).
	// Note that we treat complete lack of support for `:has()` as if it were
	// spec-compliant support, which is fine because use of `:has()` in such
	// environments will fail in the qSA path and fall back to jQuery traversal
	// anyway.
	support.cssHas = assert( function() {
		try {
			document.querySelector( ":has(*,:jqfake)" );
			return false;
		} catch ( e ) {
			return true;
		}
	} );

	// ID filter and find
	if ( support.getById ) {
		Expr.filter.ID = function( id ) {
			var attrId = id.replace( runescape, funescape );
			return function( elem ) {
				return elem.getAttribute( "id" ) === attrId;
			};
		};
		Expr.find.ID = function( id, context ) {
			if ( typeof context.getElementById !== "undefined" && documentIsHTML ) {
				var elem = context.getElementById( id );
				return elem ? [ elem ] : [];
			}
		};
	} else {
		Expr.filter.ID =  function( id ) {
			var attrId = id.replace( runescape, funescape );
			return function( elem ) {
				var node = typeof elem.getAttributeNode !== "undefined" &&
					elem.getAttributeNode( "id" );
				return node && node.value === attrId;
			};
		};

		// Support: IE 6 - 7 only
		// getElementById is not reliable as a find shortcut
		Expr.find.ID = function( id, context ) {
			if ( typeof context.getElementById !== "undefined" && documentIsHTML ) {
				var node, i, elems,
					elem = context.getElementById( id );

				if ( elem ) {

					// Verify the id attribute
					node = elem.getAttributeNode( "id" );
					if ( node && node.value === id ) {
						return [ elem ];
					}

					// Fall back on getElementsByName
					elems = context.getElementsByName( id );
					i = 0;
					while ( ( elem = elems[ i++ ] ) ) {
						node = elem.getAttributeNode( "id" );
						if ( node && node.value === id ) {
							return [ elem ];
						}
					}
				}

				return [];
			}
		};
	}

	// Tag
	Expr.find.TAG = function( tag, context ) {
		if ( typeof context.getElementsByTagName !== "undefined" ) {
			return context.getElementsByTagName( tag );

		// DocumentFragment nodes don't have gEBTN
		} else {
			return context.querySelectorAll( tag );
		}
	};

	// Class
	Expr.find.CLASS = function( className, context ) {
		if ( typeof context.getElementsByClassName !== "undefined" && documentIsHTML ) {
			return context.getElementsByClassName( className );
		}
	};

	/* QSA/matchesSelector
	---------------------------------------------------------------------- */

	// QSA and matchesSelector support

	rbuggyQSA = [];

	// Build QSA regex
	// Regex strategy adopted from Diego Perini
	assert( function( el ) {

		var input;

		documentElement.appendChild( el ).innerHTML =
			"<a id='" + expando + "' href='' disabled='disabled'></a>" +
			"<select id='" + expando + "-\r\\' disabled='disabled'>" +
			"<option selected=''></option></select>";

		// Support: iOS <=7 - 8 only
		// Boolean attributes and "value" are not treated correctly in some XML documents
		if ( !el.querySelectorAll( "[selected]" ).length ) {
			rbuggyQSA.push( "\\[" + whitespace + "*(?:value|" + booleans + ")" );
		}

		// Support: iOS <=7 - 8 only
		if ( !el.querySelectorAll( "[id~=" + expando + "-]" ).length ) {
			rbuggyQSA.push( "~=" );
		}

		// Support: iOS 8 only
		// https://bugs.webkit.org/show_bug.cgi?id=136851
		// In-page `selector#id sibling-combinator selector` fails
		if ( !el.querySelectorAll( "a#" + expando + "+*" ).length ) {
			rbuggyQSA.push( ".#.+[+~]" );
		}

		// Support: Chrome <=105+, Firefox <=104+, Safari <=15.4+
		// In some of the document kinds, these selectors wouldn't work natively.
		// This is probably OK but for backwards compatibility we want to maintain
		// handling them through jQuery traversal in jQuery 3.x.
		if ( !el.querySelectorAll( ":checked" ).length ) {
			rbuggyQSA.push( ":checked" );
		}

		// Support: Windows 8 Native Apps
		// The type and name attributes are restricted during .innerHTML assignment
		input = document.createElement( "input" );
		input.setAttribute( "type", "hidden" );
		el.appendChild( input ).setAttribute( "name", "D" );

		// Support: IE 9 - 11+
		// IE's :disabled selector does not pick up the children of disabled fieldsets
		// Support: Chrome <=105+, Firefox <=104+, Safari <=15.4+
		// In some of the document kinds, these selectors wouldn't work natively.
		// This is probably OK but for backwards compatibility we want to maintain
		// handling them through jQuery traversal in jQuery 3.x.
		documentElement.appendChild( el ).disabled = true;
		if ( el.querySelectorAll( ":disabled" ).length !== 2 ) {
			rbuggyQSA.push( ":enabled", ":disabled" );
		}

		// Support: IE 11+, Edge 15 - 18+
		// IE 11/Edge don't find elements on a `[name='']` query in some cases.
		// Adding a temporary attribute to the document before the selection works
		// around the issue.
		// Interestingly, IE 10 & older don't seem to have the issue.
		input = document.createElement( "input" );
		input.setAttribute( "name", "" );
		el.appendChild( input );
		if ( !el.querySelectorAll( "[name='']" ).length ) {
			rbuggyQSA.push( "\\[" + whitespace + "*name" + whitespace + "*=" +
				whitespace + "*(?:''|\"\")" );
		}
	} );

	if ( !support.cssHas ) {

		// Support: Chrome 105 - 110+, Safari 15.4 - 16.3+
		// Our regular `try-catch` mechanism fails to detect natively-unsupported
		// pseudo-classes inside `:has()` (such as `:has(:contains("Foo"))`)
		// in browsers that parse the `:has()` argument as a forgiving selector list.
		// https://drafts.csswg.org/selectors/#relational now requires the argument
		// to be parsed unforgivingly, but browsers have not yet fully adjusted.
		rbuggyQSA.push( ":has" );
	}

	rbuggyQSA = rbuggyQSA.length && new RegExp( rbuggyQSA.join( "|" ) );

	/* Sorting
	---------------------------------------------------------------------- */

	// Document order sorting
	sortOrder = function( a, b ) {

		// Flag for duplicate removal
		if ( a === b ) {
			hasDuplicate = true;
			return 0;
		}

		// Sort on method existence if only one input has compareDocumentPosition
		var compare = !a.compareDocumentPosition - !b.compareDocumentPosition;
		if ( compare ) {
			return compare;
		}

		// Calculate position if both inputs belong to the same document
		// Support: IE 11+, Edge 17 - 18+
		// IE/Edge sometimes throw a "Permission denied" error when strict-comparing
		// two documents; shallow comparisons work.
		// eslint-disable-next-line eqeqeq
		compare = ( a.ownerDocument || a ) == ( b.ownerDocument || b ) ?
			a.compareDocumentPosition( b ) :

			// Otherwise we know they are disconnected
			1;

		// Disconnected nodes
		if ( compare & 1 ||
			( !support.sortDetached && b.compareDocumentPosition( a ) === compare ) ) {

			// Choose the first element that is related to our preferred document
			// Support: IE 11+, Edge 17 - 18+
			// IE/Edge sometimes throw a "Permission denied" error when strict-comparing
			// two documents; shallow comparisons work.
			// eslint-disable-next-line eqeqeq
			if ( a === document || a.ownerDocument == preferredDoc &&
				find.contains( preferredDoc, a ) ) {
				return -1;
			}

			// Support: IE 11+, Edge 17 - 18+
			// IE/Edge sometimes throw a "Permission denied" error when strict-comparing
			// two documents; shallow comparisons work.
			// eslint-disable-next-line eqeqeq
			if ( b === document || b.ownerDocument == preferredDoc &&
				find.contains( preferredDoc, b ) ) {
				return 1;
			}

			// Maintain original order
			return sortInput ?
				( indexOf.call( sortInput, a ) - indexOf.call( sortInput, b ) ) :
				0;
		}

		return compare & 4 ? -1 : 1;
	};

	return document;
}

find.matches = function( expr, elements ) {
	return find( expr, null, null, elements );
};

find.matchesSelector = function( elem, expr ) {
	setDocument( elem );

	if ( documentIsHTML &&
		!nonnativeSelectorCache[ expr + " " ] &&
		( !rbuggyQSA || !rbuggyQSA.test( expr ) ) ) {

		try {
			var ret = matches.call( elem, expr );

			// IE 9's matchesSelector returns false on disconnected nodes
			if ( ret || support.disconnectedMatch ||

					// As well, disconnected nodes are said to be in a document
					// fragment in IE 9
					elem.document && elem.document.nodeType !== 11 ) {
				return ret;
			}
		} catch ( e ) {
			nonnativeSelectorCache( expr, true );
		}
	}

	return find( expr, document, null, [ elem ] ).length > 0;
};

find.contains = function( context, elem ) {

	// Set document vars if needed
	// Support: IE 11+, Edge 17 - 18+
	// IE/Edge sometimes throw a "Permission denied" error when strict-comparing
	// two documents; shallow comparisons work.
	// eslint-disable-next-line eqeqeq
	if ( ( context.ownerDocument || context ) != document ) {
		setDocument( context );
	}
	return jQuery.contains( context, elem );
};


find.attr = function( elem, name ) {

	// Set document vars if needed
	// Support: IE 11+, Edge 17 - 18+
	// IE/Edge sometimes throw a "Permission denied" error when strict-comparing
	// two documents; shallow comparisons work.
	// eslint-disable-next-line eqeqeq
	if ( ( elem.ownerDocument || elem ) != document ) {
		setDocument( elem );
	}

	var fn = Expr.attrHandle[ name.toLowerCase() ],

		// Don't get fooled by Object.prototype properties (see trac-13807)
		val = fn && hasOwn.call( Expr.attrHandle, name.toLowerCase() ) ?
			fn( elem, name, !documentIsHTML ) :
			undefined;

	if ( val !== undefined ) {
		return val;
	}

	return elem.getAttribute( name );
};

find.error = function( msg ) {
	throw new Error( "Syntax error, unrecognized expression: " + msg );
};

/**
 * Document sorting and removing duplicates
 * @param {ArrayLike} results
 */
jQuery.uniqueSort = function( results ) {
	var elem,
		duplicates = [],
		j = 0,
		i = 0;

	// Unless we *know* we can detect duplicates, assume their presence
	//
	// Support: Android <=4.0+
	// Testing for detecting duplicates is unpredictable so instead assume we can't
	// depend on duplicate detection in all browsers without a stable sort.
	hasDuplicate = !support.sortStable;
	sortInput = !support.sortStable && slice.call( results, 0 );
	sort.call( results, sortOrder );

	if ( hasDuplicate ) {
		while ( ( elem = results[ i++ ] ) ) {
			if ( elem === results[ i ] ) {
				j = duplicates.push( i );
			}
		}
		while ( j-- ) {
			splice.call( results, duplicates[ j ], 1 );
		}
	}

	// Clear input after sorting to release objects
	// See https://github.com/jquery/sizzle/pull/225
	sortInput = null;

	return results;
};

jQuery.fn.uniqueSort = function() {
	return this.pushStack( jQuery.uniqueSort( slice.apply( this ) ) );
};

Expr = jQuery.expr = {

	// Can be adjusted by the user
	cacheLength: 50,

	createPseudo: markFunction,

	match: matchExpr,

	attrHandle: {},

	find: {},

	relative: {
		">": { dir: "parentNode", first: true },
		" ": { dir: "parentNode" },
		"+": { dir: "previousSibling", first: true },
		"~": { dir: "previousSibling" }
	},

	preFilter: {
		ATTR: function( match ) {
			match[ 1 ] = match[ 1 ].replace( runescape, funescape );

			// Move the given value to match[3] whether quoted or unquoted
			match[ 3 ] = ( match[ 3 ] || match[ 4 ] || match[ 5 ] || "" )
				.replace( runescape, funescape );

			if ( match[ 2 ] === "~=" ) {
				match[ 3 ] = " " + match[ 3 ] + " ";
			}

			return match.slice( 0, 4 );
		},

		CHILD: function( match ) {

			/* matches from matchExpr["CHILD"]
				1 type (only|nth|...)
				2 what (child|of-type)
				3 argument (even|odd|\d*|\d*n([+-]\d+)?|...)
				4 xn-component of xn+y argument ([+-]?\d*n|)
				5 sign of xn-component
				6 x of xn-component
				7 sign of y-component
				8 y of y-component
			*/
			match[ 1 ] = match[ 1 ].toLowerCase();

			if ( match[ 1 ].slice( 0, 3 ) === "nth" ) {

				// nth-* requires argument
				if ( !match[ 3 ] ) {
					find.error( match[ 0 ] );
				}

				// numeric x and y parameters for Expr.filter.CHILD
				// remember that false/true cast respectively to 0/1
				match[ 4 ] = +( match[ 4 ] ?
					match[ 5 ] + ( match[ 6 ] || 1 ) :
					2 * ( match[ 3 ] === "even" || match[ 3 ] === "odd" )
				);
				match[ 5 ] = +( ( match[ 7 ] + match[ 8 ] ) || match[ 3 ] === "odd" );

			// other types prohibit arguments
			} else if ( match[ 3 ] ) {
				find.error( match[ 0 ] );
			}

			return match;
		},

		PSEUDO: function( match ) {
			var excess,
				unquoted = !match[ 6 ] && match[ 2 ];

			if ( matchExpr.CHILD.test( match[ 0 ] ) ) {
				return null;
			}

			// Accept quoted arguments as-is
			if ( match[ 3 ] ) {
				match[ 2 ] = match[ 4 ] || match[ 5 ] || "";

			// Strip excess characters from unquoted arguments
			} else if ( unquoted && rpseudo.test( unquoted ) &&

				// Get excess from tokenize (recursively)
				( excess = tokenize( unquoted, true ) ) &&

				// advance to the next closing parenthesis
				( excess = unquoted.indexOf( ")", unquoted.length - excess ) - unquoted.length ) ) {

				// excess is a negative index
				match[ 0 ] = match[ 0 ].slice( 0, excess );
				match[ 2 ] = unquoted.slice( 0, excess );
			}

			// Return only captures needed by the pseudo filter method (type and argument)
			return match.slice( 0, 3 );
		}
	},

	filter: {

		TAG: function( nodeNameSelector ) {
			var expectedNodeName = nodeNameSelector.replace( runescape, funescape ).toLowerCase();
			return nodeNameSelector === "*" ?
				function() {
					return true;
				} :
				function( elem ) {
					return nodeName( elem, expectedNodeName );
				};
		},

		CLASS: function( className ) {
			var pattern = classCache[ className + " " ];

			return pattern ||
				( pattern = new RegExp( "(^|" + whitespace + ")" + className +
					"(" + whitespace + "|$)" ) ) &&
				classCache( className, function( elem ) {
					return pattern.test(
						typeof elem.className === "string" && elem.className ||
							typeof elem.getAttribute !== "undefined" &&
								elem.getAttribute( "class" ) ||
							""
					);
				} );
		},

		ATTR: function( name, operator, check ) {
			return function( elem ) {
				var result = find.attr( elem, name );

				if ( result == null ) {
					return operator === "!=";
				}
				if ( !operator ) {
					return true;
				}

				result += "";

				if ( operator === "=" ) {
					return result === check;
				}
				if ( operator === "!=" ) {
					return result !== check;
				}
				if ( operator === "^=" ) {
					return check && result.indexOf( check ) === 0;
				}
				if ( operator === "*=" ) {
					return check && result.indexOf( check ) > -1;
				}
				if ( operator === "$=" ) {
					return check && result.slice( -check.length ) === check;
				}
				if ( operator === "~=" ) {
					return ( " " + result.replace( rwhitespace, " " ) + " " )
						.indexOf( check ) > -1;
				}
				if ( operator === "|=" ) {
					return result === check || result.slice( 0, check.length + 1 ) === check + "-";
				}

				return false;
			};
		},

		CHILD: function( type, what, _argument, first, last ) {
			var simple = type.slice( 0, 3 ) !== "nth",
				forward = type.slice( -4 ) !== "last",
				ofType = what === "of-type";

			return first === 1 && last === 0 ?

				// Shortcut for :nth-*(n)
				function( elem ) {
					return !!elem.parentNode;
				} :

				function( elem, _context, xml ) {
					var cache, outerCache, node, nodeIndex, start,
						dir = simple !== forward ? "nextSibling" : "previousSibling",
						parent = elem.parentNode,
						name = ofType && elem.nodeName.toLowerCase(),
						useCache = !xml && !ofType,
						diff = false;

					if ( parent ) {

						// :(first|last|only)-(child|of-type)
						if ( simple ) {
							while ( dir ) {
								node = elem;
								while ( ( node = node[ dir ] ) ) {
									if ( ofType ?
										nodeName( node, name ) :
										node.nodeType === 1 ) {

										return false;
									}
								}

								// Reverse direction for :only-* (if we haven't yet done so)
								start = dir = type === "only" && !start && "nextSibling";
							}
							return true;
						}

						start = [ forward ? parent.firstChild : parent.lastChild ];

						// non-xml :nth-child(...) stores cache data on `parent`
						if ( forward && useCache ) {

							// Seek `elem` from a previously-cached index
							outerCache = parent[ expando ] || ( parent[ expando ] = {} );
							cache = outerCache[ type ] || [];
							nodeIndex = cache[ 0 ] === dirruns && cache[ 1 ];
							diff = nodeIndex && cache[ 2 ];
							node = nodeIndex && parent.childNodes[ nodeIndex ];

							while ( ( node = ++nodeIndex && node && node[ dir ] ||

								// Fallback to seeking `elem` from the start
								( diff = nodeIndex = 0 ) || start.pop() ) ) {

								// When found, cache indexes on `parent` and break
								if ( node.nodeType === 1 && ++diff && node === elem ) {
									outerCache[ type ] = [ dirruns, nodeIndex, diff ];
									break;
								}
							}

						} else {

							// Use previously-cached element index if available
							if ( useCache ) {
								outerCache = elem[ expando ] || ( elem[ expando ] = {} );
								cache = outerCache[ type ] || [];
								nodeIndex = cache[ 0 ] === dirruns && cache[ 1 ];
								diff = nodeIndex;
							}

							// xml :nth-child(...)
							// or :nth-last-child(...) or :nth(-last)?-of-type(...)
							if ( diff === false ) {

								// Use the same loop as above to seek `elem` from the start
								while ( ( node = ++nodeIndex && node && node[ dir ] ||
									( diff = nodeIndex = 0 ) || start.pop() ) ) {

									if ( ( ofType ?
										nodeName( node, name ) :
										node.nodeType === 1 ) &&
										++diff ) {

										// Cache the index of each encountered element
										if ( useCache ) {
											outerCache = node[ expando ] ||
												( node[ expando ] = {} );
											outerCache[ type ] = [ dirruns, diff ];
										}

										if ( node === elem ) {
											break;
										}
									}
								}
							}
						}

						// Incorporate the offset, then check against cycle size
						diff -= last;
						return diff === first || ( diff % first === 0 && diff / first >= 0 );
					}
				};
		},

		PSEUDO: function( pseudo, argument ) {

			// pseudo-class names are case-insensitive
			// https://www.w3.org/TR/selectors/#pseudo-classes
			// Prioritize by case sensitivity in case custom pseudos are added with uppercase letters
			// Remember that setFilters inherits from pseudos
			var args,
				fn = Expr.pseudos[ pseudo ] || Expr.setFilters[ pseudo.toLowerCase() ] ||
					find.error( "unsupported pseudo: " + pseudo );

			// The user may use createPseudo to indicate that
			// arguments are needed to create the filter function
			// just as jQuery does
			if ( fn[ expando ] ) {
				return fn( argument );
			}

			// But maintain support for old signatures
			if ( fn.length > 1 ) {
				args = [ pseudo, pseudo, "", argument ];
				return Expr.setFilters.hasOwnProperty( pseudo.toLowerCase() ) ?
					markFunction( function( seed, matches ) {
						var idx,
							matched = fn( seed, argument ),
							i = matched.length;
						while ( i-- ) {
							idx = indexOf.call( seed, matched[ i ] );
							seed[ idx ] = !( matches[ idx ] = matched[ i ] );
						}
					} ) :
					function( elem ) {
						return fn( elem, 0, args );
					};
			}

			return fn;
		}
	},

	pseudos: {

		// Potentially complex pseudos
		not: markFunction( function( selector ) {

			// Trim the selector passed to compile
			// to avoid treating leading and trailing
			// spaces as combinators
			var input = [],
				results = [],
				matcher = compile( selector.replace( rtrimCSS, "$1" ) );

			return matcher[ expando ] ?
				markFunction( function( seed, matches, _context, xml ) {
					var elem,
						unmatched = matcher( seed, null, xml, [] ),
						i = seed.length;

					// Match elements unmatched by `matcher`
					while ( i-- ) {
						if ( ( elem = unmatched[ i ] ) ) {
							seed[ i ] = !( matches[ i ] = elem );
						}
					}
				} ) :
				function( elem, _context, xml ) {
					input[ 0 ] = elem;
					matcher( input, null, xml, results );

					// Don't keep the element
					// (see https://github.com/jquery/sizzle/issues/299)
					input[ 0 ] = null;
					return !results.pop();
				};
		} ),

		has: markFunction( function( selector ) {
			return function( elem ) {
				return find( selector, elem ).length > 0;
			};
		} ),

		contains: markFunction( function( text ) {
			text = text.replace( runescape, funescape );
			return function( elem ) {
				return ( elem.textContent || jQuery.text( elem ) ).indexOf( text ) > -1;
			};
		} ),

		// "Whether an element is represented by a :lang() selector
		// is based solely on the element's language value
		// being equal to the identifier C,
		// or beginning with the identifier C immediately followed by "-".
		// The matching of C against the element's language value is performed case-insensitively.
		// The identifier C does not have to be a valid language name."
		// https://www.w3.org/TR/selectors/#lang-pseudo
		lang: markFunction( function( lang ) {

			// lang value must be a valid identifier
			if ( !ridentifier.test( lang || "" ) ) {
				find.error( "unsupported lang: " + lang );
			}
			lang = lang.replace( runescape, funescape ).toLowerCase();
			return function( elem ) {
				var elemLang;
				do {
					if ( ( elemLang = documentIsHTML ?
						elem.lang :
						elem.getAttribute( "xml:lang" ) || elem.getAttribute( "lang" ) ) ) {

						elemLang = elemLang.toLowerCase();
						return elemLang === lang || elemLang.indexOf( lang + "-" ) === 0;
					}
				} while ( ( elem = elem.parentNode ) && elem.nodeType === 1 );
				return false;
			};
		} ),

		// Miscellaneous
		target: function( elem ) {
			var hash = window.location && window.location.hash;
			return hash && hash.slice( 1 ) === elem.id;
		},

		root: function( elem ) {
			return elem === documentElement;
		},

		focus: function( elem ) {
			return elem === safeActiveElement() &&
				document.hasFocus() &&
				!!( elem.type || elem.href || ~elem.tabIndex );
		},

		// Boolean properties
		enabled: createDisabledPseudo( false ),
		disabled: createDisabledPseudo( true ),

		checked: function( elem ) {

			// In CSS3, :checked should return both checked and selected elements
			// https://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
			return ( nodeName( elem, "input" ) && !!elem.checked ) ||
				( nodeName( elem, "option" ) && !!elem.selected );
		},

		selected: function( elem ) {

			// Support: IE <=11+
			// Accessing the selectedIndex property
			// forces the browser to treat the default option as
			// selected when in an optgroup.
			if ( elem.parentNode ) {
				// eslint-disable-next-line no-unused-expressions
				elem.parentNode.selectedIndex;
			}

			return elem.selected === true;
		},

		// Contents
		empty: function( elem ) {

			// https://www.w3.org/TR/selectors/#empty-pseudo
			// :empty is negated by element (1) or content nodes (text: 3; cdata: 4; entity ref: 5),
			//   but not by others (comment: 8; processing instruction: 7; etc.)
			// nodeType < 6 works because attributes (2) do not appear as children
			for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
				if ( elem.nodeType < 6 ) {
					return false;
				}
			}
			return true;
		},

		parent: function( elem ) {
			return !Expr.pseudos.empty( elem );
		},

		// Element/input types
		header: function( elem ) {
			return rheader.test( elem.nodeName );
		},

		input: function( elem ) {
			return rinputs.test( elem.nodeName );
		},

		button: function( elem ) {
			return nodeName( elem, "input" ) && elem.type === "button" ||
				nodeName( elem, "button" );
		},

		text: function( elem ) {
			var attr;
			return nodeName( elem, "input" ) && elem.type === "text" &&

				// Support: IE <10 only
				// New HTML5 attribute values (e.g., "search") appear
				// with elem.type === "text"
				( ( attr = elem.getAttribute( "type" ) ) == null ||
					attr.toLowerCase() === "text" );
		},

		// Position-in-collection
		first: createPositionalPseudo( function() {
			return [ 0 ];
		} ),

		last: createPositionalPseudo( function( _matchIndexes, length ) {
			return [ length - 1 ];
		} ),

		eq: createPositionalPseudo( function( _matchIndexes, length, argument ) {
			return [ argument < 0 ? argument + length : argument ];
		} ),

		even: createPositionalPseudo( function( matchIndexes, length ) {
			var i = 0;
			for ( ; i < length; i += 2 ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		} ),

		odd: createPositionalPseudo( function( matchIndexes, length ) {
			var i = 1;
			for ( ; i < length; i += 2 ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		} ),

		lt: createPositionalPseudo( function( matchIndexes, length, argument ) {
			var i;

			if ( argument < 0 ) {
				i = argument + length;
			} else if ( argument > length ) {
				i = length;
			} else {
				i = argument;
			}

			for ( ; --i >= 0; ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		} ),

		gt: createPositionalPseudo( function( matchIndexes, length, argument ) {
			var i = argument < 0 ? argument + length : argument;
			for ( ; ++i < length; ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		} )
	}
};

Expr.pseudos.nth = Expr.pseudos.eq;

// Add button/input type pseudos
for ( i in { radio: true, checkbox: true, file: true, password: true, image: true } ) {
	Expr.pseudos[ i ] = createInputPseudo( i );
}
for ( i in { submit: true, reset: true } ) {
	Expr.pseudos[ i ] = createButtonPseudo( i );
}

// Easy API for creating new setFilters
function setFilters() {}
setFilters.prototype = Expr.filters = Expr.pseudos;
Expr.setFilters = new setFilters();

function tokenize( selector, parseOnly ) {
	var matched, match, tokens, type,
		soFar, groups, preFilters,
		cached = tokenCache[ selector + " " ];

	if ( cached ) {
		return parseOnly ? 0 : cached.slice( 0 );
	}

	soFar = selector;
	groups = [];
	preFilters = Expr.preFilter;

	while ( soFar ) {

		// Comma and first run
		if ( !matched || ( match = rcomma.exec( soFar ) ) ) {
			if ( match ) {

				// Don't consume trailing commas as valid
				soFar = soFar.slice( match[ 0 ].length ) || soFar;
			}
			groups.push( ( tokens = [] ) );
		}

		matched = false;

		// Combinators
		if ( ( match = rleadingCombinator.exec( soFar ) ) ) {
			matched = match.shift();
			tokens.push( {
				value: matched,

				// Cast descendant combinators to space
				type: match[ 0 ].replace( rtrimCSS, " " )
			} );
			soFar = soFar.slice( matched.length );
		}

		// Filters
		for ( type in Expr.filter ) {
			if ( ( match = matchExpr[ type ].exec( soFar ) ) && ( !preFilters[ type ] ||
				( match = preFilters[ type ]( match ) ) ) ) {
				matched = match.shift();
				tokens.push( {
					value: matched,
					type: type,
					matches: match
				} );
				soFar = soFar.slice( matched.length );
			}
		}

		if ( !matched ) {
			break;
		}
	}

	// Return the length of the invalid excess
	// if we're just parsing
	// Otherwise, throw an error or return tokens
	if ( parseOnly ) {
		return soFar.length;
	}

	return soFar ?
		find.error( selector ) :

		// Cache the tokens
		tokenCache( selector, groups ).slice( 0 );
}

function toSelector( tokens ) {
	var i = 0,
		len = tokens.length,
		selector = "";
	for ( ; i < len; i++ ) {
		selector += tokens[ i ].value;
	}
	return selector;
}

function addCombinator( matcher, combinator, base ) {
	var dir = combinator.dir,
		skip = combinator.next,
		key = skip || dir,
		checkNonElements = base && key === "parentNode",
		doneName = done++;

	return combinator.first ?

		// Check against closest ancestor/preceding element
		function( elem, context, xml ) {
			while ( ( elem = elem[ dir ] ) ) {
				if ( elem.nodeType === 1 || checkNonElements ) {
					return matcher( elem, context, xml );
				}
			}
			return false;
		} :

		// Check against all ancestor/preceding elements
		function( elem, context, xml ) {
			var oldCache, outerCache,
				newCache = [ dirruns, doneName ];

			// We can't set arbitrary data on XML nodes, so they don't benefit from combinator caching
			if ( xml ) {
				while ( ( elem = elem[ dir ] ) ) {
					if ( elem.nodeType === 1 || checkNonElements ) {
						if ( matcher( elem, context, xml ) ) {
							return true;
						}
					}
				}
			} else {
				while ( ( elem = elem[ dir ] ) ) {
					if ( elem.nodeType === 1 || checkNonElements ) {
						outerCache = elem[ expando ] || ( elem[ expando ] = {} );

						if ( skip && nodeName( elem, skip ) ) {
							elem = elem[ dir ] || elem;
						} else if ( ( oldCache = outerCache[ key ] ) &&
							oldCache[ 0 ] === dirruns && oldCache[ 1 ] === doneName ) {

							// Assign to newCache so results back-propagate to previous elements
							return ( newCache[ 2 ] = oldCache[ 2 ] );
						} else {

							// Reuse newcache so results back-propagate to previous elements
							outerCache[ key ] = newCache;

							// A match means we're done; a fail means we have to keep checking
							if ( ( newCache[ 2 ] = matcher( elem, context, xml ) ) ) {
								return true;
							}
						}
					}
				}
			}
			return false;
		};
}

function elementMatcher( matchers ) {
	return matchers.length > 1 ?
		function( elem, context, xml ) {
			var i = matchers.length;
			while ( i-- ) {
				if ( !matchers[ i ]( elem, context, xml ) ) {
					return false;
				}
			}
			return true;
		} :
		matchers[ 0 ];
}

function multipleContexts( selector, contexts, results ) {
	var i = 0,
		len = contexts.length;
	for ( ; i < len; i++ ) {
		find( selector, contexts[ i ], results );
	}
	return results;
}

function condense( unmatched, map, filter, context, xml ) {
	var elem,
		newUnmatched = [],
		i = 0,
		len = unmatched.length,
		mapped = map != null;

	for ( ; i < len; i++ ) {
		if ( ( elem = unmatched[ i ] ) ) {
			if ( !filter || filter( elem, context, xml ) ) {
				newUnmatched.push( elem );
				if ( mapped ) {
					map.push( i );
				}
			}
		}
	}

	return newUnmatched;
}

function setMatcher( preFilter, selector, matcher, postFilter, postFinder, postSelector ) {
	if ( postFilter && !postFilter[ expando ] ) {
		postFilter = setMatcher( postFilter );
	}
	if ( postFinder && !postFinder[ expando ] ) {
		postFinder = setMatcher( postFinder, postSelector );
	}
	return markFunction( function( seed, results, context, xml ) {
		var temp, i, elem, matcherOut,
			preMap = [],
			postMap = [],
			preexisting = results.length,

			// Get initial elements from seed or context
			elems = seed ||
				multipleContexts( selector || "*",
					context.nodeType ? [ context ] : context, [] ),

			// Prefilter to get matcher input, preserving a map for seed-results synchronization
			matcherIn = preFilter && ( seed || !selector ) ?
				condense( elems, preMap, preFilter, context, xml ) :
				elems;

		if ( matcher ) {

			// If we have a postFinder, or filtered seed, or non-seed postFilter
			// or preexisting results,
			matcherOut = postFinder || ( seed ? preFilter : preexisting || postFilter ) ?

				// ...intermediate processing is necessary
				[] :

				// ...otherwise use results directly
				results;

			// Find primary matches
			matcher( matcherIn, matcherOut, context, xml );
		} else {
			matcherOut = matcherIn;
		}

		// Apply postFilter
		if ( postFilter ) {
			temp = condense( matcherOut, postMap );
			postFilter( temp, [], context, xml );

			// Un-match failing elements by moving them back to matcherIn
			i = temp.length;
			while ( i-- ) {
				if ( ( elem = temp[ i ] ) ) {
					matcherOut[ postMap[ i ] ] = !( matcherIn[ postMap[ i ] ] = elem );
				}
			}
		}

		if ( seed ) {
			if ( postFinder || preFilter ) {
				if ( postFinder ) {

					// Get the final matcherOut by condensing this intermediate into postFinder contexts
					temp = [];
					i = matcherOut.length;
					while ( i-- ) {
						if ( ( elem = matcherOut[ i ] ) ) {

							// Restore matcherIn since elem is not yet a final match
							temp.push( ( matcherIn[ i ] = elem ) );
						}
					}
					postFinder( null, ( matcherOut = [] ), temp, xml );
				}

				// Move matched elements from seed to results to keep them synchronized
				i = matcherOut.length;
				while ( i-- ) {
					if ( ( elem = matcherOut[ i ] ) &&
						( temp = postFinder ? indexOf.call( seed, elem ) : preMap[ i ] ) > -1 ) {

						seed[ temp ] = !( results[ temp ] = elem );
					}
				}
			}

		// Add elements to results, through postFinder if defined
		} else {
			matcherOut = condense(
				matcherOut === results ?
					matcherOut.splice( preexisting, matcherOut.length ) :
					matcherOut
			);
			if ( postFinder ) {
				postFinder( null, results, matcherOut, xml );
			} else {
				push.apply( results, matcherOut );
			}
		}
	} );
}

function matcherFromTokens( tokens ) {
	var checkContext, matcher, j,
		len = tokens.length,
		leadingRelative = Expr.relative[ tokens[ 0 ].type ],
		implicitRelative = leadingRelative || Expr.relative[ " " ],
		i = leadingRelative ? 1 : 0,

		// The foundational matcher ensures that elements are reachable from top-level context(s)
		matchContext = addCombinator( function( elem ) {
			return elem === checkContext;
		}, implicitRelative, true ),
		matchAnyContext = addCombinator( function( elem ) {
			return indexOf.call( checkContext, elem ) > -1;
		}, implicitRelative, true ),
		matchers = [ function( elem, context, xml ) {

			// Support: IE 11+, Edge 17 - 18+
			// IE/Edge sometimes throw a "Permission denied" error when strict-comparing
			// two documents; shallow comparisons work.
			// eslint-disable-next-line eqeqeq
			var ret = ( !leadingRelative && ( xml || context != outermostContext ) ) || (
				( checkContext = context ).nodeType ?
					matchContext( elem, context, xml ) :
					matchAnyContext( elem, context, xml ) );

			// Avoid hanging onto element
			// (see https://github.com/jquery/sizzle/issues/299)
			checkContext = null;
			return ret;
		} ];

	for ( ; i < len; i++ ) {
		if ( ( matcher = Expr.relative[ tokens[ i ].type ] ) ) {
			matchers = [ addCombinator( elementMatcher( matchers ), matcher ) ];
		} else {
			matcher = Expr.filter[ tokens[ i ].type ].apply( null, tokens[ i ].matches );

			// Return special upon seeing a positional matcher
			if ( matcher[ expando ] ) {

				// Find the next relative operator (if any) for proper handling
				j = ++i;
				for ( ; j < len; j++ ) {
					if ( Expr.relative[ tokens[ j ].type ] ) {
						break;
					}
				}
				return setMatcher(
					i > 1 && elementMatcher( matchers ),
					i > 1 && toSelector(

						// If the preceding token was a descendant combinator, insert an implicit any-element `*`
						tokens.slice( 0, i - 1 )
							.concat( { value: tokens[ i - 2 ].type === " " ? "*" : "" } )
					).replace( rtrimCSS, "$1" ),
					matcher,
					i < j && matcherFromTokens( tokens.slice( i, j ) ),
					j < len && matcherFromTokens( ( tokens = tokens.slice( j ) ) ),
					j < len && toSelector( tokens )
				);
			}
			matchers.push( matcher );
		}
	}

	return elementMatcher( matchers );
}

function matcherFromGroupMatchers( elementMatchers, setMatchers ) {
	var bySet = setMatchers.length > 0,
		byElement = elementMatchers.length > 0,
		superMatcher = function( seed, context, xml, results, outermost ) {
			var elem, j, matcher,
				matchedCount = 0,
				i = "0",
				unmatched = seed && [],
				setMatched = [],
				contextBackup = outermostContext,

				// We must always have either seed elements or outermost context
				elems = seed || byElement && Expr.find.TAG( "*", outermost ),

				// Use integer dirruns iff this is the outermost matcher
				dirrunsUnique = ( dirruns += contextBackup == null ? 1 : Math.random() || 0.1 ),
				len = elems.length;

			if ( outermost ) {

				// Support: IE 11+, Edge 17 - 18+
				// IE/Edge sometimes throw a "Permission denied" error when strict-comparing
				// two documents; shallow comparisons work.
				// eslint-disable-next-line eqeqeq
				outermostContext = context == document || context || outermost;
			}

			// Add elements passing elementMatchers directly to results
			// Support: iOS <=7 - 9 only
			// Tolerate NodeList properties (IE: "length"; Safari: <number>) matching
			// elements by id. (see trac-14142)
			for ( ; i !== len && ( elem = elems[ i ] ) != null; i++ ) {
				if ( byElement && elem ) {
					j = 0;

					// Support: IE 11+, Edge 17 - 18+
					// IE/Edge sometimes throw a "Permission denied" error when strict-comparing
					// two documents; shallow comparisons work.
					// eslint-disable-next-line eqeqeq
					if ( !context && elem.ownerDocument != document ) {
						setDocument( elem );
						xml = !documentIsHTML;
					}
					while ( ( matcher = elementMatchers[ j++ ] ) ) {
						if ( matcher( elem, context || document, xml ) ) {
							push.call( results, elem );
							break;
						}
					}
					if ( outermost ) {
						dirruns = dirrunsUnique;
					}
				}

				// Track unmatched elements for set filters
				if ( bySet ) {

					// They will have gone through all possible matchers
					if ( ( elem = !matcher && elem ) ) {
						matchedCount--;
					}

					// Lengthen the array for every element, matched or not
					if ( seed ) {
						unmatched.push( elem );
					}
				}
			}

			// `i` is now the count of elements visited above, and adding it to `matchedCount`
			// makes the latter nonnegative.
			matchedCount += i;

			// Apply set filters to unmatched elements
			// NOTE: This can be skipped if there are no unmatched elements (i.e., `matchedCount`
			// equals `i`), unless we didn't visit _any_ elements in the above loop because we have
			// no element matchers and no seed.
			// Incrementing an initially-string "0" `i` allows `i` to remain a string only in that
			// case, which will result in a "00" `matchedCount` that differs from `i` but is also
			// numerically zero.
			if ( bySet && i !== matchedCount ) {
				j = 0;
				while ( ( matcher = setMatchers[ j++ ] ) ) {
					matcher( unmatched, setMatched, context, xml );
				}

				if ( seed ) {

					// Reintegrate element matches to eliminate the need for sorting
					if ( matchedCount > 0 ) {
						while ( i-- ) {
							if ( !( unmatched[ i ] || setMatched[ i ] ) ) {
								setMatched[ i ] = pop.call( results );
							}
						}
					}

					// Discard index placeholder values to get only actual matches
					setMatched = condense( setMatched );
				}

				// Add matches to results
				push.apply( results, setMatched );

				// Seedless set matches succeeding multiple successful matchers stipulate sorting
				if ( outermost && !seed && setMatched.length > 0 &&
					( matchedCount + setMatchers.length ) > 1 ) {

					jQuery.uniqueSort( results );
				}
			}

			// Override manipulation of globals by nested matchers
			if ( outermost ) {
				dirruns = dirrunsUnique;
				outermostContext = contextBackup;
			}

			return unmatched;
		};

	return bySet ?
		markFunction( superMatcher ) :
		superMatcher;
}

function compile( selector, match /* Internal Use Only */ ) {
	var i,
		setMatchers = [],
		elementMatchers = [],
		cached = compilerCache[ selector + " " ];

	if ( !cached ) {

		// Generate a function of recursive functions that can be used to check each element
		if ( !match ) {
			match = tokenize( selector );
		}
		i = match.length;
		while ( i-- ) {
			cached = matcherFromTokens( match[ i ] );
			if ( cached[ expando ] ) {
				setMatchers.push( cached );
			} else {
				elementMatchers.push( cached );
			}
		}

		// Cache the compiled function
		cached = compilerCache( selector,
			matcherFromGroupMatchers( elementMatchers, setMatchers ) );

		// Save selector and tokenization
		cached.selector = selector;
	}
	return cached;
}

/**
 * A low-level selection function that works with jQuery's compiled
 *  selector functions
 * @param {String|Function} selector A selector or a pre-compiled
 *  selector function built with jQuery selector compile
 * @param {Element} context
 * @param {Array} [results]
 * @param {Array} [seed] A set of elements to match against
 */
function select( selector, context, results, seed ) {
	var i, tokens, token, type, find,
		compiled = typeof selector === "function" && selector,
		match = !seed && tokenize( ( selector = compiled.selector || selector ) );

	results = results || [];

	// Try to minimize operations if there is only one selector in the list and no seed
	// (the latter of which guarantees us context)
	if ( match.length === 1 ) {

		// Reduce context if the leading compound selector is an ID
		tokens = match[ 0 ] = match[ 0 ].slice( 0 );
		if ( tokens.length > 2 && ( token = tokens[ 0 ] ).type === "ID" &&
				context.nodeType === 9 && documentIsHTML && Expr.relative[ tokens[ 1 ].type ] ) {

			context = ( Expr.find.ID(
				token.matches[ 0 ].replace( runescape, funescape ),
				context
			) || [] )[ 0 ];
			if ( !context ) {
				return results;

			// Precompiled matchers will still verify ancestry, so step up a level
			} else if ( compiled ) {
				context = context.parentNode;
			}

			selector = selector.slice( tokens.shift().value.length );
		}

		// Fetch a seed set for right-to-left matching
		i = matchExpr.needsContext.test( selector ) ? 0 : tokens.length;
		while ( i-- ) {
			token = tokens[ i ];

			// Abort if we hit a combinator
			if ( Expr.relative[ ( type = token.type ) ] ) {
				break;
			}
			if ( ( find = Expr.find[ type ] ) ) {

				// Search, expanding context for leading sibling combinators
				if ( ( seed = find(
					token.matches[ 0 ].replace( runescape, funescape ),
					rsibling.test( tokens[ 0 ].type ) &&
						testContext( context.parentNode ) || context
				) ) ) {

					// If seed is empty or no tokens remain, we can return early
					tokens.splice( i, 1 );
					selector = seed.length && toSelector( tokens );
					if ( !selector ) {
						push.apply( results, seed );
						return results;
					}

					break;
				}
			}
		}
	}

	// Compile and execute a filtering function if one is not provided
	// Provide `match` to avoid retokenization if we modified the selector above
	( compiled || compile( selector, match ) )(
		seed,
		context,
		!documentIsHTML,
		results,
		!context || rsibling.test( selector ) && testContext( context.parentNode ) || context
	);
	return results;
}

// One-time assignments

// Support: Android <=4.0 - 4.1+
// Sort stability
support.sortStable = expando.split( "" ).sort( sortOrder ).join( "" ) === expando;

// Initialize against the default document
setDocument();

// Support: Android <=4.0 - 4.1+
// Detached nodes confoundingly follow *each other*
support.sortDetached = assert( function( el ) {

	// Should return 1, but returns 4 (following)
	return el.compareDocumentPosition( document.createElement( "fieldset" ) ) & 1;
} );

jQuery.find = find;

// Deprecated
jQuery.expr[ ":" ] = jQuery.expr.pseudos;
jQuery.unique = jQuery.uniqueSort;

// These have always been private, but they used to be documented as part of
// Sizzle so let's maintain them for now for backwards compatibility purposes.
find.compile = compile;
find.select = select;
find.setDocument = setDocument;
find.tokenize = tokenize;

find.escape = jQuery.escapeSelector;
find.getText = jQuery.text;
find.isXML = jQuery.isXMLDoc;
find.selectors = jQuery.expr;
find.support = jQuery.support;
find.uniqueSort = jQuery.uniqueSort;

	/* eslint-enable */

} )();


var dir = function( elem, dir, until ) {
	var matched = [],
		truncate = until !== undefined;

	while ( ( elem = elem[ dir ] ) && elem.nodeType !== 9 ) {
		if ( elem.nodeType === 1 ) {
			if ( truncate && jQuery( elem ).is( until ) ) {
				break;
			}
			matched.push( elem );
		}
	}
	return matched;
};


var siblings = function( n, elem ) {
	var matched = [];

	for ( ; n; n = n.nextSibling ) {
		if ( n.nodeType === 1 && n !== elem ) {
			matched.push( n );
		}
	}

	return matched;
};


var rneedsContext = jQuery.expr.match.needsContext;

var rsingleTag = ( /^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i );



// Implement the identical functionality for filter and not
function winnow( elements, qualifier, not ) {
	if ( isFunction( qualifier ) ) {
		return jQuery.grep( elements, function( elem, i ) {
			return !!qualifier.call( elem, i, elem ) !== not;
		} );
	}

	// Single element
	if ( qualifier.nodeType ) {
		return jQuery.grep( elements, function( elem ) {
			return ( elem === qualifier ) !== not;
		} );
	}

	// Arraylike of elements (jQuery, arguments, Array)
	if ( typeof qualifier !== "string" ) {
		return jQuery.grep( elements, function( elem ) {
			return ( indexOf.call( qualifier, elem ) > -1 ) !== not;
		} );
	}

	// Filtered directly for both simple and complex selectors
	return jQuery.filter( qualifier, elements, not );
}

jQuery.filter = function( expr, elems, not ) {
	var elem = elems[ 0 ];

	if ( not ) {
		expr = ":not(" + expr + ")";
	}

	if ( elems.length === 1 && elem.nodeType === 1 ) {
		return jQuery.find.matchesSelector( elem, expr ) ? [ elem ] : [];
	}

	return jQuery.find.matches( expr, jQuery.grep( elems, function( elem ) {
		return elem.nodeType === 1;
	} ) );
};

jQuery.fn.extend( {
	find: function( selector ) {
		var i, ret,
			len = this.length,
			self = this;

		if ( typeof selector !== "string" ) {
			return this.pushStack( jQuery( selector ).filter( function() {
				for ( i = 0; i < len; i++ ) {
					if ( jQuery.contains( self[ i ], this ) ) {
						return true;
					}
				}
			} ) );
		}

		ret = this.pushStack( [] );

		for ( i = 0; i < len; i++ ) {
			jQuery.find( selector, self[ i ], ret );
		}

		return len > 1 ? jQuery.uniqueSort( ret ) : ret;
	},
	filter: function( selector ) {
		return this.pushStack( winnow( this, selector || [], false ) );
	},
	not: function( selector ) {
		return this.pushStack( winnow( this, selector || [], true ) );
	},
	is: function( selector ) {
		return !!winnow(
			this,

			// If this is a positional/relative selector, check membership in the returned set
			// so $("p:first").is("p:last") won't return true for a doc with two "p".
			typeof selector === "string" && rneedsContext.test( selector ) ?
				jQuery( selector ) :
				selector || [],
			false
		).length;
	}
} );


// Initialize a jQuery object


// A central reference to the root jQuery(document)
var rootjQuery,

	// A simple way to check for HTML strings
	// Prioritize #id over <tag> to avoid XSS via location.hash (trac-9521)
	// Strict HTML recognition (trac-11290: must start with <)
	// Shortcut simple #id case for speed
	rquickExpr = /^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/,

	init = jQuery.fn.init = function( selector, context, root ) {
		var match, elem;

		// HANDLE: $(""), $(null), $(undefined), $(false)
		if ( !selector ) {
			return this;
		}

		// Method init() accepts an alternate rootjQuery
		// so migrate can support jQuery.sub (gh-2101)
		root = root || rootjQuery;

		// Handle HTML strings
		if ( typeof selector === "string" ) {
			if ( selector[ 0 ] === "<" &&
				selector[ selector.length - 1 ] === ">" &&
				selector.length >= 3 ) {

				// Assume that strings that start and end with <> are HTML and skip the regex check
				match = [ null, selector, null ];

			} else {
				match = rquickExpr.exec( selector );
			}

			// Match html or make sure no context is specified for #id
			if ( match && ( match[ 1 ] || !context ) ) {

				// HANDLE: $(html) -> $(array)
				if ( match[ 1 ] ) {
					context = context instanceof jQuery ? context[ 0 ] : context;

					// Option to run scripts is true for back-compat
					// Intentionally let the error be thrown if parseHTML is not present
					jQuery.merge( this, jQuery.parseHTML(
						match[ 1 ],
						context && context.nodeType ? context.ownerDocument || context : document,
						true
					) );

					// HANDLE: $(html, props)
					if ( rsingleTag.test( match[ 1 ] ) && jQuery.isPlainObject( context ) ) {
						for ( match in context ) {

							// Properties of context are called as methods if possible
							if ( isFunction( this[ match ] ) ) {
								this[ match ]( context[ match ] );

							// ...and otherwise set as attributes
							} else {
								this.attr( match, context[ match ] );
							}
						}
					}

					return this;

				// HANDLE: $(#id)
				} else {
					elem = document.getElementById( match[ 2 ] );

					if ( elem ) {

						// Inject the element directly into the jQuery object
						this[ 0 ] = elem;
						this.length = 1;
					}
					return this;
				}

			// HANDLE: $(expr, $(...))
			} else if ( !context || context.jquery ) {
				return ( context || root ).find( selector );

			// HANDLE: $(expr, context)
			// (which is just equivalent to: $(context).find(expr)
			} else {
				return this.constructor( context ).find( selector );
			}

		// HANDLE: $(DOMElement)
		} else if ( selector.nodeType ) {
			this[ 0 ] = selector;
			this.length = 1;
			return this;

		// HANDLE: $(function)
		// Shortcut for document ready
		} else if ( isFunction( selector ) ) {
			return root.ready !== undefined ?
				root.ready( selector ) :

				// Execute immediately if ready is not present
				selector( jQuery );
		}

		return jQuery.makeArray( selector, this );
	};

// Give the init function the jQuery prototype for later instantiation
init.prototype = jQuery.fn;

// Initialize central reference
rootjQuery = jQuery( document );


var rparentsprev = /^(?:parents|prev(?:Until|All))/,

	// Methods guaranteed to produce a unique set when starting from a unique set
	guaranteedUnique = {
		children: true,
		contents: true,
		next: true,
		prev: true
	};

jQuery.fn.extend( {
	has: function( target ) {
		var targets = jQuery( target, this ),
			l = targets.length;

		return this.filter( function() {
			var i = 0;
			for ( ; i < l; i++ ) {
				if ( jQuery.contains( this, targets[ i ] ) ) {
					return true;
				}
			}
		} );
	},

	closest: function( selectors, context ) {
		var cur,
			i = 0,
			l = this.length,
			matched = [],
			targets = typeof selectors !== "string" && jQuery( selectors );

		// Positional selectors never match, since there's no _selection_ context
		if ( !rneedsContext.test( selectors ) ) {
			for ( ; i < l; i++ ) {
				for ( cur = this[ i ]; cur && cur !== context; cur = cur.parentNode ) {

					// Always skip document fragments
					if ( cur.nodeType < 11 && ( targets ?
						targets.index( cur ) > -1 :

						// Don't pass non-elements to jQuery#find
						cur.nodeType === 1 &&
							jQuery.find.matchesSelector( cur, selectors ) ) ) {

						matched.push( cur );
						break;
					}
				}
			}
		}

		return this.pushStack( matched.length > 1 ? jQuery.uniqueSort( matched ) : matched );
	},

	// Determine the position of an element within the set
	index: function( elem ) {

		// No argument, return index in parent
		if ( !elem ) {
			return ( this[ 0 ] && this[ 0 ].parentNode ) ? this.first().prevAll().length : -1;
		}

		// Index in selector
		if ( typeof elem === "string" ) {
			return indexOf.call( jQuery( elem ), this[ 0 ] );
		}

		// Locate the position of the desired element
		return indexOf.call( this,

			// If it receives a jQuery object, the first element is used
			elem.jquery ? elem[ 0 ] : elem
		);
	},

	add: function( selector, context ) {
		return this.pushStack(
			jQuery.uniqueSort(
				jQuery.merge( this.get(), jQuery( selector, context ) )
			)
		);
	},

	addBack: function( selector ) {
		return this.add( selector == null ?
			this.prevObject : this.prevObject.filter( selector )
		);
	}
} );

function sibling( cur, dir ) {
	while ( ( cur = cur[ dir ] ) && cur.nodeType !== 1 ) {}
	return cur;
}

jQuery.each( {
	parent: function( elem ) {
		var parent = elem.parentNode;
		return parent && parent.nodeType !== 11 ? parent : null;
	},
	parents: function( elem ) {
		return dir( elem, "parentNode" );
	},
	parentsUntil: function( elem, _i, until ) {
		return dir( elem, "parentNode", until );
	},
	next: function( elem ) {
		return sibling( elem, "nextSibling" );
	},
	prev: function( elem ) {
		return sibling( elem, "previousSibling" );
	},
	nextAll: function( elem ) {
		return dir( elem, "nextSibling" );
	},
	prevAll: function( elem ) {
		return dir( elem, "previousSibling" );
	},
	nextUntil: function( elem, _i, until ) {
		return dir( elem, "nextSibling", until );
	},
	prevUntil: function( elem, _i, until ) {
		return dir( elem, "previousSibling", until );
	},
	siblings: function( elem ) {
		return siblings( ( elem.parentNode || {} ).firstChild, elem );
	},
	children: function( elem ) {
		return siblings( elem.firstChild );
	},
	contents: function( elem ) {
		if ( elem.contentDocument != null &&

			// Support: IE 11+
			// <object> elements with no `data` attribute has an object
			// `contentDocument` with a `null` prototype.
			getProto( elem.contentDocument ) ) {

			return elem.contentDocument;
		}

		// Support: IE 9 - 11 only, iOS 7 only, Android Browser <=4.3 only
		// Treat the template element as a regular one in browsers that
		// don't support it.
		if ( nodeName( elem, "template" ) ) {
			elem = elem.content || elem;
		}

		return jQuery.merge( [], elem.childNodes );
	}
}, function( name, fn ) {
	jQuery.fn[ name ] = function( until, selector ) {
		var matched = jQuery.map( this, fn, until );

		if ( name.slice( -5 ) !== "Until" ) {
			selector = until;
		}

		if ( selector && typeof selector === "string" ) {
			matched = jQuery.filter( selector, matched );
		}

		if ( this.length > 1 ) {

			// Remove duplicates
			if ( !guaranteedUnique[ name ] ) {
				jQuery.uniqueSort( matched );
			}

			// Reverse order for parents* and prev-derivatives
			if ( rparentsprev.test( name ) ) {
				matched.reverse();
			}
		}

		return this.pushStack( matched );
	};
} );
var rnothtmlwhite = ( /[^\x20\t\r\n\f]+/g );



// Convert String-formatted options into Object-formatted ones
function createOptions( options ) {
	var object = {};
	jQuery.each( options.match( rnothtmlwhite ) || [], function( _, flag ) {
		object[ flag ] = true;
	} );
	return object;
}

/*
 * Create a callback list using the following parameters:
 *
 *	options: an optional list of space-separated options that will change how
 *			the callback list behaves or a more traditional option object
 *
 * By default a callback list will act like an event callback list and can be
 * "fired" multiple times.
 *
 * Possible options:
 *
 *	once:			will ensure the callback list can only be fired once (like a Deferred)
 *
 *	memory:			will keep track of previous values and will call any callback added
 *					after the list has been fired right away with the latest "memorized"
 *					values (like a Deferred)
 *
 *	unique:			will ensure a callback can only be added once (no duplicate in the list)
 *
 *	stopOnFalse:	interrupt callings when a callback returns false
 *
 */
jQuery.Callbacks = function( options ) {

	// Convert options from String-formatted to Object-formatted if needed
	// (we check in cache first)
	options = typeof options === "string" ?
		createOptions( options ) :
		jQuery.extend( {}, options );

	var // Flag to know if list is currently firing
		firing,

		// Last fire value for non-forgettable lists
		memory,

		// Flag to know if list was already fired
		fired,

		// Flag to prevent firing
		locked,

		// Actual callback list
		list = [],

		// Queue of execution data for repeatable lists
		queue = [],

		// Index of currently firing callback (modified by add/remove as needed)
		firingIndex = -1,

		// Fire callbacks
		fire = function() {

			// Enforce single-firing
			locked = locked || options.once;

			// Execute callbacks for all pending executions,
			// respecting firingIndex overrides and runtime changes
			fired = firing = true;
			for ( ; queue.length; firingIndex = -1 ) {
				memory = queue.shift();
				while ( ++firingIndex < list.length ) {

					// Run callback and check for early termination
					if ( list[ firingIndex ].apply( memory[ 0 ], memory[ 1 ] ) === false &&
						options.stopOnFalse ) {

						// Jump to end and forget the data so .add doesn't re-fire
						firingIndex = list.length;
						memory = false;
					}
				}
			}

			// Forget the data if we're done with it
			if ( !options.memory ) {
				memory = false;
			}

			firing = false;

			// Clean up if we're done firing for good
			if ( locked ) {

				// Keep an empty list if we have data for future add calls
				if ( memory ) {
					list = [];

				// Otherwise, this object is spent
				} else {
					list = "";
				}
			}
		},

		// Actual Callbacks object
		self = {

			// Add a callback or a collection of callbacks to the list
			add: function() {
				if ( list ) {

					// If we have memory from a past run, we should fire after adding
					if ( memory && !firing ) {
						firingIndex = list.length - 1;
						queue.push( memory );
					}

					( function add( args ) {
						jQuery.each( args, function( _, arg ) {
							if ( isFunction( arg ) ) {
								if ( !options.unique || !self.has( arg ) ) {
									list.push( arg );
								}
							} else if ( arg && arg.length && toType( arg ) !== "string" ) {

								// Inspect recursively
								add( arg );
							}
						} );
					} )( arguments );

					if ( memory && !firing ) {
						fire();
					}
				}
				return this;
			},

			// Remove a callback from the list
			remove: function() {
				jQuery.each( arguments, function( _, arg ) {
					var index;
					while ( ( index = jQuery.inArray( arg, list, index ) ) > -1 ) {
						list.splice( index, 1 );

						// Handle firing indexes
						if ( index <= firingIndex ) {
							firingIndex--;
						}
					}
				} );
				return this;
			},

			// Check if a given callback is in the list.
			// If no argument is given, return whether or not list has callbacks attached.
			has: function( fn ) {
				return fn ?
					jQuery.inArray( fn, list ) > -1 :
					list.length > 0;
			},

			// Remove all callbacks from the list
			empty: function() {
				if ( list ) {
					list = [];
				}
				return this;
			},

			// Disable .fire and .add
			// Abort any current/pending executions
			// Clear all callbacks and values
			disable: function() {
				locked = queue = [];
				list = memory = "";
				return this;
			},
			disabled: function() {
				return !list;
			},

			// Disable .fire
			// Also disable .add unless we have memory (since it would have no effect)
			// Abort any pending executions
			lock: function() {
				locked = queue = [];
				if ( !memory && !firing ) {
					list = memory = "";
				}
				return this;
			},
			locked: function() {
				return !!locked;
			},

			// Call all callbacks with the given context and arguments
			fireWith: function( context, args ) {
				if ( !locked ) {
					args = args || [];
					args = [ context, args.slice ? args.slice() : args ];
					queue.push( args );
					if ( !firing ) {
						fire();
					}
				}
				return this;
			},

			// Call all the callbacks with the given arguments
			fire: function() {
				self.fireWith( this, arguments );
				return this;
			},

			// To know if the callbacks have already been called at least once
			fired: function() {
				return !!fired;
			}
		};

	return self;
};


function Identity( v ) {
	return v;
}
function Thrower( ex ) {
	throw ex;
}

function adoptValue( value, resolve, reject, noValue ) {
	var method;

	try {

		// Check for promise aspect first to privilege synchronous behavior
		if ( value && isFunction( ( method = value.promise ) ) ) {
			method.call( value ).done( resolve ).fail( reject );

		// Other thenables
		} else if ( value && isFunction( ( method = value.then ) ) ) {
			method.call( value, resolve, reject );

		// Other non-thenables
		} else {

			// Control `resolve` arguments by letting Array#slice cast boolean `noValue` to integer:
			// * false: [ value ].slice( 0 ) => resolve( value )
			// * true: [ value ].slice( 1 ) => resolve()
			resolve.apply( undefined, [ value ].slice( noValue ) );
		}

	// For Promises/A+, convert exceptions into rejections
	// Since jQuery.when doesn't unwrap thenables, we can skip the extra checks appearing in
	// Deferred#then to conditionally suppress rejection.
	} catch ( value ) {

		// Support: Android 4.0 only
		// Strict mode functions invoked without .call/.apply get global-object context
		reject.apply( undefined, [ value ] );
	}
}

jQuery.extend( {

	Deferred: function( func ) {
		var tuples = [

				// action, add listener, callbacks,
				// ... .then handlers, argument index, [final state]
				[ "notify", "progress", jQuery.Callbacks( "memory" ),
					jQuery.Callbacks( "memory" ), 2 ],
				[ "resolve", "done", jQuery.Callbacks( "once memory" ),
					jQuery.Callbacks( "once memory" ), 0, "resolved" ],
				[ "reject", "fail", jQuery.Callbacks( "once memory" ),
					jQuery.Callbacks( "once memory" ), 1, "rejected" ]
			],
			state = "pending",
			promise = {
				state: function() {
					return state;
				},
				always: function() {
					deferred.done( arguments ).fail( arguments );
					return this;
				},
				"catch": function( fn ) {
					return promise.then( null, fn );
				},

				// Keep pipe for back-compat
				pipe: function( /* fnDone, fnFail, fnProgress */ ) {
					var fns = arguments;

					return jQuery.Deferred( function( newDefer ) {
						jQuery.each( tuples, function( _i, tuple ) {

							// Map tuples (progress, done, fail) to arguments (done, fail, progress)
							var fn = isFunction( fns[ tuple[ 4 ] ] ) && fns[ tuple[ 4 ] ];

							// deferred.progress(function() { bind to newDefer or newDefer.notify })
							// deferred.done(function() { bind to newDefer or newDefer.resolve })
							// deferred.fail(function() { bind to newDefer or newDefer.reject })
							deferred[ tuple[ 1 ] ]( function() {
								var returned = fn && fn.apply( this, arguments );
								if ( returned && isFunction( returned.promise ) ) {
									returned.promise()
										.progress( newDefer.notify )
										.done( newDefer.resolve )
										.fail( newDefer.reject );
								} else {
									newDefer[ tuple[ 0 ] + "With" ](
										this,
										fn ? [ returned ] : arguments
									);
								}
							} );
						} );
						fns = null;
					} ).promise();
				},
				then: function( onFulfilled, onRejected, onProgress ) {
					var maxDepth = 0;
					function resolve( depth, deferred, handler, special ) {
						return function() {
							var that = this,
								args = arguments,
								mightThrow = function() {
									var returned, then;

									// Support: Promises/A+ section 2.3.3.3.3
									// https://promisesaplus.com/#point-59
									// Ignore double-resolution attempts
									if ( depth < maxDepth ) {
										return;
									}

									returned = handler.apply( that, args );

									// Support: Promises/A+ section 2.3.1
									// https://promisesaplus.com/#point-48
									if ( returned === deferred.promise() ) {
										throw new TypeError( "Thenable self-resolution" );
									}

									// Support: Promises/A+ sections 2.3.3.1, 3.5
									// https://promisesaplus.com/#point-54
									// https://promisesaplus.com/#point-75
									// Retrieve `then` only once
									then = returned &&

										// Support: Promises/A+ section 2.3.4
										// https://promisesaplus.com/#point-64
										// Only check objects and functions for thenability
										( typeof returned === "object" ||
											typeof returned === "function" ) &&
										returned.then;

									// Handle a returned thenable
									if ( isFunction( then ) ) {

										// Special processors (notify) just wait for resolution
										if ( special ) {
											then.call(
												returned,
												resolve( maxDepth, deferred, Identity, special ),
												resolve( maxDepth, deferred, Thrower, special )
											);

										// Normal processors (resolve) also hook into progress
										} else {

											// ...and disregard older resolution values
											maxDepth++;

											then.call(
												returned,
												resolve( maxDepth, deferred, Identity, special ),
												resolve( maxDepth, deferred, Thrower, special ),
												resolve( maxDepth, deferred, Identity,
													deferred.notifyWith )
											);
										}

									// Handle all other returned values
									} else {

										// Only substitute handlers pass on context
										// and multiple values (non-spec behavior)
										if ( handler !== Identity ) {
											that = undefined;
											args = [ returned ];
										}

										// Process the value(s)
										// Default process is resolve
										( special || deferred.resolveWith )( that, args );
									}
								},

								// Only normal processors (resolve) catch and reject exceptions
								process = special ?
									mightThrow :
									function() {
										try {
											mightThrow();
										} catch ( e ) {

											if ( jQuery.Deferred.exceptionHook ) {
												jQuery.Deferred.exceptionHook( e,
													process.error );
											}

											// Support: Promises/A+ section 2.3.3.3.4.1
											// https://promisesaplus.com/#point-61
											// Ignore post-resolution exceptions
											if ( depth + 1 >= maxDepth ) {

												// Only substitute handlers pass on context
												// and multiple values (non-spec behavior)
												if ( handler !== Thrower ) {
													that = undefined;
													args = [ e ];
												}

												deferred.rejectWith( that, args );
											}
										}
									};

							// Support: Promises/A+ section 2.3.3.3.1
							// https://promisesaplus.com/#point-57
							// Re-resolve promises immediately to dodge false rejection from
							// subsequent errors
							if ( depth ) {
								process();
							} else {

								// Call an optional hook to record the error, in case of exception
								// since it's otherwise lost when execution goes async
								if ( jQuery.Deferred.getErrorHook ) {
									process.error = jQuery.Deferred.getErrorHook();

								// The deprecated alias of the above. While the name suggests
								// returning the stack, not an error instance, jQuery just passes
								// it directly to `console.warn` so both will work; an instance
								// just better cooperates with source maps.
								} else if ( jQuery.Deferred.getStackHook ) {
									process.error = jQuery.Deferred.getStackHook();
								}
								window.setTimeout( process );
							}
						};
					}

					return jQuery.Deferred( function( newDefer ) {

						// progress_handlers.add( ... )
						tuples[ 0 ][ 3 ].add(
							resolve(
								0,
								newDefer,
								isFunction( onProgress ) ?
									onProgress :
									Identity,
								newDefer.notifyWith
							)
						);

						// fulfilled_handlers.add( ... )
						tuples[ 1 ][ 3 ].add(
							resolve(
								0,
								newDefer,
								isFunction( onFulfilled ) ?
									onFulfilled :
									Identity
							)
						);

						// rejected_handlers.add( ... )
						tuples[ 2 ][ 3 ].add(
							resolve(
								0,
								newDefer,
								isFunction( onRejected ) ?
									onRejected :
									Thrower
							)
						);
					} ).promise();
				},

				// Get a promise for this deferred
				// If obj is provided, the promise aspect is added to the object
				promise: function( obj ) {
					return obj != null ? jQuery.extend( obj, promise ) : promise;
				}
			},
			deferred = {};

		// Add list-specific methods
		jQuery.each( tuples, function( i, tuple ) {
			var list = tuple[ 2 ],
				stateString = tuple[ 5 ];

			// promise.progress = list.add
			// promise.done = list.add
			// promise.fail = list.add
			promise[ tuple[ 1 ] ] = list.add;

			// Handle state
			if ( stateString ) {
				list.add(
					function() {

						// state = "resolved" (i.e., fulfilled)
						// state = "rejected"
						state = stateString;
					},

					// rejected_callbacks.disable
					// fulfilled_callbacks.disable
					tuples[ 3 - i ][ 2 ].disable,

					// rejected_handlers.disable
					// fulfilled_handlers.disable
					tuples[ 3 - i ][ 3 ].disable,

					// progress_callbacks.lock
					tuples[ 0 ][ 2 ].lock,

					// progress_handlers.lock
					tuples[ 0 ][ 3 ].lock
				);
			}

			// progress_handlers.fire
			// fulfilled_handlers.fire
			// rejected_handlers.fire
			list.add( tuple[ 3 ].fire );

			// deferred.notify = function() { deferred.notifyWith(...) }
			// deferred.resolve = function() { deferred.resolveWith(...) }
			// deferred.reject = function() { deferred.rejectWith(...) }
			deferred[ tuple[ 0 ] ] = function() {
				deferred[ tuple[ 0 ] + "With" ]( this === deferred ? undefined : this, arguments );
				return this;
			};

			// deferred.notifyWith = list.fireWith
			// deferred.resolveWith = list.fireWith
			// deferred.rejectWith = list.fireWith
			deferred[ tuple[ 0 ] + "With" ] = list.fireWith;
		} );

		// Make the deferred a promise
		promise.promise( deferred );

		// Call given func if any
		if ( func ) {
			func.call( deferred, deferred );
		}

		// All done!
		return deferred;
	},

	// Deferred helper
	when: function( singleValue ) {
		var

			// count of uncompleted subordinates
			remaining = arguments.length,

			// count of unprocessed arguments
			i = remaining,

			// subordinate fulfillment data
			resolveContexts = Array( i ),
			resolveValues = slice.call( arguments ),

			// the primary Deferred
			primary = jQuery.Deferred(),

			// subordinate callback factory
			updateFunc = function( i ) {
				return function( value ) {
					resolveContexts[ i ] = this;
					resolveValues[ i ] = arguments.length > 1 ? slice.call( arguments ) : value;
					if ( !( --remaining ) ) {
						primary.resolveWith( resolveContexts, resolveValues );
					}
				};
			};

		// Single- and empty arguments are adopted like Promise.resolve
		if ( remaining <= 1 ) {
			adoptValue( singleValue, primary.done( updateFunc( i ) ).resolve, primary.reject,
				!remaining );

			// Use .then() to unwrap secondary thenables (cf. gh-3000)
			if ( primary.state() === "pending" ||
				isFunction( resolveValues[ i ] && resolveValues[ i ].then ) ) {

				return primary.then();
			}
		}

		// Multiple arguments are aggregated like Promise.all array elements
		while ( i-- ) {
			adoptValue( resolveValues[ i ], updateFunc( i ), primary.reject );
		}

		return primary.promise();
	}
} );


// These usually indicate a programmer mistake during development,
// warn about them ASAP rather than swallowing them by default.
var rerrorNames = /^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;

// If `jQuery.Deferred.getErrorHook` is defined, `asyncError` is an error
// captured before the async barrier to get the original error cause
// which may otherwise be hidden.
jQuery.Deferred.exceptionHook = function( error, asyncError ) {

	// Support: IE 8 - 9 only
	// Console exists when dev tools are open, which can happen at any time
	if ( window.console && window.console.warn && error && rerrorNames.test( error.name ) ) {
		window.console.warn( "jQuery.Deferred exception: " + error.message,
			error.stack, asyncError );
	}
};




jQuery.readyException = function( error ) {
	window.setTimeout( function() {
		throw error;
	} );
};




// The deferred used on DOM ready
var readyList = jQuery.Deferred();

jQuery.fn.ready = function( fn ) {

	readyList
		.then( fn )

		// Wrap jQuery.readyException in a function so that the lookup
		// happens at the time of error handling instead of callback
		// registration.
		.catch( function( error ) {
			jQuery.readyException( error );
		} );

	return this;
};

jQuery.extend( {

	// Is the DOM ready to be used? Set to true once it occurs.
	isReady: false,

	// A counter to track how many items to wait for before
	// the ready event fires. See trac-6781
	readyWait: 1,

	// Handle when the DOM is ready
	ready: function( wait ) {

		// Abort if there are pending holds or we're already ready
		if ( wait === true ? --jQuery.readyWait : jQuery.isReady ) {
			return;
		}

		// Remember that the DOM is ready
		jQuery.isReady = true;

		// If a normal DOM Ready event fired, decrement, and wait if need be
		if ( wait !== true && --jQuery.readyWait > 0 ) {
			return;
		}

		// If there are functions bound, to execute
		readyList.resolveWith( document, [ jQuery ] );
	}
} );

jQuery.ready.then = readyList.then;

// The ready event handler and self cleanup method
function completed() {
	document.removeEventListener( "DOMContentLoaded", completed );
	window.removeEventListener( "load", completed );
	jQuery.ready();
}

// Catch cases where $(document).ready() is called
// after the browser event has already occurred.
// Support: IE <=9 - 10 only
// Older IE sometimes signals "interactive" too soon
if ( document.readyState === "complete" ||
	( document.readyState !== "loading" && !document.documentElement.doScroll ) ) {

	// Handle it asynchronously to allow scripts the opportunity to delay ready
	window.setTimeout( jQuery.ready );

} else {

	// Use the handy event callback
	document.addEventListener( "DOMContentLoaded", completed );

	// A fallback to window.onload, that will always work
	window.addEventListener( "load", completed );
}




// Multifunctional method to get and set values of a collection
// The value/s can optionally be executed if it's a function
var access = function( elems, fn, key, value, chainable, emptyGet, raw ) {
	var i = 0,
		len = elems.length,
		bulk = key == null;

	// Sets many values
	if ( toType( key ) === "object" ) {
		chainable = true;
		for ( i in key ) {
			access( elems, fn, i, key[ i ], true, emptyGet, raw );
		}

	// Sets one value
	} else if ( value !== undefined ) {
		chainable = true;

		if ( !isFunction( value ) ) {
			raw = true;
		}

		if ( bulk ) {

			// Bulk operations run against the entire set
			if ( raw ) {
				fn.call( elems, value );
				fn = null;

			// ...except when executing function values
			} else {
				bulk = fn;
				fn = function( elem, _key, value ) {
					return bulk.call( jQuery( elem ), value );
				};
			}
		}

		if ( fn ) {
			for ( ; i < len; i++ ) {
				fn(
					elems[ i ], key, raw ?
						value :
						value.call( elems[ i ], i, fn( elems[ i ], key ) )
				);
			}
		}
	}

	if ( chainable ) {
		return elems;
	}

	// Gets
	if ( bulk ) {
		return fn.call( elems );
	}

	return len ? fn( elems[ 0 ], key ) : emptyGet;
};


// Matches dashed string for camelizing
var rmsPrefix = /^-ms-/,
	rdashAlpha = /-([a-z])/g;

// Used by camelCase as callback to replace()
function fcamelCase( _all, letter ) {
	return letter.toUpperCase();
}

// Convert dashed to camelCase; used by the css and data modules
// Support: IE <=9 - 11, Edge 12 - 15
// Microsoft forgot to hump their vendor prefix (trac-9572)
function camelCase( string ) {
	return string.replace( rmsPrefix, "ms-" ).replace( rdashAlpha, fcamelCase );
}
var acceptData = function( owner ) {

	// Accepts only:
	//  - Node
	//    - Node.ELEMENT_NODE
	//    - Node.DOCUMENT_NODE
	//  - Object
	//    - Any
	return owner.nodeType === 1 || owner.nodeType === 9 || !( +owner.nodeType );
};




function Data() {
	this.expando = jQuery.expando + Data.uid++;
}

Data.uid = 1;

Data.prototype = {

	cache: function( owner ) {

		// Check if the owner object already has a cache
		var value = owner[ this.expando ];

		// If not, create one
		if ( !value ) {
			value = {};

			// We can accept data for non-element nodes in modern browsers,
			// but we should not, see trac-8335.
			// Always return an empty object.
			if ( acceptData( owner ) ) {

				// If it is a node unlikely to be stringify-ed or looped over
				// use plain assignment
				if ( owner.nodeType ) {
					owner[ this.expando ] = value;

				// Otherwise secure it in a non-enumerable property
				// configurable must be true to allow the property to be
				// deleted when data is removed
				} else {
					Object.defineProperty( owner, this.expando, {
						value: value,
						configurable: true
					} );
				}
			}
		}

		return value;
	},
	set: function( owner, data, value ) {
		var prop,
			cache = this.cache( owner );

		// Handle: [ owner, key, value ] args
		// Always use camelCase key (gh-2257)
		if ( typeof data === "string" ) {
			cache[ camelCase( data ) ] = value;

		// Handle: [ owner, { properties } ] args
		} else {

			// Copy the properties one-by-one to the cache object
			for ( prop in data ) {
				cache[ camelCase( prop ) ] = data[ prop ];
			}
		}
		return cache;
	},
	get: function( owner, key ) {
		return key === undefined ?
			this.cache( owner ) :

			// Always use camelCase key (gh-2257)
			owner[ this.expando ] && owner[ this.expando ][ camelCase( key ) ];
	},
	access: function( owner, key, value ) {

		// In cases where either:
		//
		//   1. No key was specified
		//   2. A string key was specified, but no value provided
		//
		// Take the "read" path and allow the get method to determine
		// which value to return, respectively either:
		//
		//   1. The entire cache object
		//   2. The data stored at the key
		//
		if ( key === undefined ||
				( ( key && typeof key === "string" ) && value === undefined ) ) {

			return this.get( owner, key );
		}

		// When the key is not a string, or both a key and value
		// are specified, set or extend (existing objects) with either:
		//
		//   1. An object of properties
		//   2. A key and value
		//
		this.set( owner, key, value );

		// Since the "set" path can have two possible entry points
		// return the expected data based on which path was taken[*]
		return value !== undefined ? value : key;
	},
	remove: function( owner, key ) {
		var i,
			cache = owner[ this.expando ];

		if ( cache === undefined ) {
			return;
		}

		if ( key !== undefined ) {

			// Support array or space separated string of keys
			if ( Array.isArray( key ) ) {

				// If key is an array of keys...
				// We always set camelCase keys, so remove that.
				key = key.map( camelCase );
			} else {
				key = camelCase( key );

				// If a key with the spaces exists, use it.
				// Otherwise, create an array by matching non-whitespace
				key = key in cache ?
					[ key ] :
					( key.match( rnothtmlwhite ) || [] );
			}

			i = key.length;

			while ( i-- ) {
				delete cache[ key[ i ] ];
			}
		}

		// Remove the expando if there's no more data
		if ( key === undefined || jQuery.isEmptyObject( cache ) ) {

			// Support: Chrome <=35 - 45
			// Webkit & Blink performance suffers when deleting properties
			// from DOM nodes, so set to undefined instead
			// https://bugs.chromium.org/p/chromium/issues/detail?id=378607 (bug restricted)
			if ( owner.nodeType ) {
				owner[ this.expando ] = undefined;
			} else {
				delete owner[ this.expando ];
			}
		}
	},
	hasData: function( owner ) {
		var cache = owner[ this.expando ];
		return cache !== undefined && !jQuery.isEmptyObject( cache );
	}
};
var dataPriv = new Data();

var dataUser = new Data();



//	Implementation Summary
//
//	1. Enforce API surface and semantic compatibility with 1.9.x branch
//	2. Improve the module's maintainability by reducing the storage
//		paths to a single mechanism.
//	3. Use the same single mechanism to support "private" and "user" data.
//	4. _Never_ expose "private" data to user code (TODO: Drop _data, _removeData)
//	5. Avoid exposing implementation details on user objects (eg. expando properties)
//	6. Provide a clear path for implementation upgrade to WeakMap in 2014

var rbrace = /^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,
	rmultiDash = /[A-Z]/g;

function getData( data ) {
	if ( data === "true" ) {
		return true;
	}

	if ( data === "false" ) {
		return false;
	}

	if ( data === "null" ) {
		return null;
	}

	// Only convert to a number if it doesn't change the string
	if ( data === +data + "" ) {
		return +data;
	}

	if ( rbrace.test( data ) ) {
		return JSON.parse( data );
	}

	return data;
}

function dataAttr( elem, key, data ) {
	var name;

	// If nothing was found internally, try to fetch any
	// data from the HTML5 data-* attribute
	if ( data === undefined && elem.nodeType === 1 ) {
		name = "data-" + key.replace( rmultiDash, "-$&" ).toLowerCase();
		data = elem.getAttribute( name );

		if ( typeof data === "string" ) {
			try {
				data = getData( data );
			} catch ( e ) {}

			// Make sure we set the data so it isn't changed later
			dataUser.set( elem, key, data );
		} else {
			data = undefined;
		}
	}
	return data;
}

jQuery.extend( {
	hasData: function( elem ) {
		return dataUser.hasData( elem ) || dataPriv.hasData( elem );
	},

	data: function( elem, name, data ) {
		return dataUser.access( elem, name, data );
	},

	removeData: function( elem, name ) {
		dataUser.remove( elem, name );
	},

	// TODO: Now that all calls to _data and _removeData have been replaced
	// with direct calls to dataPriv methods, these can be deprecated.
	_data: function( elem, name, data ) {
		return dataPriv.access( elem, name, data );
	},

	_removeData: function( elem, name ) {
		dataPriv.remove( elem, name );
	}
} );

jQuery.fn.extend( {
	data: function( key, value ) {
		var i, name, data,
			elem = this[ 0 ],
			attrs = elem && elem.attributes;

		// Gets all values
		if ( key === undefined ) {
			if ( this.length ) {
				data = dataUser.get( elem );

				if ( elem.nodeType === 1 && !dataPriv.get( elem, "hasDataAttrs" ) ) {
					i = attrs.length;
					while ( i-- ) {

						// Support: IE 11 only
						// The attrs elements can be null (trac-14894)
						if ( attrs[ i ] ) {
							name = attrs[ i ].name;
							if ( name.indexOf( "data-" ) === 0 ) {
								name = camelCase( name.slice( 5 ) );
								dataAttr( elem, name, data[ name ] );
							}
						}
					}
					dataPriv.set( elem, "hasDataAttrs", true );
				}
			}

			return data;
		}

		// Sets multiple values
		if ( typeof key === "object" ) {
			return this.each( function() {
				dataUser.set( this, key );
			} );
		}

		return access( this, function( value ) {
			var data;

			// The calling jQuery object (element matches) is not empty
			// (and therefore has an element appears at this[ 0 ]) and the
			// `value` parameter was not undefined. An empty jQuery object
			// will result in `undefined` for elem = this[ 0 ] which will
			// throw an exception if an attempt to read a data cache is made.
			if ( elem && value === undefined ) {

				// Attempt to get data from the cache
				// The key will always be camelCased in Data
				data = dataUser.get( elem, key );
				if ( data !== undefined ) {
					return data;
				}

				// Attempt to "discover" the data in
				// HTML5 custom data-* attrs
				data = dataAttr( elem, key );
				if ( data !== undefined ) {
					return data;
				}

				// We tried really hard, but the data doesn't exist.
				return;
			}

			// Set the data...
			this.each( function() {

				// We always store the camelCased key
				dataUser.set( this, key, value );
			} );
		}, null, value, arguments.length > 1, null, true );
	},

	removeData: function( key ) {
		return this.each( function() {
			dataUser.remove( this, key );
		} );
	}
} );


jQuery.extend( {
	queue: function( elem, type, data ) {
		var queue;

		if ( elem ) {
			type = ( type || "fx" ) + "queue";
			queue = dataPriv.get( elem, type );

			// Speed up dequeue by getting out quickly if this is just a lookup
			if ( data ) {
				if ( !queue || Array.isArray( data ) ) {
					queue = dataPriv.access( elem, type, jQuery.makeArray( data ) );
				} else {
					queue.push( data );
				}
			}
			return queue || [];
		}
	},

	dequeue: function( elem, type ) {
		type = type || "fx";

		var queue = jQuery.queue( elem, type ),
			startLength = queue.length,
			fn = queue.shift(),
			hooks = jQuery._queueHooks( elem, type ),
			next = function() {
				jQuery.dequeue( elem, type );
			};

		// If the fx queue is dequeued, always remove the progress sentinel
		if ( fn === "inprogress" ) {
			fn = queue.shift();
			startLength--;
		}

		if ( fn ) {

			// Add a progress sentinel to prevent the fx queue from being
			// automatically dequeued
			if ( type === "fx" ) {
				queue.unshift( "inprogress" );
			}

			// Clear up the last queue stop function
			delete hooks.stop;
			fn.call( elem, next, hooks );
		}

		if ( !startLength && hooks ) {
			hooks.empty.fire();
		}
	},

	// Not public - generate a queueHooks object, or return the current one
	_queueHooks: function( elem, type ) {
		var key = type + "queueHooks";
		return dataPriv.get( elem, key ) || dataPriv.access( elem, key, {
			empty: jQuery.Callbacks( "once memory" ).add( function() {
				dataPriv.remove( elem, [ type + "queue", key ] );
			} )
		} );
	}
} );

jQuery.fn.extend( {
	queue: function( type, data ) {
		var setter = 2;

		if ( typeof type !== "string" ) {
			data = type;
			type = "fx";
			setter--;
		}

		if ( arguments.length < setter ) {
			return jQuery.queue( this[ 0 ], type );
		}

		return data === undefined ?
			this :
			this.each( function() {
				var queue = jQuery.queue( this, type, data );

				// Ensure a hooks for this queue
				jQuery._queueHooks( this, type );

				if ( type === "fx" && queue[ 0 ] !== "inprogress" ) {
					jQuery.dequeue( this, type );
				}
			} );
	},
	dequeue: function( type ) {
		return this.each( function() {
			jQuery.dequeue( this, type );
		} );
	},
	clearQueue: function( type ) {
		return this.queue( type || "fx", [] );
	},

	// Get a promise resolved when queues of a certain type
	// are emptied (fx is the type by default)
	promise: function( type, obj ) {
		var tmp,
			count = 1,
			defer = jQuery.Deferred(),
			elements = this,
			i = this.length,
			resolve = function() {
				if ( !( --count ) ) {
					defer.resolveWith( elements, [ elements ] );
				}
			};

		if ( typeof type !== "string" ) {
			obj = type;
			type = undefined;
		}
		type = type || "fx";

		while ( i-- ) {
			tmp = dataPriv.get( elements[ i ], type + "queueHooks" );
			if ( tmp && tmp.empty ) {
				count++;
				tmp.empty.add( resolve );
			}
		}
		resolve();
		return defer.promise( obj );
	}
} );
var pnum = ( /[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/ ).source;

var rcssNum = new RegExp( "^(?:([+-])=|)(" + pnum + ")([a-z%]*)$", "i" );


var cssExpand = [ "Top", "Right", "Bottom", "Left" ];

var documentElement = document.documentElement;



	var isAttached = function( elem ) {
			return jQuery.contains( elem.ownerDocument, elem );
		},
		composed = { composed: true };

	// Support: IE 9 - 11+, Edge 12 - 18+, iOS 10.0 - 10.2 only
	// Check attachment across shadow DOM boundaries when possible (gh-3504)
	// Support: iOS 10.0-10.2 only
	// Early iOS 10 versions support `attachShadow` but not `getRootNode`,
	// leading to errors. We need to check for `getRootNode`.
	if ( documentElement.getRootNode ) {
		isAttached = function( elem ) {
			return jQuery.contains( elem.ownerDocument, elem ) ||
				elem.getRootNode( composed ) === elem.ownerDocument;
		};
	}
var isHiddenWithinTree = function( elem, el ) {

		// isHiddenWithinTree might be called from jQuery#filter function;
		// in that case, element will be second argument
		elem = el || elem;

		// Inline style trumps all
		return elem.style.display === "none" ||
			elem.style.display === "" &&

			// Otherwise, check computed style
			// Support: Firefox <=43 - 45
			// Disconnected elements can have computed display: none, so first confirm that elem is
			// in the document.
			isAttached( elem ) &&

			jQuery.css( elem, "display" ) === "none";
	};



function adjustCSS( elem, prop, valueParts, tween ) {
	var adjusted, scale,
		maxIterations = 20,
		currentValue = tween ?
			function() {
				return tween.cur();
			} :
			function() {
				return jQuery.css( elem, prop, "" );
			},
		initial = currentValue(),
		unit = valueParts && valueParts[ 3 ] || ( jQuery.cssNumber[ prop ] ? "" : "px" ),

		// Starting value computation is required for potential unit mismatches
		initialInUnit = elem.nodeType &&
			( jQuery.cssNumber[ prop ] || unit !== "px" && +initial ) &&
			rcssNum.exec( jQuery.css( elem, prop ) );

	if ( initialInUnit && initialInUnit[ 3 ] !== unit ) {

		// Support: Firefox <=54
		// Halve the iteration target value to prevent interference from CSS upper bounds (gh-2144)
		initial = initial / 2;

		// Trust units reported by jQuery.css
		unit = unit || initialInUnit[ 3 ];

		// Iteratively approximate from a nonzero starting point
		initialInUnit = +initial || 1;

		while ( maxIterations-- ) {

			// Evaluate and update our best guess (doubling guesses that zero out).
			// Finish if the scale equals or crosses 1 (making the old*new product non-positive).
			jQuery.style( elem, prop, initialInUnit + unit );
			if ( ( 1 - scale ) * ( 1 - ( scale = currentValue() / initial || 0.5 ) ) <= 0 ) {
				maxIterations = 0;
			}
			initialInUnit = initialInUnit / scale;

		}

		initialInUnit = initialInUnit * 2;
		jQuery.style( elem, prop, initialInUnit + unit );

		// Make sure we update the tween properties later on
		valueParts = valueParts || [];
	}

	if ( valueParts ) {
		initialInUnit = +initialInUnit || +initial || 0;

		// Apply relative offset (+=/-=) if specified
		adjusted = valueParts[ 1 ] ?
			initialInUnit + ( valueParts[ 1 ] + 1 ) * valueParts[ 2 ] :
			+valueParts[ 2 ];
		if ( tween ) {
			tween.unit = unit;
			tween.start = initialInUnit;
			tween.end = adjusted;
		}
	}
	return adjusted;
}


var defaultDisplayMap = {};

function getDefaultDisplay( elem ) {
	var temp,
		doc = elem.ownerDocument,
		nodeName = elem.nodeName,
		display = defaultDisplayMap[ nodeName ];

	if ( display ) {
		return display;
	}

	temp = doc.body.appendChild( doc.createElement( nodeName ) );
	display = jQuery.css( temp, "display" );

	temp.parentNode.removeChild( temp );

	if ( display === "none" ) {
		display = "block";
	}
	defaultDisplayMap[ nodeName ] = display;

	return display;
}

function showHide( elements, show ) {
	var display, elem,
		values = [],
		index = 0,
		length = elements.length;

	// Determine new display value for elements that need to change
	for ( ; index < length; index++ ) {
		elem = elements[ index ];
		if ( !elem.style ) {
			continue;
		}

		display = elem.style.display;
		if ( show ) {

			// Since we force visibility upon cascade-hidden elements, an immediate (and slow)
			// check is required in this first loop unless we have a nonempty display value (either
			// inline or about-to-be-restored)
			if ( display === "none" ) {
				values[ index ] = dataPriv.get( elem, "display" ) || null;
				if ( !values[ index ] ) {
					elem.style.display = "";
				}
			}
			if ( elem.style.display === "" && isHiddenWithinTree( elem ) ) {
				values[ index ] = getDefaultDisplay( elem );
			}
		} else {
			if ( display !== "none" ) {
				values[ index ] = "none";

				// Remember what we're overwriting
				dataPriv.set( elem, "display", display );
			}
		}
	}

	// Set the display of the elements in a second loop to avoid constant reflow
	for ( index = 0; index < length; index++ ) {
		if ( values[ index ] != null ) {
			elements[ index ].style.display = values[ index ];
		}
	}

	return elements;
}

jQuery.fn.extend( {
	show: function() {
		return showHide( this, true );
	},
	hide: function() {
		return showHide( this );
	},
	toggle: function( state ) {
		if ( typeof state === "boolean" ) {
			return state ? this.show() : this.hide();
		}

		return this.each( function() {
			if ( isHiddenWithinTree( this ) ) {
				jQuery( this ).show();
			} else {
				jQuery( this ).hide();
			}
		} );
	}
} );
var rcheckableType = ( /^(?:checkbox|radio)$/i );

var rtagName = ( /<([a-z][^\/\0>\x20\t\r\n\f]*)/i );

var rscriptType = ( /^$|^module$|\/(?:java|ecma)script/i );



( function() {
	var fragment = document.createDocumentFragment(),
		div = fragment.appendChild( document.createElement( "div" ) ),
		input = document.createElement( "input" );

	// Support: Android 4.0 - 4.3 only
	// Check state lost if the name is set (trac-11217)
	// Support: Windows Web Apps (WWA)
	// `name` and `type` must use .setAttribute for WWA (trac-14901)
	input.setAttribute( "type", "radio" );
	input.setAttribute( "checked", "checked" );
	input.setAttribute( "name", "t" );

	div.appendChild( input );

	// Support: Android <=4.1 only
	// Older WebKit doesn't clone checked state correctly in fragments
	support.checkClone = div.cloneNode( true ).cloneNode( true ).lastChild.checked;

	// Support: IE <=11 only
	// Make sure textarea (and checkbox) defaultValue is properly cloned
	div.innerHTML = "<textarea>x</textarea>";
	support.noCloneChecked = !!div.cloneNode( true ).lastChild.defaultValue;

	// Support: IE <=9 only
	// IE <=9 replaces <option> tags with their contents when inserted outside of
	// the select element.
	div.innerHTML = "<option></option>";
	support.option = !!div.lastChild;
} )();


// We have to close these tags to support XHTML (trac-13200)
var wrapMap = {

	// XHTML parsers do not magically insert elements in the
	// same way that tag soup parsers do. So we cannot shorten
	// this by omitting <tbody> or other required elements.
	thead: [ 1, "<table>", "</table>" ],
	col: [ 2, "<table><colgroup>", "</colgroup></table>" ],
	tr: [ 2, "<table><tbody>", "</tbody></table>" ],
	td: [ 3, "<table><tbody><tr>", "</tr></tbody></table>" ],

	_default: [ 0, "", "" ]
};

wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;
wrapMap.th = wrapMap.td;

// Support: IE <=9 only
if ( !support.option ) {
	wrapMap.optgroup = wrapMap.option = [ 1, "<select multiple='multiple'>", "</select>" ];
}


function getAll( context, tag ) {

	// Support: IE <=9 - 11 only
	// Use typeof to avoid zero-argument method invocation on host objects (trac-15151)
	var ret;

	if ( typeof context.getElementsByTagName !== "undefined" ) {
		ret = context.getElementsByTagName( tag || "*" );

	} else if ( typeof context.querySelectorAll !== "undefined" ) {
		ret = context.querySelectorAll( tag || "*" );

	} else {
		ret = [];
	}

	if ( tag === undefined || tag && nodeName( context, tag ) ) {
		return jQuery.merge( [ context ], ret );
	}

	return ret;
}


// Mark scripts as having already been evaluated
function setGlobalEval( elems, refElements ) {
	var i = 0,
		l = elems.length;

	for ( ; i < l; i++ ) {
		dataPriv.set(
			elems[ i ],
			"globalEval",
			!refElements || dataPriv.get( refElements[ i ], "globalEval" )
		);
	}
}


var rhtml = /<|&#?\w+;/;

function buildFragment( elems, context, scripts, selection, ignored ) {
	var elem, tmp, tag, wrap, attached, j,
		fragment = context.createDocumentFragment(),
		nodes = [],
		i = 0,
		l = elems.length;

	for ( ; i < l; i++ ) {
		elem = elems[ i ];

		if ( elem || elem === 0 ) {

			// Add nodes directly
			if ( toType( elem ) === "object" ) {

				// Support: Android <=4.0 only, PhantomJS 1 only
				// push.apply(_, arraylike) throws on ancient WebKit
				jQuery.merge( nodes, elem.nodeType ? [ elem ] : elem );

			// Convert non-html into a text node
			} else if ( !rhtml.test( elem ) ) {
				nodes.push( context.createTextNode( elem ) );

			// Convert html into DOM nodes
			} else {
				tmp = tmp || fragment.appendChild( context.createElement( "div" ) );

				// Deserialize a standard representation
				tag = ( rtagName.exec( elem ) || [ "", "" ] )[ 1 ].toLowerCase();
				wrap = wrapMap[ tag ] || wrapMap._default;
				tmp.innerHTML = wrap[ 1 ] + jQuery.htmlPrefilter( elem ) + wrap[ 2 ];

				// Descend through wrappers to the right content
				j = wrap[ 0 ];
				while ( j-- ) {
					tmp = tmp.lastChild;
				}

				// Support: Android <=4.0 only, PhantomJS 1 only
				// push.apply(_, arraylike) throws on ancient WebKit
				jQuery.merge( nodes, tmp.childNodes );

				// Remember the top-level container
				tmp = fragment.firstChild;

				// Ensure the created nodes are orphaned (trac-12392)
				tmp.textContent = "";
			}
		}
	}

	// Remove wrapper from fragment
	fragment.textContent = "";

	i = 0;
	while ( ( elem = nodes[ i++ ] ) ) {

		// Skip elements already in the context collection (trac-4087)
		if ( selection && jQuery.inArray( elem, selection ) > -1 ) {
			if ( ignored ) {
				ignored.push( elem );
			}
			continue;
		}

		attached = isAttached( elem );

		// Append to fragment
		tmp = getAll( fragment.appendChild( elem ), "script" );

		// Preserve script evaluation history
		if ( attached ) {
			setGlobalEval( tmp );
		}

		// Capture executables
		if ( scripts ) {
			j = 0;
			while ( ( elem = tmp[ j++ ] ) ) {
				if ( rscriptType.test( elem.type || "" ) ) {
					scripts.push( elem );
				}
			}
		}
	}

	return fragment;
}


var rtypenamespace = /^([^.]*)(?:\.(.+)|)/;

function returnTrue() {
	return true;
}

function returnFalse() {
	return false;
}

function on( elem, types, selector, data, fn, one ) {
	var origFn, type;

	// Types can be a map of types/handlers
	if ( typeof types === "object" ) {

		// ( types-Object, selector, data )
		if ( typeof selector !== "string" ) {

			// ( types-Object, data )
			data = data || selector;
			selector = undefined;
		}
		for ( type in types ) {
			on( elem, type, selector, data, types[ type ], one );
		}
		return elem;
	}

	if ( data == null && fn == null ) {

		// ( types, fn )
		fn = selector;
		data = selector = undefined;
	} else if ( fn == null ) {
		if ( typeof selector === "string" ) {

			// ( types, selector, fn )
			fn = data;
			data = undefined;
		} else {

			// ( types, data, fn )
			fn = data;
			data = selector;
			selector = undefined;
		}
	}
	if ( fn === false ) {
		fn = returnFalse;
	} else if ( !fn ) {
		return elem;
	}

	if ( one === 1 ) {
		origFn = fn;
		fn = function( event ) {

			// Can use an empty set, since event contains the info
			jQuery().off( event );
			return origFn.apply( this, arguments );
		};

		// Use same guid so caller can remove using origFn
		fn.guid = origFn.guid || ( origFn.guid = jQuery.guid++ );
	}
	return elem.each( function() {
		jQuery.event.add( this, types, fn, data, selector );
	} );
}

/*
 * Helper functions for managing events -- not part of the public interface.
 * Props to Dean Edwards' addEvent library for many of the ideas.
 */
jQuery.event = {

	global: {},

	add: function( elem, types, handler, data, selector ) {

		var handleObjIn, eventHandle, tmp,
			events, t, handleObj,
			special, handlers, type, namespaces, origType,
			elemData = dataPriv.get( elem );

		// Only attach events to objects that accept data
		if ( !acceptData( elem ) ) {
			return;
		}

		// Caller can pass in an object of custom data in lieu of the handler
		if ( handler.handler ) {
			handleObjIn = handler;
			handler = handleObjIn.handler;
			selector = handleObjIn.selector;
		}

		// Ensure that invalid selectors throw exceptions at attach time
		// Evaluate against documentElement in case elem is a non-element node (e.g., document)
		if ( selector ) {
			jQuery.find.matchesSelector( documentElement, selector );
		}

		// Make sure that the handler has a unique ID, used to find/remove it later
		if ( !handler.guid ) {
			handler.guid = jQuery.guid++;
		}

		// Init the element's event structure and main handler, if this is the first
		if ( !( events = elemData.events ) ) {
			events = elemData.events = Object.create( null );
		}
		if ( !( eventHandle = elemData.handle ) ) {
			eventHandle = elemData.handle = function( e ) {

				// Discard the second event of a jQuery.event.trigger() and
				// when an event is called after a page has unloaded
				return typeof jQuery !== "undefined" && jQuery.event.triggered !== e.type ?
					jQuery.event.dispatch.apply( elem, arguments ) : undefined;
			};
		}

		// Handle multiple events separated by a space
		types = ( types || "" ).match( rnothtmlwhite ) || [ "" ];
		t = types.length;
		while ( t-- ) {
			tmp = rtypenamespace.exec( types[ t ] ) || [];
			type = origType = tmp[ 1 ];
			namespaces = ( tmp[ 2 ] || "" ).split( "." ).sort();

			// There *must* be a type, no attaching namespace-only handlers
			if ( !type ) {
				continue;
			}

			// If event changes its type, use the special event handlers for the changed type
			special = jQuery.event.special[ type ] || {};

			// If selector defined, determine special event api type, otherwise given type
			type = ( selector ? special.delegateType : special.bindType ) || type;

			// Update special based on newly reset type
			special = jQuery.event.special[ type ] || {};

			// handleObj is passed to all event handlers
			handleObj = jQuery.extend( {
				type: type,
				origType: origType,
				data: data,
				handler: handler,
				guid: handler.guid,
				selector: selector,
				needsContext: selector && jQuery.expr.match.needsContext.test( selector ),
				namespace: namespaces.join( "." )
			}, handleObjIn );

			// Init the event handler queue if we're the first
			if ( !( handlers = events[ type ] ) ) {
				handlers = events[ type ] = [];
				handlers.delegateCount = 0;

				// Only use addEventListener if the special events handler returns false
				if ( !special.setup ||
					special.setup.call( elem, data, namespaces, eventHandle ) === false ) {

					if ( elem.addEventListener ) {
						elem.addEventListener( type, eventHandle );
					}
				}
			}

			if ( special.add ) {
				special.add.call( elem, handleObj );

				if ( !handleObj.handler.guid ) {
					handleObj.handler.guid = handler.guid;
				}
			}

			// Add to the element's handler list, delegates in front
			if ( selector ) {
				handlers.splice( handlers.delegateCount++, 0, handleObj );
			} else {
				handlers.push( handleObj );
			}

			// Keep track of which events have ever been used, for event optimization
			jQuery.event.global[ type ] = true;
		}

	},

	// Detach an event or set of events from an element
	remove: function( elem, types, handler, selector, mappedTypes ) {

		var j, origCount, tmp,
			events, t, handleObj,
			special, handlers, type, namespaces, origType,
			elemData = dataPriv.hasData( elem ) && dataPriv.get( elem );

		if ( !elemData || !( events = elemData.events ) ) {
			return;
		}

		// Once for each type.namespace in types; type may be omitted
		types = ( types || "" ).match( rnothtmlwhite ) || [ "" ];
		t = types.length;
		while ( t-- ) {
			tmp = rtypenamespace.exec( types[ t ] ) || [];
			type = origType = tmp[ 1 ];
			namespaces = ( tmp[ 2 ] || "" ).split( "." ).sort();

			// Unbind all events (on this namespace, if provided) for the element
			if ( !type ) {
				for ( type in events ) {
					jQuery.event.remove( elem, type + types[ t ], handler, selector, true );
				}
				continue;
			}

			special = jQuery.event.special[ type ] || {};
			type = ( selector ? special.delegateType : special.bindType ) || type;
			handlers = events[ type ] || [];
			tmp = tmp[ 2 ] &&
				new RegExp( "(^|\\.)" + namespaces.join( "\\.(?:.*\\.|)" ) + "(\\.|$)" );

			// Remove matching events
			origCount = j = handlers.length;
			while ( j-- ) {
				handleObj = handlers[ j ];

				if ( ( mappedTypes || origType === handleObj.origType ) &&
					( !handler || handler.guid === handleObj.guid ) &&
					( !tmp || tmp.test( handleObj.namespace ) ) &&
					( !selector || selector === handleObj.selector ||
						selector === "**" && handleObj.selector ) ) {
					handlers.splice( j, 1 );

					if ( handleObj.selector ) {
						handlers.delegateCount--;
					}
					if ( special.remove ) {
						special.remove.call( elem, handleObj );
					}
				}
			}

			// Remove generic event handler if we removed something and no more handlers exist
			// (avoids potential for endless recursion during removal of special event handlers)
			if ( origCount && !handlers.length ) {
				if ( !special.teardown ||
					special.teardown.call( elem, namespaces, elemData.handle ) === false ) {

					jQuery.removeEvent( elem, type, elemData.handle );
				}

				delete events[ type ];
			}
		}

		// Remove data and the expando if it's no longer used
		if ( jQuery.isEmptyObject( events ) ) {
			dataPriv.remove( elem, "handle events" );
		}
	},

	dispatch: function( nativeEvent ) {

		var i, j, ret, matched, handleObj, handlerQueue,
			args = new Array( arguments.length ),

			// Make a writable jQuery.Event from the native event object
			event = jQuery.event.fix( nativeEvent ),

			handlers = (
				dataPriv.get( this, "events" ) || Object.create( null )
			)[ event.type ] || [],
			special = jQuery.event.special[ event.type ] || {};

		// Use the fix-ed jQuery.Event rather than the (read-only) native event
		args[ 0 ] = event;

		for ( i = 1; i < arguments.length; i++ ) {
			args[ i ] = arguments[ i ];
		}

		event.delegateTarget = this;

		// Call the preDispatch hook for the mapped type, and let it bail if desired
		if ( special.preDispatch && special.preDispatch.call( this, event ) === false ) {
			return;
		}

		// Determine handlers
		handlerQueue = jQuery.event.handlers.call( this, event, handlers );

		// Run delegates first; they may want to stop propagation beneath us
		i = 0;
		while ( ( matched = handlerQueue[ i++ ] ) && !event.isPropagationStopped() ) {
			event.currentTarget = matched.elem;

			j = 0;
			while ( ( handleObj = matched.handlers[ j++ ] ) &&
				!event.isImmediatePropagationStopped() ) {

				// If the event is namespaced, then each handler is only invoked if it is
				// specially universal or its namespaces are a superset of the event's.
				if ( !event.rnamespace || handleObj.namespace === false ||
					event.rnamespace.test( handleObj.namespace ) ) {

					event.handleObj = handleObj;
					event.data = handleObj.data;

					ret = ( ( jQuery.event.special[ handleObj.origType ] || {} ).handle ||
						handleObj.handler ).apply( matched.elem, args );

					if ( ret !== undefined ) {
						if ( ( event.result = ret ) === false ) {
							event.preventDefault();
							event.stopPropagation();
						}
					}
				}
			}
		}

		// Call the postDispatch hook for the mapped type
		if ( special.postDispatch ) {
			special.postDispatch.call( this, event );
		}

		return event.result;
	},

	handlers: function( event, handlers ) {
		var i, handleObj, sel, matchedHandlers, matchedSelectors,
			handlerQueue = [],
			delegateCount = handlers.delegateCount,
			cur = event.target;

		// Find delegate handlers
		if ( delegateCount &&

			// Support: IE <=9
			// Black-hole SVG <use> instance trees (trac-13180)
			cur.nodeType &&

			// Support: Firefox <=42
			// Suppress spec-violating clicks indicating a non-primary pointer button (trac-3861)
			// https://www.w3.org/TR/DOM-Level-3-Events/#event-type-click
			// Support: IE 11 only
			// ...but not arrow key "clicks" of radio inputs, which can have `button` -1 (gh-2343)
			!( event.type === "click" && event.button >= 1 ) ) {

			for ( ; cur !== this; cur = cur.parentNode || this ) {

				// Don't check non-elements (trac-13208)
				// Don't process clicks on disabled elements (trac-6911, trac-8165, trac-11382, trac-11764)
				if ( cur.nodeType === 1 && !( event.type === "click" && cur.disabled === true ) ) {
					matchedHandlers = [];
					matchedSelectors = {};
					for ( i = 0; i < delegateCount; i++ ) {
						handleObj = handlers[ i ];

						// Don't conflict with Object.prototype properties (trac-13203)
						sel = handleObj.selector + " ";

						if ( matchedSelectors[ sel ] === undefined ) {
							matchedSelectors[ sel ] = handleObj.needsContext ?
								jQuery( sel, this ).index( cur ) > -1 :
								jQuery.find( sel, this, null, [ cur ] ).length;
						}
						if ( matchedSelectors[ sel ] ) {
							matchedHandlers.push( handleObj );
						}
					}
					if ( matchedHandlers.length ) {
						handlerQueue.push( { elem: cur, handlers: matchedHandlers } );
					}
				}
			}
		}

		// Add the remaining (directly-bound) handlers
		cur = this;
		if ( delegateCount < handlers.length ) {
			handlerQueue.push( { elem: cur, handlers: handlers.slice( delegateCount ) } );
		}

		return handlerQueue;
	},

	addProp: function( name, hook ) {
		Object.defineProperty( jQuery.Event.prototype, name, {
			enumerable: true,
			configurable: true,

			get: isFunction( hook ) ?
				function() {
					if ( this.originalEvent ) {
						return hook( this.originalEvent );
					}
				} :
				function() {
					if ( this.originalEvent ) {
						return this.originalEvent[ name ];
					}
				},

			set: function( value ) {
				Object.defineProperty( this, name, {
					enumerable: true,
					configurable: true,
					writable: true,
					value: value
				} );
			}
		} );
	},

	fix: function( originalEvent ) {
		return originalEvent[ jQuery.expando ] ?
			originalEvent :
			new jQuery.Event( originalEvent );
	},

	special: {
		load: {

			// Prevent triggered image.load events from bubbling to window.load
			noBubble: true
		},
		click: {

			// Utilize native event to ensure correct state for checkable inputs
			setup: function( data ) {

				// For mutual compressibility with _default, replace `this` access with a local var.
				// `|| data` is dead code meant only to preserve the variable through minification.
				var el = this || data;

				// Claim the first handler
				if ( rcheckableType.test( el.type ) &&
					el.click && nodeName( el, "input" ) ) {

					// dataPriv.set( el, "click", ... )
					leverageNative( el, "click", true );
				}

				// Return false to allow normal processing in the caller
				return false;
			},
			trigger: function( data ) {

				// For mutual compressibility with _default, replace `this` access with a local var.
				// `|| data` is dead code meant only to preserve the variable through minification.
				var el = this || data;

				// Force setup before triggering a click
				if ( rcheckableType.test( el.type ) &&
					el.click && nodeName( el, "input" ) ) {

					leverageNative( el, "click" );
				}

				// Return non-false to allow normal event-path propagation
				return true;
			},

			// For cross-browser consistency, suppress native .click() on links
			// Also prevent it if we're currently inside a leveraged native-event stack
			_default: function( event ) {
				var target = event.target;
				return rcheckableType.test( target.type ) &&
					target.click && nodeName( target, "input" ) &&
					dataPriv.get( target, "click" ) ||
					nodeName( target, "a" );
			}
		},

		beforeunload: {
			postDispatch: function( event ) {

				// Support: Firefox 20+
				// Firefox doesn't alert if the returnValue field is not set.
				if ( event.result !== undefined && event.originalEvent ) {
					event.originalEvent.returnValue = event.result;
				}
			}
		}
	}
};

// Ensure the presence of an event listener that handles manually-triggered
// synthetic events by interrupting progress until reinvoked in response to
// *native* events that it fires directly, ensuring that state changes have
// already occurred before other listeners are invoked.
function leverageNative( el, type, isSetup ) {

	// Missing `isSetup` indicates a trigger call, which must force setup through jQuery.event.add
	if ( !isSetup ) {
		if ( dataPriv.get( el, type ) === undefined ) {
			jQuery.event.add( el, type, returnTrue );
		}
		return;
	}

	// Register the controller as a special universal handler for all event namespaces
	dataPriv.set( el, type, false );
	jQuery.event.add( el, type, {
		namespace: false,
		handler: function( event ) {
			var result,
				saved = dataPriv.get( this, type );

			if ( ( event.isTrigger & 1 ) && this[ type ] ) {

				// Interrupt processing of the outer synthetic .trigger()ed event
				if ( !saved ) {

					// Store arguments for use when handling the inner native event
					// There will always be at least one argument (an event object), so this array
					// will not be confused with a leftover capture object.
					saved = slice.call( arguments );
					dataPriv.set( this, type, saved );

					// Trigger the native event and capture its result
					this[ type ]();
					result = dataPriv.get( this, type );
					dataPriv.set( this, type, false );

					if ( saved !== result ) {

						// Cancel the outer synthetic event
						event.stopImmediatePropagation();
						event.preventDefault();

						return result;
					}

				// If this is an inner synthetic event for an event with a bubbling surrogate
				// (focus or blur), assume that the surrogate already propagated from triggering
				// the native event and prevent that from happening again here.
				// This technically gets the ordering wrong w.r.t. to `.trigger()` (in which the
				// bubbling surrogate propagates *after* the non-bubbling base), but that seems
				// less bad than duplication.
				} else if ( ( jQuery.event.special[ type ] || {} ).delegateType ) {
					event.stopPropagation();
				}

			// If this is a native event triggered above, everything is now in order
			// Fire an inner synthetic event with the original arguments
			} else if ( saved ) {

				// ...and capture the result
				dataPriv.set( this, type, jQuery.event.trigger(
					saved[ 0 ],
					saved.slice( 1 ),
					this
				) );

				// Abort handling of the native event by all jQuery handlers while allowing
				// native handlers on the same element to run. On target, this is achieved
				// by stopping immediate propagation just on the jQuery event. However,
				// the native event is re-wrapped by a jQuery one on each level of the
				// propagation so the only way to stop it for jQuery is to stop it for
				// everyone via native `stopPropagation()`. This is not a problem for
				// focus/blur which don't bubble, but it does also stop click on checkboxes
				// and radios. We accept this limitation.
				event.stopPropagation();
				event.isImmediatePropagationStopped = returnTrue;
			}
		}
	} );
}

jQuery.removeEvent = function( elem, type, handle ) {

	// This "if" is needed for plain objects
	if ( elem.removeEventListener ) {
		elem.removeEventListener( type, handle );
	}
};

jQuery.Event = function( src, props ) {

	// Allow instantiation without the 'new' keyword
	if ( !( this instanceof jQuery.Event ) ) {
		return new jQuery.Event( src, props );
	}

	// Event object
	if ( src && src.type ) {
		this.originalEvent = src;
		this.type = src.type;

		// Events bubbling up the document may have been marked as prevented
		// by a handler lower down the tree; reflect the correct value.
		this.isDefaultPrevented = src.defaultPrevented ||
				src.defaultPrevented === undefined &&

				// Support: Android <=2.3 only
				src.returnValue === false ?
			returnTrue :
			returnFalse;

		// Create target properties
		// Support: Safari <=6 - 7 only
		// Target should not be a text node (trac-504, trac-13143)
		this.target = ( src.target && src.target.nodeType === 3 ) ?
			src.target.parentNode :
			src.target;

		this.currentTarget = src.currentTarget;
		this.relatedTarget = src.relatedTarget;

	// Event type
	} else {
		this.type = src;
	}

	// Put explicitly provided properties onto the event object
	if ( props ) {
		jQuery.extend( this, props );
	}

	// Create a timestamp if incoming event doesn't have one
	this.timeStamp = src && src.timeStamp || Date.now();

	// Mark it as fixed
	this[ jQuery.expando ] = true;
};

// jQuery.Event is based on DOM3 Events as specified by the ECMAScript Language Binding
// https://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html
jQuery.Event.prototype = {
	constructor: jQuery.Event,
	isDefaultPrevented: returnFalse,
	isPropagationStopped: returnFalse,
	isImmediatePropagationStopped: returnFalse,
	isSimulated: false,

	preventDefault: function() {
		var e = this.originalEvent;

		this.isDefaultPrevented = returnTrue;

		if ( e && !this.isSimulated ) {
			e.preventDefault();
		}
	},
	stopPropagation: function() {
		var e = this.originalEvent;

		this.isPropagationStopped = returnTrue;

		if ( e && !this.isSimulated ) {
			e.stopPropagation();
		}
	},
	stopImmediatePropagation: function() {
		var e = this.originalEvent;

		this.isImmediatePropagationStopped = returnTrue;

		if ( e && !this.isSimulated ) {
			e.stopImmediatePropagation();
		}

		this.stopPropagation();
	}
};

// Includes all common event props including KeyEvent and MouseEvent specific props
jQuery.each( {
	altKey: true,
	bubbles: true,
	cancelable: true,
	changedTouches: true,
	ctrlKey: true,
	detail: true,
	eventPhase: true,
	metaKey: true,
	pageX: true,
	pageY: true,
	shiftKey: true,
	view: true,
	"char": true,
	code: true,
	charCode: true,
	key: true,
	keyCode: true,
	button: true,
	buttons: true,
	clientX: true,
	clientY: true,
	offsetX: true,
	offsetY: true,
	pointerId: true,
	pointerType: true,
	screenX: true,
	screenY: true,
	targetTouches: true,
	toElement: true,
	touches: true,
	which: true
}, jQuery.event.addProp );

jQuery.each( { focus: "focusin", blur: "focusout" }, function( type, delegateType ) {

	function focusMappedHandler( nativeEvent ) {
		if ( document.documentMode ) {

			// Support: IE 11+
			// Attach a single focusin/focusout handler on the document while someone wants
			// focus/blur. This is because the former are synchronous in IE while the latter
			// are async. In other browsers, all those handlers are invoked synchronously.

			// `handle` from private data would already wrap the event, but we need
			// to change the `type` here.
			var handle = dataPriv.get( this, "handle" ),
				event = jQuery.event.fix( nativeEvent );
			event.type = nativeEvent.type === "focusin" ? "focus" : "blur";
			event.isSimulated = true;

			// First, handle focusin/focusout
			handle( nativeEvent );

			// ...then, handle focus/blur
			//
			// focus/blur don't bubble while focusin/focusout do; simulate the former by only
			// invoking the handler at the lower level.
			if ( event.target === event.currentTarget ) {

				// The setup part calls `leverageNative`, which, in turn, calls
				// `jQuery.event.add`, so event handle will already have been set
				// by this point.
				handle( event );
			}
		} else {

			// For non-IE browsers, attach a single capturing handler on the document
			// while someone wants focusin/focusout.
			jQuery.event.simulate( delegateType, nativeEvent.target,
				jQuery.event.fix( nativeEvent ) );
		}
	}

	jQuery.event.special[ type ] = {

		// Utilize native event if possible so blur/focus sequence is correct
		setup: function() {

			var attaches;

			// Claim the first handler
			// dataPriv.set( this, "focus", ... )
			// dataPriv.set( this, "blur", ... )
			leverageNative( this, type, true );

			if ( document.documentMode ) {

				// Support: IE 9 - 11+
				// We use the same native handler for focusin & focus (and focusout & blur)
				// so we need to coordinate setup & teardown parts between those events.
				// Use `delegateType` as the key as `type` is already used by `leverageNative`.
				attaches = dataPriv.get( this, delegateType );
				if ( !attaches ) {
					this.addEventListener( delegateType, focusMappedHandler );
				}
				dataPriv.set( this, delegateType, ( attaches || 0 ) + 1 );
			} else {

				// Return false to allow normal processing in the caller
				return false;
			}
		},
		trigger: function() {

			// Force setup before trigger
			leverageNative( this, type );

			// Return non-false to allow normal event-path propagation
			return true;
		},

		teardown: function() {
			var attaches;

			if ( document.documentMode ) {
				attaches = dataPriv.get( this, delegateType ) - 1;
				if ( !attaches ) {
					this.removeEventListener( delegateType, focusMappedHandler );
					dataPriv.remove( this, delegateType );
				} else {
					dataPriv.set( this, delegateType, attaches );
				}
			} else {

				// Return false to indicate standard teardown should be applied
				return false;
			}
		},

		// Suppress native focus or blur if we're currently inside
		// a leveraged native-event stack
		_default: function( event ) {
			return dataPriv.get( event.target, type );
		},

		delegateType: delegateType
	};

	// Support: Firefox <=44
	// Firefox doesn't have focus(in | out) events
	// Related ticket - https://bugzilla.mozilla.org/show_bug.cgi?id=687787
	//
	// Support: Chrome <=48 - 49, Safari <=9.0 - 9.1
	// focus(in | out) events fire after focus & blur events,
	// which is spec violation - http://www.w3.org/TR/DOM-Level-3-Events/#events-focusevent-event-order
	// Related ticket - https://bugs.chromium.org/p/chromium/issues/detail?id=449857
	//
	// Support: IE 9 - 11+
	// To preserve relative focusin/focus & focusout/blur event order guaranteed on the 3.x branch,
	// attach a single handler for both events in IE.
	jQuery.event.special[ delegateType ] = {
		setup: function() {

			// Handle: regular nodes (via `this.ownerDocument`), window
			// (via `this.document`) & document (via `this`).
			var doc = this.ownerDocument || this.document || this,
				dataHolder = document.documentMode ? this : doc,
				attaches = dataPriv.get( dataHolder, delegateType );

			// Support: IE 9 - 11+
			// We use the same native handler for focusin & focus (and focusout & blur)
			// so we need to coordinate setup & teardown parts between those events.
			// Use `delegateType` as the key as `type` is already used by `leverageNative`.
			if ( !attaches ) {
				if ( document.documentMode ) {
					this.addEventListener( delegateType, focusMappedHandler );
				} else {
					doc.addEventListener( type, focusMappedHandler, true );
				}
			}
			dataPriv.set( dataHolder, delegateType, ( attaches || 0 ) + 1 );
		},
		teardown: function() {
			var doc = this.ownerDocument || this.document || this,
				dataHolder = document.documentMode ? this : doc,
				attaches = dataPriv.get( dataHolder, delegateType ) - 1;

			if ( !attaches ) {
				if ( document.documentMode ) {
					this.removeEventListener( delegateType, focusMappedHandler );
				} else {
					doc.removeEventListener( type, focusMappedHandler, true );
				}
				dataPriv.remove( dataHolder, delegateType );
			} else {
				dataPriv.set( dataHolder, delegateType, attaches );
			}
		}
	};
} );

// Create mouseenter/leave events using mouseover/out and event-time checks
// so that event delegation works in jQuery.
// Do the same for pointerenter/pointerleave and pointerover/pointerout
//
// Support: Safari 7 only
// Safari sends mouseenter too often; see:
// https://bugs.chromium.org/p/chromium/issues/detail?id=470258
// for the description of the bug (it existed in older Chrome versions as well).
jQuery.each( {
	mouseenter: "mouseover",
	mouseleave: "mouseout",
	pointerenter: "pointerover",
	pointerleave: "pointerout"
}, function( orig, fix ) {
	jQuery.event.special[ orig ] = {
		delegateType: fix,
		bindType: fix,

		handle: function( event ) {
			var ret,
				target = this,
				related = event.relatedTarget,
				handleObj = event.handleObj;

			// For mouseenter/leave call the handler if related is outside the target.
			// NB: No relatedTarget if the mouse left/entered the browser window
			if ( !related || ( related !== target && !jQuery.contains( target, related ) ) ) {
				event.type = handleObj.origType;
				ret = handleObj.handler.apply( this, arguments );
				event.type = fix;
			}
			return ret;
		}
	};
} );

jQuery.fn.extend( {

	on: function( types, selector, data, fn ) {
		return on( this, types, selector, data, fn );
	},
	one: function( types, selector, data, fn ) {
		return on( this, types, selector, data, fn, 1 );
	},
	off: function( types, selector, fn ) {
		var handleObj, type;
		if ( types && types.preventDefault && types.handleObj ) {

			// ( event )  dispatched jQuery.Event
			handleObj = types.handleObj;
			jQuery( types.delegateTarget ).off(
				handleObj.namespace ?
					handleObj.origType + "." + handleObj.namespace :
					handleObj.origType,
				handleObj.selector,
				handleObj.handler
			);
			return this;
		}
		if ( typeof types === "object" ) {

			// ( types-object [, selector] )
			for ( type in types ) {
				this.off( type, selector, types[ type ] );
			}
			return this;
		}
		if ( selector === false || typeof selector === "function" ) {

			// ( types [, fn] )
			fn = selector;
			selector = undefined;
		}
		if ( fn === false ) {
			fn = returnFalse;
		}
		return this.each( function() {
			jQuery.event.remove( this, types, fn, selector );
		} );
	}
} );


var

	// Support: IE <=10 - 11, Edge 12 - 13 only
	// In IE/Edge using regex groups here causes severe slowdowns.
	// See https://connect.microsoft.com/IE/feedback/details/1736512/
	rnoInnerhtml = /<script|<style|<link/i,

	// checked="checked" or checked
	rchecked = /checked\s*(?:[^=]|=\s*.checked.)/i,

	rcleanScript = /^\s*<!\[CDATA\[|\]\]>\s*$/g;

// Prefer a tbody over its parent table for containing new rows
function manipulationTarget( elem, content ) {
	if ( nodeName( elem, "table" ) &&
		nodeName( content.nodeType !== 11 ? content : content.firstChild, "tr" ) ) {

		return jQuery( elem ).children( "tbody" )[ 0 ] || elem;
	}

	return elem;
}

// Replace/restore the type attribute of script elements for safe DOM manipulation
function disableScript( elem ) {
	elem.type = ( elem.getAttribute( "type" ) !== null ) + "/" + elem.type;
	return elem;
}
function restoreScript( elem ) {
	if ( ( elem.type || "" ).slice( 0, 5 ) === "true/" ) {
		elem.type = elem.type.slice( 5 );
	} else {
		elem.removeAttribute( "type" );
	}

	return elem;
}

function cloneCopyEvent( src, dest ) {
	var i, l, type, pdataOld, udataOld, udataCur, events;

	if ( dest.nodeType !== 1 ) {
		return;
	}

	// 1. Copy private data: events, handlers, etc.
	if ( dataPriv.hasData( src ) ) {
		pdataOld = dataPriv.get( src );
		events = pdataOld.events;

		if ( events ) {
			dataPriv.remove( dest, "handle events" );

			for ( type in events ) {
				for ( i = 0, l = events[ type ].length; i < l; i++ ) {
					jQuery.event.add( dest, type, events[ type ][ i ] );
				}
			}
		}
	}

	// 2. Copy user data
	if ( dataUser.hasData( src ) ) {
		udataOld = dataUser.access( src );
		udataCur = jQuery.extend( {}, udataOld );

		dataUser.set( dest, udataCur );
	}
}

// Fix IE bugs, see support tests
function fixInput( src, dest ) {
	var nodeName = dest.nodeName.toLowerCase();

	// Fails to persist the checked state of a cloned checkbox or radio button.
	if ( nodeName === "input" && rcheckableType.test( src.type ) ) {
		dest.checked = src.checked;

	// Fails to return the selected option to the default selected state when cloning options
	} else if ( nodeName === "input" || nodeName === "textarea" ) {
		dest.defaultValue = src.defaultValue;
	}
}

function domManip( collection, args, callback, ignored ) {

	// Flatten any nested arrays
	args = flat( args );

	var fragment, first, scripts, hasScripts, node, doc,
		i = 0,
		l = collection.length,
		iNoClone = l - 1,
		value = args[ 0 ],
		valueIsFunction = isFunction( value );

	// We can't cloneNode fragments that contain checked, in WebKit
	if ( valueIsFunction ||
			( l > 1 && typeof value === "string" &&
				!support.checkClone && rchecked.test( value ) ) ) {
		return collection.each( function( index ) {
			var self = collection.eq( index );
			if ( valueIsFunction ) {
				args[ 0 ] = value.call( this, index, self.html() );
			}
			domManip( self, args, callback, ignored );
		} );
	}

	if ( l ) {
		fragment = buildFragment( args, collection[ 0 ].ownerDocument, false, collection, ignored );
		first = fragment.firstChild;

		if ( fragment.childNodes.length === 1 ) {
			fragment = first;
		}

		// Require either new content or an interest in ignored elements to invoke the callback
		if ( first || ignored ) {
			scripts = jQuery.map( getAll( fragment, "script" ), disableScript );
			hasScripts = scripts.length;

			// Use the original fragment for the last item
			// instead of the first because it can end up
			// being emptied incorrectly in certain situations (trac-8070).
			for ( ; i < l; i++ ) {
				node = fragment;

				if ( i !== iNoClone ) {
					node = jQuery.clone( node, true, true );

					// Keep references to cloned scripts for later restoration
					if ( hasScripts ) {

						// Support: Android <=4.0 only, PhantomJS 1 only
						// push.apply(_, arraylike) throws on ancient WebKit
						jQuery.merge( scripts, getAll( node, "script" ) );
					}
				}

				callback.call( collection[ i ], node, i );
			}

			if ( hasScripts ) {
				doc = scripts[ scripts.length - 1 ].ownerDocument;

				// Re-enable scripts
				jQuery.map( scripts, restoreScript );

				// Evaluate executable scripts on first document insertion
				for ( i = 0; i < hasScripts; i++ ) {
					node = scripts[ i ];
					if ( rscriptType.test( node.type || "" ) &&
						!dataPriv.access( node, "globalEval" ) &&
						jQuery.contains( doc, node ) ) {

						if ( node.src && ( node.type || "" ).toLowerCase()  !== "module" ) {

							// Optional AJAX dependency, but won't run scripts if not present
							if ( jQuery._evalUrl && !node.noModule ) {
								jQuery._evalUrl( node.src, {
									nonce: node.nonce || node.getAttribute( "nonce" )
								}, doc );
							}
						} else {

							// Unwrap a CDATA section containing script contents. This shouldn't be
							// needed as in XML documents they're already not visible when
							// inspecting element contents and in HTML documents they have no
							// meaning but we're preserving that logic for backwards compatibility.
							// This will be removed completely in 4.0. See gh-4904.
							DOMEval( node.textContent.replace( rcleanScript, "" ), node, doc );
						}
					}
				}
			}
		}
	}

	return collection;
}

function remove( elem, selector, keepData ) {
	var node,
		nodes = selector ? jQuery.filter( selector, elem ) : elem,
		i = 0;

	for ( ; ( node = nodes[ i ] ) != null; i++ ) {
		if ( !keepData && node.nodeType === 1 ) {
			jQuery.cleanData( getAll( node ) );
		}

		if ( node.parentNode ) {
			if ( keepData && isAttached( node ) ) {
				setGlobalEval( getAll( node, "script" ) );
			}
			node.parentNode.removeChild( node );
		}
	}

	return elem;
}

jQuery.extend( {
	htmlPrefilter: function( html ) {
		return html;
	},

	clone: function( elem, dataAndEvents, deepDataAndEvents ) {
		var i, l, srcElements, destElements,
			clone = elem.cloneNode( true ),
			inPage = isAttached( elem );

		// Fix IE cloning issues
		if ( !support.noCloneChecked && ( elem.nodeType === 1 || elem.nodeType === 11 ) &&
				!jQuery.isXMLDoc( elem ) ) {

			// We eschew jQuery#find here for performance reasons:
			// https://jsperf.com/getall-vs-sizzle/2
			destElements = getAll( clone );
			srcElements = getAll( elem );

			for ( i = 0, l = srcElements.length; i < l; i++ ) {
				fixInput( srcElements[ i ], destElements[ i ] );
			}
		}

		// Copy the events from the original to the clone
		if ( dataAndEvents ) {
			if ( deepDataAndEvents ) {
				srcElements = srcElements || getAll( elem );
				destElements = destElements || getAll( clone );

				for ( i = 0, l = srcElements.length; i < l; i++ ) {
					cloneCopyEvent( srcElements[ i ], destElements[ i ] );
				}
			} else {
				cloneCopyEvent( elem, clone );
			}
		}

		// Preserve script evaluation history
		destElements = getAll( clone, "script" );
		if ( destElements.length > 0 ) {
			setGlobalEval( destElements, !inPage && getAll( elem, "script" ) );
		}

		// Return the cloned set
		return clone;
	},

	cleanData: function( elems ) {
		var data, elem, type,
			special = jQuery.event.special,
			i = 0;

		for ( ; ( elem = elems[ i ] ) !== undefined; i++ ) {
			if ( acceptData( elem ) ) {
				if ( ( data = elem[ dataPriv.expando ] ) ) {
					if ( data.events ) {
						for ( type in data.events ) {
							if ( special[ type ] ) {
								jQuery.event.remove( elem, type );

							// This is a shortcut to avoid jQuery.event.remove's overhead
							} else {
								jQuery.removeEvent( elem, type, data.handle );
							}
						}
					}

					// Support: Chrome <=35 - 45+
					// Assign undefined instead of using delete, see Data#remove
					elem[ dataPriv.expando ] = undefined;
				}
				if ( elem[ dataUser.expando ] ) {

					// Support: Chrome <=35 - 45+
					// Assign undefined instead of using delete, see Data#remove
					elem[ dataUser.expando ] = undefined;
				}
			}
		}
	}
} );

jQuery.fn.extend( {
	detach: function( selector ) {
		return remove( this, selector, true );
	},

	remove: function( selector ) {
		return remove( this, selector );
	},

	text: function( value ) {
		return access( this, function( value ) {
			return value === undefined ?
				jQuery.text( this ) :
				this.empty().each( function() {
					if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
						this.textContent = value;
					}
				} );
		}, null, value, arguments.length );
	},

	append: function() {
		return domManip( this, arguments, function( elem ) {
			if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
				var target = manipulationTarget( this, elem );
				target.appendChild( elem );
			}
		} );
	},

	prepend: function() {
		return domManip( this, arguments, function( elem ) {
			if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
				var target = manipulationTarget( this, elem );
				target.insertBefore( elem, target.firstChild );
			}
		} );
	},

	before: function() {
		return domManip( this, arguments, function( elem ) {
			if ( this.parentNode ) {
				this.parentNode.insertBefore( elem, this );
			}
		} );
	},

	after: function() {
		return domManip( this, arguments, function( elem ) {
			if ( this.parentNode ) {
				this.parentNode.insertBefore( elem, this.nextSibling );
			}
		} );
	},

	empty: function() {
		var elem,
			i = 0;

		for ( ; ( elem = this[ i ] ) != null; i++ ) {
			if ( elem.nodeType === 1 ) {

				// Prevent memory leaks
				jQuery.cleanData( getAll( elem, false ) );

				// Remove any remaining nodes
				elem.textContent = "";
			}
		}

		return this;
	},

	clone: function( dataAndEvents, deepDataAndEvents ) {
		dataAndEvents = dataAndEvents == null ? false : dataAndEvents;
		deepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;

		return this.map( function() {
			return jQuery.clone( this, dataAndEvents, deepDataAndEvents );
		} );
	},

	html: function( value ) {
		return access( this, function( value ) {
			var elem = this[ 0 ] || {},
				i = 0,
				l = this.length;

			if ( value === undefined && elem.nodeType === 1 ) {
				return elem.innerHTML;
			}

			// See if we can take a shortcut and just use innerHTML
			if ( typeof value === "string" && !rnoInnerhtml.test( value ) &&
				!wrapMap[ ( rtagName.exec( value ) || [ "", "" ] )[ 1 ].toLowerCase() ] ) {

				value = jQuery.htmlPrefilter( value );

				try {
					for ( ; i < l; i++ ) {
						elem = this[ i ] || {};

						// Remove element nodes and prevent memory leaks
						if ( elem.nodeType === 1 ) {
							jQuery.cleanData( getAll( elem, false ) );
							elem.innerHTML = value;
						}
					}

					elem = 0;

				// If using innerHTML throws an exception, use the fallback method
				} catch ( e ) {}
			}

			if ( elem ) {
				this.empty().append( value );
			}
		}, null, value, arguments.length );
	},

	replaceWith: function() {
		var ignored = [];

		// Make the changes, replacing each non-ignored context element with the new content
		return domManip( this, arguments, function( elem ) {
			var parent = this.parentNode;

			if ( jQuery.inArray( this, ignored ) < 0 ) {
				jQuery.cleanData( getAll( this ) );
				if ( parent ) {
					parent.replaceChild( elem, this );
				}
			}

		// Force callback invocation
		}, ignored );
	}
} );

jQuery.each( {
	appendTo: "append",
	prependTo: "prepend",
	insertBefore: "before",
	insertAfter: "after",
	replaceAll: "replaceWith"
}, function( name, original ) {
	jQuery.fn[ name ] = function( selector ) {
		var elems,
			ret = [],
			insert = jQuery( selector ),
			last = insert.length - 1,
			i = 0;

		for ( ; i <= last; i++ ) {
			elems = i === last ? this : this.clone( true );
			jQuery( insert[ i ] )[ original ]( elems );

			// Support: Android <=4.0 only, PhantomJS 1 only
			// .get() because push.apply(_, arraylike) throws on ancient WebKit
			push.apply( ret, elems.get() );
		}

		return this.pushStack( ret );
	};
} );
var rnumnonpx = new RegExp( "^(" + pnum + ")(?!px)[a-z%]+$", "i" );

var rcustomProp = /^--/;


var getStyles = function( elem ) {

		// Support: IE <=11 only, Firefox <=30 (trac-15098, trac-14150)
		// IE throws on elements created in popups
		// FF meanwhile throws on frame elements through "defaultView.getComputedStyle"
		var view = elem.ownerDocument.defaultView;

		if ( !view || !view.opener ) {
			view = window;
		}

		return view.getComputedStyle( elem );
	};

var swap = function( elem, options, callback ) {
	var ret, name,
		old = {};

	// Remember the old values, and insert the new ones
	for ( name in options ) {
		old[ name ] = elem.style[ name ];
		elem.style[ name ] = options[ name ];
	}

	ret = callback.call( elem );

	// Revert the old values
	for ( name in options ) {
		elem.style[ name ] = old[ name ];
	}

	return ret;
};


var rboxStyle = new RegExp( cssExpand.join( "|" ), "i" );



( function() {

	// Executing both pixelPosition & boxSizingReliable tests require only one layout
	// so they're executed at the same time to save the second computation.
	function computeStyleTests() {

		// This is a singleton, we need to execute it only once
		if ( !div ) {
			return;
		}

		container.style.cssText = "position:absolute;left:-11111px;width:60px;" +
			"margin-top:1px;padding:0;border:0";
		div.style.cssText =
			"position:relative;display:block;box-sizing:border-box;overflow:scroll;" +
			"margin:auto;border:1px;padding:1px;" +
			"width:60%;top:1%";
		documentElement.appendChild( container ).appendChild( div );

		var divStyle = window.getComputedStyle( div );
		pixelPositionVal = divStyle.top !== "1%";

		// Support: Android 4.0 - 4.3 only, Firefox <=3 - 44
		reliableMarginLeftVal = roundPixelMeasures( divStyle.marginLeft ) === 12;

		// Support: Android 4.0 - 4.3 only, Safari <=9.1 - 10.1, iOS <=7.0 - 9.3
		// Some styles come back with percentage values, even though they shouldn't
		div.style.right = "60%";
		pixelBoxStylesVal = roundPixelMeasures( divStyle.right ) === 36;

		// Support: IE 9 - 11 only
		// Detect misreporting of content dimensions for box-sizing:border-box elements
		boxSizingReliableVal = roundPixelMeasures( divStyle.width ) === 36;

		// Support: IE 9 only
		// Detect overflow:scroll screwiness (gh-3699)
		// Support: Chrome <=64
		// Don't get tricked when zoom affects offsetWidth (gh-4029)
		div.style.position = "absolute";
		scrollboxSizeVal = roundPixelMeasures( div.offsetWidth / 3 ) === 12;

		documentElement.removeChild( container );

		// Nullify the div so it wouldn't be stored in the memory and
		// it will also be a sign that checks already performed
		div = null;
	}

	function roundPixelMeasures( measure ) {
		return Math.round( parseFloat( measure ) );
	}

	var pixelPositionVal, boxSizingReliableVal, scrollboxSizeVal, pixelBoxStylesVal,
		reliableTrDimensionsVal, reliableMarginLeftVal,
		container = document.createElement( "div" ),
		div = document.createElement( "div" );

	// Finish early in limited (non-browser) environments
	if ( !div.style ) {
		return;
	}

	// Support: IE <=9 - 11 only
	// Style of cloned element affects source element cloned (trac-8908)
	div.style.backgroundClip = "content-box";
	div.cloneNode( true ).style.backgroundClip = "";
	support.clearCloneStyle = div.style.backgroundClip === "content-box";

	jQuery.extend( support, {
		boxSizingReliable: function() {
			computeStyleTests();
			return boxSizingReliableVal;
		},
		pixelBoxStyles: function() {
			computeStyleTests();
			return pixelBoxStylesVal;
		},
		pixelPosition: function() {
			computeStyleTests();
			return pixelPositionVal;
		},
		reliableMarginLeft: function() {
			computeStyleTests();
			return reliableMarginLeftVal;
		},
		scrollboxSize: function() {
			computeStyleTests();
			return scrollboxSizeVal;
		},

		// Support: IE 9 - 11+, Edge 15 - 18+
		// IE/Edge misreport `getComputedStyle` of table rows with width/height
		// set in CSS while `offset*` properties report correct values.
		// Behavior in IE 9 is more subtle than in newer versions & it passes
		// some versions of this test; make sure not to make it pass there!
		//
		// Support: Firefox 70+
		// Only Firefox includes border widths
		// in computed dimensions. (gh-4529)
		reliableTrDimensions: function() {
			var table, tr, trChild, trStyle;
			if ( reliableTrDimensionsVal == null ) {
				table = document.createElement( "table" );
				tr = document.createElement( "tr" );
				trChild = document.createElement( "div" );

				table.style.cssText = "position:absolute;left:-11111px;border-collapse:separate";
				tr.style.cssText = "box-sizing:content-box;border:1px solid";

				// Support: Chrome 86+
				// Height set through cssText does not get applied.
				// Computed height then comes back as 0.
				tr.style.height = "1px";
				trChild.style.height = "9px";

				// Support: Android 8 Chrome 86+
				// In our bodyBackground.html iframe,
				// display for all div elements is set to "inline",
				// which causes a problem only in Android 8 Chrome 86.
				// Ensuring the div is `display: block`
				// gets around this issue.
				trChild.style.display = "block";

				documentElement
					.appendChild( table )
					.appendChild( tr )
					.appendChild( trChild );

				trStyle = window.getComputedStyle( tr );
				reliableTrDimensionsVal = ( parseInt( trStyle.height, 10 ) +
					parseInt( trStyle.borderTopWidth, 10 ) +
					parseInt( trStyle.borderBottomWidth, 10 ) ) === tr.offsetHeight;

				documentElement.removeChild( table );
			}
			return reliableTrDimensionsVal;
		}
	} );
} )();


function curCSS( elem, name, computed ) {
	var width, minWidth, maxWidth, ret,
		isCustomProp = rcustomProp.test( name ),

		// Support: Firefox 51+
		// Retrieving style before computed somehow
		// fixes an issue with getting wrong values
		// on detached elements
		style = elem.style;

	computed = computed || getStyles( elem );

	// getPropertyValue is needed for:
	//   .css('filter') (IE 9 only, trac-12537)
	//   .css('--customProperty) (gh-3144)
	if ( computed ) {

		// Support: IE <=9 - 11+
		// IE only supports `"float"` in `getPropertyValue`; in computed styles
		// it's only available as `"cssFloat"`. We no longer modify properties
		// sent to `.css()` apart from camelCasing, so we need to check both.
		// Normally, this would create difference in behavior: if
		// `getPropertyValue` returns an empty string, the value returned
		// by `.css()` would be `undefined`. This is usually the case for
		// disconnected elements. However, in IE even disconnected elements
		// with no styles return `"none"` for `getPropertyValue( "float" )`
		ret = computed.getPropertyValue( name ) || computed[ name ];

		if ( isCustomProp && ret ) {

			// Support: Firefox 105+, Chrome <=105+
			// Spec requires trimming whitespace for custom properties (gh-4926).
			// Firefox only trims leading whitespace. Chrome just collapses
			// both leading & trailing whitespace to a single space.
			//
			// Fall back to `undefined` if empty string returned.
			// This collapses a missing definition with property defined
			// and set to an empty string but there's no standard API
			// allowing us to differentiate them without a performance penalty
			// and returning `undefined` aligns with older jQuery.
			//
			// rtrimCSS treats U+000D CARRIAGE RETURN and U+000C FORM FEED
			// as whitespace while CSS does not, but this is not a problem
			// because CSS preprocessing replaces them with U+000A LINE FEED
			// (which *is* CSS whitespace)
			// https://www.w3.org/TR/css-syntax-3/#input-preprocessing
			ret = ret.replace( rtrimCSS, "$1" ) || undefined;
		}

		if ( ret === "" && !isAttached( elem ) ) {
			ret = jQuery.style( elem, name );
		}

		// A tribute to the "awesome hack by Dean Edwards"
		// Android Browser returns percentage for some values,
		// but width seems to be reliably pixels.
		// This is against the CSSOM draft spec:
		// https://drafts.csswg.org/cssom/#resolved-values
		if ( !support.pixelBoxStyles() && rnumnonpx.test( ret ) && rboxStyle.test( name ) ) {

			// Remember the original values
			width = style.width;
			minWidth = style.minWidth;
			maxWidth = style.maxWidth;

			// Put in the new values to get a computed value out
			style.minWidth = style.maxWidth = style.width = ret;
			ret = computed.width;

			// Revert the changed values
			style.width = width;
			style.minWidth = minWidth;
			style.maxWidth = maxWidth;
		}
	}

	return ret !== undefined ?

		// Support: IE <=9 - 11 only
		// IE returns zIndex value as an integer.
		ret + "" :
		ret;
}


function addGetHookIf( conditionFn, hookFn ) {

	// Define the hook, we'll check on the first run if it's really needed.
	return {
		get: function() {
			if ( conditionFn() ) {

				// Hook not needed (or it's not possible to use it due
				// to missing dependency), remove it.
				delete this.get;
				return;
			}

			// Hook needed; redefine it so that the support test is not executed again.
			return ( this.get = hookFn ).apply( this, arguments );
		}
	};
}


var cssPrefixes = [ "Webkit", "Moz", "ms" ],
	emptyStyle = document.createElement( "div" ).style,
	vendorProps = {};

// Return a vendor-prefixed property or undefined
function vendorPropName( name ) {

	// Check for vendor prefixed names
	var capName = name[ 0 ].toUpperCase() + name.slice( 1 ),
		i = cssPrefixes.length;

	while ( i-- ) {
		name = cssPrefixes[ i ] + capName;
		if ( name in emptyStyle ) {
			return name;
		}
	}
}

// Return a potentially-mapped jQuery.cssProps or vendor prefixed property
function finalPropName( name ) {
	var final = jQuery.cssProps[ name ] || vendorProps[ name ];

	if ( final ) {
		return final;
	}
	if ( name in emptyStyle ) {
		return name;
	}
	return vendorProps[ name ] = vendorPropName( name ) || name;
}


var

	// Swappable if display is none or starts with table
	// except "table", "table-cell", or "table-caption"
	// See here for display values: https://developer.mozilla.org/en-US/docs/CSS/display
	rdisplayswap = /^(none|table(?!-c[ea]).+)/,
	cssShow = { position: "absolute", visibility: "hidden", display: "block" },
	cssNormalTransform = {
		letterSpacing: "0",
		fontWeight: "400"
	};

function setPositiveNumber( _elem, value, subtract ) {

	// Any relative (+/-) values have already been
	// normalized at this point
	var matches = rcssNum.exec( value );
	return matches ?

		// Guard against undefined "subtract", e.g., when used as in cssHooks
		Math.max( 0, matches[ 2 ] - ( subtract || 0 ) ) + ( matches[ 3 ] || "px" ) :
		value;
}

function boxModelAdjustment( elem, dimension, box, isBorderBox, styles, computedVal ) {
	var i = dimension === "width" ? 1 : 0,
		extra = 0,
		delta = 0,
		marginDelta = 0;

	// Adjustment may not be necessary
	if ( box === ( isBorderBox ? "border" : "content" ) ) {
		return 0;
	}

	for ( ; i < 4; i += 2 ) {

		// Both box models exclude margin
		// Count margin delta separately to only add it after scroll gutter adjustment.
		// This is needed to make negative margins work with `outerHeight( true )` (gh-3982).
		if ( box === "margin" ) {
			marginDelta += jQuery.css( elem, box + cssExpand[ i ], true, styles );
		}

		// If we get here with a content-box, we're seeking "padding" or "border" or "margin"
		if ( !isBorderBox ) {

			// Add padding
			delta += jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );

			// For "border" or "margin", add border
			if ( box !== "padding" ) {
				delta += jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );

			// But still keep track of it otherwise
			} else {
				extra += jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );
			}

		// If we get here with a border-box (content + padding + border), we're seeking "content" or
		// "padding" or "margin"
		} else {

			// For "content", subtract padding
			if ( box === "content" ) {
				delta -= jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );
			}

			// For "content" or "padding", subtract border
			if ( box !== "margin" ) {
				delta -= jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );
			}
		}
	}

	// Account for positive content-box scroll gutter when requested by providing computedVal
	if ( !isBorderBox && computedVal >= 0 ) {

		// offsetWidth/offsetHeight is a rounded sum of content, padding, scroll gutter, and border
		// Assuming integer scroll gutter, subtract the rest and round down
		delta += Math.max( 0, Math.ceil(
			elem[ "offset" + dimension[ 0 ].toUpperCase() + dimension.slice( 1 ) ] -
			computedVal -
			delta -
			extra -
			0.5

		// If offsetWidth/offsetHeight is unknown, then we can't determine content-box scroll gutter
		// Use an explicit zero to avoid NaN (gh-3964)
		) ) || 0;
	}

	return delta + marginDelta;
}

function getWidthOrHeight( elem, dimension, extra ) {

	// Start with computed style
	var styles = getStyles( elem ),

		// To avoid forcing a reflow, only fetch boxSizing if we need it (gh-4322).
		// Fake content-box until we know it's needed to know the true value.
		boxSizingNeeded = !support.boxSizingReliable() || extra,
		isBorderBox = boxSizingNeeded &&
			jQuery.css( elem, "boxSizing", false, styles ) === "border-box",
		valueIsBorderBox = isBorderBox,

		val = curCSS( elem, dimension, styles ),
		offsetProp = "offset" + dimension[ 0 ].toUpperCase() + dimension.slice( 1 );

	// Support: Firefox <=54
	// Return a confounding non-pixel value or feign ignorance, as appropriate.
	if ( rnumnonpx.test( val ) ) {
		if ( !extra ) {
			return val;
		}
		val = "auto";
	}


	// Support: IE 9 - 11 only
	// Use offsetWidth/offsetHeight for when box sizing is unreliable.
	// In those cases, the computed value can be trusted to be border-box.
	if ( ( !support.boxSizingReliable() && isBorderBox ||

		// Support: IE 10 - 11+, Edge 15 - 18+
		// IE/Edge misreport `getComputedStyle` of table rows with width/height
		// set in CSS while `offset*` properties report correct values.
		// Interestingly, in some cases IE 9 doesn't suffer from this issue.
		!support.reliableTrDimensions() && nodeName( elem, "tr" ) ||

		// Fall back to offsetWidth/offsetHeight when value is "auto"
		// This happens for inline elements with no explicit setting (gh-3571)
		val === "auto" ||

		// Support: Android <=4.1 - 4.3 only
		// Also use offsetWidth/offsetHeight for misreported inline dimensions (gh-3602)
		!parseFloat( val ) && jQuery.css( elem, "display", false, styles ) === "inline" ) &&

		// Make sure the element is visible & connected
		elem.getClientRects().length ) {

		isBorderBox = jQuery.css( elem, "boxSizing", false, styles ) === "border-box";

		// Where available, offsetWidth/offsetHeight approximate border box dimensions.
		// Where not available (e.g., SVG), assume unreliable box-sizing and interpret the
		// retrieved value as a content box dimension.
		valueIsBorderBox = offsetProp in elem;
		if ( valueIsBorderBox ) {
			val = elem[ offsetProp ];
		}
	}

	// Normalize "" and auto
	val = parseFloat( val ) || 0;

	// Adjust for the element's box model
	return ( val +
		boxModelAdjustment(
			elem,
			dimension,
			extra || ( isBorderBox ? "border" : "content" ),
			valueIsBorderBox,
			styles,

			// Provide the current computed size to request scroll gutter calculation (gh-3589)
			val
		)
	) + "px";
}

jQuery.extend( {

	// Add in style property hooks for overriding the default
	// behavior of getting and setting a style property
	cssHooks: {
		opacity: {
			get: function( elem, computed ) {
				if ( computed ) {

					// We should always get a number back from opacity
					var ret = curCSS( elem, "opacity" );
					return ret === "" ? "1" : ret;
				}
			}
		}
	},

	// Don't automatically add "px" to these possibly-unitless properties
	cssNumber: {
		animationIterationCount: true,
		aspectRatio: true,
		borderImageSlice: true,
		columnCount: true,
		flexGrow: true,
		flexShrink: true,
		fontWeight: true,
		gridArea: true,
		gridColumn: true,
		gridColumnEnd: true,
		gridColumnStart: true,
		gridRow: true,
		gridRowEnd: true,
		gridRowStart: true,
		lineHeight: true,
		opacity: true,
		order: true,
		orphans: true,
		scale: true,
		widows: true,
		zIndex: true,
		zoom: true,

		// SVG-related
		fillOpacity: true,
		floodOpacity: true,
		stopOpacity: true,
		strokeMiterlimit: true,
		strokeOpacity: true
	},

	// Add in properties whose names you wish to fix before
	// setting or getting the value
	cssProps: {},

	// Get and set the style property on a DOM Node
	style: function( elem, name, value, extra ) {

		// Don't set styles on text and comment nodes
		if ( !elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style ) {
			return;
		}

		// Make sure that we're working with the right name
		var ret, type, hooks,
			origName = camelCase( name ),
			isCustomProp = rcustomProp.test( name ),
			style = elem.style;

		// Make sure that we're working with the right name. We don't
		// want to query the value if it is a CSS custom property
		// since they are user-defined.
		if ( !isCustomProp ) {
			name = finalPropName( origName );
		}

		// Gets hook for the prefixed version, then unprefixed version
		hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];

		// Check if we're setting a value
		if ( value !== undefined ) {
			type = typeof value;

			// Convert "+=" or "-=" to relative numbers (trac-7345)
			if ( type === "string" && ( ret = rcssNum.exec( value ) ) && ret[ 1 ] ) {
				value = adjustCSS( elem, name, ret );

				// Fixes bug trac-9237
				type = "number";
			}

			// Make sure that null and NaN values aren't set (trac-7116)
			if ( value == null || value !== value ) {
				return;
			}

			// If a number was passed in, add the unit (except for certain CSS properties)
			// The isCustomProp check can be removed in jQuery 4.0 when we only auto-append
			// "px" to a few hardcoded values.
			if ( type === "number" && !isCustomProp ) {
				value += ret && ret[ 3 ] || ( jQuery.cssNumber[ origName ] ? "" : "px" );
			}

			// background-* props affect original clone's values
			if ( !support.clearCloneStyle && value === "" && name.indexOf( "background" ) === 0 ) {
				style[ name ] = "inherit";
			}

			// If a hook was provided, use that value, otherwise just set the specified value
			if ( !hooks || !( "set" in hooks ) ||
				( value = hooks.set( elem, value, extra ) ) !== undefined ) {

				if ( isCustomProp ) {
					style.setProperty( name, value );
				} else {
					style[ name ] = value;
				}
			}

		} else {

			// If a hook was provided get the non-computed value from there
			if ( hooks && "get" in hooks &&
				( ret = hooks.get( elem, false, extra ) ) !== undefined ) {

				return ret;
			}

			// Otherwise just get the value from the style object
			return style[ name ];
		}
	},

	css: function( elem, name, extra, styles ) {
		var val, num, hooks,
			origName = camelCase( name ),
			isCustomProp = rcustomProp.test( name );

		// Make sure that we're working with the right name. We don't
		// want to modify the value if it is a CSS custom property
		// since they are user-defined.
		if ( !isCustomProp ) {
			name = finalPropName( origName );
		}

		// Try prefixed name followed by the unprefixed name
		hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];

		// If a hook was provided get the computed value from there
		if ( hooks && "get" in hooks ) {
			val = hooks.get( elem, true, extra );
		}

		// Otherwise, if a way to get the computed value exists, use that
		if ( val === undefined ) {
			val = curCSS( elem, name, styles );
		}

		// Convert "normal" to computed value
		if ( val === "normal" && name in cssNormalTransform ) {
			val = cssNormalTransform[ name ];
		}

		// Make numeric if forced or a qualifier was provided and val looks numeric
		if ( extra === "" || extra ) {
			num = parseFloat( val );
			return extra === true || isFinite( num ) ? num || 0 : val;
		}

		return val;
	}
} );

jQuery.each( [ "height", "width" ], function( _i, dimension ) {
	jQuery.cssHooks[ dimension ] = {
		get: function( elem, computed, extra ) {
			if ( computed ) {

				// Certain elements can have dimension info if we invisibly show them
				// but it must have a current display style that would benefit
				return rdisplayswap.test( jQuery.css( elem, "display" ) ) &&

					// Support: Safari 8+
					// Table columns in Safari have non-zero offsetWidth & zero
					// getBoundingClientRect().width unless display is changed.
					// Support: IE <=11 only
					// Running getBoundingClientRect on a disconnected node
					// in IE throws an error.
					( !elem.getClientRects().length || !elem.getBoundingClientRect().width ) ?
					swap( elem, cssShow, function() {
						return getWidthOrHeight( elem, dimension, extra );
					} ) :
					getWidthOrHeight( elem, dimension, extra );
			}
		},

		set: function( elem, value, extra ) {
			var matches,
				styles = getStyles( elem ),

				// Only read styles.position if the test has a chance to fail
				// to avoid forcing a reflow.
				scrollboxSizeBuggy = !support.scrollboxSize() &&
					styles.position === "absolute",

				// To avoid forcing a reflow, only fetch boxSizing if we need it (gh-3991)
				boxSizingNeeded = scrollboxSizeBuggy || extra,
				isBorderBox = boxSizingNeeded &&
					jQuery.css( elem, "boxSizing", false, styles ) === "border-box",
				subtract = extra ?
					boxModelAdjustment(
						elem,
						dimension,
						extra,
						isBorderBox,
						styles
					) :
					0;

			// Account for unreliable border-box dimensions by comparing offset* to computed and
			// faking a content-box to get border and padding (gh-3699)
			if ( isBorderBox && scrollboxSizeBuggy ) {
				subtract -= Math.ceil(
					elem[ "offset" + dimension[ 0 ].toUpperCase() + dimension.slice( 1 ) ] -
					parseFloat( styles[ dimension ] ) -
					boxModelAdjustment( elem, dimension, "border", false, styles ) -
					0.5
				);
			}

			// Convert to pixels if value adjustment is needed
			if ( subtract && ( matches = rcssNum.exec( value ) ) &&
				( matches[ 3 ] || "px" ) !== "px" ) {

				elem.style[ dimension ] = value;
				value = jQuery.css( elem, dimension );
			}

			return setPositiveNumber( elem, value, subtract );
		}
	};
} );

jQuery.cssHooks.marginLeft = addGetHookIf( support.reliableMarginLeft,
	function( elem, computed ) {
		if ( computed ) {
			return ( parseFloat( curCSS( elem, "marginLeft" ) ) ||
				elem.getBoundingClientRect().left -
					swap( elem, { marginLeft: 0 }, function() {
						return elem.getBoundingClientRect().left;
					} )
			) + "px";
		}
	}
);

// These hooks are used by animate to expand properties
jQuery.each( {
	margin: "",
	padding: "",
	border: "Width"
}, function( prefix, suffix ) {
	jQuery.cssHooks[ prefix + suffix ] = {
		expand: function( value ) {
			var i = 0,
				expanded = {},

				// Assumes a single number if not a string
				parts = typeof value === "string" ? value.split( " " ) : [ value ];

			for ( ; i < 4; i++ ) {
				expanded[ prefix + cssExpand[ i ] + suffix ] =
					parts[ i ] || parts[ i - 2 ] || parts[ 0 ];
			}

			return expanded;
		}
	};

	if ( prefix !== "margin" ) {
		jQuery.cssHooks[ prefix + suffix ].set = setPositiveNumber;
	}
} );

jQuery.fn.extend( {
	css: function( name, value ) {
		return access( this, function( elem, name, value ) {
			var styles, len,
				map = {},
				i = 0;

			if ( Array.isArray( name ) ) {
				styles = getStyles( elem );
				len = name.length;

				for ( ; i < len; i++ ) {
					map[ name[ i ] ] = jQuery.css( elem, name[ i ], false, styles );
				}

				return map;
			}

			return value !== undefined ?
				jQuery.style( elem, name, value ) :
				jQuery.css( elem, name );
		}, name, value, arguments.length > 1 );
	}
} );


function Tween( elem, options, prop, end, easing ) {
	return new Tween.prototype.init( elem, options, prop, end, easing );
}
jQuery.Tween = Tween;

Tween.prototype = {
	constructor: Tween,
	init: function( elem, options, prop, end, easing, unit ) {
		this.elem = elem;
		this.prop = prop;
		this.easing = easing || jQuery.easing._default;
		this.options = options;
		this.start = this.now = this.cur();
		this.end = end;
		this.unit = unit || ( jQuery.cssNumber[ prop ] ? "" : "px" );
	},
	cur: function() {
		var hooks = Tween.propHooks[ this.prop ];

		return hooks && hooks.get ?
			hooks.get( this ) :
			Tween.propHooks._default.get( this );
	},
	run: function( percent ) {
		var eased,
			hooks = Tween.propHooks[ this.prop ];

		if ( this.options.duration ) {
			this.pos = eased = jQuery.easing[ this.easing ](
				percent, this.options.duration * percent, 0, 1, this.options.duration
			);
		} else {
			this.pos = eased = percent;
		}
		this.now = ( this.end - this.start ) * eased + this.start;

		if ( this.options.step ) {
			this.options.step.call( this.elem, this.now, this );
		}

		if ( hooks && hooks.set ) {
			hooks.set( this );
		} else {
			Tween.propHooks._default.set( this );
		}
		return this;
	}
};

Tween.prototype.init.prototype = Tween.prototype;

Tween.propHooks = {
	_default: {
		get: function( tween ) {
			var result;

			// Use a property on the element directly when it is not a DOM element,
			// or when there is no matching style property that exists.
			if ( tween.elem.nodeType !== 1 ||
				tween.elem[ tween.prop ] != null && tween.elem.style[ tween.prop ] == null ) {
				return tween.elem[ tween.prop ];
			}

			// Passing an empty string as a 3rd parameter to .css will automatically
			// attempt a parseFloat and fallback to a string if the parse fails.
			// Simple values such as "10px" are parsed to Float;
			// complex values such as "rotate(1rad)" are returned as-is.
			result = jQuery.css( tween.elem, tween.prop, "" );

			// Empty strings, null, undefined and "auto" are converted to 0.
			return !result || result === "auto" ? 0 : result;
		},
		set: function( tween ) {

			// Use step hook for back compat.
			// Use cssHook if its there.
			// Use .style if available and use plain properties where available.
			if ( jQuery.fx.step[ tween.prop ] ) {
				jQuery.fx.step[ tween.prop ]( tween );
			} else if ( tween.elem.nodeType === 1 && (
				jQuery.cssHooks[ tween.prop ] ||
					tween.elem.style[ finalPropName( tween.prop ) ] != null ) ) {
				jQuery.style( tween.elem, tween.prop, tween.now + tween.unit );
			} else {
				tween.elem[ tween.prop ] = tween.now;
			}
		}
	}
};

// Support: IE <=9 only
// Panic based approach to setting things on disconnected nodes
Tween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {
	set: function( tween ) {
		if ( tween.elem.nodeType && tween.elem.parentNode ) {
			tween.elem[ tween.prop ] = tween.now;
		}
	}
};

jQuery.easing = {
	linear: function( p ) {
		return p;
	},
	swing: function( p ) {
		return 0.5 - Math.cos( p * Math.PI ) / 2;
	},
	_default: "swing"
};

jQuery.fx = Tween.prototype.init;

// Back compat <1.8 extension point
jQuery.fx.step = {};




var
	fxNow, inProgress,
	rfxtypes = /^(?:toggle|show|hide)$/,
	rrun = /queueHooks$/;

function schedule() {
	if ( inProgress ) {
		if ( document.hidden === false && window.requestAnimationFrame ) {
			window.requestAnimationFrame( schedule );
		} else {
			window.setTimeout( schedule, jQuery.fx.interval );
		}

		jQuery.fx.tick();
	}
}

// Animations created synchronously will run synchronously
function createFxNow() {
	window.setTimeout( function() {
		fxNow = undefined;
	} );
	return ( fxNow = Date.now() );
}

// Generate parameters to create a standard animation
function genFx( type, includeWidth ) {
	var which,
		i = 0,
		attrs = { height: type };

	// If we include width, step value is 1 to do all cssExpand values,
	// otherwise step value is 2 to skip over Left and Right
	includeWidth = includeWidth ? 1 : 0;
	for ( ; i < 4; i += 2 - includeWidth ) {
		which = cssExpand[ i ];
		attrs[ "margin" + which ] = attrs[ "padding" + which ] = type;
	}

	if ( includeWidth ) {
		attrs.opacity = attrs.width = type;
	}

	return attrs;
}

function createTween( value, prop, animation ) {
	var tween,
		collection = ( Animation.tweeners[ prop ] || [] ).concat( Animation.tweeners[ "*" ] ),
		index = 0,
		length = collection.length;
	for ( ; index < length; index++ ) {
		if ( ( tween = collection[ index ].call( animation, prop, value ) ) ) {

			// We're done with this property
			return tween;
		}
	}
}

function defaultPrefilter( elem, props, opts ) {
	var prop, value, toggle, hooks, oldfire, propTween, restoreDisplay, display,
		isBox = "width" in props || "height" in props,
		anim = this,
		orig = {},
		style = elem.style,
		hidden = elem.nodeType && isHiddenWithinTree( elem ),
		dataShow = dataPriv.get( elem, "fxshow" );

	// Queue-skipping animations hijack the fx hooks
	if ( !opts.queue ) {
		hooks = jQuery._queueHooks( elem, "fx" );
		if ( hooks.unqueued == null ) {
			hooks.unqueued = 0;
			oldfire = hooks.empty.fire;
			hooks.empty.fire = function() {
				if ( !hooks.unqueued ) {
					oldfire();
				}
			};
		}
		hooks.unqueued++;

		anim.always( function() {

			// Ensure the complete handler is called before this completes
			anim.always( function() {
				hooks.unqueued--;
				if ( !jQuery.queue( elem, "fx" ).length ) {
					hooks.empty.fire();
				}
			} );
		} );
	}

	// Detect show/hide animations
	for ( prop in props ) {
		value = props[ prop ];
		if ( rfxtypes.test( value ) ) {
			delete props[ prop ];
			toggle = toggle || value === "toggle";
			if ( value === ( hidden ? "hide" : "show" ) ) {

				// Pretend to be hidden if this is a "show" and
				// there is still data from a stopped show/hide
				if ( value === "show" && dataShow && dataShow[ prop ] !== undefined ) {
					hidden = true;

				// Ignore all other no-op show/hide data
				} else {
					continue;
				}
			}
			orig[ prop ] = dataShow && dataShow[ prop ] || jQuery.style( elem, prop );
		}
	}

	// Bail out if this is a no-op like .hide().hide()
	propTween = !jQuery.isEmptyObject( props );
	if ( !propTween && jQuery.isEmptyObject( orig ) ) {
		return;
	}

	// Restrict "overflow" and "display" styles during box animations
	if ( isBox && elem.nodeType === 1 ) {

		// Support: IE <=9 - 11, Edge 12 - 15
		// Record all 3 overflow attributes because IE does not infer the shorthand
		// from identically-valued overflowX and overflowY and Edge just mirrors
		// the overflowX value there.
		opts.overflow = [ style.overflow, style.overflowX, style.overflowY ];

		// Identify a display type, preferring old show/hide data over the CSS cascade
		restoreDisplay = dataShow && dataShow.display;
		if ( restoreDisplay == null ) {
			restoreDisplay = dataPriv.get( elem, "display" );
		}
		display = jQuery.css( elem, "display" );
		if ( display === "none" ) {
			if ( restoreDisplay ) {
				display = restoreDisplay;
			} else {

				// Get nonempty value(s) by temporarily forcing visibility
				showHide( [ elem ], true );
				restoreDisplay = elem.style.display || restoreDisplay;
				display = jQuery.css( elem, "display" );
				showHide( [ elem ] );
			}
		}

		// Animate inline elements as inline-block
		if ( display === "inline" || display === "inline-block" && restoreDisplay != null ) {
			if ( jQuery.css( elem, "float" ) === "none" ) {

				// Restore the original display value at the end of pure show/hide animations
				if ( !propTween ) {
					anim.done( function() {
						style.display = restoreDisplay;
					} );
					if ( restoreDisplay == null ) {
						display = style.display;
						restoreDisplay = display === "none" ? "" : display;
					}
				}
				style.display = "inline-block";
			}
		}
	}

	if ( opts.overflow ) {
		style.overflow = "hidden";
		anim.always( function() {
			style.overflow = opts.overflow[ 0 ];
			style.overflowX = opts.overflow[ 1 ];
			style.overflowY = opts.overflow[ 2 ];
		} );
	}

	// Implement show/hide animations
	propTween = false;
	for ( prop in orig ) {

		// General show/hide setup for this element animation
		if ( !propTween ) {
			if ( dataShow ) {
				if ( "hidden" in dataShow ) {
					hidden = dataShow.hidden;
				}
			} else {
				dataShow = dataPriv.access( elem, "fxshow", { display: restoreDisplay } );
			}

			// Store hidden/visible for toggle so `.stop().toggle()` "reverses"
			if ( toggle ) {
				dataShow.hidden = !hidden;
			}

			// Show elements before animating them
			if ( hidden ) {
				showHide( [ elem ], true );
			}

			/* eslint-disable no-loop-func */

			anim.done( function() {

				/* eslint-enable no-loop-func */

				// The final step of a "hide" animation is actually hiding the element
				if ( !hidden ) {
					showHide( [ elem ] );
				}
				dataPriv.remove( elem, "fxshow" );
				for ( prop in orig ) {
					jQuery.style( elem, prop, orig[ prop ] );
				}
			} );
		}

		// Per-property setup
		propTween = createTween( hidden ? dataShow[ prop ] : 0, prop, anim );
		if ( !( prop in dataShow ) ) {
			dataShow[ prop ] = propTween.start;
			if ( hidden ) {
				propTween.end = propTween.start;
				propTween.start = 0;
			}
		}
	}
}

function propFilter( props, specialEasing ) {
	var index, name, easing, value, hooks;

	// camelCase, specialEasing and expand cssHook pass
	for ( index in props ) {
		name = camelCase( index );
		easing = specialEasing[ name ];
		value = props[ index ];
		if ( Array.isArray( value ) ) {
			easing = value[ 1 ];
			value = props[ index ] = value[ 0 ];
		}

		if ( index !== name ) {
			props[ name ] = value;
			delete props[ index ];
		}

		hooks = jQuery.cssHooks[ name ];
		if ( hooks && "expand" in hooks ) {
			value = hooks.expand( value );
			delete props[ name ];

			// Not quite $.extend, this won't overwrite existing keys.
			// Reusing 'index' because we have the correct "name"
			for ( index in value ) {
				if ( !( index in props ) ) {
					props[ index ] = value[ index ];
					specialEasing[ index ] = easing;
				}
			}
		} else {
			specialEasing[ name ] = easing;
		}
	}
}

function Animation( elem, properties, options ) {
	var result,
		stopped,
		index = 0,
		length = Animation.prefilters.length,
		deferred = jQuery.Deferred().always( function() {

			// Don't match elem in the :animated selector
			delete tick.elem;
		} ),
		tick = function() {
			if ( stopped ) {
				return false;
			}
			var currentTime = fxNow || createFxNow(),
				remaining = Math.max( 0, animation.startTime + animation.duration - currentTime ),

				// Support: Android 2.3 only
				// Archaic crash bug won't allow us to use `1 - ( 0.5 || 0 )` (trac-12497)
				temp = remaining / animation.duration || 0,
				percent = 1 - temp,
				index = 0,
				length = animation.tweens.length;

			for ( ; index < length; index++ ) {
				animation.tweens[ index ].run( percent );
			}

			deferred.notifyWith( elem, [ animation, percent, remaining ] );

			// If there's more to do, yield
			if ( percent < 1 && length ) {
				return remaining;
			}

			// If this was an empty animation, synthesize a final progress notification
			if ( !length ) {
				deferred.notifyWith( elem, [ animation, 1, 0 ] );
			}

			// Resolve the animation and report its conclusion
			deferred.resolveWith( elem, [ animation ] );
			return false;
		},
		animation = deferred.promise( {
			elem: elem,
			props: jQuery.extend( {}, properties ),
			opts: jQuery.extend( true, {
				specialEasing: {},
				easing: jQuery.easing._default
			}, options ),
			originalProperties: properties,
			originalOptions: options,
			startTime: fxNow || createFxNow(),
			duration: options.duration,
			tweens: [],
			createTween: function( prop, end ) {
				var tween = jQuery.Tween( elem, animation.opts, prop, end,
					animation.opts.specialEasing[ prop ] || animation.opts.easing );
				animation.tweens.push( tween );
				return tween;
			},
			stop: function( gotoEnd ) {
				var index = 0,

					// If we are going to the end, we want to run all the tweens
					// otherwise we skip this part
					length = gotoEnd ? animation.tweens.length : 0;
				if ( stopped ) {
					return this;
				}
				stopped = true;
				for ( ; index < length; index++ ) {
					animation.tweens[ index ].run( 1 );
				}

				// Resolve when we played the last frame; otherwise, reject
				if ( gotoEnd ) {
					deferred.notifyWith( elem, [ animation, 1, 0 ] );
					deferred.resolveWith( elem, [ animation, gotoEnd ] );
				} else {
					deferred.rejectWith( elem, [ animation, gotoEnd ] );
				}
				return this;
			}
		} ),
		props = animation.props;

	propFilter( props, animation.opts.specialEasing );

	for ( ; index < length; index++ ) {
		result = Animation.prefilters[ index ].call( animation, elem, props, animation.opts );
		if ( result ) {
			if ( isFunction( result.stop ) ) {
				jQuery._queueHooks( animation.elem, animation.opts.queue ).stop =
					result.stop.bind( result );
			}
			return result;
		}
	}

	jQuery.map( props, createTween, animation );

	if ( isFunction( animation.opts.start ) ) {
		animation.opts.start.call( elem, animation );
	}

	// Attach callbacks from options
	animation
		.progress( animation.opts.progress )
		.done( animation.opts.done, animation.opts.complete )
		.fail( animation.opts.fail )
		.always( animation.opts.always );

	jQuery.fx.timer(
		jQuery.extend( tick, {
			elem: elem,
			anim: animation,
			queue: animation.opts.queue
		} )
	);

	return animation;
}

jQuery.Animation = jQuery.extend( Animation, {

	tweeners: {
		"*": [ function( prop, value ) {
			var tween = this.createTween( prop, value );
			adjustCSS( tween.elem, prop, rcssNum.exec( value ), tween );
			return tween;
		} ]
	},

	tweener: function( props, callback ) {
		if ( isFunction( props ) ) {
			callback = props;
			props = [ "*" ];
		} else {
			props = props.match( rnothtmlwhite );
		}

		var prop,
			index = 0,
			length = props.length;

		for ( ; index < length; index++ ) {
			prop = props[ index ];
			Animation.tweeners[ prop ] = Animation.tweeners[ prop ] || [];
			Animation.tweeners[ prop ].unshift( callback );
		}
	},

	prefilters: [ defaultPrefilter ],

	prefilter: function( callback, prepend ) {
		if ( prepend ) {
			Animation.prefilters.unshift( callback );
		} else {
			Animation.prefilters.push( callback );
		}
	}
} );

jQuery.speed = function( speed, easing, fn ) {
	var opt = speed && typeof speed === "object" ? jQuery.extend( {}, speed ) : {
		complete: fn || !fn && easing ||
			isFunction( speed ) && speed,
		duration: speed,
		easing: fn && easing || easing && !isFunction( easing ) && easing
	};

	// Go to the end state if fx are off
	if ( jQuery.fx.off ) {
		opt.duration = 0;

	} else {
		if ( typeof opt.duration !== "number" ) {
			if ( opt.duration in jQuery.fx.speeds ) {
				opt.duration = jQuery.fx.speeds[ opt.duration ];

			} else {
				opt.duration = jQuery.fx.speeds._default;
			}
		}
	}

	// Normalize opt.queue - true/undefined/null -> "fx"
	if ( opt.queue == null || opt.queue === true ) {
		opt.queue = "fx";
	}

	// Queueing
	opt.old = opt.complete;

	opt.complete = function() {
		if ( isFunction( opt.old ) ) {
			opt.old.call( this );
		}

		if ( opt.queue ) {
			jQuery.dequeue( this, opt.queue );
		}
	};

	return opt;
};

jQuery.fn.extend( {
	fadeTo: function( speed, to, easing, callback ) {

		// Show any hidden elements after setting opacity to 0
		return this.filter( isHiddenWithinTree ).css( "opacity", 0 ).show()

			// Animate to the value specified
			.end().animate( { opacity: to }, speed, easing, callback );
	},
	animate: function( prop, speed, easing, callback ) {
		var empty = jQuery.isEmptyObject( prop ),
			optall = jQuery.speed( speed, easing, callback ),
			doAnimation = function() {

				// Operate on a copy of prop so per-property easing won't be lost
				var anim = Animation( this, jQuery.extend( {}, prop ), optall );

				// Empty animations, or finishing resolves immediately
				if ( empty || dataPriv.get( this, "finish" ) ) {
					anim.stop( true );
				}
			};

		doAnimation.finish = doAnimation;

		return empty || optall.queue === false ?
			this.each( doAnimation ) :
			this.queue( optall.queue, doAnimation );
	},
	stop: function( type, clearQueue, gotoEnd ) {
		var stopQueue = function( hooks ) {
			var stop = hooks.stop;
			delete hooks.stop;
			stop( gotoEnd );
		};

		if ( typeof type !== "string" ) {
			gotoEnd = clearQueue;
			clearQueue = type;
			type = undefined;
		}
		if ( clearQueue ) {
			this.queue( type || "fx", [] );
		}

		return this.each( function() {
			var dequeue = true,
				index = type != null && type + "queueHooks",
				timers = jQuery.timers,
				data = dataPriv.get( this );

			if ( index ) {
				if ( data[ index ] && data[ index ].stop ) {
					stopQueue( data[ index ] );
				}
			} else {
				for ( index in data ) {
					if ( data[ index ] && data[ index ].stop && rrun.test( index ) ) {
						stopQueue( data[ index ] );
					}
				}
			}

			for ( index = timers.length; index--; ) {
				if ( timers[ index ].elem === this &&
					( type == null || timers[ index ].queue === type ) ) {

					timers[ index ].anim.stop( gotoEnd );
					dequeue = false;
					timers.splice( index, 1 );
				}
			}

			// Start the next in the queue if the last step wasn't forced.
			// Timers currently will call their complete callbacks, which
			// will dequeue but only if they were gotoEnd.
			if ( dequeue || !gotoEnd ) {
				jQuery.dequeue( this, type );
			}
		} );
	},
	finish: function( type ) {
		if ( type !== false ) {
			type = type || "fx";
		}
		return this.each( function() {
			var index,
				data = dataPriv.get( this ),
				queue = data[ type + "queue" ],
				hooks = data[ type + "queueHooks" ],
				timers = jQuery.timers,
				length = queue ? queue.length : 0;

			// Enable finishing flag on private data
			data.finish = true;

			// Empty the queue first
			jQuery.queue( this, type, [] );

			if ( hooks && hooks.stop ) {
				hooks.stop.call( this, true );
			}

			// Look for any active animations, and finish them
			for ( index = timers.length; index--; ) {
				if ( timers[ index ].elem === this && timers[ index ].queue === type ) {
					timers[ index ].anim.stop( true );
					timers.splice( index, 1 );
				}
			}

			// Look for any animations in the old queue and finish them
			for ( index = 0; index < length; index++ ) {
				if ( queue[ index ] && queue[ index ].finish ) {
					queue[ index ].finish.call( this );
				}
			}

			// Turn off finishing flag
			delete data.finish;
		} );
	}
} );

jQuery.each( [ "toggle", "show", "hide" ], function( _i, name ) {
	var cssFn = jQuery.fn[ name ];
	jQuery.fn[ name ] = function( speed, easing, callback ) {
		return speed == null || typeof speed === "boolean" ?
			cssFn.apply( this, arguments ) :
			this.animate( genFx( name, true ), speed, easing, callback );
	};
} );

// Generate shortcuts for custom animations
jQuery.each( {
	slideDown: genFx( "show" ),
	slideUp: genFx( "hide" ),
	slideToggle: genFx( "toggle" ),
	fadeIn: { opacity: "show" },
	fadeOut: { opacity: "hide" },
	fadeToggle: { opacity: "toggle" }
}, function( name, props ) {
	jQuery.fn[ name ] = function( speed, easing, callback ) {
		return this.animate( props, speed, easing, callback );
	};
} );

jQuery.timers = [];
jQuery.fx.tick = function() {
	var timer,
		i = 0,
		timers = jQuery.timers;

	fxNow = Date.now();

	for ( ; i < timers.length; i++ ) {
		timer = timers[ i ];

		// Run the timer and safely remove it when done (allowing for external removal)
		if ( !timer() && timers[ i ] === timer ) {
			timers.splice( i--, 1 );
		}
	}

	if ( !timers.length ) {
		jQuery.fx.stop();
	}
	fxNow = undefined;
};

jQuery.fx.timer = function( timer ) {
	jQuery.timers.push( timer );
	jQuery.fx.start();
};

jQuery.fx.interval = 13;
jQuery.fx.start = function() {
	if ( inProgress ) {
		return;
	}

	inProgress = true;
	schedule();
};

jQuery.fx.stop = function() {
	inProgress = null;
};

jQuery.fx.speeds = {
	slow: 600,
	fast: 200,

	// Default speed
	_default: 400
};


// Based off of the plugin by Clint Helfers, with permission.
jQuery.fn.delay = function( time, type ) {
	time = jQuery.fx ? jQuery.fx.speeds[ time ] || time : time;
	type = type || "fx";

	return this.queue( type, function( next, hooks ) {
		var timeout = window.setTimeout( next, time );
		hooks.stop = function() {
			window.clearTimeout( timeout );
		};
	} );
};


( function() {
	var input = document.createElement( "input" ),
		select = document.createElement( "select" ),
		opt = select.appendChild( document.createElement( "option" ) );

	input.type = "checkbox";

	// Support: Android <=4.3 only
	// Default value for a checkbox should be "on"
	support.checkOn = input.value !== "";

	// Support: IE <=11 only
	// Must access selectedIndex to make default options select
	support.optSelected = opt.selected;

	// Support: IE <=11 only
	// An input loses its value after becoming a radio
	input = document.createElement( "input" );
	input.value = "t";
	input.type = "radio";
	support.radioValue = input.value === "t";
} )();


var boolHook,
	attrHandle = jQuery.expr.attrHandle;

jQuery.fn.extend( {
	attr: function( name, value ) {
		return access( this, jQuery.attr, name, value, arguments.length > 1 );
	},

	removeAttr: function( name ) {
		return this.each( function() {
			jQuery.removeAttr( this, name );
		} );
	}
} );

jQuery.extend( {
	attr: function( elem, name, value ) {
		var ret, hooks,
			nType = elem.nodeType;

		// Don't get/set attributes on text, comment and attribute nodes
		if ( nType === 3 || nType === 8 || nType === 2 ) {
			return;
		}

		// Fallback to prop when attributes are not supported
		if ( typeof elem.getAttribute === "undefined" ) {
			return jQuery.prop( elem, name, value );
		}

		// Attribute hooks are determined by the lowercase version
		// Grab necessary hook if one is defined
		if ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {
			hooks = jQuery.attrHooks[ name.toLowerCase() ] ||
				( jQuery.expr.match.bool.test( name ) ? boolHook : undefined );
		}

		if ( value !== undefined ) {
			if ( value === null ) {
				jQuery.removeAttr( elem, name );
				return;
			}

			if ( hooks && "set" in hooks &&
				( ret = hooks.set( elem, value, name ) ) !== undefined ) {
				return ret;
			}

			elem.setAttribute( name, value + "" );
			return value;
		}

		if ( hooks && "get" in hooks && ( ret = hooks.get( elem, name ) ) !== null ) {
			return ret;
		}

		ret = jQuery.find.attr( elem, name );

		// Non-existent attributes return null, we normalize to undefined
		return ret == null ? undefined : ret;
	},

	attrHooks: {
		type: {
			set: function( elem, value ) {
				if ( !support.radioValue && value === "radio" &&
					nodeName( elem, "input" ) ) {
					var val = elem.value;
					elem.setAttribute( "type", value );
					if ( val ) {
						elem.value = val;
					}
					return value;
				}
			}
		}
	},

	removeAttr: function( elem, value ) {
		var name,
			i = 0,

			// Attribute names can contain non-HTML whitespace characters
			// https://html.spec.whatwg.org/multipage/syntax.html#attributes-2
			attrNames = value && value.match( rnothtmlwhite );

		if ( attrNames && elem.nodeType === 1 ) {
			while ( ( name = attrNames[ i++ ] ) ) {
				elem.removeAttribute( name );
			}
		}
	}
} );

// Hooks for boolean attributes
boolHook = {
	set: function( elem, value, name ) {
		if ( value === false ) {

			// Remove boolean attributes when set to false
			jQuery.removeAttr( elem, name );
		} else {
			elem.setAttribute( name, name );
		}
		return name;
	}
};

jQuery.each( jQuery.expr.match.bool.source.match( /\w+/g ), function( _i, name ) {
	var getter = attrHandle[ name ] || jQuery.find.attr;

	attrHandle[ name ] = function( elem, name, isXML ) {
		var ret, handle,
			lowercaseName = name.toLowerCase();

		if ( !isXML ) {

			// Avoid an infinite loop by temporarily removing this function from the getter
			handle = attrHandle[ lowercaseName ];
			attrHandle[ lowercaseName ] = ret;
			ret = getter( elem, name, isXML ) != null ?
				lowercaseName :
				null;
			attrHandle[ lowercaseName ] = handle;
		}
		return ret;
	};
} );




var rfocusable = /^(?:input|select|textarea|button)$/i,
	rclickable = /^(?:a|area)$/i;

jQuery.fn.extend( {
	prop: function( name, value ) {
		return access( this, jQuery.prop, name, value, arguments.length > 1 );
	},

	removeProp: function( name ) {
		return this.each( function() {
			delete this[ jQuery.propFix[ name ] || name ];
		} );
	}
} );

jQuery.extend( {
	prop: function( elem, name, value ) {
		var ret, hooks,
			nType = elem.nodeType;

		// Don't get/set properties on text, comment and attribute nodes
		if ( nType === 3 || nType === 8 || nType === 2 ) {
			return;
		}

		if ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {

			// Fix name and attach hooks
			name = jQuery.propFix[ name ] || name;
			hooks = jQuery.propHooks[ name ];
		}

		if ( value !== undefined ) {
			if ( hooks && "set" in hooks &&
				( ret = hooks.set( elem, value, name ) ) !== undefined ) {
				return ret;
			}

			return ( elem[ name ] = value );
		}

		if ( hooks && "get" in hooks && ( ret = hooks.get( elem, name ) ) !== null ) {
			return ret;
		}

		return elem[ name ];
	},

	propHooks: {
		tabIndex: {
			get: function( elem ) {

				// Support: IE <=9 - 11 only
				// elem.tabIndex doesn't always return the
				// correct value when it hasn't been explicitly set
				// Use proper attribute retrieval (trac-12072)
				var tabindex = jQuery.find.attr( elem, "tabindex" );

				if ( tabindex ) {
					return parseInt( tabindex, 10 );
				}

				if (
					rfocusable.test( elem.nodeName ) ||
					rclickable.test( elem.nodeName ) &&
					elem.href
				) {
					return 0;
				}

				return -1;
			}
		}
	},

	propFix: {
		"for": "htmlFor",
		"class": "className"
	}
} );

// Support: IE <=11 only
// Accessing the selectedIndex property
// forces the browser to respect setting selected
// on the option
// The getter ensures a default option is selected
// when in an optgroup
// eslint rule "no-unused-expressions" is disabled for this code
// since it considers such accessions noop
if ( !support.optSelected ) {
	jQuery.propHooks.selected = {
		get: function( elem ) {

			/* eslint no-unused-expressions: "off" */

			var parent = elem.parentNode;
			if ( parent && parent.parentNode ) {
				parent.parentNode.selectedIndex;
			}
			return null;
		},
		set: function( elem ) {

			/* eslint no-unused-expressions: "off" */

			var parent = elem.parentNode;
			if ( parent ) {
				parent.selectedIndex;

				if ( parent.parentNode ) {
					parent.parentNode.selectedIndex;
				}
			}
		}
	};
}

jQuery.each( [
	"tabIndex",
	"readOnly",
	"maxLength",
	"cellSpacing",
	"cellPadding",
	"rowSpan",
	"colSpan",
	"useMap",
	"frameBorder",
	"contentEditable"
], function() {
	jQuery.propFix[ this.toLowerCase() ] = this;
} );




	// Strip and collapse whitespace according to HTML spec
	// https://infra.spec.whatwg.org/#strip-and-collapse-ascii-whitespace
	function stripAndCollapse( value ) {
		var tokens = value.match( rnothtmlwhite ) || [];
		return tokens.join( " " );
	}


function getClass( elem ) {
	return elem.getAttribute && elem.getAttribute( "class" ) || "";
}

function classesToArray( value ) {
	if ( Array.isArray( value ) ) {
		return value;
	}
	if ( typeof value === "string" ) {
		return value.match( rnothtmlwhite ) || [];
	}
	return [];
}

jQuery.fn.extend( {
	addClass: function( value ) {
		var classNames, cur, curValue, className, i, finalValue;

		if ( isFunction( value ) ) {
			return this.each( function( j ) {
				jQuery( this ).addClass( value.call( this, j, getClass( this ) ) );
			} );
		}

		classNames = classesToArray( value );

		if ( classNames.length ) {
			return this.each( function() {
				curValue = getClass( this );
				cur = this.nodeType === 1 && ( " " + stripAndCollapse( curValue ) + " " );

				if ( cur ) {
					for ( i = 0; i < classNames.length; i++ ) {
						className = classNames[ i ];
						if ( cur.indexOf( " " + className + " " ) < 0 ) {
							cur += className + " ";
						}
					}

					// Only assign if different to avoid unneeded rendering.
					finalValue = stripAndCollapse( cur );
					if ( curValue !== finalValue ) {
						this.setAttribute( "class", finalValue );
					}
				}
			} );
		}

		return this;
	},

	removeClass: function( value ) {
		var classNames, cur, curValue, className, i, finalValue;

		if ( isFunction( value ) ) {
			return this.each( function( j ) {
				jQuery( this ).removeClass( value.call( this, j, getClass( this ) ) );
			} );
		}

		if ( !arguments.length ) {
			return this.attr( "class", "" );
		}

		classNames = classesToArray( value );

		if ( classNames.length ) {
			return this.each( function() {
				curValue = getClass( this );

				// This expression is here for better compressibility (see addClass)
				cur = this.nodeType === 1 && ( " " + stripAndCollapse( curValue ) + " " );

				if ( cur ) {
					for ( i = 0; i < classNames.length; i++ ) {
						className = classNames[ i ];

						// Remove *all* instances
						while ( cur.indexOf( " " + className + " " ) > -1 ) {
							cur = cur.replace( " " + className + " ", " " );
						}
					}

					// Only assign if different to avoid unneeded rendering.
					finalValue = stripAndCollapse( cur );
					if ( curValue !== finalValue ) {
						this.setAttribute( "class", finalValue );
					}
				}
			} );
		}

		return this;
	},

	toggleClass: function( value, stateVal ) {
		var classNames, className, i, self,
			type = typeof value,
			isValidValue = type === "string" || Array.isArray( value );

		if ( isFunction( value ) ) {
			return this.each( function( i ) {
				jQuery( this ).toggleClass(
					value.call( this, i, getClass( this ), stateVal ),
					stateVal
				);
			} );
		}

		if ( typeof stateVal === "boolean" && isValidValue ) {
			return stateVal ? this.addClass( value ) : this.removeClass( value );
		}

		classNames = classesToArray( value );

		return this.each( function() {
			if ( isValidValue ) {

				// Toggle individual class names
				self = jQuery( this );

				for ( i = 0; i < classNames.length; i++ ) {
					className = classNames[ i ];

					// Check each className given, space separated list
					if ( self.hasClass( className ) ) {
						self.removeClass( className );
					} else {
						self.addClass( className );
					}
				}

			// Toggle whole class name
			} else if ( value === undefined || type === "boolean" ) {
				className = getClass( this );
				if ( className ) {

					// Store className if set
					dataPriv.set( this, "__className__", className );
				}

				// If the element has a class name or if we're passed `false`,
				// then remove the whole classname (if there was one, the above saved it).
				// Otherwise bring back whatever was previously saved (if anything),
				// falling back to the empty string if nothing was stored.
				if ( this.setAttribute ) {
					this.setAttribute( "class",
						className || value === false ?
							"" :
							dataPriv.get( this, "__className__" ) || ""
					);
				}
			}
		} );
	},

	hasClass: function( selector ) {
		var className, elem,
			i = 0;

		className = " " + selector + " ";
		while ( ( elem = this[ i++ ] ) ) {
			if ( elem.nodeType === 1 &&
				( " " + stripAndCollapse( getClass( elem ) ) + " " ).indexOf( className ) > -1 ) {
				return true;
			}
		}

		return false;
	}
} );




var rreturn = /\r/g;

jQuery.fn.extend( {
	val: function( value ) {
		var hooks, ret, valueIsFunction,
			elem = this[ 0 ];

		if ( !arguments.length ) {
			if ( elem ) {
				hooks = jQuery.valHooks[ elem.type ] ||
					jQuery.valHooks[ elem.nodeName.toLowerCase() ];

				if ( hooks &&
					"get" in hooks &&
					( ret = hooks.get( elem, "value" ) ) !== undefined
				) {
					return ret;
				}

				ret = elem.value;

				// Handle most common string cases
				if ( typeof ret === "string" ) {
					return ret.replace( rreturn, "" );
				}

				// Handle cases where value is null/undef or number
				return ret == null ? "" : ret;
			}

			return;
		}

		valueIsFunction = isFunction( value );

		return this.each( function( i ) {
			var val;

			if ( this.nodeType !== 1 ) {
				return;
			}

			if ( valueIsFunction ) {
				val = value.call( this, i, jQuery( this ).val() );
			} else {
				val = value;
			}

			// Treat null/undefined as ""; convert numbers to string
			if ( val == null ) {
				val = "";

			} else if ( typeof val === "number" ) {
				val += "";

			} else if ( Array.isArray( val ) ) {
				val = jQuery.map( val, function( value ) {
					return value == null ? "" : value + "";
				} );
			}

			hooks = jQuery.valHooks[ this.type ] || jQuery.valHooks[ this.nodeName.toLowerCase() ];

			// If set returns undefined, fall back to normal setting
			if ( !hooks || !( "set" in hooks ) || hooks.set( this, val, "value" ) === undefined ) {
				this.value = val;
			}
		} );
	}
} );

jQuery.extend( {
	valHooks: {
		option: {
			get: function( elem ) {

				var val = jQuery.find.attr( elem, "value" );
				return val != null ?
					val :

					// Support: IE <=10 - 11 only
					// option.text throws exceptions (trac-14686, trac-14858)
					// Strip and collapse whitespace
					// https://html.spec.whatwg.org/#strip-and-collapse-whitespace
					stripAndCollapse( jQuery.text( elem ) );
			}
		},
		select: {
			get: function( elem ) {
				var value, option, i,
					options = elem.options,
					index = elem.selectedIndex,
					one = elem.type === "select-one",
					values = one ? null : [],
					max = one ? index + 1 : options.length;

				if ( index < 0 ) {
					i = max;

				} else {
					i = one ? index : 0;
				}

				// Loop through all the selected options
				for ( ; i < max; i++ ) {
					option = options[ i ];

					// Support: IE <=9 only
					// IE8-9 doesn't update selected after form reset (trac-2551)
					if ( ( option.selected || i === index ) &&

							// Don't return options that are disabled or in a disabled optgroup
							!option.disabled &&
							( !option.parentNode.disabled ||
								!nodeName( option.parentNode, "optgroup" ) ) ) {

						// Get the specific value for the option
						value = jQuery( option ).val();

						// We don't need an array for one selects
						if ( one ) {
							return value;
						}

						// Multi-Selects return an array
						values.push( value );
					}
				}

				return values;
			},

			set: function( elem, value ) {
				var optionSet, option,
					options = elem.options,
					values = jQuery.makeArray( value ),
					i = options.length;

				while ( i-- ) {
					option = options[ i ];

					/* eslint-disable no-cond-assign */

					if ( option.selected =
						jQuery.inArray( jQuery.valHooks.option.get( option ), values ) > -1
					) {
						optionSet = true;
					}

					/* eslint-enable no-cond-assign */
				}

				// Force browsers to behave consistently when non-matching value is set
				if ( !optionSet ) {
					elem.selectedIndex = -1;
				}
				return values;
			}
		}
	}
} );

// Radios and checkboxes getter/setter
jQuery.each( [ "radio", "checkbox" ], function() {
	jQuery.valHooks[ this ] = {
		set: function( elem, value ) {
			if ( Array.isArray( value ) ) {
				return ( elem.checked = jQuery.inArray( jQuery( elem ).val(), value ) > -1 );
			}
		}
	};
	if ( !support.checkOn ) {
		jQuery.valHooks[ this ].get = function( elem ) {
			return elem.getAttribute( "value" ) === null ? "on" : elem.value;
		};
	}
} );




// Return jQuery for attributes-only inclusion
var location = window.location;

var nonce = { guid: Date.now() };

var rquery = ( /\?/ );



// Cross-browser xml parsing
jQuery.parseXML = function( data ) {
	var xml, parserErrorElem;
	if ( !data || typeof data !== "string" ) {
		return null;
	}

	// Support: IE 9 - 11 only
	// IE throws on parseFromString with invalid input.
	try {
		xml = ( new window.DOMParser() ).parseFromString( data, "text/xml" );
	} catch ( e ) {}

	parserErrorElem = xml && xml.getElementsByTagName( "parsererror" )[ 0 ];
	if ( !xml || parserErrorElem ) {
		jQuery.error( "Invalid XML: " + (
			parserErrorElem ?
				jQuery.map( parserErrorElem.childNodes, function( el ) {
					return el.textContent;
				} ).join( "\n" ) :
				data
		) );
	}
	return xml;
};


var rfocusMorph = /^(?:focusinfocus|focusoutblur)$/,
	stopPropagationCallback = function( e ) {
		e.stopPropagation();
	};

jQuery.extend( jQuery.event, {

	trigger: function( event, data, elem, onlyHandlers ) {

		var i, cur, tmp, bubbleType, ontype, handle, special, lastElement,
			eventPath = [ elem || document ],
			type = hasOwn.call( event, "type" ) ? event.type : event,
			namespaces = hasOwn.call( event, "namespace" ) ? event.namespace.split( "." ) : [];

		cur = lastElement = tmp = elem = elem || document;

		// Don't do events on text and comment nodes
		if ( elem.nodeType === 3 || elem.nodeType === 8 ) {
			return;
		}

		// focus/blur morphs to focusin/out; ensure we're not firing them right now
		if ( rfocusMorph.test( type + jQuery.event.triggered ) ) {
			return;
		}

		if ( type.indexOf( "." ) > -1 ) {

			// Namespaced trigger; create a regexp to match event type in handle()
			namespaces = type.split( "." );
			type = namespaces.shift();
			namespaces.sort();
		}
		ontype = type.indexOf( ":" ) < 0 && "on" + type;

		// Caller can pass in a jQuery.Event object, Object, or just an event type string
		event = event[ jQuery.expando ] ?
			event :
			new jQuery.Event( type, typeof event === "object" && event );

		// Trigger bitmask: & 1 for native handlers; & 2 for jQuery (always true)
		event.isTrigger = onlyHandlers ? 2 : 3;
		event.namespace = namespaces.join( "." );
		event.rnamespace = event.namespace ?
			new RegExp( "(^|\\.)" + namespaces.join( "\\.(?:.*\\.|)" ) + "(\\.|$)" ) :
			null;

		// Clean up the event in case it is being reused
		event.result = undefined;
		if ( !event.target ) {
			event.target = elem;
		}

		// Clone any incoming data and prepend the event, creating the handler arg list
		data = data == null ?
			[ event ] :
			jQuery.makeArray( data, [ event ] );

		// Allow special events to draw outside the lines
		special = jQuery.event.special[ type ] || {};
		if ( !onlyHandlers && special.trigger && special.trigger.apply( elem, data ) === false ) {
			return;
		}

		// Determine event propagation path in advance, per W3C events spec (trac-9951)
		// Bubble up to document, then to window; watch for a global ownerDocument var (trac-9724)
		if ( !onlyHandlers && !special.noBubble && !isWindow( elem ) ) {

			bubbleType = special.delegateType || type;
			if ( !rfocusMorph.test( bubbleType + type ) ) {
				cur = cur.parentNode;
			}
			for ( ; cur; cur = cur.parentNode ) {
				eventPath.push( cur );
				tmp = cur;
			}

			// Only add window if we got to document (e.g., not plain obj or detached DOM)
			if ( tmp === ( elem.ownerDocument || document ) ) {
				eventPath.push( tmp.defaultView || tmp.parentWindow || window );
			}
		}

		// Fire handlers on the event path
		i = 0;
		while ( ( cur = eventPath[ i++ ] ) && !event.isPropagationStopped() ) {
			lastElement = cur;
			event.type = i > 1 ?
				bubbleType :
				special.bindType || type;

			// jQuery handler
			handle = ( dataPriv.get( cur, "events" ) || Object.create( null ) )[ event.type ] &&
				dataPriv.get( cur, "handle" );
			if ( handle ) {
				handle.apply( cur, data );
			}

			// Native handler
			handle = ontype && cur[ ontype ];
			if ( handle && handle.apply && acceptData( cur ) ) {
				event.result = handle.apply( cur, data );
				if ( event.result === false ) {
					event.preventDefault();
				}
			}
		}
		event.type = type;

		// If nobody prevented the default action, do it now
		if ( !onlyHandlers && !event.isDefaultPrevented() ) {

			if ( ( !special._default ||
				special._default.apply( eventPath.pop(), data ) === false ) &&
				acceptData( elem ) ) {

				// Call a native DOM method on the target with the same name as the event.
				// Don't do default actions on window, that's where global variables be (trac-6170)
				if ( ontype && isFunction( elem[ type ] ) && !isWindow( elem ) ) {

					// Don't re-trigger an onFOO event when we call its FOO() method
					tmp = elem[ ontype ];

					if ( tmp ) {
						elem[ ontype ] = null;
					}

					// Prevent re-triggering of the same event, since we already bubbled it above
					jQuery.event.triggered = type;

					if ( event.isPropagationStopped() ) {
						lastElement.addEventListener( type, stopPropagationCallback );
					}

					elem[ type ]();

					if ( event.isPropagationStopped() ) {
						lastElement.removeEventListener( type, stopPropagationCallback );
					}

					jQuery.event.triggered = undefined;

					if ( tmp ) {
						elem[ ontype ] = tmp;
					}
				}
			}
		}

		return event.result;
	},

	// Piggyback on a donor event to simulate a different one
	// Used only for `focus(in | out)` events
	simulate: function( type, elem, event ) {
		var e = jQuery.extend(
			new jQuery.Event(),
			event,
			{
				type: type,
				isSimulated: true
			}
		);

		jQuery.event.trigger( e, null, elem );
	}

} );

jQuery.fn.extend( {

	trigger: function( type, data ) {
		return this.each( function() {
			jQuery.event.trigger( type, data, this );
		} );
	},
	triggerHandler: function( type, data ) {
		var elem = this[ 0 ];
		if ( elem ) {
			return jQuery.event.trigger( type, data, elem, true );
		}
	}
} );


var
	rbracket = /\[\]$/,
	rCRLF = /\r?\n/g,
	rsubmitterTypes = /^(?:submit|button|image|reset|file)$/i,
	rsubmittable = /^(?:input|select|textarea|keygen)/i;

function buildParams( prefix, obj, traditional, add ) {
	var name;

	if ( Array.isArray( obj ) ) {

		// Serialize array item.
		jQuery.each( obj, function( i, v ) {
			if ( traditional || rbracket.test( prefix ) ) {

				// Treat each array item as a scalar.
				add( prefix, v );

			} else {

				// Item is non-scalar (array or object), encode its numeric index.
				buildParams(
					prefix + "[" + ( typeof v === "object" && v != null ? i : "" ) + "]",
					v,
					traditional,
					add
				);
			}
		} );

	} else if ( !traditional && toType( obj ) === "object" ) {

		// Serialize object item.
		for ( name in obj ) {
			buildParams( prefix + "[" + name + "]", obj[ name ], traditional, add );
		}

	} else {

		// Serialize scalar item.
		add( prefix, obj );
	}
}

// Serialize an array of form elements or a set of
// key/values into a query string
jQuery.param = function( a, traditional ) {
	var prefix,
		s = [],
		add = function( key, valueOrFunction ) {

			// If value is a function, invoke it and use its return value
			var value = isFunction( valueOrFunction ) ?
				valueOrFunction() :
				valueOrFunction;

			s[ s.length ] = encodeURIComponent( key ) + "=" +
				encodeURIComponent( value == null ? "" : value );
		};

	if ( a == null ) {
		return "";
	}

	// If an array was passed in, assume that it is an array of form elements.
	if ( Array.isArray( a ) || ( a.jquery && !jQuery.isPlainObject( a ) ) ) {

		// Serialize the form elements
		jQuery.each( a, function() {
			add( this.name, this.value );
		} );

	} else {

		// If traditional, encode the "old" way (the way 1.3.2 or older
		// did it), otherwise encode params recursively.
		for ( prefix in a ) {
			buildParams( prefix, a[ prefix ], traditional, add );
		}
	}

	// Return the resulting serialization
	return s.join( "&" );
};

jQuery.fn.extend( {
	serialize: function() {
		return jQuery.param( this.serializeArray() );
	},
	serializeArray: function() {
		return this.map( function() {

			// Can add propHook for "elements" to filter or add form elements
			var elements = jQuery.prop( this, "elements" );
			return elements ? jQuery.makeArray( elements ) : this;
		} ).filter( function() {
			var type = this.type;

			// Use .is( ":disabled" ) so that fieldset[disabled] works
			return this.name && !jQuery( this ).is( ":disabled" ) &&
				rsubmittable.test( this.nodeName ) && !rsubmitterTypes.test( type ) &&
				( this.checked || !rcheckableType.test( type ) );
		} ).map( function( _i, elem ) {
			var val = jQuery( this ).val();

			if ( val == null ) {
				return null;
			}

			if ( Array.isArray( val ) ) {
				return jQuery.map( val, function( val ) {
					return { name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
				} );
			}

			return { name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
		} ).get();
	}
} );


var
	r20 = /%20/g,
	rhash = /#.*$/,
	rantiCache = /([?&])_=[^&]*/,
	rheaders = /^(.*?):[ \t]*([^\r\n]*)$/mg,

	// trac-7653, trac-8125, trac-8152: local protocol detection
	rlocalProtocol = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/,
	rnoContent = /^(?:GET|HEAD)$/,
	rprotocol = /^\/\//,

	/* Prefilters
	 * 1) They are useful to introduce custom dataTypes (see ajax/jsonp.js for an example)
	 * 2) These are called:
	 *    - BEFORE asking for a transport
	 *    - AFTER param serialization (s.data is a string if s.processData is true)
	 * 3) key is the dataType
	 * 4) the catchall symbol "*" can be used
	 * 5) execution will start with transport dataType and THEN continue down to "*" if needed
	 */
	prefilters = {},

	/* Transports bindings
	 * 1) key is the dataType
	 * 2) the catchall symbol "*" can be used
	 * 3) selection will start with transport dataType and THEN go to "*" if needed
	 */
	transports = {},

	// Avoid comment-prolog char sequence (trac-10098); must appease lint and evade compression
	allTypes = "*/".concat( "*" ),

	// Anchor tag for parsing the document origin
	originAnchor = document.createElement( "a" );

originAnchor.href = location.href;

// Base "constructor" for jQuery.ajaxPrefilter and jQuery.ajaxTransport
function addToPrefiltersOrTransports( structure ) {

	// dataTypeExpression is optional and defaults to "*"
	return function( dataTypeExpression, func ) {

		if ( typeof dataTypeExpression !== "string" ) {
			func = dataTypeExpression;
			dataTypeExpression = "*";
		}

		var dataType,
			i = 0,
			dataTypes = dataTypeExpression.toLowerCase().match( rnothtmlwhite ) || [];

		if ( isFunction( func ) ) {

			// For each dataType in the dataTypeExpression
			while ( ( dataType = dataTypes[ i++ ] ) ) {

				// Prepend if requested
				if ( dataType[ 0 ] === "+" ) {
					dataType = dataType.slice( 1 ) || "*";
					( structure[ dataType ] = structure[ dataType ] || [] ).unshift( func );

				// Otherwise append
				} else {
					( structure[ dataType ] = structure[ dataType ] || [] ).push( func );
				}
			}
		}
	};
}

// Base inspection function for prefilters and transports
function inspectPrefiltersOrTransports( structure, options, originalOptions, jqXHR ) {

	var inspected = {},
		seekingTransport = ( structure === transports );

	function inspect( dataType ) {
		var selected;
		inspected[ dataType ] = true;
		jQuery.each( structure[ dataType ] || [], function( _, prefilterOrFactory ) {
			var dataTypeOrTransport = prefilterOrFactory( options, originalOptions, jqXHR );
			if ( typeof dataTypeOrTransport === "string" &&
				!seekingTransport && !inspected[ dataTypeOrTransport ] ) {

				options.dataTypes.unshift( dataTypeOrTransport );
				inspect( dataTypeOrTransport );
				return false;
			} else if ( seekingTransport ) {
				return !( selected = dataTypeOrTransport );
			}
		} );
		return selected;
	}

	return inspect( options.dataTypes[ 0 ] ) || !inspected[ "*" ] && inspect( "*" );
}

// A special extend for ajax options
// that takes "flat" options (not to be deep extended)
// Fixes trac-9887
function ajaxExtend( target, src ) {
	var key, deep,
		flatOptions = jQuery.ajaxSettings.flatOptions || {};

	for ( key in src ) {
		if ( src[ key ] !== undefined ) {
			( flatOptions[ key ] ? target : ( deep || ( deep = {} ) ) )[ key ] = src[ key ];
		}
	}
	if ( deep ) {
		jQuery.extend( true, target, deep );
	}

	return target;
}

/* Handles responses to an ajax request:
 * - finds the right dataType (mediates between content-type and expected dataType)
 * - returns the corresponding response
 */
function ajaxHandleResponses( s, jqXHR, responses ) {

	var ct, type, finalDataType, firstDataType,
		contents = s.contents,
		dataTypes = s.dataTypes;

	// Remove auto dataType and get content-type in the process
	while ( dataTypes[ 0 ] === "*" ) {
		dataTypes.shift();
		if ( ct === undefined ) {
			ct = s.mimeType || jqXHR.getResponseHeader( "Content-Type" );
		}
	}

	// Check if we're dealing with a known content-type
	if ( ct ) {
		for ( type in contents ) {
			if ( contents[ type ] && contents[ type ].test( ct ) ) {
				dataTypes.unshift( type );
				break;
			}
		}
	}

	// Check to see if we have a response for the expected dataType
	if ( dataTypes[ 0 ] in responses ) {
		finalDataType = dataTypes[ 0 ];
	} else {

		// Try convertible dataTypes
		for ( type in responses ) {
			if ( !dataTypes[ 0 ] || s.converters[ type + " " + dataTypes[ 0 ] ] ) {
				finalDataType = type;
				break;
			}
			if ( !firstDataType ) {
				firstDataType = type;
			}
		}

		// Or just use first one
		finalDataType = finalDataType || firstDataType;
	}

	// If we found a dataType
	// We add the dataType to the list if needed
	// and return the corresponding response
	if ( finalDataType ) {
		if ( finalDataType !== dataTypes[ 0 ] ) {
			dataTypes.unshift( finalDataType );
		}
		return responses[ finalDataType ];
	}
}

/* Chain conversions given the request and the original response
 * Also sets the responseXXX fields on the jqXHR instance
 */
function ajaxConvert( s, response, jqXHR, isSuccess ) {
	var conv2, current, conv, tmp, prev,
		converters = {},

		// Work with a copy of dataTypes in case we need to modify it for conversion
		dataTypes = s.dataTypes.slice();

	// Create converters map with lowercased keys
	if ( dataTypes[ 1 ] ) {
		for ( conv in s.converters ) {
			converters[ conv.toLowerCase() ] = s.converters[ conv ];
		}
	}

	current = dataTypes.shift();

	// Convert to each sequential dataType
	while ( current ) {

		if ( s.responseFields[ current ] ) {
			jqXHR[ s.responseFields[ current ] ] = response;
		}

		// Apply the dataFilter if provided
		if ( !prev && isSuccess && s.dataFilter ) {
			response = s.dataFilter( response, s.dataType );
		}

		prev = current;
		current = dataTypes.shift();

		if ( current ) {

			// There's only work to do if current dataType is non-auto
			if ( current === "*" ) {

				current = prev;

			// Convert response if prev dataType is non-auto and differs from current
			} else if ( prev !== "*" && prev !== current ) {

				// Seek a direct converter
				conv = converters[ prev + " " + current ] || converters[ "* " + current ];

				// If none found, seek a pair
				if ( !conv ) {
					for ( conv2 in converters ) {

						// If conv2 outputs current
						tmp = conv2.split( " " );
						if ( tmp[ 1 ] === current ) {

							// If prev can be converted to accepted input
							conv = converters[ prev + " " + tmp[ 0 ] ] ||
								converters[ "* " + tmp[ 0 ] ];
							if ( conv ) {

								// Condense equivalence converters
								if ( conv === true ) {
									conv = converters[ conv2 ];

								// Otherwise, insert the intermediate dataType
								} else if ( converters[ conv2 ] !== true ) {
									current = tmp[ 0 ];
									dataTypes.unshift( tmp[ 1 ] );
								}
								break;
							}
						}
					}
				}

				// Apply converter (if not an equivalence)
				if ( conv !== true ) {

					// Unless errors are allowed to bubble, catch and return them
					if ( conv && s.throws ) {
						response = conv( response );
					} else {
						try {
							response = conv( response );
						} catch ( e ) {
							return {
								state: "parsererror",
								error: conv ? e : "No conversion from " + prev + " to " + current
							};
						}
					}
				}
			}
		}
	}

	return { state: "success", data: response };
}

jQuery.extend( {

	// Counter for holding the number of active queries
	active: 0,

	// Last-Modified header cache for next request
	lastModified: {},
	etag: {},

	ajaxSettings: {
		url: location.href,
		type: "GET",
		isLocal: rlocalProtocol.test( location.protocol ),
		global: true,
		processData: true,
		async: true,
		contentType: "application/x-www-form-urlencoded; charset=UTF-8",

		/*
		timeout: 0,
		data: null,
		dataType: null,
		username: null,
		password: null,
		cache: null,
		throws: false,
		traditional: false,
		headers: {},
		*/

		accepts: {
			"*": allTypes,
			text: "text/plain",
			html: "text/html",
			xml: "application/xml, text/xml",
			json: "application/json, text/javascript"
		},

		contents: {
			xml: /\bxml\b/,
			html: /\bhtml/,
			json: /\bjson\b/
		},

		responseFields: {
			xml: "responseXML",
			text: "responseText",
			json: "responseJSON"
		},

		// Data converters
		// Keys separate source (or catchall "*") and destination types with a single space
		converters: {

			// Convert anything to text
			"* text": String,

			// Text to html (true = no transformation)
			"text html": true,

			// Evaluate text as a json expression
			"text json": JSON.parse,

			// Parse text as xml
			"text xml": jQuery.parseXML
		},

		// For options that shouldn't be deep extended:
		// you can add your own custom options here if
		// and when you create one that shouldn't be
		// deep extended (see ajaxExtend)
		flatOptions: {
			url: true,
			context: true
		}
	},

	// Creates a full fledged settings object into target
	// with both ajaxSettings and settings fields.
	// If target is omitted, writes into ajaxSettings.
	ajaxSetup: function( target, settings ) {
		return settings ?

			// Building a settings object
			ajaxExtend( ajaxExtend( target, jQuery.ajaxSettings ), settings ) :

			// Extending ajaxSettings
			ajaxExtend( jQuery.ajaxSettings, target );
	},

	ajaxPrefilter: addToPrefiltersOrTransports( prefilters ),
	ajaxTransport: addToPrefiltersOrTransports( transports ),

	// Main method
	ajax: function( url, options ) {

		// If url is an object, simulate pre-1.5 signature
		if ( typeof url === "object" ) {
			options = url;
			url = undefined;
		}

		// Force options to be an object
		options = options || {};

		var transport,

			// URL without anti-cache param
			cacheURL,

			// Response headers
			responseHeadersString,
			responseHeaders,

			// timeout handle
			timeoutTimer,

			// Url cleanup var
			urlAnchor,

			// Request state (becomes false upon send and true upon completion)
			completed,

			// To know if global events are to be dispatched
			fireGlobals,

			// Loop variable
			i,

			// uncached part of the url
			uncached,

			// Create the final options object
			s = jQuery.ajaxSetup( {}, options ),

			// Callbacks context
			callbackContext = s.context || s,

			// Context for global events is callbackContext if it is a DOM node or jQuery collection
			globalEventContext = s.context &&
				( callbackContext.nodeType || callbackContext.jquery ) ?
				jQuery( callbackContext ) :
				jQuery.event,

			// Deferreds
			deferred = jQuery.Deferred(),
			completeDeferred = jQuery.Callbacks( "once memory" ),

			// Status-dependent callbacks
			statusCode = s.statusCode || {},

			// Headers (they are sent all at once)
			requestHeaders = {},
			requestHeadersNames = {},

			// Default abort message
			strAbort = "canceled",

			// Fake xhr
			jqXHR = {
				readyState: 0,

				// Builds headers hashtable if needed
				getResponseHeader: function( key ) {
					var match;
					if ( completed ) {
						if ( !responseHeaders ) {
							responseHeaders = {};
							while ( ( match = rheaders.exec( responseHeadersString ) ) ) {
								responseHeaders[ match[ 1 ].toLowerCase() + " " ] =
									( responseHeaders[ match[ 1 ].toLowerCase() + " " ] || [] )
										.concat( match[ 2 ] );
							}
						}
						match = responseHeaders[ key.toLowerCase() + " " ];
					}
					return match == null ? null : match.join( ", " );
				},

				// Raw string
				getAllResponseHeaders: function() {
					return completed ? responseHeadersString : null;
				},

				// Caches the header
				setRequestHeader: function( name, value ) {
					if ( completed == null ) {
						name = requestHeadersNames[ name.toLowerCase() ] =
							requestHeadersNames[ name.toLowerCase() ] || name;
						requestHeaders[ name ] = value;
					}
					return this;
				},

				// Overrides response content-type header
				overrideMimeType: function( type ) {
					if ( completed == null ) {
						s.mimeType = type;
					}
					return this;
				},

				// Status-dependent callbacks
				statusCode: function( map ) {
					var code;
					if ( map ) {
						if ( completed ) {

							// Execute the appropriate callbacks
							jqXHR.always( map[ jqXHR.status ] );
						} else {

							// Lazy-add the new callbacks in a way that preserves old ones
							for ( code in map ) {
								statusCode[ code ] = [ statusCode[ code ], map[ code ] ];
							}
						}
					}
					return this;
				},

				// Cancel the request
				abort: function( statusText ) {
					var finalText = statusText || strAbort;
					if ( transport ) {
						transport.abort( finalText );
					}
					done( 0, finalText );
					return this;
				}
			};

		// Attach deferreds
		deferred.promise( jqXHR );

		// Add protocol if not provided (prefilters might expect it)
		// Handle falsy url in the settings object (trac-10093: consistency with old signature)
		// We also use the url parameter if available
		s.url = ( ( url || s.url || location.href ) + "" )
			.replace( rprotocol, location.protocol + "//" );

		// Alias method option to type as per ticket trac-12004
		s.type = options.method || options.type || s.method || s.type;

		// Extract dataTypes list
		s.dataTypes = ( s.dataType || "*" ).toLowerCase().match( rnothtmlwhite ) || [ "" ];

		// A cross-domain request is in order when the origin doesn't match the current origin.
		if ( s.crossDomain == null ) {
			urlAnchor = document.createElement( "a" );

			// Support: IE <=8 - 11, Edge 12 - 15
			// IE throws exception on accessing the href property if url is malformed,
			// e.g. http://example.com:80x/
			try {
				urlAnchor.href = s.url;

				// Support: IE <=8 - 11 only
				// Anchor's host property isn't correctly set when s.url is relative
				urlAnchor.href = urlAnchor.href;
				s.crossDomain = originAnchor.protocol + "//" + originAnchor.host !==
					urlAnchor.protocol + "//" + urlAnchor.host;
			} catch ( e ) {

				// If there is an error parsing the URL, assume it is crossDomain,
				// it can be rejected by the transport if it is invalid
				s.crossDomain = true;
			}
		}

		// Convert data if not already a string
		if ( s.data && s.processData && typeof s.data !== "string" ) {
			s.data = jQuery.param( s.data, s.traditional );
		}

		// Apply prefilters
		inspectPrefiltersOrTransports( prefilters, s, options, jqXHR );

		// If request was aborted inside a prefilter, stop there
		if ( completed ) {
			return jqXHR;
		}

		// We can fire global events as of now if asked to
		// Don't fire events if jQuery.event is undefined in an AMD-usage scenario (trac-15118)
		fireGlobals = jQuery.event && s.global;

		// Watch for a new set of requests
		if ( fireGlobals && jQuery.active++ === 0 ) {
			jQuery.event.trigger( "ajaxStart" );
		}

		// Uppercase the type
		s.type = s.type.toUpperCase();

		// Determine if request has content
		s.hasContent = !rnoContent.test( s.type );

		// Save the URL in case we're toying with the If-Modified-Since
		// and/or If-None-Match header later on
		// Remove hash to simplify url manipulation
		cacheURL = s.url.replace( rhash, "" );

		// More options handling for requests with no content
		if ( !s.hasContent ) {

			// Remember the hash so we can put it back
			uncached = s.url.slice( cacheURL.length );

			// If data is available and should be processed, append data to url
			if ( s.data && ( s.processData || typeof s.data === "string" ) ) {
				cacheURL += ( rquery.test( cacheURL ) ? "&" : "?" ) + s.data;

				// trac-9682: remove data so that it's not used in an eventual retry
				delete s.data;
			}

			// Add or update anti-cache param if needed
			if ( s.cache === false ) {
				cacheURL = cacheURL.replace( rantiCache, "$1" );
				uncached = ( rquery.test( cacheURL ) ? "&" : "?" ) + "_=" + ( nonce.guid++ ) +
					uncached;
			}

			// Put hash and anti-cache on the URL that will be requested (gh-1732)
			s.url = cacheURL + uncached;

		// Change '%20' to '+' if this is encoded form body content (gh-2658)
		} else if ( s.data && s.processData &&
			( s.contentType || "" ).indexOf( "application/x-www-form-urlencoded" ) === 0 ) {
			s.data = s.data.replace( r20, "+" );
		}

		// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
		if ( s.ifModified ) {
			if ( jQuery.lastModified[ cacheURL ] ) {
				jqXHR.setRequestHeader( "If-Modified-Since", jQuery.lastModified[ cacheURL ] );
			}
			if ( jQuery.etag[ cacheURL ] ) {
				jqXHR.setRequestHeader( "If-None-Match", jQuery.etag[ cacheURL ] );
			}
		}

		// Set the correct header, if data is being sent
		if ( s.data && s.hasContent && s.contentType !== false || options.contentType ) {
			jqXHR.setRequestHeader( "Content-Type", s.contentType );
		}

		// Set the Accepts header for the server, depending on the dataType
		jqXHR.setRequestHeader(
			"Accept",
			s.dataTypes[ 0 ] && s.accepts[ s.dataTypes[ 0 ] ] ?
				s.accepts[ s.dataTypes[ 0 ] ] +
					( s.dataTypes[ 0 ] !== "*" ? ", " + allTypes + "; q=0.01" : "" ) :
				s.accepts[ "*" ]
		);

		// Check for headers option
		for ( i in s.headers ) {
			jqXHR.setRequestHeader( i, s.headers[ i ] );
		}

		// Allow custom headers/mimetypes and early abort
		if ( s.beforeSend &&
			( s.beforeSend.call( callbackContext, jqXHR, s ) === false || completed ) ) {

			// Abort if not done already and return
			return jqXHR.abort();
		}

		// Aborting is no longer a cancellation
		strAbort = "abort";

		// Install callbacks on deferreds
		completeDeferred.add( s.complete );
		jqXHR.done( s.success );
		jqXHR.fail( s.error );

		// Get transport
		transport = inspectPrefiltersOrTransports( transports, s, options, jqXHR );

		// If no transport, we auto-abort
		if ( !transport ) {
			done( -1, "No Transport" );
		} else {
			jqXHR.readyState = 1;

			// Send global event
			if ( fireGlobals ) {
				globalEventContext.trigger( "ajaxSend", [ jqXHR, s ] );
			}

			// If request was aborted inside ajaxSend, stop there
			if ( completed ) {
				return jqXHR;
			}

			// Timeout
			if ( s.async && s.timeout > 0 ) {
				timeoutTimer = window.setTimeout( function() {
					jqXHR.abort( "timeout" );
				}, s.timeout );
			}

			try {
				completed = false;
				transport.send( requestHeaders, done );
			} catch ( e ) {

				// Rethrow post-completion exceptions
				if ( completed ) {
					throw e;
				}

				// Propagate others as results
				done( -1, e );
			}
		}

		// Callback for when everything is done
		function done( status, nativeStatusText, responses, headers ) {
			var isSuccess, success, error, response, modified,
				statusText = nativeStatusText;

			// Ignore repeat invocations
			if ( completed ) {
				return;
			}

			completed = true;

			// Clear timeout if it exists
			if ( timeoutTimer ) {
				window.clearTimeout( timeoutTimer );
			}

			// Dereference transport for early garbage collection
			// (no matter how long the jqXHR object will be used)
			transport = undefined;

			// Cache response headers
			responseHeadersString = headers || "";

			// Set readyState
			jqXHR.readyState = status > 0 ? 4 : 0;

			// Determine if successful
			isSuccess = status >= 200 && status < 300 || status === 304;

			// Get response data
			if ( responses ) {
				response = ajaxHandleResponses( s, jqXHR, responses );
			}

			// Use a noop converter for missing script but not if jsonp
			if ( !isSuccess &&
				jQuery.inArray( "script", s.dataTypes ) > -1 &&
				jQuery.inArray( "json", s.dataTypes ) < 0 ) {
				s.converters[ "text script" ] = function() {};
			}

			// Convert no matter what (that way responseXXX fields are always set)
			response = ajaxConvert( s, response, jqXHR, isSuccess );

			// If successful, handle type chaining
			if ( isSuccess ) {

				// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
				if ( s.ifModified ) {
					modified = jqXHR.getResponseHeader( "Last-Modified" );
					if ( modified ) {
						jQuery.lastModified[ cacheURL ] = modified;
					}
					modified = jqXHR.getResponseHeader( "etag" );
					if ( modified ) {
						jQuery.etag[ cacheURL ] = modified;
					}
				}

				// if no content
				if ( status === 204 || s.type === "HEAD" ) {
					statusText = "nocontent";

				// if not modified
				} else if ( status === 304 ) {
					statusText = "notmodified";

				// If we have data, let's convert it
				} else {
					statusText = response.state;
					success = response.data;
					error = response.error;
					isSuccess = !error;
				}
			} else {

				// Extract error from statusText and normalize for non-aborts
				error = statusText;
				if ( status || !statusText ) {
					statusText = "error";
					if ( status < 0 ) {
						status = 0;
					}
				}
			}

			// Set data for the fake xhr object
			jqXHR.status = status;
			jqXHR.statusText = ( nativeStatusText || statusText ) + "";

			// Success/Error
			if ( isSuccess ) {
				deferred.resolveWith( callbackContext, [ success, statusText, jqXHR ] );
			} else {
				deferred.rejectWith( callbackContext, [ jqXHR, statusText, error ] );
			}

			// Status-dependent callbacks
			jqXHR.statusCode( statusCode );
			statusCode = undefined;

			if ( fireGlobals ) {
				globalEventContext.trigger( isSuccess ? "ajaxSuccess" : "ajaxError",
					[ jqXHR, s, isSuccess ? success : error ] );
			}

			// Complete
			completeDeferred.fireWith( callbackContext, [ jqXHR, statusText ] );

			if ( fireGlobals ) {
				globalEventContext.trigger( "ajaxComplete", [ jqXHR, s ] );

				// Handle the global AJAX counter
				if ( !( --jQuery.active ) ) {
					jQuery.event.trigger( "ajaxStop" );
				}
			}
		}

		return jqXHR;
	},

	getJSON: function( url, data, callback ) {
		return jQuery.get( url, data, callback, "json" );
	},

	getScript: function( url, callback ) {
		return jQuery.get( url, undefined, callback, "script" );
	}
} );

jQuery.each( [ "get", "post" ], function( _i, method ) {
	jQuery[ method ] = function( url, data, callback, type ) {

		// Shift arguments if data argument was omitted
		if ( isFunction( data ) ) {
			type = type || callback;
			callback = data;
			data = undefined;
		}

		// The url can be an options object (which then must have .url)
		return jQuery.ajax( jQuery.extend( {
			url: url,
			type: method,
			dataType: type,
			data: data,
			success: callback
		}, jQuery.isPlainObject( url ) && url ) );
	};
} );

jQuery.ajaxPrefilter( function( s ) {
	var i;
	for ( i in s.headers ) {
		if ( i.toLowerCase() === "content-type" ) {
			s.contentType = s.headers[ i ] || "";
		}
	}
} );


jQuery._evalUrl = function( url, options, doc ) {
	return jQuery.ajax( {
		url: url,

		// Make this explicit, since user can override this through ajaxSetup (trac-11264)
		type: "GET",
		dataType: "script",
		cache: true,
		async: false,
		global: false,

		// Only evaluate the response if it is successful (gh-4126)
		// dataFilter is not invoked for failure responses, so using it instead
		// of the default converter is kludgy but it works.
		converters: {
			"text script": function() {}
		},
		dataFilter: function( response ) {
			jQuery.globalEval( response, options, doc );
		}
	} );
};


jQuery.fn.extend( {
	wrapAll: function( html ) {
		var wrap;

		if ( this[ 0 ] ) {
			if ( isFunction( html ) ) {
				html = html.call( this[ 0 ] );
			}

			// The elements to wrap the target around
			wrap = jQuery( html, this[ 0 ].ownerDocument ).eq( 0 ).clone( true );

			if ( this[ 0 ].parentNode ) {
				wrap.insertBefore( this[ 0 ] );
			}

			wrap.map( function() {
				var elem = this;

				while ( elem.firstElementChild ) {
					elem = elem.firstElementChild;
				}

				return elem;
			} ).append( this );
		}

		return this;
	},

	wrapInner: function( html ) {
		if ( isFunction( html ) ) {
			return this.each( function( i ) {
				jQuery( this ).wrapInner( html.call( this, i ) );
			} );
		}

		return this.each( function() {
			var self = jQuery( this ),
				contents = self.contents();

			if ( contents.length ) {
				contents.wrapAll( html );

			} else {
				self.append( html );
			}
		} );
	},

	wrap: function( html ) {
		var htmlIsFunction = isFunction( html );

		return this.each( function( i ) {
			jQuery( this ).wrapAll( htmlIsFunction ? html.call( this, i ) : html );
		} );
	},

	unwrap: function( selector ) {
		this.parent( selector ).not( "body" ).each( function() {
			jQuery( this ).replaceWith( this.childNodes );
		} );
		return this;
	}
} );


jQuery.expr.pseudos.hidden = function( elem ) {
	return !jQuery.expr.pseudos.visible( elem );
};
jQuery.expr.pseudos.visible = function( elem ) {
	return !!( elem.offsetWidth || elem.offsetHeight || elem.getClientRects().length );
};




jQuery.ajaxSettings.xhr = function() {
	try {
		return new window.XMLHttpRequest();
	} catch ( e ) {}
};

var xhrSuccessStatus = {

		// File protocol always yields status code 0, assume 200
		0: 200,

		// Support: IE <=9 only
		// trac-1450: sometimes IE returns 1223 when it should be 204
		1223: 204
	},
	xhrSupported = jQuery.ajaxSettings.xhr();

support.cors = !!xhrSupported && ( "withCredentials" in xhrSupported );
support.ajax = xhrSupported = !!xhrSupported;

jQuery.ajaxTransport( function( options ) {
	var callback, errorCallback;

	// Cross domain only allowed if supported through XMLHttpRequest
	if ( support.cors || xhrSupported && !options.crossDomain ) {
		return {
			send: function( headers, complete ) {
				var i,
					xhr = options.xhr();

				xhr.open(
					options.type,
					options.url,
					options.async,
					options.username,
					options.password
				);

				// Apply custom fields if provided
				if ( options.xhrFields ) {
					for ( i in options.xhrFields ) {
						xhr[ i ] = options.xhrFields[ i ];
					}
				}

				// Override mime type if needed
				if ( options.mimeType && xhr.overrideMimeType ) {
					xhr.overrideMimeType( options.mimeType );
				}

				// X-Requested-With header
				// For cross-domain requests, seeing as conditions for a preflight are
				// akin to a jigsaw puzzle, we simply never set it to be sure.
				// (it can always be set on a per-request basis or even using ajaxSetup)
				// For same-domain requests, won't change header if already provided.
				if ( !options.crossDomain && !headers[ "X-Requested-With" ] ) {
					headers[ "X-Requested-With" ] = "XMLHttpRequest";
				}

				// Set headers
				for ( i in headers ) {
					xhr.setRequestHeader( i, headers[ i ] );
				}

				// Callback
				callback = function( type ) {
					return function() {
						if ( callback ) {
							callback = errorCallback = xhr.onload =
								xhr.onerror = xhr.onabort = xhr.ontimeout =
									xhr.onreadystatechange = null;

							if ( type === "abort" ) {
								xhr.abort();
							} else if ( type === "error" ) {

								// Support: IE <=9 only
								// On a manual native abort, IE9 throws
								// errors on any property access that is not readyState
								if ( typeof xhr.status !== "number" ) {
									complete( 0, "error" );
								} else {
									complete(

										// File: protocol always yields status 0; see trac-8605, trac-14207
										xhr.status,
										xhr.statusText
									);
								}
							} else {
								complete(
									xhrSuccessStatus[ xhr.status ] || xhr.status,
									xhr.statusText,

									// Support: IE <=9 only
									// IE9 has no XHR2 but throws on binary (trac-11426)
									// For XHR2 non-text, let the caller handle it (gh-2498)
									( xhr.responseType || "text" ) !== "text"  ||
									typeof xhr.responseText !== "string" ?
										{ binary: xhr.response } :
										{ text: xhr.responseText },
									xhr.getAllResponseHeaders()
								);
							}
						}
					};
				};

				// Listen to events
				xhr.onload = callback();
				errorCallback = xhr.onerror = xhr.ontimeout = callback( "error" );

				// Support: IE 9 only
				// Use onreadystatechange to replace onabort
				// to handle uncaught aborts
				if ( xhr.onabort !== undefined ) {
					xhr.onabort = errorCallback;
				} else {
					xhr.onreadystatechange = function() {

						// Check readyState before timeout as it changes
						if ( xhr.readyState === 4 ) {

							// Allow onerror to be called first,
							// but that will not handle a native abort
							// Also, save errorCallback to a variable
							// as xhr.onerror cannot be accessed
							window.setTimeout( function() {
								if ( callback ) {
									errorCallback();
								}
							} );
						}
					};
				}

				// Create the abort callback
				callback = callback( "abort" );

				try {

					// Do send the request (this may raise an exception)
					xhr.send( options.hasContent && options.data || null );
				} catch ( e ) {

					// trac-14683: Only rethrow if this hasn't been notified as an error yet
					if ( callback ) {
						throw e;
					}
				}
			},

			abort: function() {
				if ( callback ) {
					callback();
				}
			}
		};
	}
} );




// Prevent auto-execution of scripts when no explicit dataType was provided (See gh-2432)
jQuery.ajaxPrefilter( function( s ) {
	if ( s.crossDomain ) {
		s.contents.script = false;
	}
} );

// Install script dataType
jQuery.ajaxSetup( {
	accepts: {
		script: "text/javascript, application/javascript, " +
			"application/ecmascript, application/x-ecmascript"
	},
	contents: {
		script: /\b(?:java|ecma)script\b/
	},
	converters: {
		"text script": function( text ) {
			jQuery.globalEval( text );
			return text;
		}
	}
} );

// Handle cache's special case and crossDomain
jQuery.ajaxPrefilter( "script", function( s ) {
	if ( s.cache === undefined ) {
		s.cache = false;
	}
	if ( s.crossDomain ) {
		s.type = "GET";
	}
} );

// Bind script tag hack transport
jQuery.ajaxTransport( "script", function( s ) {

	// This transport only deals with cross domain or forced-by-attrs requests
	if ( s.crossDomain || s.scriptAttrs ) {
		var script, callback;
		return {
			send: function( _, complete ) {
				script = jQuery( "<script>" )
					.attr( s.scriptAttrs || {} )
					.prop( { charset: s.scriptCharset, src: s.url } )
					.on( "load error", callback = function( evt ) {
						script.remove();
						callback = null;
						if ( evt ) {
							complete( evt.type === "error" ? 404 : 200, evt.type );
						}
					} );

				// Use native DOM manipulation to avoid our domManip AJAX trickery
				document.head.appendChild( script[ 0 ] );
			},
			abort: function() {
				if ( callback ) {
					callback();
				}
			}
		};
	}
} );




var oldCallbacks = [],
	rjsonp = /(=)\?(?=&|$)|\?\?/;

// Default jsonp settings
jQuery.ajaxSetup( {
	jsonp: "callback",
	jsonpCallback: function() {
		var callback = oldCallbacks.pop() || ( jQuery.expando + "_" + ( nonce.guid++ ) );
		this[ callback ] = true;
		return callback;
	}
} );

// Detect, normalize options and install callbacks for jsonp requests
jQuery.ajaxPrefilter( "json jsonp", function( s, originalSettings, jqXHR ) {

	var callbackName, overwritten, responseContainer,
		jsonProp = s.jsonp !== false && ( rjsonp.test( s.url ) ?
			"url" :
			typeof s.data === "string" &&
				( s.contentType || "" )
					.indexOf( "application/x-www-form-urlencoded" ) === 0 &&
				rjsonp.test( s.data ) && "data"
		);

	// Handle iff the expected data type is "jsonp" or we have a parameter to set
	if ( jsonProp || s.dataTypes[ 0 ] === "jsonp" ) {

		// Get callback name, remembering preexisting value associated with it
		callbackName = s.jsonpCallback = isFunction( s.jsonpCallback ) ?
			s.jsonpCallback() :
			s.jsonpCallback;

		// Insert callback into url or form data
		if ( jsonProp ) {
			s[ jsonProp ] = s[ jsonProp ].replace( rjsonp, "$1" + callbackName );
		} else if ( s.jsonp !== false ) {
			s.url += ( rquery.test( s.url ) ? "&" : "?" ) + s.jsonp + "=" + callbackName;
		}

		// Use data converter to retrieve json after script execution
		s.converters[ "script json" ] = function() {
			if ( !responseContainer ) {
				jQuery.error( callbackName + " was not called" );
			}
			return responseContainer[ 0 ];
		};

		// Force json dataType
		s.dataTypes[ 0 ] = "json";

		// Install callback
		overwritten = window[ callbackName ];
		window[ callbackName ] = function() {
			responseContainer = arguments;
		};

		// Clean-up function (fires after converters)
		jqXHR.always( function() {

			// If previous value didn't exist - remove it
			if ( overwritten === undefined ) {
				jQuery( window ).removeProp( callbackName );

			// Otherwise restore preexisting value
			} else {
				window[ callbackName ] = overwritten;
			}

			// Save back as free
			if ( s[ callbackName ] ) {

				// Make sure that re-using the options doesn't screw things around
				s.jsonpCallback = originalSettings.jsonpCallback;

				// Save the callback name for future use
				oldCallbacks.push( callbackName );
			}

			// Call if it was a function and we have a response
			if ( responseContainer && isFunction( overwritten ) ) {
				overwritten( responseContainer[ 0 ] );
			}

			responseContainer = overwritten = undefined;
		} );

		// Delegate to script
		return "script";
	}
} );




// Support: Safari 8 only
// In Safari 8 documents created via document.implementation.createHTMLDocument
// collapse sibling forms: the second one becomes a child of the first one.
// Because of that, this security measure has to be disabled in Safari 8.
// https://bugs.webkit.org/show_bug.cgi?id=137337
support.createHTMLDocument = ( function() {
	var body = document.implementation.createHTMLDocument( "" ).body;
	body.innerHTML = "<form></form><form></form>";
	return body.childNodes.length === 2;
} )();


// Argument "data" should be string of html
// context (optional): If specified, the fragment will be created in this context,
// defaults to document
// keepScripts (optional): If true, will include scripts passed in the html string
jQuery.parseHTML = function( data, context, keepScripts ) {
	if ( typeof data !== "string" ) {
		return [];
	}
	if ( typeof context === "boolean" ) {
		keepScripts = context;
		context = false;
	}

	var base, parsed, scripts;

	if ( !context ) {

		// Stop scripts or inline event handlers from being executed immediately
		// by using document.implementation
		if ( support.createHTMLDocument ) {
			context = document.implementation.createHTMLDocument( "" );

			// Set the base href for the created document
			// so any parsed elements with URLs
			// are based on the document's URL (gh-2965)
			base = context.createElement( "base" );
			base.href = document.location.href;
			context.head.appendChild( base );
		} else {
			context = document;
		}
	}

	parsed = rsingleTag.exec( data );
	scripts = !keepScripts && [];

	// Single tag
	if ( parsed ) {
		return [ context.createElement( parsed[ 1 ] ) ];
	}

	parsed = buildFragment( [ data ], context, scripts );

	if ( scripts && scripts.length ) {
		jQuery( scripts ).remove();
	}

	return jQuery.merge( [], parsed.childNodes );
};


/**
 * Load a url into a page
 */
jQuery.fn.load = function( url, params, callback ) {
	var selector, type, response,
		self = this,
		off = url.indexOf( " " );

	if ( off > -1 ) {
		selector = stripAndCollapse( url.slice( off ) );
		url = url.slice( 0, off );
	}

	// If it's a function
	if ( isFunction( params ) ) {

		// We assume that it's the callback
		callback = params;
		params = undefined;

	// Otherwise, build a param string
	} else if ( params && typeof params === "object" ) {
		type = "POST";
	}

	// If we have elements to modify, make the request
	if ( self.length > 0 ) {
		jQuery.ajax( {
			url: url,

			// If "type" variable is undefined, then "GET" method will be used.
			// Make value of this field explicit since
			// user can override it through ajaxSetup method
			type: type || "GET",
			dataType: "html",
			data: params
		} ).done( function( responseText ) {

			// Save response for use in complete callback
			response = arguments;

			self.html( selector ?

				// If a selector was specified, locate the right elements in a dummy div
				// Exclude scripts to avoid IE 'Permission Denied' errors
				jQuery( "<div>" ).append( jQuery.parseHTML( responseText ) ).find( selector ) :

				// Otherwise use the full result
				responseText );

		// If the request succeeds, this function gets "data", "status", "jqXHR"
		// but they are ignored because response was set above.
		// If it fails, this function gets "jqXHR", "status", "error"
		} ).always( callback && function( jqXHR, status ) {
			self.each( function() {
				callback.apply( this, response || [ jqXHR.responseText, status, jqXHR ] );
			} );
		} );
	}

	return this;
};




jQuery.expr.pseudos.animated = function( elem ) {
	return jQuery.grep( jQuery.timers, function( fn ) {
		return elem === fn.elem;
	} ).length;
};




jQuery.offset = {
	setOffset: function( elem, options, i ) {
		var curPosition, curLeft, curCSSTop, curTop, curOffset, curCSSLeft, calculatePosition,
			position = jQuery.css( elem, "position" ),
			curElem = jQuery( elem ),
			props = {};

		// Set position first, in-case top/left are set even on static elem
		if ( position === "static" ) {
			elem.style.position = "relative";
		}

		curOffset = curElem.offset();
		curCSSTop = jQuery.css( elem, "top" );
		curCSSLeft = jQuery.css( elem, "left" );
		calculatePosition = ( position === "absolute" || position === "fixed" ) &&
			( curCSSTop + curCSSLeft ).indexOf( "auto" ) > -1;

		// Need to be able to calculate position if either
		// top or left is auto and position is either absolute or fixed
		if ( calculatePosition ) {
			curPosition = curElem.position();
			curTop = curPosition.top;
			curLeft = curPosition.left;

		} else {
			curTop = parseFloat( curCSSTop ) || 0;
			curLeft = parseFloat( curCSSLeft ) || 0;
		}

		if ( isFunction( options ) ) {

			// Use jQuery.extend here to allow modification of coordinates argument (gh-1848)
			options = options.call( elem, i, jQuery.extend( {}, curOffset ) );
		}

		if ( options.top != null ) {
			props.top = ( options.top - curOffset.top ) + curTop;
		}
		if ( options.left != null ) {
			props.left = ( options.left - curOffset.left ) + curLeft;
		}

		if ( "using" in options ) {
			options.using.call( elem, props );

		} else {
			curElem.css( props );
		}
	}
};

jQuery.fn.extend( {

	// offset() relates an element's border box to the document origin
	offset: function( options ) {

		// Preserve chaining for setter
		if ( arguments.length ) {
			return options === undefined ?
				this :
				this.each( function( i ) {
					jQuery.offset.setOffset( this, options, i );
				} );
		}

		var rect, win,
			elem = this[ 0 ];

		if ( !elem ) {
			return;
		}

		// Return zeros for disconnected and hidden (display: none) elements (gh-2310)
		// Support: IE <=11 only
		// Running getBoundingClientRect on a
		// disconnected node in IE throws an error
		if ( !elem.getClientRects().length ) {
			return { top: 0, left: 0 };
		}

		// Get document-relative position by adding viewport scroll to viewport-relative gBCR
		rect = elem.getBoundingClientRect();
		win = elem.ownerDocument.defaultView;
		return {
			top: rect.top + win.pageYOffset,
			left: rect.left + win.pageXOffset
		};
	},

	// position() relates an element's margin box to its offset parent's padding box
	// This corresponds to the behavior of CSS absolute positioning
	position: function() {
		if ( !this[ 0 ] ) {
			return;
		}

		var offsetParent, offset, doc,
			elem = this[ 0 ],
			parentOffset = { top: 0, left: 0 };

		// position:fixed elements are offset from the viewport, which itself always has zero offset
		if ( jQuery.css( elem, "position" ) === "fixed" ) {

			// Assume position:fixed implies availability of getBoundingClientRect
			offset = elem.getBoundingClientRect();

		} else {
			offset = this.offset();

			// Account for the *real* offset parent, which can be the document or its root element
			// when a statically positioned element is identified
			doc = elem.ownerDocument;
			offsetParent = elem.offsetParent || doc.documentElement;
			while ( offsetParent &&
				( offsetParent === doc.body || offsetParent === doc.documentElement ) &&
				jQuery.css( offsetParent, "position" ) === "static" ) {

				offsetParent = offsetParent.parentNode;
			}
			if ( offsetParent && offsetParent !== elem && offsetParent.nodeType === 1 ) {

				// Incorporate borders into its offset, since they are outside its content origin
				parentOffset = jQuery( offsetParent ).offset();
				parentOffset.top += jQuery.css( offsetParent, "borderTopWidth", true );
				parentOffset.left += jQuery.css( offsetParent, "borderLeftWidth", true );
			}
		}

		// Subtract parent offsets and element margins
		return {
			top: offset.top - parentOffset.top - jQuery.css( elem, "marginTop", true ),
			left: offset.left - parentOffset.left - jQuery.css( elem, "marginLeft", true )
		};
	},

	// This method will return documentElement in the following cases:
	// 1) For the element inside the iframe without offsetParent, this method will return
	//    documentElement of the parent window
	// 2) For the hidden or detached element
	// 3) For body or html element, i.e. in case of the html node - it will return itself
	//
	// but those exceptions were never presented as a real life use-cases
	// and might be considered as more preferable results.
	//
	// This logic, however, is not guaranteed and can change at any point in the future
	offsetParent: function() {
		return this.map( function() {
			var offsetParent = this.offsetParent;

			while ( offsetParent && jQuery.css( offsetParent, "position" ) === "static" ) {
				offsetParent = offsetParent.offsetParent;
			}

			return offsetParent || documentElement;
		} );
	}
} );

// Create scrollLeft and scrollTop methods
jQuery.each( { scrollLeft: "pageXOffset", scrollTop: "pageYOffset" }, function( method, prop ) {
	var top = "pageYOffset" === prop;

	jQuery.fn[ method ] = function( val ) {
		return access( this, function( elem, method, val ) {

			// Coalesce documents and windows
			var win;
			if ( isWindow( elem ) ) {
				win = elem;
			} else if ( elem.nodeType === 9 ) {
				win = elem.defaultView;
			}

			if ( val === undefined ) {
				return win ? win[ prop ] : elem[ method ];
			}

			if ( win ) {
				win.scrollTo(
					!top ? val : win.pageXOffset,
					top ? val : win.pageYOffset
				);

			} else {
				elem[ method ] = val;
			}
		}, method, val, arguments.length );
	};
} );

// Support: Safari <=7 - 9.1, Chrome <=37 - 49
// Add the top/left cssHooks using jQuery.fn.position
// Webkit bug: https://bugs.webkit.org/show_bug.cgi?id=29084
// Blink bug: https://bugs.chromium.org/p/chromium/issues/detail?id=589347
// getComputedStyle returns percent when specified for top/left/bottom/right;
// rather than make the css module depend on the offset module, just check for it here
jQuery.each( [ "top", "left" ], function( _i, prop ) {
	jQuery.cssHooks[ prop ] = addGetHookIf( support.pixelPosition,
		function( elem, computed ) {
			if ( computed ) {
				computed = curCSS( elem, prop );

				// If curCSS returns percentage, fallback to offset
				return rnumnonpx.test( computed ) ?
					jQuery( elem ).position()[ prop ] + "px" :
					computed;
			}
		}
	);
} );


// Create innerHeight, innerWidth, height, width, outerHeight and outerWidth methods
jQuery.each( { Height: "height", Width: "width" }, function( name, type ) {
	jQuery.each( {
		padding: "inner" + name,
		content: type,
		"": "outer" + name
	}, function( defaultExtra, funcName ) {

		// Margin is only for outerHeight, outerWidth
		jQuery.fn[ funcName ] = function( margin, value ) {
			var chainable = arguments.length && ( defaultExtra || typeof margin !== "boolean" ),
				extra = defaultExtra || ( margin === true || value === true ? "margin" : "border" );

			return access( this, function( elem, type, value ) {
				var doc;

				if ( isWindow( elem ) ) {

					// $( window ).outerWidth/Height return w/h including scrollbars (gh-1729)
					return funcName.indexOf( "outer" ) === 0 ?
						elem[ "inner" + name ] :
						elem.document.documentElement[ "client" + name ];
				}

				// Get document width or height
				if ( elem.nodeType === 9 ) {
					doc = elem.documentElement;

					// Either scroll[Width/Height] or offset[Width/Height] or client[Width/Height],
					// whichever is greatest
					return Math.max(
						elem.body[ "scroll" + name ], doc[ "scroll" + name ],
						elem.body[ "offset" + name ], doc[ "offset" + name ],
						doc[ "client" + name ]
					);
				}

				return value === undefined ?

					// Get width or height on the element, requesting but not forcing parseFloat
					jQuery.css( elem, type, extra ) :

					// Set width or height on the element
					jQuery.style( elem, type, value, extra );
			}, type, chainable ? margin : undefined, chainable );
		};
	} );
} );


jQuery.each( [
	"ajaxStart",
	"ajaxStop",
	"ajaxComplete",
	"ajaxError",
	"ajaxSuccess",
	"ajaxSend"
], function( _i, type ) {
	jQuery.fn[ type ] = function( fn ) {
		return this.on( type, fn );
	};
} );




jQuery.fn.extend( {

	bind: function( types, data, fn ) {
		return this.on( types, null, data, fn );
	},
	unbind: function( types, fn ) {
		return this.off( types, null, fn );
	},

	delegate: function( selector, types, data, fn ) {
		return this.on( types, selector, data, fn );
	},
	undelegate: function( selector, types, fn ) {

		// ( namespace ) or ( selector, types [, fn] )
		return arguments.length === 1 ?
			this.off( selector, "**" ) :
			this.off( types, selector || "**", fn );
	},

	hover: function( fnOver, fnOut ) {
		return this
			.on( "mouseenter", fnOver )
			.on( "mouseleave", fnOut || fnOver );
	}
} );

jQuery.each(
	( "blur focus focusin focusout resize scroll click dblclick " +
	"mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave " +
	"change select submit keydown keypress keyup contextmenu" ).split( " " ),
	function( _i, name ) {

		// Handle event binding
		jQuery.fn[ name ] = function( data, fn ) {
			return arguments.length > 0 ?
				this.on( name, null, data, fn ) :
				this.trigger( name );
		};
	}
);




// Support: Android <=4.0 only
// Make sure we trim BOM and NBSP
// Require that the "whitespace run" starts from a non-whitespace
// to avoid O(N^2) behavior when the engine would try matching "\s+$" at each space position.
var rtrim = /^[\s\uFEFF\xA0]+|([^\s\uFEFF\xA0])[\s\uFEFF\xA0]+$/g;

// Bind a function to a context, optionally partially applying any
// arguments.
// jQuery.proxy is deprecated to promote standards (specifically Function#bind)
// However, it is not slated for removal any time soon
jQuery.proxy = function( fn, context ) {
	var tmp, args, proxy;

	if ( typeof context === "string" ) {
		tmp = fn[ context ];
		context = fn;
		fn = tmp;
	}

	// Quick check to determine if target is callable, in the spec
	// this throws a TypeError, but we will just return undefined.
	if ( !isFunction( fn ) ) {
		return undefined;
	}

	// Simulated bind
	args = slice.call( arguments, 2 );
	proxy = function() {
		return fn.apply( context || this, args.concat( slice.call( arguments ) ) );
	};

	// Set the guid of unique handler to the same of original handler, so it can be removed
	proxy.guid = fn.guid = fn.guid || jQuery.guid++;

	return proxy;
};

jQuery.holdReady = function( hold ) {
	if ( hold ) {
		jQuery.readyWait++;
	} else {
		jQuery.ready( true );
	}
};
jQuery.isArray = Array.isArray;
jQuery.parseJSON = JSON.parse;
jQuery.nodeName = nodeName;
jQuery.isFunction = isFunction;
jQuery.isWindow = isWindow;
jQuery.camelCase = camelCase;
jQuery.type = toType;

jQuery.now = Date.now;

jQuery.isNumeric = function( obj ) {

	// As of jQuery 3.0, isNumeric is limited to
	// strings and numbers (primitives or objects)
	// that can be coerced to finite numbers (gh-2662)
	var type = jQuery.type( obj );
	return ( type === "number" || type === "string" ) &&

		// parseFloat NaNs numeric-cast false positives ("")
		// ...but misinterprets leading-number strings, particularly hex literals ("0x...")
		// subtraction forces infinities to NaN
		!isNaN( obj - parseFloat( obj ) );
};

jQuery.trim = function( text ) {
	return text == null ?
		"" :
		( text + "" ).replace( rtrim, "$1" );
};



// Register as a named AMD module, since jQuery can be concatenated with other
// files that may use define, but not via a proper concatenation script that
// understands anonymous AMD modules. A named AMD is safest and most robust
// way to register. Lowercase jquery is used because AMD module names are
// derived from file names, and jQuery is normally delivered in a lowercase
// file name. Do this after creating the global so that if an AMD module wants
// to call noConflict to hide this version of jQuery, it will work.

// Note that for maximum portability, libraries that are not jQuery should
// declare themselves as anonymous modules, and avoid setting a global if an
// AMD loader is present. jQuery is a special case. For more information, see
// https://github.com/jrburke/requirejs/wiki/Updating-existing-libraries#wiki-anon

if ( typeof define === "function" && define.amd ) {
	define( "jquery", [], function() {
		return jQuery;
	} );
}




var

	// Map over jQuery in case of overwrite
	_jQuery = window.jQuery,

	// Map over the $ in case of overwrite
	_$ = window.$;

jQuery.noConflict = function( deep ) {
	if ( window.$ === jQuery ) {
		window.$ = _$;
	}

	if ( deep && window.jQuery === jQuery ) {
		window.jQuery = _jQuery;
	}

	return jQuery;
};

// Expose jQuery and $ identifiers, even in AMD
// (trac-7102#comment:10, https://github.com/jquery/jquery/pull/557)
// and CommonJS for browser emulators (trac-13566)
if ( typeof noGlobal === "undefined" ) {
	window.jQuery = window.$ = jQuery;
}




return jQuery;
} );

/*!
 * jQuery Validation Plugin v1.19.5
 *
 * https://jqueryvalidation.org/
 *
 * Copyright (c) 2022 Jörn Zaefferer
 * Released under the MIT license
 */
(function( factory ) {
	if ( typeof define === "function" && define.amd ) {
		define( ["jquery"], factory );
	} else if (typeof module === "object" && module.exports) {
		module.exports = factory( require( "jquery" ) );
	} else {
		factory( jQuery );
	}
}(function( $ ) {

$.extend( $.fn, {

	// https://jqueryvalidation.org/validate/
	validate: function( options ) {

		// If nothing is selected, return nothing; can't chain anyway
		if ( !this.length ) {
			if ( options && options.debug && window.console ) {
				console.warn( "Nothing selected, can't validate, returning nothing." );
			}
			return;
		}

		// Check if a validator for this form was already created
		var validator = $.data( this[ 0 ], "validator" );
		if ( validator ) {
			return validator;
		}

		// Add novalidate tag if HTML5.
		this.attr( "novalidate", "novalidate" );

		validator = new $.validator( options, this[ 0 ] );
		$.data( this[ 0 ], "validator", validator );

		if ( validator.settings.onsubmit ) {

			this.on( "click.validate", ":submit", function( event ) {

				// Track the used submit button to properly handle scripted
				// submits later.
				validator.submitButton = event.currentTarget;

				// Allow suppressing validation by adding a cancel class to the submit button
				if ( $( this ).hasClass( "cancel" ) ) {
					validator.cancelSubmit = true;
				}

				// Allow suppressing validation by adding the html5 formnovalidate attribute to the submit button
				if ( $( this ).attr( "formnovalidate" ) !== undefined ) {
					validator.cancelSubmit = true;
				}
			} );

			// Validate the form on submit
			this.on( "submit.validate", function( event ) {
				if ( validator.settings.debug ) {

					// Prevent form submit to be able to see console output
					event.preventDefault();
				}

				function handle() {
					var hidden, result;

					// Insert a hidden input as a replacement for the missing submit button
					// The hidden input is inserted in two cases:
					//   - A user defined a `submitHandler`
					//   - There was a pending request due to `remote` method and `stopRequest()`
					//     was called to submit the form in case it's valid
					if ( validator.submitButton && ( validator.settings.submitHandler || validator.formSubmitted ) ) {
						hidden = $( "<input type='hidden'/>" )
							.attr( "name", validator.submitButton.name )
							.val( $( validator.submitButton ).val() )
							.appendTo( validator.currentForm );
					}

					if ( validator.settings.submitHandler && !validator.settings.debug ) {
						result = validator.settings.submitHandler.call( validator, validator.currentForm, event );
						if ( hidden ) {

							// And clean up afterwards; thanks to no-block-scope, hidden can be referenced
							hidden.remove();
						}
						if ( result !== undefined ) {
							return result;
						}
						return false;
					}
					return true;
				}

				// Prevent submit for invalid forms or custom submit handlers
				if ( validator.cancelSubmit ) {
					validator.cancelSubmit = false;
					return handle();
				}
				if ( validator.form() ) {
					if ( validator.pendingRequest ) {
						validator.formSubmitted = true;
						return false;
					}
					return handle();
				} else {
					validator.focusInvalid();
					return false;
				}
			} );
		}

		return validator;
	},

	// https://jqueryvalidation.org/valid/
	valid: function() {
		var valid, validator, errorList;

		if ( $( this[ 0 ] ).is( "form" ) ) {
			valid = this.validate().form();
		} else {
			errorList = [];
			valid = true;
			validator = $( this[ 0 ].form ).validate();
			this.each( function() {
				valid = validator.element( this ) && valid;
				if ( !valid ) {
					errorList = errorList.concat( validator.errorList );
				}
			} );
			validator.errorList = errorList;
		}
		return valid;
	},

	// https://jqueryvalidation.org/rules/
	rules: function( command, argument ) {
		var element = this[ 0 ],
			isContentEditable = typeof this.attr( "contenteditable" ) !== "undefined" && this.attr( "contenteditable" ) !== "false",
			settings, staticRules, existingRules, data, param, filtered;

		// If nothing is selected, return empty object; can't chain anyway
		if ( element == null ) {
			return;
		}

		if ( !element.form && isContentEditable ) {
			element.form = this.closest( "form" )[ 0 ];
			element.name = this.attr( "name" );
		}

		if ( element.form == null ) {
			return;
		}

		if ( command ) {
			settings = $.data( element.form, "validator" ).settings;
			staticRules = settings.rules;
			existingRules = $.validator.staticRules( element );
			switch ( command ) {
			case "add":
				$.extend( existingRules, $.validator.normalizeRule( argument ) );

				// Remove messages from rules, but allow them to be set separately
				delete existingRules.messages;
				staticRules[ element.name ] = existingRules;
				if ( argument.messages ) {
					settings.messages[ element.name ] = $.extend( settings.messages[ element.name ], argument.messages );
				}
				break;
			case "remove":
				if ( !argument ) {
					delete staticRules[ element.name ];
					return existingRules;
				}
				filtered = {};
				$.each( argument.split( /\s/ ), function( index, method ) {
					filtered[ method ] = existingRules[ method ];
					delete existingRules[ method ];
				} );
				return filtered;
			}
		}

		data = $.validator.normalizeRules(
		$.extend(
			{},
			$.validator.classRules( element ),
			$.validator.attributeRules( element ),
			$.validator.dataRules( element ),
			$.validator.staticRules( element )
		), element );

		// Make sure required is at front
		if ( data.required ) {
			param = data.required;
			delete data.required;
			data = $.extend( { required: param }, data );
		}

		// Make sure remote is at back
		if ( data.remote ) {
			param = data.remote;
			delete data.remote;
			data = $.extend( data, { remote: param } );
		}

		return data;
	}
} );

// JQuery trim is deprecated, provide a trim method based on String.prototype.trim
var trim = function( str ) {

	// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/trim#Polyfill
	return str.replace( /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g, "" );
};

// Custom selectors
$.extend( $.expr.pseudos || $.expr[ ":" ], {		// '|| $.expr[ ":" ]' here enables backwards compatibility to jQuery 1.7. Can be removed when dropping jQ 1.7.x support

	// https://jqueryvalidation.org/blank-selector/
	blank: function( a ) {
		return !trim( "" + $( a ).val() );
	},

	// https://jqueryvalidation.org/filled-selector/
	filled: function( a ) {
		var val = $( a ).val();
		return val !== null && !!trim( "" + val );
	},

	// https://jqueryvalidation.org/unchecked-selector/
	unchecked: function( a ) {
		return !$( a ).prop( "checked" );
	}
} );

// Constructor for validator
$.validator = function( options, form ) {
	this.settings = $.extend( true, {}, $.validator.defaults, options );
	this.currentForm = form;
	this.init();
};

// https://jqueryvalidation.org/jQuery.validator.format/
$.validator.format = function( source, params ) {
	if ( arguments.length === 1 ) {
		return function() {
			var args = $.makeArray( arguments );
			args.unshift( source );
			return $.validator.format.apply( this, args );
		};
	}
	if ( params === undefined ) {
		return source;
	}
	if ( arguments.length > 2 && params.constructor !== Array  ) {
		params = $.makeArray( arguments ).slice( 1 );
	}
	if ( params.constructor !== Array ) {
		params = [ params ];
	}
	$.each( params, function( i, n ) {
		source = source.replace( new RegExp( "\\{" + i + "\\}", "g" ), function() {
			return n;
		} );
	} );
	return source;
};

$.extend( $.validator, {

	defaults: {
		messages: {},
		groups: {},
		rules: {},
		errorClass: "error",
		pendingClass: "pending",
		validClass: "valid",
		errorElement: "label",
		focusCleanup: false,
		focusInvalid: true,
		errorContainer: $( [] ),
		errorLabelContainer: $( [] ),
		onsubmit: true,
		ignore: ":hidden",
		ignoreTitle: false,
		onfocusin: function( element ) {
			this.lastActive = element;

			// Hide error label and remove error class on focus if enabled
			if ( this.settings.focusCleanup ) {
				if ( this.settings.unhighlight ) {
					this.settings.unhighlight.call( this, element, this.settings.errorClass, this.settings.validClass );
				}
				this.hideThese( this.errorsFor( element ) );
			}
		},
		onfocusout: function( element ) {
			if ( !this.checkable( element ) && ( element.name in this.submitted || !this.optional( element ) ) ) {
				this.element( element );
			}
		},
		onkeyup: function( element, event ) {

			// Avoid revalidate the field when pressing one of the following keys
			// Shift       => 16
			// Ctrl        => 17
			// Alt         => 18
			// Caps lock   => 20
			// End         => 35
			// Home        => 36
			// Left arrow  => 37
			// Up arrow    => 38
			// Right arrow => 39
			// Down arrow  => 40
			// Insert      => 45
			// Num lock    => 144
			// AltGr key   => 225
			var excludedKeys = [
				16, 17, 18, 20, 35, 36, 37,
				38, 39, 40, 45, 144, 225
			];

			if ( event.which === 9 && this.elementValue( element ) === "" || $.inArray( event.keyCode, excludedKeys ) !== -1 ) {
				return;
			} else if ( element.name in this.submitted || element.name in this.invalid ) {
				this.element( element );
			}
		},
		onclick: function( element ) {

			// Click on selects, radiobuttons and checkboxes
			if ( element.name in this.submitted ) {
				this.element( element );

			// Or option elements, check parent select in that case
			} else if ( element.parentNode.name in this.submitted ) {
				this.element( element.parentNode );
			}
		},
		highlight: function( element, errorClass, validClass ) {
			if ( element.type === "radio" ) {
				this.findByName( element.name ).addClass( errorClass ).removeClass( validClass );
			} else {
				$( element ).addClass( errorClass ).removeClass( validClass );
			}
		},
		unhighlight: function( element, errorClass, validClass ) {
			if ( element.type === "radio" ) {
				this.findByName( element.name ).removeClass( errorClass ).addClass( validClass );
			} else {
				$( element ).removeClass( errorClass ).addClass( validClass );
			}
		}
	},

	// https://jqueryvalidation.org/jQuery.validator.setDefaults/
	setDefaults: function( settings ) {
		$.extend( $.validator.defaults, settings );
	},

	messages: {
		required: "This field is required.",
		remote: "Please fix this field.",
		email: "Please enter a valid email address.",
		url: "Please enter a valid URL.",
		date: "Please enter a valid date.",
		dateISO: "Please enter a valid date (ISO).",
		number: "Please enter a valid number.",
		digits: "Please enter only digits.",
		equalTo: "Please enter the same value again.",
		maxlength: $.validator.format( "Please enter no more than {0} characters." ),
		minlength: $.validator.format( "Please enter at least {0} characters." ),
		rangelength: $.validator.format( "Please enter a value between {0} and {1} characters long." ),
		range: $.validator.format( "Please enter a value between {0} and {1}." ),
		max: $.validator.format( "Please enter a value less than or equal to {0}." ),
		min: $.validator.format( "Please enter a value greater than or equal to {0}." ),
		step: $.validator.format( "Please enter a multiple of {0}." )
	},

	autoCreateRanges: false,

	prototype: {

		init: function() {
			this.labelContainer = $( this.settings.errorLabelContainer );
			this.errorContext = this.labelContainer.length && this.labelContainer || $( this.currentForm );
			this.containers = $( this.settings.errorContainer ).add( this.settings.errorLabelContainer );
			this.submitted = {};
			this.valueCache = {};
			this.pendingRequest = 0;
			this.pending = {};
			this.invalid = {};
			this.reset();

			var currentForm = this.currentForm,
				groups = ( this.groups = {} ),
				rules;
			$.each( this.settings.groups, function( key, value ) {
				if ( typeof value === "string" ) {
					value = value.split( /\s/ );
				}
				$.each( value, function( index, name ) {
					groups[ name ] = key;
				} );
			} );
			rules = this.settings.rules;
			$.each( rules, function( key, value ) {
				rules[ key ] = $.validator.normalizeRule( value );
			} );

			function delegate( event ) {
				var isContentEditable = typeof $( this ).attr( "contenteditable" ) !== "undefined" && $( this ).attr( "contenteditable" ) !== "false";

				// Set form expando on contenteditable
				if ( !this.form && isContentEditable ) {
					this.form = $( this ).closest( "form" )[ 0 ];
					this.name = $( this ).attr( "name" );
				}

				// Ignore the element if it belongs to another form. This will happen mainly
				// when setting the `form` attribute of an input to the id of another form.
				if ( currentForm !== this.form ) {
					return;
				}

				var validator = $.data( this.form, "validator" ),
					eventType = "on" + event.type.replace( /^validate/, "" ),
					settings = validator.settings;
				if ( settings[ eventType ] && !$( this ).is( settings.ignore ) ) {
					settings[ eventType ].call( validator, this, event );
				}
			}

			$( this.currentForm )
				.on( "focusin.validate focusout.validate keyup.validate",
					":text, [type='password'], [type='file'], select, textarea, [type='number'], [type='search'], " +
					"[type='tel'], [type='url'], [type='email'], [type='datetime'], [type='date'], [type='month'], " +
					"[type='week'], [type='time'], [type='datetime-local'], [type='range'], [type='color'], " +
					"[type='radio'], [type='checkbox'], [contenteditable], [type='button']", delegate )

				// Support: Chrome, oldIE
				// "select" is provided as event.target when clicking a option
				.on( "click.validate", "select, option, [type='radio'], [type='checkbox']", delegate );

			if ( this.settings.invalidHandler ) {
				$( this.currentForm ).on( "invalid-form.validate", this.settings.invalidHandler );
			}
		},

		// https://jqueryvalidation.org/Validator.form/
		form: function() {
			this.checkForm();
			$.extend( this.submitted, this.errorMap );
			this.invalid = $.extend( {}, this.errorMap );
			if ( !this.valid() ) {
				$( this.currentForm ).triggerHandler( "invalid-form", [ this ] );
			}
			this.showErrors();
			return this.valid();
		},

		checkForm: function() {
			this.prepareForm();
			for ( var i = 0, elements = ( this.currentElements = this.elements() ); elements[ i ]; i++ ) {
				this.check( elements[ i ] );
			}
			return this.valid();
		},

		// https://jqueryvalidation.org/Validator.element/
		element: function( element ) {
			var cleanElement = this.clean( element ),
				checkElement = this.validationTargetFor( cleanElement ),
				v = this,
				result = true,
				rs, group;

			if ( checkElement === undefined ) {
				delete this.invalid[ cleanElement.name ];
			} else {
				this.prepareElement( checkElement );
				this.currentElements = $( checkElement );

				// If this element is grouped, then validate all group elements already
				// containing a value
				group = this.groups[ checkElement.name ];
				if ( group ) {
					$.each( this.groups, function( name, testgroup ) {
						if ( testgroup === group && name !== checkElement.name ) {
							cleanElement = v.validationTargetFor( v.clean( v.findByName( name ) ) );
							if ( cleanElement && cleanElement.name in v.invalid ) {
								v.currentElements.push( cleanElement );
								result = v.check( cleanElement ) && result;
							}
						}
					} );
				}

				rs = this.check( checkElement ) !== false;
				result = result && rs;
				if ( rs ) {
					this.invalid[ checkElement.name ] = false;
				} else {
					this.invalid[ checkElement.name ] = true;
				}

				if ( !this.numberOfInvalids() ) {

					// Hide error containers on last error
					this.toHide = this.toHide.add( this.containers );
				}
				this.showErrors();

				// Add aria-invalid status for screen readers
				$( element ).attr( "aria-invalid", !rs );
			}

			return result;
		},

		// https://jqueryvalidation.org/Validator.showErrors/
		showErrors: function( errors ) {
			if ( errors ) {
				var validator = this;

				// Add items to error list and map
				$.extend( this.errorMap, errors );
				this.errorList = $.map( this.errorMap, function( message, name ) {
					return {
						message: message,
						element: validator.findByName( name )[ 0 ]
					};
				} );

				// Remove items from success list
				this.successList = $.grep( this.successList, function( element ) {
					return !( element.name in errors );
				} );
			}
			if ( this.settings.showErrors ) {
				this.settings.showErrors.call( this, this.errorMap, this.errorList );
			} else {
				this.defaultShowErrors();
			}
		},

		// https://jqueryvalidation.org/Validator.resetForm/
		resetForm: function() {
			if ( $.fn.resetForm ) {
				$( this.currentForm ).resetForm();
			}
			this.invalid = {};
			this.submitted = {};
			this.prepareForm();
			this.hideErrors();
			var elements = this.elements()
				.removeData( "previousValue" )
				.removeAttr( "aria-invalid" );

			this.resetElements( elements );
		},

		resetElements: function( elements ) {
			var i;

			if ( this.settings.unhighlight ) {
				for ( i = 0; elements[ i ]; i++ ) {
					this.settings.unhighlight.call( this, elements[ i ],
						this.settings.errorClass, "" );
					this.findByName( elements[ i ].name ).removeClass( this.settings.validClass );
				}
			} else {
				elements
					.removeClass( this.settings.errorClass )
					.removeClass( this.settings.validClass );
			}
		},

		numberOfInvalids: function() {
			return this.objectLength( this.invalid );
		},

		objectLength: function( obj ) {
			/* jshint unused: false */
			var count = 0,
				i;
			for ( i in obj ) {

				// This check allows counting elements with empty error
				// message as invalid elements
				if ( obj[ i ] !== undefined && obj[ i ] !== null && obj[ i ] !== false ) {
					count++;
				}
			}
			return count;
		},

		hideErrors: function() {
			this.hideThese( this.toHide );
		},

		hideThese: function( errors ) {
			errors.not( this.containers ).text( "" );
			this.addWrapper( errors ).hide();
		},

		valid: function() {
			return this.size() === 0;
		},

		size: function() {
			return this.errorList.length;
		},

		focusInvalid: function() {
			if ( this.settings.focusInvalid ) {
				try {
					$( this.findLastActive() || this.errorList.length && this.errorList[ 0 ].element || [] )
					.filter( ":visible" )
					.trigger( "focus" )

					// Manually trigger focusin event; without it, focusin handler isn't called, findLastActive won't have anything to find
					.trigger( "focusin" );
				} catch ( e ) {

					// Ignore IE throwing errors when focusing hidden elements
				}
			}
		},

		findLastActive: function() {
			var lastActive = this.lastActive;
			return lastActive && $.grep( this.errorList, function( n ) {
				return n.element.name === lastActive.name;
			} ).length === 1 && lastActive;
		},

		elements: function() {
			var validator = this,
				rulesCache = {};

			// Select all valid inputs inside the form (no submit or reset buttons)
			return $( this.currentForm )
			.find( "input, select, textarea, [contenteditable]" )
			.not( ":submit, :reset, :image, :disabled" )
			.not( this.settings.ignore )
			.filter( function() {
				var name = this.name || $( this ).attr( "name" ); // For contenteditable
				var isContentEditable = typeof $( this ).attr( "contenteditable" ) !== "undefined" && $( this ).attr( "contenteditable" ) !== "false";

				if ( !name && validator.settings.debug && window.console ) {
					console.error( "%o has no name assigned", this );
				}

				// Set form expando on contenteditable
				if ( isContentEditable ) {
					this.form = $( this ).closest( "form" )[ 0 ];
					this.name = name;
				}

				// Ignore elements that belong to other/nested forms
				if ( this.form !== validator.currentForm ) {
					return false;
				}

				// Select only the first element for each name, and only those with rules specified
				if ( name in rulesCache || !validator.objectLength( $( this ).rules() ) ) {
					return false;
				}

				rulesCache[ name ] = true;
				return true;
			} );
		},

		clean: function( selector ) {
			return $( selector )[ 0 ];
		},

		errors: function() {
			var errorClass = this.settings.errorClass.split( " " ).join( "." );
			return $( this.settings.errorElement + "." + errorClass, this.errorContext );
		},

		resetInternals: function() {
			this.successList = [];
			this.errorList = [];
			this.errorMap = {};
			this.toShow = $( [] );
			this.toHide = $( [] );
		},

		reset: function() {
			this.resetInternals();
			this.currentElements = $( [] );
		},

		prepareForm: function() {
			this.reset();
			this.toHide = this.errors().add( this.containers );
		},

		prepareElement: function( element ) {
			this.reset();
			this.toHide = this.errorsFor( element );
		},

		elementValue: function( element ) {
			var $element = $( element ),
				type = element.type,
				isContentEditable = typeof $element.attr( "contenteditable" ) !== "undefined" && $element.attr( "contenteditable" ) !== "false",
				val, idx;

			if ( type === "radio" || type === "checkbox" ) {
				return this.findByName( element.name ).filter( ":checked" ).val();
			} else if ( type === "number" && typeof element.validity !== "undefined" ) {
				return element.validity.badInput ? "NaN" : $element.val();
			}

			if ( isContentEditable ) {
				val = $element.text();
			} else {
				val = $element.val();
			}

			if ( type === "file" ) {

				// Modern browser (chrome & safari)
				if ( val.substr( 0, 12 ) === "C:\\fakepath\\" ) {
					return val.substr( 12 );
				}

				// Legacy browsers
				// Unix-based path
				idx = val.lastIndexOf( "/" );
				if ( idx >= 0 ) {
					return val.substr( idx + 1 );
				}

				// Windows-based path
				idx = val.lastIndexOf( "\\" );
				if ( idx >= 0 ) {
					return val.substr( idx + 1 );
				}

				// Just the file name
				return val;
			}

			if ( typeof val === "string" ) {
				return val.replace( /\r/g, "" );
			}
			return val;
		},

		check: function( element ) {
			element = this.validationTargetFor( this.clean( element ) );

			var rules = $( element ).rules(),
				rulesCount = $.map( rules, function( n, i ) {
					return i;
				} ).length,
				dependencyMismatch = false,
				val = this.elementValue( element ),
				result, method, rule, normalizer;

			// Prioritize the local normalizer defined for this element over the global one
			// if the former exists, otherwise user the global one in case it exists.
			if ( typeof rules.normalizer === "function" ) {
				normalizer = rules.normalizer;
			} else if (	typeof this.settings.normalizer === "function" ) {
				normalizer = this.settings.normalizer;
			}

			// If normalizer is defined, then call it to retreive the changed value instead
			// of using the real one.
			// Note that `this` in the normalizer is `element`.
			if ( normalizer ) {
				val = normalizer.call( element, val );

				// Delete the normalizer from rules to avoid treating it as a pre-defined method.
				delete rules.normalizer;
			}

			for ( method in rules ) {
				rule = { method: method, parameters: rules[ method ] };
				try {
					result = $.validator.methods[ method ].call( this, val, element, rule.parameters );

					// If a method indicates that the field is optional and therefore valid,
					// don't mark it as valid when there are no other rules
					if ( result === "dependency-mismatch" && rulesCount === 1 ) {
						dependencyMismatch = true;
						continue;
					}
					dependencyMismatch = false;

					if ( result === "pending" ) {
						this.toHide = this.toHide.not( this.errorsFor( element ) );
						return;
					}

					if ( !result ) {
						this.formatAndAdd( element, rule );
						return false;
					}
				} catch ( e ) {
					if ( this.settings.debug && window.console ) {
						console.log( "Exception occurred when checking element " + element.id + ", check the '" + rule.method + "' method.", e );
					}
					if ( e instanceof TypeError ) {
						e.message += ".  Exception occurred when checking element " + element.id + ", check the '" + rule.method + "' method.";
					}

					throw e;
				}
			}
			if ( dependencyMismatch ) {
				return;
			}
			if ( this.objectLength( rules ) ) {
				this.successList.push( element );
			}
			return true;
		},

		// Return the custom message for the given element and validation method
		// specified in the element's HTML5 data attribute
		// return the generic message if present and no method specific message is present
		customDataMessage: function( element, method ) {
			return $( element ).data( "msg" + method.charAt( 0 ).toUpperCase() +
				method.substring( 1 ).toLowerCase() ) || $( element ).data( "msg" );
		},

		// Return the custom message for the given element name and validation method
		customMessage: function( name, method ) {
			var m = this.settings.messages[ name ];
			return m && ( m.constructor === String ? m : m[ method ] );
		},

		// Return the first defined argument, allowing empty strings
		findDefined: function() {
			for ( var i = 0; i < arguments.length; i++ ) {
				if ( arguments[ i ] !== undefined ) {
					return arguments[ i ];
				}
			}
			return undefined;
		},

		// The second parameter 'rule' used to be a string, and extended to an object literal
		// of the following form:
		// rule = {
		//     method: "method name",
		//     parameters: "the given method parameters"
		// }
		//
		// The old behavior still supported, kept to maintain backward compatibility with
		// old code, and will be removed in the next major release.
		defaultMessage: function( element, rule ) {
			if ( typeof rule === "string" ) {
				rule = { method: rule };
			}

			var message = this.findDefined(
					this.customMessage( element.name, rule.method ),
					this.customDataMessage( element, rule.method ),

					// 'title' is never undefined, so handle empty string as undefined
					!this.settings.ignoreTitle && element.title || undefined,
					$.validator.messages[ rule.method ],
					"<strong>Warning: No message defined for " + element.name + "</strong>"
				),
				theregex = /\$?\{(\d+)\}/g;
			if ( typeof message === "function" ) {
				message = message.call( this, rule.parameters, element );
			} else if ( theregex.test( message ) ) {
				message = $.validator.format( message.replace( theregex, "{$1}" ), rule.parameters );
			}

			return message;
		},

		formatAndAdd: function( element, rule ) {
			var message = this.defaultMessage( element, rule );

			this.errorList.push( {
				message: message,
				element: element,
				method: rule.method
			} );

			this.errorMap[ element.name ] = message;
			this.submitted[ element.name ] = message;
		},

		addWrapper: function( toToggle ) {
			if ( this.settings.wrapper ) {
				toToggle = toToggle.add( toToggle.parent( this.settings.wrapper ) );
			}
			return toToggle;
		},

		defaultShowErrors: function() {
			var i, elements, error;
			for ( i = 0; this.errorList[ i ]; i++ ) {
				error = this.errorList[ i ];
				if ( this.settings.highlight ) {
					this.settings.highlight.call( this, error.element, this.settings.errorClass, this.settings.validClass );
				}
				this.showLabel( error.element, error.message );
			}
			if ( this.errorList.length ) {
				this.toShow = this.toShow.add( this.containers );
			}
			if ( this.settings.success ) {
				for ( i = 0; this.successList[ i ]; i++ ) {
					this.showLabel( this.successList[ i ] );
				}
			}
			if ( this.settings.unhighlight ) {
				for ( i = 0, elements = this.validElements(); elements[ i ]; i++ ) {
					this.settings.unhighlight.call( this, elements[ i ], this.settings.errorClass, this.settings.validClass );
				}
			}
			this.toHide = this.toHide.not( this.toShow );
			this.hideErrors();
			this.addWrapper( this.toShow ).show();
		},

		validElements: function() {
			return this.currentElements.not( this.invalidElements() );
		},

		invalidElements: function() {
			return $( this.errorList ).map( function() {
				return this.element;
			} );
		},

		showLabel: function( element, message ) {
			var place, group, errorID, v,
				error = this.errorsFor( element ),
				elementID = this.idOrName( element ),
				describedBy = $( element ).attr( "aria-describedby" );

			if ( error.length ) {

				// Refresh error/success class
				error.removeClass( this.settings.validClass ).addClass( this.settings.errorClass );

				// Replace message on existing label
				error.html( message );
			} else {

				// Create error element
				error = $( "<" + this.settings.errorElement + ">" )
					.attr( "id", elementID + "-error" )
					.addClass( this.settings.errorClass )
					.html( message || "" );

				// Maintain reference to the element to be placed into the DOM
				place = error;
				if ( this.settings.wrapper ) {

					// Make sure the element is visible, even in IE
					// actually showing the wrapped element is handled elsewhere
					place = error.hide().show().wrap( "<" + this.settings.wrapper + "/>" ).parent();
				}
				if ( this.labelContainer.length ) {
					this.labelContainer.append( place );
				} else if ( this.settings.errorPlacement ) {
					this.settings.errorPlacement.call( this, place, $( element ) );
				} else {
					place.insertAfter( element );
				}

				// Link error back to the element
				if ( error.is( "label" ) ) {

					// If the error is a label, then associate using 'for'
					error.attr( "for", elementID );

					// If the element is not a child of an associated label, then it's necessary
					// to explicitly apply aria-describedby
				} else if ( error.parents( "label[for='" + this.escapeCssMeta( elementID ) + "']" ).length === 0 ) {
					errorID = error.attr( "id" );

					// Respect existing non-error aria-describedby
					if ( !describedBy ) {
						describedBy = errorID;
					} else if ( !describedBy.match( new RegExp( "\\b" + this.escapeCssMeta( errorID ) + "\\b" ) ) ) {

						// Add to end of list if not already present
						describedBy += " " + errorID;
					}
					$( element ).attr( "aria-describedby", describedBy );

					// If this element is grouped, then assign to all elements in the same group
					group = this.groups[ element.name ];
					if ( group ) {
						v = this;
						$.each( v.groups, function( name, testgroup ) {
							if ( testgroup === group ) {
								$( "[name='" + v.escapeCssMeta( name ) + "']", v.currentForm )
									.attr( "aria-describedby", error.attr( "id" ) );
							}
						} );
					}
				}
			}
			if ( !message && this.settings.success ) {
				error.text( "" );
				if ( typeof this.settings.success === "string" ) {
					error.addClass( this.settings.success );
				} else {
					this.settings.success( error, element );
				}
			}
			this.toShow = this.toShow.add( error );
		},

		errorsFor: function( element ) {
			var name = this.escapeCssMeta( this.idOrName( element ) ),
				describer = $( element ).attr( "aria-describedby" ),
				selector = "label[for='" + name + "'], label[for='" + name + "'] *";

			// 'aria-describedby' should directly reference the error element
			if ( describer ) {
				selector = selector + ", #" + this.escapeCssMeta( describer )
					.replace( /\s+/g, ", #" );
			}

			return this
				.errors()
				.filter( selector );
		},

		// See https://api.jquery.com/category/selectors/, for CSS
		// meta-characters that should be escaped in order to be used with JQuery
		// as a literal part of a name/id or any selector.
		escapeCssMeta: function( string ) {
			if ( string === undefined ) {
				return "";
			}

			return string.replace( /([\\!"#$%&'()*+,./:;<=>?@\[\]^`{|}~])/g, "\\$1" );
		},

		idOrName: function( element ) {
			return this.groups[ element.name ] || ( this.checkable( element ) ? element.name : element.id || element.name );
		},

		validationTargetFor: function( element ) {

			// If radio/checkbox, validate first element in group instead
			if ( this.checkable( element ) ) {
				element = this.findByName( element.name );
			}

			// Always apply ignore filter
			return $( element ).not( this.settings.ignore )[ 0 ];
		},

		checkable: function( element ) {
			return ( /radio|checkbox/i ).test( element.type );
		},

		findByName: function( name ) {
			return $( this.currentForm ).find( "[name='" + this.escapeCssMeta( name ) + "']" );
		},

		getLength: function( value, element ) {
			switch ( element.nodeName.toLowerCase() ) {
			case "select":
				return $( "option:selected", element ).length;
			case "input":
				if ( this.checkable( element ) ) {
					return this.findByName( element.name ).filter( ":checked" ).length;
				}
			}
			return value.length;
		},

		depend: function( param, element ) {
			return this.dependTypes[ typeof param ] ? this.dependTypes[ typeof param ]( param, element ) : true;
		},

		dependTypes: {
			"boolean": function( param ) {
				return param;
			},
			"string": function( param, element ) {
				return !!$( param, element.form ).length;
			},
			"function": function( param, element ) {
				return param( element );
			}
		},

		optional: function( element ) {
			var val = this.elementValue( element );
			return !$.validator.methods.required.call( this, val, element ) && "dependency-mismatch";
		},

		startRequest: function( element ) {
			if ( !this.pending[ element.name ] ) {
				this.pendingRequest++;
				$( element ).addClass( this.settings.pendingClass );
				this.pending[ element.name ] = true;
			}
		},

		stopRequest: function( element, valid ) {
			this.pendingRequest--;

			// Sometimes synchronization fails, make sure pendingRequest is never < 0
			if ( this.pendingRequest < 0 ) {
				this.pendingRequest = 0;
			}
			delete this.pending[ element.name ];
			$( element ).removeClass( this.settings.pendingClass );
			if ( valid && this.pendingRequest === 0 && this.formSubmitted && this.form() && this.pendingRequest === 0 ) {
				$( this.currentForm ).trigger( "submit" );

				// Remove the hidden input that was used as a replacement for the
				// missing submit button. The hidden input is added by `handle()`
				// to ensure that the value of the used submit button is passed on
				// for scripted submits triggered by this method
				if ( this.submitButton ) {
					$( "input:hidden[name='" + this.submitButton.name + "']", this.currentForm ).remove();
				}

				this.formSubmitted = false;
			} else if ( !valid && this.pendingRequest === 0 && this.formSubmitted ) {
				$( this.currentForm ).triggerHandler( "invalid-form", [ this ] );
				this.formSubmitted = false;
			}
		},

		previousValue: function( element, method ) {
			method = typeof method === "string" && method || "remote";

			return $.data( element, "previousValue" ) || $.data( element, "previousValue", {
				old: null,
				valid: true,
				message: this.defaultMessage( element, { method: method } )
			} );
		},

		// Cleans up all forms and elements, removes validator-specific events
		destroy: function() {
			this.resetForm();

			$( this.currentForm )
				.off( ".validate" )
				.removeData( "validator" )
				.find( ".validate-equalTo-blur" )
					.off( ".validate-equalTo" )
					.removeClass( "validate-equalTo-blur" )
				.find( ".validate-lessThan-blur" )
					.off( ".validate-lessThan" )
					.removeClass( "validate-lessThan-blur" )
				.find( ".validate-lessThanEqual-blur" )
					.off( ".validate-lessThanEqual" )
					.removeClass( "validate-lessThanEqual-blur" )
				.find( ".validate-greaterThanEqual-blur" )
					.off( ".validate-greaterThanEqual" )
					.removeClass( "validate-greaterThanEqual-blur" )
				.find( ".validate-greaterThan-blur" )
					.off( ".validate-greaterThan" )
					.removeClass( "validate-greaterThan-blur" );
		}

	},

	classRuleSettings: {
		required: { required: true },
		email: { email: true },
		url: { url: true },
		date: { date: true },
		dateISO: { dateISO: true },
		number: { number: true },
		digits: { digits: true },
		creditcard: { creditcard: true }
	},

	addClassRules: function( className, rules ) {
		if ( className.constructor === String ) {
			this.classRuleSettings[ className ] = rules;
		} else {
			$.extend( this.classRuleSettings, className );
		}
	},

	classRules: function( element ) {
		var rules = {},
			classes = $( element ).attr( "class" );

		if ( classes ) {
			$.each( classes.split( " " ), function() {
				if ( this in $.validator.classRuleSettings ) {
					$.extend( rules, $.validator.classRuleSettings[ this ] );
				}
			} );
		}
		return rules;
	},

	normalizeAttributeRule: function( rules, type, method, value ) {

		// Convert the value to a number for number inputs, and for text for backwards compability
		// allows type="date" and others to be compared as strings
		if ( /min|max|step/.test( method ) && ( type === null || /number|range|text/.test( type ) ) ) {
			value = Number( value );

			// Support Opera Mini, which returns NaN for undefined minlength
			if ( isNaN( value ) ) {
				value = undefined;
			}
		}

		if ( value || value === 0 ) {
			rules[ method ] = value;
		} else if ( type === method && type !== "range" ) {

			// Exception: the jquery validate 'range' method
			// does not test for the html5 'range' type
			rules[ type === "date" ? "dateISO" : method ] = true;
		}
	},

	attributeRules: function( element ) {
		var rules = {},
			$element = $( element ),
			type = element.getAttribute( "type" ),
			method, value;

		for ( method in $.validator.methods ) {

			// Support for <input required> in both html5 and older browsers
			if ( method === "required" ) {
				value = element.getAttribute( method );

				// Some browsers return an empty string for the required attribute
				// and non-HTML5 browsers might have required="" markup
				if ( value === "" ) {
					value = true;
				}

				// Force non-HTML5 browsers to return bool
				value = !!value;
			} else {
				value = $element.attr( method );
			}

			this.normalizeAttributeRule( rules, type, method, value );
		}

		// 'maxlength' may be returned as -1, 2147483647 ( IE ) and 524288 ( safari ) for text inputs
		if ( rules.maxlength && /-1|2147483647|524288/.test( rules.maxlength ) ) {
			delete rules.maxlength;
		}

		return rules;
	},

	dataRules: function( element ) {
		var rules = {},
			$element = $( element ),
			type = element.getAttribute( "type" ),
			method, value;

		for ( method in $.validator.methods ) {
			value = $element.data( "rule" + method.charAt( 0 ).toUpperCase() + method.substring( 1 ).toLowerCase() );

			// Cast empty attributes like `data-rule-required` to `true`
			if ( value === "" ) {
				value = true;
			}

			this.normalizeAttributeRule( rules, type, method, value );
		}
		return rules;
	},

	staticRules: function( element ) {
		var rules = {},
			validator = $.data( element.form, "validator" );

		if ( validator.settings.rules ) {
			rules = $.validator.normalizeRule( validator.settings.rules[ element.name ] ) || {};
		}
		return rules;
	},

	normalizeRules: function( rules, element ) {

		// Handle dependency check
		$.each( rules, function( prop, val ) {

			// Ignore rule when param is explicitly false, eg. required:false
			if ( val === false ) {
				delete rules[ prop ];
				return;
			}
			if ( val.param || val.depends ) {
				var keepRule = true;
				switch ( typeof val.depends ) {
				case "string":
					keepRule = !!$( val.depends, element.form ).length;
					break;
				case "function":
					keepRule = val.depends.call( element, element );
					break;
				}
				if ( keepRule ) {
					rules[ prop ] = val.param !== undefined ? val.param : true;
				} else {
					$.data( element.form, "validator" ).resetElements( $( element ) );
					delete rules[ prop ];
				}
			}
		} );

		// Evaluate parameters
		$.each( rules, function( rule, parameter ) {
			rules[ rule ] = typeof parameter === "function" && rule !== "normalizer" ? parameter( element ) : parameter;
		} );

		// Clean number parameters
		$.each( [ "minlength", "maxlength" ], function() {
			if ( rules[ this ] ) {
				rules[ this ] = Number( rules[ this ] );
			}
		} );
		$.each( [ "rangelength", "range" ], function() {
			var parts;
			if ( rules[ this ] ) {
				if ( Array.isArray( rules[ this ] ) ) {
					rules[ this ] = [ Number( rules[ this ][ 0 ] ), Number( rules[ this ][ 1 ] ) ];
				} else if ( typeof rules[ this ] === "string" ) {
					parts = rules[ this ].replace( /[\[\]]/g, "" ).split( /[\s,]+/ );
					rules[ this ] = [ Number( parts[ 0 ] ), Number( parts[ 1 ] ) ];
				}
			}
		} );

		if ( $.validator.autoCreateRanges ) {

			// Auto-create ranges
			if ( rules.min != null && rules.max != null ) {
				rules.range = [ rules.min, rules.max ];
				delete rules.min;
				delete rules.max;
			}
			if ( rules.minlength != null && rules.maxlength != null ) {
				rules.rangelength = [ rules.minlength, rules.maxlength ];
				delete rules.minlength;
				delete rules.maxlength;
			}
		}

		return rules;
	},

	// Converts a simple string to a {string: true} rule, e.g., "required" to {required:true}
	normalizeRule: function( data ) {
		if ( typeof data === "string" ) {
			var transformed = {};
			$.each( data.split( /\s/ ), function() {
				transformed[ this ] = true;
			} );
			data = transformed;
		}
		return data;
	},

	// https://jqueryvalidation.org/jQuery.validator.addMethod/
	addMethod: function( name, method, message ) {
		$.validator.methods[ name ] = method;
		$.validator.messages[ name ] = message !== undefined ? message : $.validator.messages[ name ];
		if ( method.length < 3 ) {
			$.validator.addClassRules( name, $.validator.normalizeRule( name ) );
		}
	},

	// https://jqueryvalidation.org/jQuery.validator.methods/
	methods: {

		// https://jqueryvalidation.org/required-method/
		required: function( value, element, param ) {

			// Check if dependency is met
			if ( !this.depend( param, element ) ) {
				return "dependency-mismatch";
			}
			if ( element.nodeName.toLowerCase() === "select" ) {

				// Could be an array for select-multiple or a string, both are fine this way
				var val = $( element ).val();
				return val && val.length > 0;
			}
			if ( this.checkable( element ) ) {
				return this.getLength( value, element ) > 0;
			}
			return value !== undefined && value !== null && value.length > 0;
		},

		// https://jqueryvalidation.org/email-method/
		email: function( value, element ) {

			// From https://html.spec.whatwg.org/multipage/forms.html#valid-e-mail-address
			// Retrieved 2014-01-14
			// If you have a problem with this implementation, report a bug against the above spec
			// Or use custom methods to implement your own email validation
			return this.optional( element ) || /^[a-zA-Z0-9.!#$%&'*+\/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/.test( value );
		},

		// https://jqueryvalidation.org/url-method/
		url: function( value, element ) {

			// Copyright (c) 2010-2013 Diego Perini, MIT licensed
			// https://gist.github.com/dperini/729294
			// see also https://mathiasbynens.be/demo/url-regex
			// modified to allow protocol-relative URLs
			return this.optional( element ) || /^(?:(?:(?:https?|ftp):)?\/\/)(?:(?:[^\]\[?\/<~#`!@$^&*()+=}|:";',>{ ]|%[0-9A-Fa-f]{2})+(?::(?:[^\]\[?\/<~#`!@$^&*()+=}|:";',>{ ]|%[0-9A-Fa-f]{2})*)?@)?(?:(?!(?:10|127)(?:\.\d{1,3}){3})(?!(?:169\.254|192\.168)(?:\.\d{1,3}){2})(?!172\.(?:1[6-9]|2\d|3[0-1])(?:\.\d{1,3}){2})(?:[1-9]\d?|1\d\d|2[01]\d|22[0-3])(?:\.(?:1?\d{1,2}|2[0-4]\d|25[0-5])){2}(?:\.(?:[1-9]\d?|1\d\d|2[0-4]\d|25[0-4]))|(?:(?:[a-z0-9\u00a1-\uffff][a-z0-9\u00a1-\uffff_-]{0,62})?[a-z0-9\u00a1-\uffff]\.)+(?:[a-z\u00a1-\uffff]{2,}\.?))(?::\d{2,5})?(?:[/?#]\S*)?$/i.test( value );
		},

		// https://jqueryvalidation.org/date-method/
		date: ( function() {
			var called = false;

			return function( value, element ) {
				if ( !called ) {
					called = true;
					if ( this.settings.debug && window.console ) {
						console.warn(
							"The `date` method is deprecated and will be removed in version '2.0.0'.\n" +
							"Please don't use it, since it relies on the Date constructor, which\n" +
							"behaves very differently across browsers and locales. Use `dateISO`\n" +
							"instead or one of the locale specific methods in `localizations/`\n" +
							"and `additional-methods.js`."
						);
					}
				}

				return this.optional( element ) || !/Invalid|NaN/.test( new Date( value ).toString() );
			};
		}() ),

		// https://jqueryvalidation.org/dateISO-method/
		dateISO: function( value, element ) {
			return this.optional( element ) || /^\d{4}[\/\-](0?[1-9]|1[012])[\/\-](0?[1-9]|[12][0-9]|3[01])$/.test( value );
		},

		// https://jqueryvalidation.org/number-method/
		number: function( value, element ) {
			return this.optional( element ) || /^(?:-?\d+|-?\d{1,3}(?:,\d{3})+)?(?:\.\d+)?$/.test( value );
		},

		// https://jqueryvalidation.org/digits-method/
		digits: function( value, element ) {
			return this.optional( element ) || /^\d+$/.test( value );
		},

		// https://jqueryvalidation.org/minlength-method/
		minlength: function( value, element, param ) {
			var length = Array.isArray( value ) ? value.length : this.getLength( value, element );
			return this.optional( element ) || length >= param;
		},

		// https://jqueryvalidation.org/maxlength-method/
		maxlength: function( value, element, param ) {
			var length = Array.isArray( value ) ? value.length : this.getLength( value, element );
			return this.optional( element ) || length <= param;
		},

		// https://jqueryvalidation.org/rangelength-method/
		rangelength: function( value, element, param ) {
			var length = Array.isArray( value ) ? value.length : this.getLength( value, element );
			return this.optional( element ) || ( length >= param[ 0 ] && length <= param[ 1 ] );
		},

		// https://jqueryvalidation.org/min-method/
		min: function( value, element, param ) {
			return this.optional( element ) || value >= param;
		},

		// https://jqueryvalidation.org/max-method/
		max: function( value, element, param ) {
			return this.optional( element ) || value <= param;
		},

		// https://jqueryvalidation.org/range-method/
		range: function( value, element, param ) {
			return this.optional( element ) || ( value >= param[ 0 ] && value <= param[ 1 ] );
		},

		// https://jqueryvalidation.org/step-method/
		step: function( value, element, param ) {
			var type = $( element ).attr( "type" ),
				errorMessage = "Step attribute on input type " + type + " is not supported.",
				supportedTypes = [ "text", "number", "range" ],
				re = new RegExp( "\\b" + type + "\\b" ),
				notSupported = type && !re.test( supportedTypes.join() ),
				decimalPlaces = function( num ) {
					var match = ( "" + num ).match( /(?:\.(\d+))?$/ );
					if ( !match ) {
						return 0;
					}

					// Number of digits right of decimal point.
					return match[ 1 ] ? match[ 1 ].length : 0;
				},
				toInt = function( num ) {
					return Math.round( num * Math.pow( 10, decimals ) );
				},
				valid = true,
				decimals;

			// Works only for text, number and range input types
			// TODO find a way to support input types date, datetime, datetime-local, month, time and week
			if ( notSupported ) {
				throw new Error( errorMessage );
			}

			decimals = decimalPlaces( param );

			// Value can't have too many decimals
			if ( decimalPlaces( value ) > decimals || toInt( value ) % toInt( param ) !== 0 ) {
				valid = false;
			}

			return this.optional( element ) || valid;
		},

		// https://jqueryvalidation.org/equalTo-method/
		equalTo: function( value, element, param ) {

			// Bind to the blur event of the target in order to revalidate whenever the target field is updated
			var target = $( param );
			if ( this.settings.onfocusout && target.not( ".validate-equalTo-blur" ).length ) {
				target.addClass( "validate-equalTo-blur" ).on( "blur.validate-equalTo", function() {
					$( element ).valid();
				} );
			}
			return value === target.val();
		},

		// https://jqueryvalidation.org/remote-method/
		remote: function( value, element, param, method ) {
			if ( this.optional( element ) ) {
				return "dependency-mismatch";
			}

			method = typeof method === "string" && method || "remote";

			var previous = this.previousValue( element, method ),
				validator, data, optionDataString;

			if ( !this.settings.messages[ element.name ] ) {
				this.settings.messages[ element.name ] = {};
			}
			previous.originalMessage = previous.originalMessage || this.settings.messages[ element.name ][ method ];
			this.settings.messages[ element.name ][ method ] = previous.message;

			param = typeof param === "string" && { url: param } || param;
			optionDataString = $.param( $.extend( { data: value }, param.data ) );
			if ( previous.old === optionDataString ) {
				return previous.valid;
			}

			previous.old = optionDataString;
			validator = this;
			this.startRequest( element );
			data = {};
			data[ element.name ] = value;
			$.ajax( $.extend( true, {
				mode: "abort",
				port: "validate" + element.name,
				dataType: "json",
				data: data,
				context: validator.currentForm,
				success: function( response ) {
					var valid = response === true || response === "true",
						errors, message, submitted;

					validator.settings.messages[ element.name ][ method ] = previous.originalMessage;
					if ( valid ) {
						submitted = validator.formSubmitted;
						validator.resetInternals();
						validator.toHide = validator.errorsFor( element );
						validator.formSubmitted = submitted;
						validator.successList.push( element );
						validator.invalid[ element.name ] = false;
						validator.showErrors();
					} else {
						errors = {};
						message = response || validator.defaultMessage( element, { method: method, parameters: value } );
						errors[ element.name ] = previous.message = message;
						validator.invalid[ element.name ] = true;
						validator.showErrors( errors );
					}
					previous.valid = valid;
					validator.stopRequest( element, valid );
				}
			}, param ) );
			return "pending";
		}
	}

} );

// Ajax mode: abort
// usage: $.ajax({ mode: "abort"[, port: "uniqueport"]});
// if mode:"abort" is used, the previous request on that port (port can be undefined) is aborted via XMLHttpRequest.abort()

var pendingRequests = {},
	ajax;

// Use a prefilter if available (1.5+)
if ( $.ajaxPrefilter ) {
	$.ajaxPrefilter( function( settings, _, xhr ) {
		var port = settings.port;
		if ( settings.mode === "abort" ) {
			if ( pendingRequests[ port ] ) {
				pendingRequests[ port ].abort();
			}
			pendingRequests[ port ] = xhr;
		}
	} );
} else {

	// Proxy ajax
	ajax = $.ajax;
	$.ajax = function( settings ) {
		var mode = ( "mode" in settings ? settings : $.ajaxSettings ).mode,
			port = ( "port" in settings ? settings : $.ajaxSettings ).port;
		if ( mode === "abort" ) {
			if ( pendingRequests[ port ] ) {
				pendingRequests[ port ].abort();
			}
			pendingRequests[ port ] = ajax.apply( this, arguments );
			return pendingRequests[ port ];
		}
		return ajax.apply( this, arguments );
	};
}
return $;
}));
/*!
 * jQuery Validation Plugin v1.19.5
 *
 * https://jqueryvalidation.org/
 *
 * Copyright (c) 2022 Jörn Zaefferer
 * Released under the MIT license
 */
(function( factory ) {
	if ( typeof define === "function" && define.amd ) {
		define( ["jquery", "./jquery.validate"], factory );
	} else if (typeof module === "object" && module.exports) {
		module.exports = factory( require( "jquery" ) );
	} else {
		factory( jQuery );
	}
}(function( $ ) {

( function() {

	function stripHtml( value ) {

		// Remove html tags and space chars
		return value.replace( /<.[^<>]*?>/g, " " ).replace( /&nbsp;|&#160;/gi, " " )

		// Remove punctuation
		.replace( /[.(),;:!?%#$'\"_+=\/\-“”’]*/g, "" );
	}

	$.validator.addMethod( "maxWords", function( value, element, params ) {
		return this.optional( element ) || stripHtml( value ).match( /\b\w+\b/g ).length <= params;
	}, $.validator.format( "Please enter {0} words or less." ) );

	$.validator.addMethod( "minWords", function( value, element, params ) {
		return this.optional( element ) || stripHtml( value ).match( /\b\w+\b/g ).length >= params;
	}, $.validator.format( "Please enter at least {0} words." ) );

	$.validator.addMethod( "rangeWords", function( value, element, params ) {
		var valueStripped = stripHtml( value ),
			regex = /\b\w+\b/g;
		return this.optional( element ) || valueStripped.match( regex ).length >= params[ 0 ] && valueStripped.match( regex ).length <= params[ 1 ];
	}, $.validator.format( "Please enter between {0} and {1} words." ) );

}() );

/**
 * This is used in the United States to process payments, deposits,
 * or transfers using the Automated Clearing House (ACH) or Fedwire
 * systems. A very common use case would be to validate a form for
 * an ACH bill payment.
 */
$.validator.addMethod( "abaRoutingNumber", function( value ) {
	var checksum = 0;
	var tokens = value.split( "" );
	var length = tokens.length;

	// Length Check
	if ( length !== 9 ) {
		return false;
	}

	// Calc the checksum
	// https://en.wikipedia.org/wiki/ABA_routing_transit_number
	for ( var i = 0; i < length; i += 3 ) {
		checksum +=	parseInt( tokens[ i ], 10 )     * 3 +
					parseInt( tokens[ i + 1 ], 10 ) * 7 +
					parseInt( tokens[ i + 2 ], 10 );
	}

	// If not zero and divisible by 10 then valid
	if ( checksum !== 0 && checksum % 10 === 0 ) {
		return true;
	}

	return false;
}, "Please enter a valid routing number." );

// Accept a value from a file input based on a required mimetype
$.validator.addMethod( "accept", function( value, element, param ) {

	// Split mime on commas in case we have multiple types we can accept
	var typeParam = typeof param === "string" ? param.replace( /\s/g, "" ) : "image/*",
		optionalValue = this.optional( element ),
		i, file, regex;

	// Element is optional
	if ( optionalValue ) {
		return optionalValue;
	}

	if ( $( element ).attr( "type" ) === "file" ) {

		// Escape string to be used in the regex
		// see: https://stackoverflow.com/questions/3446170/escape-string-for-use-in-javascript-regex
		// Escape also "/*" as "/.*" as a wildcard
		typeParam = typeParam
				.replace( /[\-\[\]\/\{\}\(\)\+\?\.\\\^\$\|]/g, "\\$&" )
				.replace( /,/g, "|" )
				.replace( /\/\*/g, "/.*" );

		// Check if the element has a FileList before checking each file
		if ( element.files && element.files.length ) {
			regex = new RegExp( ".?(" + typeParam + ")$", "i" );
			for ( i = 0; i < element.files.length; i++ ) {
				file = element.files[ i ];

				// Grab the mimetype from the loaded file, verify it matches
				if ( !file.type.match( regex ) ) {
					return false;
				}
			}
		}
	}

	// Either return true because we've validated each file, or because the
	// browser does not support element.files and the FileList feature
	return true;
}, $.validator.format( "Please enter a value with a valid mimetype." ) );

$.validator.addMethod( "alphanumeric", function( value, element ) {
	return this.optional( element ) || /^\w+$/i.test( value );
}, "Letters, numbers, and underscores only please." );

/*
 * Dutch bank account numbers (not 'giro' numbers) have 9 digits
 * and pass the '11 check'.
 * We accept the notation with spaces, as that is common.
 * acceptable: 123456789 or 12 34 56 789
 */
$.validator.addMethod( "bankaccountNL", function( value, element ) {
	if ( this.optional( element ) ) {
		return true;
	}
	if ( !( /^[0-9]{9}|([0-9]{2} ){3}[0-9]{3}$/.test( value ) ) ) {
		return false;
	}

	// Now '11 check'
	var account = value.replace( / /g, "" ), // Remove spaces
		sum = 0,
		len = account.length,
		pos, factor, digit;
	for ( pos = 0; pos < len; pos++ ) {
		factor = len - pos;
		digit = account.substring( pos, pos + 1 );
		sum = sum + factor * digit;
	}
	return sum % 11 === 0;
}, "Please specify a valid bank account number." );

$.validator.addMethod( "bankorgiroaccountNL", function( value, element ) {
	return this.optional( element ) ||
			( $.validator.methods.bankaccountNL.call( this, value, element ) ) ||
			( $.validator.methods.giroaccountNL.call( this, value, element ) );
}, "Please specify a valid bank or giro account number." );

/**
 * BIC is the business identifier code (ISO 9362). This BIC check is not a guarantee for authenticity.
 *
 * BIC pattern: BBBBCCLLbbb (8 or 11 characters long; bbb is optional)
 *
 * Validation is case-insensitive. Please make sure to normalize input yourself.
 *
 * BIC definition in detail:
 * - First 4 characters - bank code (only letters)
 * - Next 2 characters - ISO 3166-1 alpha-2 country code (only letters)
 * - Next 2 characters - location code (letters and digits)
 *   a. shall not start with '0' or '1'
 *   b. second character must be a letter ('O' is not allowed) or digit ('0' for test (therefore not allowed), '1' denoting passive participant, '2' typically reverse-billing)
 * - Last 3 characters - branch code, optional (shall not start with 'X' except in case of 'XXX' for primary office) (letters and digits)
 */
$.validator.addMethod( "bic", function( value, element ) {
    return this.optional( element ) || /^([A-Z]{6}[A-Z2-9][A-NP-Z1-9])(X{3}|[A-WY-Z0-9][A-Z0-9]{2})?$/.test( value.toUpperCase() );
}, "Please specify a valid BIC code." );

/*
 * Código de identificación fiscal ( CIF ) is the tax identification code for Spanish legal entities
 * Further rules can be found in Spanish on http://es.wikipedia.org/wiki/C%C3%B3digo_de_identificaci%C3%B3n_fiscal
 *
 * Spanish CIF structure:
 *
 * [ T ][ P ][ P ][ N ][ N ][ N ][ N ][ N ][ C ]
 *
 * Where:
 *
 * T: 1 character. Kind of Organization Letter: [ABCDEFGHJKLMNPQRSUVW]
 * P: 2 characters. Province.
 * N: 5 characters. Secuencial Number within the province.
 * C: 1 character. Control Digit: [0-9A-J].
 *
 * [ T ]: Kind of Organizations. Possible values:
 *
 *   A. Corporations
 *   B. LLCs
 *   C. General partnerships
 *   D. Companies limited partnerships
 *   E. Communities of goods
 *   F. Cooperative Societies
 *   G. Associations
 *   H. Communities of homeowners in horizontal property regime
 *   J. Civil Societies
 *   K. Old format
 *   L. Old format
 *   M. Old format
 *   N. Nonresident entities
 *   P. Local authorities
 *   Q. Autonomous bodies, state or not, and the like, and congregations and religious institutions
 *   R. Congregations and religious institutions (since 2008 ORDER EHA/451/2008)
 *   S. Organs of State Administration and regions
 *   V. Agrarian Transformation
 *   W. Permanent establishments of non-resident in Spain
 *
 * [ C ]: Control Digit. It can be a number or a letter depending on T value:
 * [ T ]  -->  [ C ]
 * ------    ----------
 *   A         Number
 *   B         Number
 *   E         Number
 *   H         Number
 *   K         Letter
 *   P         Letter
 *   Q         Letter
 *   S         Letter
 *
 */
$.validator.addMethod( "cifES", function( value, element ) {
	"use strict";

	if ( this.optional( element ) ) {
		return true;
	}

	var cifRegEx = new RegExp( /^([ABCDEFGHJKLMNPQRSUVW])(\d{7})([0-9A-J])$/gi );
	var letter  = value.substring( 0, 1 ), // [ T ]
		number  = value.substring( 1, 8 ), // [ P ][ P ][ N ][ N ][ N ][ N ][ N ]
		control = value.substring( 8, 9 ), // [ C ]
		all_sum = 0,
		even_sum = 0,
		odd_sum = 0,
		i, n,
		control_digit,
		control_letter;

	function isOdd( n ) {
		return n % 2 === 0;
	}

	// Quick format test
	if ( value.length !== 9 || !cifRegEx.test( value ) ) {
		return false;
	}

	for ( i = 0; i < number.length; i++ ) {
		n = parseInt( number[ i ], 10 );

		// Odd positions
		if ( isOdd( i ) ) {

			// Odd positions are multiplied first.
			n *= 2;

			// If the multiplication is bigger than 10 we need to adjust
			odd_sum += n < 10 ? n : n - 9;

		// Even positions
		// Just sum them
		} else {
			even_sum += n;
		}
	}

	all_sum = even_sum + odd_sum;
	control_digit = ( 10 - ( all_sum ).toString().substr( -1 ) ).toString();
	control_digit = parseInt( control_digit, 10 ) > 9 ? "0" : control_digit;
	control_letter = "JABCDEFGHI".substr( control_digit, 1 ).toString();

	// Control must be a digit
	if ( letter.match( /[ABEH]/ ) ) {
		return control === control_digit;

	// Control must be a letter
	} else if ( letter.match( /[KPQS]/ ) ) {
		return control === control_letter;
	}

	// Can be either
	return control === control_digit || control === control_letter;

}, "Please specify a valid CIF number." );

/*
 * Brazillian CNH number (Carteira Nacional de Habilitacao) is the License Driver number.
 * CNH numbers have 11 digits in total: 9 numbers followed by 2 check numbers that are being used for validation.
 */
$.validator.addMethod( "cnhBR", function( value ) {

  // Removing special characters from value
  value = value.replace( /([~!@#$%^&*()_+=`{}\[\]\-|\\:;'<>,.\/? ])+/g, "" );

  // Checking value to have 11 digits only
  if ( value.length !== 11 ) {
    return false;
  }

  var sum = 0, dsc = 0, firstChar,
		firstCN, secondCN, i, j, v;

  firstChar = value.charAt( 0 );

  if ( new Array( 12 ).join( firstChar ) === value ) {
    return false;
  }

  // Step 1 - using first Check Number:
  for ( i = 0, j = 9, v = 0; i < 9; ++i, --j ) {
    sum += +( value.charAt( i ) * j );
  }

  firstCN = sum % 11;
  if ( firstCN >= 10 ) {
    firstCN = 0;
    dsc = 2;
  }

  sum = 0;
  for ( i = 0, j = 1, v = 0; i < 9; ++i, ++j ) {
    sum += +( value.charAt( i ) * j );
  }

  secondCN = sum % 11;
  if ( secondCN >= 10 ) {
    secondCN = 0;
  } else {
    secondCN = secondCN - dsc;
  }

  return ( String( firstCN ).concat( secondCN ) === value.substr( -2 ) );

}, "Please specify a valid CNH number." );

/*
 * Brazillian value number (Cadastrado de Pessoas Juridica).
 * value numbers have 14 digits in total: 12 numbers followed by 2 check numbers that are being used for validation.
 */
$.validator.addMethod( "cnpjBR", function( value, element ) {
	"use strict";

	if ( this.optional( element ) ) {
		return true;
	}

	// Removing no number
	value = value.replace( /[^\d]+/g, "" );

	// Checking value to have 14 digits only
	if ( value.length !== 14 ) {
		return false;
	}

	// Elimina values invalidos conhecidos
	if ( value === "00000000000000" ||
		value === "11111111111111" ||
		value === "22222222222222" ||
		value === "33333333333333" ||
		value === "44444444444444" ||
		value === "55555555555555" ||
		value === "66666666666666" ||
		value === "77777777777777" ||
		value === "88888888888888" ||
		value === "99999999999999" ) {
		return false;
	}

	// Valida DVs
	var tamanho = ( value.length - 2 );
	var numeros = value.substring( 0, tamanho );
	var digitos = value.substring( tamanho );
	var soma = 0;
	var pos = tamanho - 7;

	for ( var i = tamanho; i >= 1; i-- ) {
		soma += numeros.charAt( tamanho - i ) * pos--;
		if ( pos < 2 ) {
			pos = 9;
		}
	}

	var resultado = soma % 11 < 2 ? 0 : 11 - soma % 11;

	if ( resultado !== parseInt( digitos.charAt( 0 ), 10 ) ) {
		return false;
	}

	tamanho = tamanho + 1;
	numeros = value.substring( 0, tamanho );
	soma = 0;
	pos = tamanho - 7;

	for ( var il = tamanho; il >= 1; il-- ) {
		soma += numeros.charAt( tamanho - il ) * pos--;
		if ( pos < 2 ) {
			pos = 9;
		}
	}

	resultado = soma % 11 < 2 ? 0 : 11 - soma % 11;

	if ( resultado !== parseInt( digitos.charAt( 1 ), 10 ) ) {
		return false;
	}

	return true;

}, "Please specify a CNPJ value number." );

/*
 * Brazillian CPF number (Cadastrado de Pessoas Físicas) is the equivalent of a Brazilian tax registration number.
 * CPF numbers have 11 digits in total: 9 numbers followed by 2 check numbers that are being used for validation.
 */
$.validator.addMethod( "cpfBR", function( value, element ) {
	"use strict";

	if ( this.optional( element ) ) {
		return true;
	}

	// Removing special characters from value
	value = value.replace( /([~!@#$%^&*()_+=`{}\[\]\-|\\:;'<>,.\/? ])+/g, "" );

	// Checking value to have 11 digits only
	if ( value.length !== 11 ) {
		return false;
	}

	var sum = 0,
		firstCN, secondCN, checkResult, i;

	firstCN = parseInt( value.substring( 9, 10 ), 10 );
	secondCN = parseInt( value.substring( 10, 11 ), 10 );

	checkResult = function( sum, cn ) {
		var result = ( sum * 10 ) % 11;
		if ( ( result === 10 ) || ( result === 11 ) ) {
			result = 0;
		}
		return ( result === cn );
	};

	// Checking for dump data
	if ( value === "" ||
		value === "00000000000" ||
		value === "11111111111" ||
		value === "22222222222" ||
		value === "33333333333" ||
		value === "44444444444" ||
		value === "55555555555" ||
		value === "66666666666" ||
		value === "77777777777" ||
		value === "88888888888" ||
		value === "99999999999"
	) {
		return false;
	}

	// Step 1 - using first Check Number:
	for ( i = 1; i <= 9; i++ ) {
		sum = sum + parseInt( value.substring( i - 1, i ), 10 ) * ( 11 - i );
	}

	// If first Check Number (CN) is valid, move to Step 2 - using second Check Number:
	if ( checkResult( sum, firstCN ) ) {
		sum = 0;
		for ( i = 1; i <= 10; i++ ) {
			sum = sum + parseInt( value.substring( i - 1, i ), 10 ) * ( 12 - i );
		}
		return checkResult( sum, secondCN );
	}
	return false;

}, "Please specify a valid CPF number." );

// https://jqueryvalidation.org/creditcard-method/
// based on https://en.wikipedia.org/wiki/Luhn_algorithm
$.validator.addMethod( "creditcard", function( value, element ) {
	if ( this.optional( element ) ) {
		return "dependency-mismatch";
	}

	// Accept only spaces, digits and dashes
	if ( /[^0-9 \-]+/.test( value ) ) {
		return false;
	}

	var nCheck = 0,
		nDigit = 0,
		bEven = false,
		n, cDigit;

	value = value.replace( /\D/g, "" );

	// Basing min and max length on
	// https://dev.ean.com/general-info/valid-card-types/
	if ( value.length < 13 || value.length > 19 ) {
		return false;
	}

	for ( n = value.length - 1; n >= 0; n-- ) {
		cDigit = value.charAt( n );
		nDigit = parseInt( cDigit, 10 );
		if ( bEven ) {
			if ( ( nDigit *= 2 ) > 9 ) {
				nDigit -= 9;
			}
		}

		nCheck += nDigit;
		bEven = !bEven;
	}

	return ( nCheck % 10 ) === 0;
}, "Please enter a valid credit card number." );

/* NOTICE: Modified version of Castle.Components.Validator.CreditCardValidator
 * Redistributed under the Apache License 2.0 at http://www.apache.org/licenses/LICENSE-2.0
 * Valid Types: mastercard, visa, amex, dinersclub, enroute, discover, jcb, unknown, all (overrides all other settings)
 */
$.validator.addMethod( "creditcardtypes", function( value, element, param ) {
	if ( /[^0-9\-]+/.test( value ) ) {
		return false;
	}

	value = value.replace( /\D/g, "" );

	var validTypes = 0x0000;

	if ( param.mastercard ) {
		validTypes |= 0x0001;
	}
	if ( param.visa ) {
		validTypes |= 0x0002;
	}
	if ( param.amex ) {
		validTypes |= 0x0004;
	}
	if ( param.dinersclub ) {
		validTypes |= 0x0008;
	}
	if ( param.enroute ) {
		validTypes |= 0x0010;
	}
	if ( param.discover ) {
		validTypes |= 0x0020;
	}
	if ( param.jcb ) {
		validTypes |= 0x0040;
	}
	if ( param.unknown ) {
		validTypes |= 0x0080;
	}
	if ( param.all ) {
		validTypes = 0x0001 | 0x0002 | 0x0004 | 0x0008 | 0x0010 | 0x0020 | 0x0040 | 0x0080;
	}
	if ( validTypes & 0x0001 && ( /^(5[12345])/.test( value ) || /^(2[234567])/.test( value ) ) ) { // Mastercard
		return value.length === 16;
	}
	if ( validTypes & 0x0002 && /^(4)/.test( value ) ) { // Visa
		return value.length === 16;
	}
	if ( validTypes & 0x0004 && /^(3[47])/.test( value ) ) { // Amex
		return value.length === 15;
	}
	if ( validTypes & 0x0008 && /^(3(0[012345]|[68]))/.test( value ) ) { // Dinersclub
		return value.length === 14;
	}
	if ( validTypes & 0x0010 && /^(2(014|149))/.test( value ) ) { // Enroute
		return value.length === 15;
	}
	if ( validTypes & 0x0020 && /^(6011)/.test( value ) ) { // Discover
		return value.length === 16;
	}
	if ( validTypes & 0x0040 && /^(3)/.test( value ) ) { // Jcb
		return value.length === 16;
	}
	if ( validTypes & 0x0040 && /^(2131|1800)/.test( value ) ) { // Jcb
		return value.length === 15;
	}
	if ( validTypes & 0x0080 ) { // Unknown
		return true;
	}
	return false;
}, "Please enter a valid credit card number." );

/**
 * Validates currencies with any given symbols by @jameslouiz
 * Symbols can be optional or required. Symbols required by default
 *
 * Usage examples:
 *  currency: ["£", false] - Use false for soft currency validation
 *  currency: ["$", false]
 *  currency: ["RM", false] - also works with text based symbols such as "RM" - Malaysia Ringgit etc
 *
 *  <input class="currencyInput" name="currencyInput">
 *
 * Soft symbol checking
 *  currencyInput: {
 *     currency: ["$", false]
 *  }
 *
 * Strict symbol checking (default)
 *  currencyInput: {
 *     currency: "$"
 *     //OR
 *     currency: ["$", true]
 *  }
 *
 * Multiple Symbols
 *  currencyInput: {
 *     currency: "$,£,¢"
 *  }
 */
$.validator.addMethod( "currency", function( value, element, param ) {
    var isParamString = typeof param === "string",
        symbol = isParamString ? param : param[ 0 ],
        soft = isParamString ? true : param[ 1 ],
        regex;

    symbol = symbol.replace( /,/g, "" );
    symbol = soft ? symbol + "]" : symbol + "]?";
    regex = "^[" + symbol + "([1-9]{1}[0-9]{0,2}(\\,[0-9]{3})*(\\.[0-9]{0,2})?|[1-9]{1}[0-9]{0,}(\\.[0-9]{0,2})?|0(\\.[0-9]{0,2})?|(\\.[0-9]{1,2})?)$";
    regex = new RegExp( regex );
    return this.optional( element ) || regex.test( value );

}, "Please specify a valid currency." );

$.validator.addMethod( "dateFA", function( value, element ) {
	return this.optional( element ) || /^[1-4]\d{3}\/((0?[1-6]\/((3[0-1])|([1-2][0-9])|(0?[1-9])))|((1[0-2]|(0?[7-9]))\/(30|([1-2][0-9])|(0?[1-9]))))$/.test( value );
}, $.validator.messages.date );

/**
 * Return true, if the value is a valid date, also making this formal check dd/mm/yyyy.
 *
 * @example $.validator.methods.date("01/01/1900")
 * @result true
 *
 * @example $.validator.methods.date("01/13/1990")
 * @result false
 *
 * @example $.validator.methods.date("01.01.1900")
 * @result false
 *
 * @example <input name="pippo" class="{dateITA:true}" />
 * @desc Declares an optional input element whose value must be a valid date.
 *
 * @name $.validator.methods.dateITA
 * @type Boolean
 * @cat Plugins/Validate/Methods
 */
$.validator.addMethod( "dateITA", function( value, element ) {
	var check = false,
		re = /^\d{1,2}\/\d{1,2}\/\d{4}$/,
		adata, gg, mm, aaaa, xdata;
	if ( re.test( value ) ) {
		adata = value.split( "/" );
		gg = parseInt( adata[ 0 ], 10 );
		mm = parseInt( adata[ 1 ], 10 );
		aaaa = parseInt( adata[ 2 ], 10 );
		xdata = new Date( Date.UTC( aaaa, mm - 1, gg, 12, 0, 0, 0 ) );
		if ( ( xdata.getUTCFullYear() === aaaa ) && ( xdata.getUTCMonth() === mm - 1 ) && ( xdata.getUTCDate() === gg ) ) {
			check = true;
		} else {
			check = false;
		}
	} else {
		check = false;
	}
	return this.optional( element ) || check;
}, $.validator.messages.date );

$.validator.addMethod( "dateNL", function( value, element ) {
	return this.optional( element ) || /^(0?[1-9]|[12]\d|3[01])[\.\/\-](0?[1-9]|1[012])[\.\/\-]([12]\d)?(\d\d)$/.test( value );
}, $.validator.messages.date );

// Older "accept" file extension method. Old docs: http://docs.jquery.com/Plugins/Validation/Methods/accept
$.validator.addMethod( "extension", function( value, element, param ) {
	param = typeof param === "string" ? param.replace( /,/g, "|" ) : "png|jpe?g|gif";
	return this.optional( element ) || value.match( new RegExp( "\\.(" + param + ")$", "i" ) );
}, $.validator.format( "Please enter a value with a valid extension." ) );

/**
 * Dutch giro account numbers (not bank numbers) have max 7 digits
 */
$.validator.addMethod( "giroaccountNL", function( value, element ) {
	return this.optional( element ) || /^[0-9]{1,7}$/.test( value );
}, "Please specify a valid giro account number." );

$.validator.addMethod( "greaterThan", function( value, element, param ) {
    var target = $( param );

    if ( this.settings.onfocusout && target.not( ".validate-greaterThan-blur" ).length ) {
        target.addClass( "validate-greaterThan-blur" ).on( "blur.validate-greaterThan", function() {
            $( element ).valid();
        } );
    }

    return value > target.val();
}, "Please enter a greater value." );

$.validator.addMethod( "greaterThanEqual", function( value, element, param ) {
    var target = $( param );

    if ( this.settings.onfocusout && target.not( ".validate-greaterThanEqual-blur" ).length ) {
        target.addClass( "validate-greaterThanEqual-blur" ).on( "blur.validate-greaterThanEqual", function() {
            $( element ).valid();
        } );
    }

    return value >= target.val();
}, "Please enter a greater value." );

/**
 * IBAN is the international bank account number.
 * It has a country - specific format, that is checked here too
 *
 * Validation is case-insensitive. Please make sure to normalize input yourself.
 */
$.validator.addMethod( "iban", function( value, element ) {

	// Some quick simple tests to prevent needless work
	if ( this.optional( element ) ) {
		return true;
	}

	// Remove spaces and to upper case
	var iban = value.replace( / /g, "" ).toUpperCase(),
		ibancheckdigits = "",
		leadingZeroes = true,
		cRest = "",
		cOperator = "",
		countrycode, ibancheck, charAt, cChar, bbanpattern, bbancountrypatterns, ibanregexp, i, p;

	// Check for IBAN code length.
	// It contains:
	// country code ISO 3166-1 - two letters,
	// two check digits,
	// Basic Bank Account Number (BBAN) - up to 30 chars
	var minimalIBANlength = 5;
	if ( iban.length < minimalIBANlength ) {
		return false;
	}

	// Check the country code and find the country specific format
	countrycode = iban.substring( 0, 2 );
	bbancountrypatterns = {
		"AL": "\\d{8}[\\dA-Z]{16}",
		"AD": "\\d{8}[\\dA-Z]{12}",
		"AT": "\\d{16}",
		"AZ": "[\\dA-Z]{4}\\d{20}",
		"BE": "\\d{12}",
		"BH": "[A-Z]{4}[\\dA-Z]{14}",
		"BA": "\\d{16}",
		"BR": "\\d{23}[A-Z][\\dA-Z]",
		"BG": "[A-Z]{4}\\d{6}[\\dA-Z]{8}",
		"CR": "\\d{17}",
		"HR": "\\d{17}",
		"CY": "\\d{8}[\\dA-Z]{16}",
		"CZ": "\\d{20}",
		"DK": "\\d{14}",
		"DO": "[A-Z]{4}\\d{20}",
		"EE": "\\d{16}",
		"FO": "\\d{14}",
		"FI": "\\d{14}",
		"FR": "\\d{10}[\\dA-Z]{11}\\d{2}",
		"GE": "[\\dA-Z]{2}\\d{16}",
		"DE": "\\d{18}",
		"GI": "[A-Z]{4}[\\dA-Z]{15}",
		"GR": "\\d{7}[\\dA-Z]{16}",
		"GL": "\\d{14}",
		"GT": "[\\dA-Z]{4}[\\dA-Z]{20}",
		"HU": "\\d{24}",
		"IS": "\\d{22}",
		"IE": "[\\dA-Z]{4}\\d{14}",
		"IL": "\\d{19}",
		"IT": "[A-Z]\\d{10}[\\dA-Z]{12}",
		"KZ": "\\d{3}[\\dA-Z]{13}",
		"KW": "[A-Z]{4}[\\dA-Z]{22}",
		"LV": "[A-Z]{4}[\\dA-Z]{13}",
		"LB": "\\d{4}[\\dA-Z]{20}",
		"LI": "\\d{5}[\\dA-Z]{12}",
		"LT": "\\d{16}",
		"LU": "\\d{3}[\\dA-Z]{13}",
		"MK": "\\d{3}[\\dA-Z]{10}\\d{2}",
		"MT": "[A-Z]{4}\\d{5}[\\dA-Z]{18}",
		"MR": "\\d{23}",
		"MU": "[A-Z]{4}\\d{19}[A-Z]{3}",
		"MC": "\\d{10}[\\dA-Z]{11}\\d{2}",
		"MD": "[\\dA-Z]{2}\\d{18}",
		"ME": "\\d{18}",
		"NL": "[A-Z]{4}\\d{10}",
		"NO": "\\d{11}",
		"PK": "[\\dA-Z]{4}\\d{16}",
		"PS": "[\\dA-Z]{4}\\d{21}",
		"PL": "\\d{24}",
		"PT": "\\d{21}",
		"RO": "[A-Z]{4}[\\dA-Z]{16}",
		"SM": "[A-Z]\\d{10}[\\dA-Z]{12}",
		"SA": "\\d{2}[\\dA-Z]{18}",
		"RS": "\\d{18}",
		"SK": "\\d{20}",
		"SI": "\\d{15}",
		"ES": "\\d{20}",
		"SE": "\\d{20}",
		"CH": "\\d{5}[\\dA-Z]{12}",
		"TN": "\\d{20}",
		"TR": "\\d{5}[\\dA-Z]{17}",
		"AE": "\\d{3}\\d{16}",
		"GB": "[A-Z]{4}\\d{14}",
		"VG": "[\\dA-Z]{4}\\d{16}"
	};

	bbanpattern = bbancountrypatterns[ countrycode ];

	// As new countries will start using IBAN in the
	// future, we only check if the countrycode is known.
	// This prevents false negatives, while almost all
	// false positives introduced by this, will be caught
	// by the checksum validation below anyway.
	// Strict checking should return FALSE for unknown
	// countries.
	if ( typeof bbanpattern !== "undefined" ) {
		ibanregexp = new RegExp( "^[A-Z]{2}\\d{2}" + bbanpattern + "$", "" );
		if ( !( ibanregexp.test( iban ) ) ) {
			return false; // Invalid country specific format
		}
	}

	// Now check the checksum, first convert to digits
	ibancheck = iban.substring( 4, iban.length ) + iban.substring( 0, 4 );
	for ( i = 0; i < ibancheck.length; i++ ) {
		charAt = ibancheck.charAt( i );
		if ( charAt !== "0" ) {
			leadingZeroes = false;
		}
		if ( !leadingZeroes ) {
			ibancheckdigits += "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ".indexOf( charAt );
		}
	}

	// Calculate the result of: ibancheckdigits % 97
	for ( p = 0; p < ibancheckdigits.length; p++ ) {
		cChar = ibancheckdigits.charAt( p );
		cOperator = "" + cRest + "" + cChar;
		cRest = cOperator % 97;
	}
	return cRest === 1;
}, "Please specify a valid IBAN." );

$.validator.addMethod( "integer", function( value, element ) {
	return this.optional( element ) || /^-?\d+$/.test( value );
}, "A positive or negative non-decimal number please." );

$.validator.addMethod( "ipv4", function( value, element ) {
	return this.optional( element ) || /^(25[0-5]|2[0-4]\d|[01]?\d\d?)\.(25[0-5]|2[0-4]\d|[01]?\d\d?)\.(25[0-5]|2[0-4]\d|[01]?\d\d?)\.(25[0-5]|2[0-4]\d|[01]?\d\d?)$/i.test( value );
}, "Please enter a valid IP v4 address." );

$.validator.addMethod( "ipv6", function( value, element ) {
	return this.optional( element ) || /^((([0-9A-Fa-f]{1,4}:){7}[0-9A-Fa-f]{1,4})|(([0-9A-Fa-f]{1,4}:){6}:[0-9A-Fa-f]{1,4})|(([0-9A-Fa-f]{1,4}:){5}:([0-9A-Fa-f]{1,4}:)?[0-9A-Fa-f]{1,4})|(([0-9A-Fa-f]{1,4}:){4}:([0-9A-Fa-f]{1,4}:){0,2}[0-9A-Fa-f]{1,4})|(([0-9A-Fa-f]{1,4}:){3}:([0-9A-Fa-f]{1,4}:){0,3}[0-9A-Fa-f]{1,4})|(([0-9A-Fa-f]{1,4}:){2}:([0-9A-Fa-f]{1,4}:){0,4}[0-9A-Fa-f]{1,4})|(([0-9A-Fa-f]{1,4}:){6}((\b((25[0-5])|(1\d{2})|(2[0-4]\d)|(\d{1,2}))\b)\.){3}(\b((25[0-5])|(1\d{2})|(2[0-4]\d)|(\d{1,2}))\b))|(([0-9A-Fa-f]{1,4}:){0,5}:((\b((25[0-5])|(1\d{2})|(2[0-4]\d)|(\d{1,2}))\b)\.){3}(\b((25[0-5])|(1\d{2})|(2[0-4]\d)|(\d{1,2}))\b))|(::([0-9A-Fa-f]{1,4}:){0,5}((\b((25[0-5])|(1\d{2})|(2[0-4]\d)|(\d{1,2}))\b)\.){3}(\b((25[0-5])|(1\d{2})|(2[0-4]\d)|(\d{1,2}))\b))|([0-9A-Fa-f]{1,4}::([0-9A-Fa-f]{1,4}:){0,5}[0-9A-Fa-f]{1,4})|(::([0-9A-Fa-f]{1,4}:){0,6}[0-9A-Fa-f]{1,4})|(([0-9A-Fa-f]{1,4}:){1,7}:))$/i.test( value );
}, "Please enter a valid IP v6 address." );

$.validator.addMethod( "lessThan", function( value, element, param ) {
    var target = $( param );

    if ( this.settings.onfocusout && target.not( ".validate-lessThan-blur" ).length ) {
        target.addClass( "validate-lessThan-blur" ).on( "blur.validate-lessThan", function() {
            $( element ).valid();
        } );
    }

    return value < target.val();
}, "Please enter a lesser value." );

$.validator.addMethod( "lessThanEqual", function( value, element, param ) {
    var target = $( param );

    if ( this.settings.onfocusout && target.not( ".validate-lessThanEqual-blur" ).length ) {
        target.addClass( "validate-lessThanEqual-blur" ).on( "blur.validate-lessThanEqual", function() {
            $( element ).valid();
        } );
    }

    return value <= target.val();
}, "Please enter a lesser value." );

$.validator.addMethod( "lettersonly", function( value, element ) {
	return this.optional( element ) || /^[a-z]+$/i.test( value );
}, "Letters only please." );

$.validator.addMethod( "letterswithbasicpunc", function( value, element ) {
	return this.optional( element ) || /^[a-z\-.,()'"\s]+$/i.test( value );
}, "Letters or punctuation only please." );

// Limit the number of files in a FileList.
$.validator.addMethod( "maxfiles", function( value, element, param ) {
	if ( this.optional( element ) ) {
		return true;
	}

	if ( $( element ).attr( "type" ) === "file" ) {
		if ( element.files && element.files.length > param ) {
			return false;
		}
	}

	return true;
}, $.validator.format( "Please select no more than {0} files." ) );

// Limit the size of each individual file in a FileList.
$.validator.addMethod( "maxsize", function( value, element, param ) {
	if ( this.optional( element ) ) {
		return true;
	}

	if ( $( element ).attr( "type" ) === "file" ) {
		if ( element.files && element.files.length ) {
			for ( var i = 0; i < element.files.length; i++ ) {
				if ( element.files[ i ].size > param ) {
					return false;
				}
			}
		}
	}

	return true;
}, $.validator.format( "File size must not exceed {0} bytes each." ) );

// Limit the size of all files in a FileList.
$.validator.addMethod( "maxsizetotal", function( value, element, param ) {
	if ( this.optional( element ) ) {
		return true;
	}

	if ( $( element ).attr( "type" ) === "file" ) {
		if ( element.files && element.files.length ) {
			var totalSize = 0;

			for ( var i = 0; i < element.files.length; i++ ) {
				totalSize += element.files[ i ].size;
				if ( totalSize > param ) {
					return false;
				}
			}
		}
	}

	return true;
}, $.validator.format( "Total size of all files must not exceed {0} bytes." ) );


$.validator.addMethod( "mobileNL", function( value, element ) {
	return this.optional( element ) || /^((\+|00(\s|\s?\-\s?)?)31(\s|\s?\-\s?)?(\(0\)[\-\s]?)?|0)6((\s|\s?\-\s?)?[0-9]){8}$/.test( value );
}, "Please specify a valid mobile number." );

$.validator.addMethod( "mobileRU", function( phone_number, element ) {
	var ruPhone_number = phone_number.replace( /\(|\)|\s+|-/g, "" );
	return this.optional( element ) || ruPhone_number.length > 9 && /^((\+7|7|8)+([0-9]){10})$/.test( ruPhone_number );
}, "Please specify a valid mobile number." );

/* For UK phone functions, do the following server side processing:
 * Compare original input with this RegEx pattern:
 * ^\(?(?:(?:00\)?[\s\-]?\(?|\+)(44)\)?[\s\-]?\(?(?:0\)?[\s\-]?\(?)?|0)([1-9]\d{1,4}\)?[\s\d\-]+)$
 * Extract $1 and set $prefix to '+44<space>' if $1 is '44', otherwise set $prefix to '0'
 * Extract $2 and remove hyphens, spaces and parentheses. Phone number is combined $prefix and $2.
 * A number of very detailed GB telephone number RegEx patterns can also be found at:
 * http://www.aa-asterisk.org.uk/index.php/Regular_Expressions_for_Validating_and_Formatting_GB_Telephone_Numbers
 */
$.validator.addMethod( "mobileUK", function( phone_number, element ) {
	phone_number = phone_number.replace( /\(|\)|\s+|-/g, "" );
	return this.optional( element ) || phone_number.length > 9 &&
		phone_number.match( /^(?:(?:(?:00\s?|\+)44\s?|0)7(?:[1345789]\d{2}|624)\s?\d{3}\s?\d{3})$/ );
}, "Please specify a valid mobile number." );

$.validator.addMethod( "netmask", function( value, element ) {
    return this.optional( element ) || /^(254|252|248|240|224|192|128)\.0\.0\.0|255\.(254|252|248|240|224|192|128|0)\.0\.0|255\.255\.(254|252|248|240|224|192|128|0)\.0|255\.255\.255\.(254|252|248|240|224|192|128|0)/i.test( value );
}, "Please enter a valid netmask." );

/*
 * The NIE (Número de Identificación de Extranjero) is a Spanish tax identification number assigned by the Spanish
 * authorities to any foreigner.
 *
 * The NIE is the equivalent of a Spaniards Número de Identificación Fiscal (NIF) which serves as a fiscal
 * identification number. The CIF number (Certificado de Identificación Fiscal) is equivalent to the NIF, but applies to
 * companies rather than individuals. The NIE consists of an 'X' or 'Y' followed by 7 or 8 digits then another letter.
 */
$.validator.addMethod( "nieES", function( value, element ) {
	"use strict";

	if ( this.optional( element ) ) {
		return true;
	}

	var nieRegEx = new RegExp( /^[MXYZ]{1}[0-9]{7,8}[TRWAGMYFPDXBNJZSQVHLCKET]{1}$/gi );
	var validChars = "TRWAGMYFPDXBNJZSQVHLCKET",
		letter = value.substr( value.length - 1 ).toUpperCase(),
		number;

	value = value.toString().toUpperCase();

	// Quick format test
	if ( value.length > 10 || value.length < 9 || !nieRegEx.test( value ) ) {
		return false;
	}

	// X means same number
	// Y means number + 10000000
	// Z means number + 20000000
	value = value.replace( /^[X]/, "0" )
		.replace( /^[Y]/, "1" )
		.replace( /^[Z]/, "2" );

	number = value.length === 9 ? value.substr( 0, 8 ) : value.substr( 0, 9 );

	return validChars.charAt( parseInt( number, 10 ) % 23 ) === letter;

}, "Please specify a valid NIE number." );

/*
 * The Número de Identificación Fiscal ( NIF ) is the way tax identification used in Spain for individuals
 */
$.validator.addMethod( "nifES", function( value, element ) {
	"use strict";

	if ( this.optional( element ) ) {
		return true;
	}

	value = value.toUpperCase();

	// Basic format test
	if ( !value.match( "((^[A-Z]{1}[0-9]{7}[A-Z0-9]{1}$|^[T]{1}[A-Z0-9]{8}$)|^[0-9]{8}[A-Z]{1}$)" ) ) {
		return false;
	}

	// Test NIF
	if ( /^[0-9]{8}[A-Z]{1}$/.test( value ) ) {
		return ( "TRWAGMYFPDXBNJZSQVHLCKE".charAt( value.substring( 8, 0 ) % 23 ) === value.charAt( 8 ) );
	}

	// Test specials NIF (starts with K, L or M)
	if ( /^[KLM]{1}/.test( value ) ) {
		return ( value[ 8 ] === "TRWAGMYFPDXBNJZSQVHLCKE".charAt( value.substring( 8, 1 ) % 23 ) );
	}

	return false;

}, "Please specify a valid NIF number." );

/*
 * Numer identyfikacji podatkowej ( NIP ) is the way tax identification used in Poland for companies
 */
$.validator.addMethod( "nipPL", function( value ) {
	"use strict";

	value = value.replace( /[^0-9]/g, "" );

	if ( value.length !== 10 ) {
		return false;
	}

	var arrSteps = [ 6, 5, 7, 2, 3, 4, 5, 6, 7 ];
	var intSum = 0;
	for ( var i = 0; i < 9; i++ ) {
		intSum += arrSteps[ i ] * value[ i ];
	}
	var int2 = intSum % 11;
	var intControlNr = ( int2 === 10 ) ? 0 : int2;

	return ( intControlNr === parseInt( value[ 9 ], 10 ) );
}, "Please specify a valid NIP number." );

/**
 * Created for project jquery-validation.
 * @Description Brazillian PIS or NIS number (Número de Identificação Social Pis ou Pasep) is the equivalent of a
 * Brazilian tax registration number NIS of PIS numbers have 11 digits in total: 10 numbers followed by 1 check numbers
 * that are being used for validation.
 * @copyright (c) 21/08/2018 13:14, Cleiton da Silva Mendonça
 * @author Cleiton da Silva Mendonça <cleiton.mendonca@gmail.com>
 * @link http://gitlab.com/csmendonca Gitlab of Cleiton da Silva Mendonça
 * @link http://github.com/csmendonca Github of Cleiton da Silva Mendonça
 */
$.validator.addMethod( "nisBR", function( value ) {
	var number;
	var cn;
	var sum = 0;
	var dv;
	var count;
	var multiplier;

	// Removing special characters from value
	value = value.replace( /([~!@#$%^&*()_+=`{}\[\]\-|\\:;'<>,.\/? ])+/g, "" );

	// Checking value to have 11 digits only
	if ( value.length !== 11 ) {
		return false;
	}

	//Get check number of value
	cn = parseInt( value.substring( 10, 11 ), 10 );

	//Get number with 10 digits of the value
	number = parseInt( value.substring( 0, 10 ), 10 );

	for ( count = 2; count < 12; count++ ) {
		multiplier = count;
		if ( count === 10 ) {
			multiplier = 2;
		}
		if ( count === 11 ) {
			multiplier = 3;
		}
		sum += ( ( number % 10 ) * multiplier );
		number = parseInt( number / 10, 10 );
	}
	dv = ( sum % 11 );

	if ( dv > 1 ) {
		dv = ( 11 - dv );
	} else {
		dv = 0;
	}

	if ( cn === dv ) {
		return true;
	} else {
		return false;
	}
}, "Please specify a valid NIS/PIS number." );

$.validator.addMethod( "notEqualTo", function( value, element, param ) {
	return this.optional( element ) || !$.validator.methods.equalTo.call( this, value, element, param );
}, "Please enter a different value, values must not be the same." );

$.validator.addMethod( "nowhitespace", function( value, element ) {
	return this.optional( element ) || /^\S+$/i.test( value );
}, "No white space please." );

/**
* Return true if the field value matches the given format RegExp
*
* @example $.validator.methods.pattern("AR1004",element,/^AR\d{4}$/)
* @result true
*
* @example $.validator.methods.pattern("BR1004",element,/^AR\d{4}$/)
* @result false
*
* @name $.validator.methods.pattern
* @type Boolean
* @cat Plugins/Validate/Methods
*/
$.validator.addMethod( "pattern", function( value, element, param ) {
	if ( this.optional( element ) ) {
		return true;
	}
	if ( typeof param === "string" ) {
		param = new RegExp( "^(?:" + param + ")$" );
	}
	return param.test( value );
}, "Invalid format." );

/**
 * Dutch phone numbers have 10 digits (or 11 and start with +31).
 */
$.validator.addMethod( "phoneNL", function( value, element ) {
	return this.optional( element ) || /^((\+|00(\s|\s?\-\s?)?)31(\s|\s?\-\s?)?(\(0\)[\-\s]?)?|0)[1-9]((\s|\s?\-\s?)?[0-9]){8}$/.test( value );
}, "Please specify a valid phone number." );

/**
 * Polish telephone numbers have 9 digits.
 *
 * Mobile phone numbers starts with following digits:
 * 45, 50, 51, 53, 57, 60, 66, 69, 72, 73, 78, 79, 88.
 *
 * Fixed-line numbers starts with area codes:
 * 12, 13, 14, 15, 16, 17, 18, 22, 23, 24, 25, 29, 32, 33,
 * 34, 41, 42, 43, 44, 46, 48, 52, 54, 55, 56, 58, 59, 61,
 * 62, 63, 65, 67, 68, 71, 74, 75, 76, 77, 81, 82, 83, 84,
 * 85, 86, 87, 89, 91, 94, 95.
 *
 * Ministry of National Defence numbers and VoIP numbers starts with 26 and 39.
 *
 * Excludes intelligent networks (premium rate, shared cost, free phone numbers).
 *
 * Poland National Numbering Plan http://www.itu.int/oth/T02020000A8/en
 */
$.validator.addMethod( "phonePL", function( phone_number, element ) {
	phone_number = phone_number.replace( /\s+/g, "" );
	var regexp = /^(?:(?:(?:\+|00)?48)|(?:\(\+?48\)))?(?:1[2-8]|2[2-69]|3[2-49]|4[1-68]|5[0-9]|6[0-35-9]|[7-8][1-9]|9[145])\d{7}$/;
	return this.optional( element ) || regexp.test( phone_number );
}, "Please specify a valid phone number." );

/* For UK phone functions, do the following server side processing:
 * Compare original input with this RegEx pattern:
 * ^\(?(?:(?:00\)?[\s\-]?\(?|\+)(44)\)?[\s\-]?\(?(?:0\)?[\s\-]?\(?)?|0)([1-9]\d{1,4}\)?[\s\d\-]+)$
 * Extract $1 and set $prefix to '+44<space>' if $1 is '44', otherwise set $prefix to '0'
 * Extract $2 and remove hyphens, spaces and parentheses. Phone number is combined $prefix and $2.
 * A number of very detailed GB telephone number RegEx patterns can also be found at:
 * http://www.aa-asterisk.org.uk/index.php/Regular_Expressions_for_Validating_and_Formatting_GB_Telephone_Numbers
 */

// Matches UK landline + mobile, accepting only 01-3 for landline or 07 for mobile to exclude many premium numbers
$.validator.addMethod( "phonesUK", function( phone_number, element ) {
	phone_number = phone_number.replace( /\(|\)|\s+|-/g, "" );
	return this.optional( element ) || phone_number.length > 9 &&
		phone_number.match( /^(?:(?:(?:00\s?|\+)44\s?|0)(?:1\d{8,9}|[23]\d{9}|7(?:[1345789]\d{8}|624\d{6})))$/ );
}, "Please specify a valid uk phone number." );

/* For UK phone functions, do the following server side processing:
 * Compare original input with this RegEx pattern:
 * ^\(?(?:(?:00\)?[\s\-]?\(?|\+)(44)\)?[\s\-]?\(?(?:0\)?[\s\-]?\(?)?|0)([1-9]\d{1,4}\)?[\s\d\-]+)$
 * Extract $1 and set $prefix to '+44<space>' if $1 is '44', otherwise set $prefix to '0'
 * Extract $2 and remove hyphens, spaces and parentheses. Phone number is combined $prefix and $2.
 * A number of very detailed GB telephone number RegEx patterns can also be found at:
 * http://www.aa-asterisk.org.uk/index.php/Regular_Expressions_for_Validating_and_Formatting_GB_Telephone_Numbers
 */
$.validator.addMethod( "phoneUK", function( phone_number, element ) {
	phone_number = phone_number.replace( /\(|\)|\s+|-/g, "" );
	return this.optional( element ) || phone_number.length > 9 &&
		phone_number.match( /^(?:(?:(?:00\s?|\+)44\s?)|(?:\(?0))(?:\d{2}\)?\s?\d{4}\s?\d{4}|\d{3}\)?\s?\d{3}\s?\d{3,4}|\d{4}\)?\s?(?:\d{5}|\d{3}\s?\d{3})|\d{5}\)?\s?\d{4,5})$/ );
}, "Please specify a valid phone number." );

/**
 * Matches US phone number format
 *
 * where the area code may not start with 1 and the prefix may not start with 1
 * allows '-' or ' ' as a separator and allows parens around area code
 * some people may want to put a '1' in front of their number
 *
 * 1(212)-999-2345 or
 * 212 999 2344 or
 * 212-999-0983
 *
 * but not
 * 111-123-5434
 * and not
 * 212 123 4567
 */
$.validator.addMethod( "phoneUS", function( phone_number, element ) {
	phone_number = phone_number.replace( /\s+/g, "" );
	return this.optional( element ) || phone_number.length > 9 &&
		phone_number.match( /^(\+?1-?)?(\([2-9]([02-9]\d|1[02-9])\)|[2-9]([02-9]\d|1[02-9]))-?[2-9]\d{2}-?\d{4}$/ );
}, "Please specify a valid phone number." );

/*
* Valida CEPs do brasileiros:
*
* Formatos aceitos:
* 99999-999
* 99.999-999
* 99999999
*/
$.validator.addMethod( "postalcodeBR", function( cep_value, element ) {
	return this.optional( element ) || /^\d{2}.\d{3}-\d{3}?$|^\d{5}-?\d{3}?$/.test( cep_value );
}, "Informe um CEP válido." );

/**
 * Matches a valid Canadian Postal Code
 *
 * @example jQuery.validator.methods.postalCodeCA( "H0H 0H0", element )
 * @result true
 *
 * @example jQuery.validator.methods.postalCodeCA( "H0H0H0", element )
 * @result false
 *
 * @name jQuery.validator.methods.postalCodeCA
 * @type Boolean
 * @cat Plugins/Validate/Methods
 */
$.validator.addMethod( "postalCodeCA", function( value, element ) {
	return this.optional( element ) || /^[ABCEGHJKLMNPRSTVXY]\d[ABCEGHJKLMNPRSTVWXYZ] *\d[ABCEGHJKLMNPRSTVWXYZ]\d$/i.test( value );
}, "Please specify a valid postal code." );

/* Matches Italian postcode (CAP) */
$.validator.addMethod( "postalcodeIT", function( value, element ) {
	return this.optional( element ) || /^\d{5}$/.test( value );
}, "Please specify a valid postal code." );

$.validator.addMethod( "postalcodeNL", function( value, element ) {
	return this.optional( element ) || /^[1-9][0-9]{3}\s?[a-zA-Z]{2}$/.test( value );
}, "Please specify a valid postal code." );

// Matches UK postcode. Does not match to UK Channel Islands that have their own postcodes (non standard UK)
$.validator.addMethod( "postcodeUK", function( value, element ) {
	return this.optional( element ) || /^((([A-PR-UWYZ][0-9])|([A-PR-UWYZ][0-9][0-9])|([A-PR-UWYZ][A-HK-Y][0-9])|([A-PR-UWYZ][A-HK-Y][0-9][0-9])|([A-PR-UWYZ][0-9][A-HJKSTUW])|([A-PR-UWYZ][A-HK-Y][0-9][ABEHMNPRVWXY]))\s?([0-9][ABD-HJLNP-UW-Z]{2})|(GIR)\s?(0AA))$/i.test( value );
}, "Please specify a valid UK postcode." );

/*
 * Lets you say "at least X inputs that match selector Y must be filled."
 *
 * The end result is that neither of these inputs:
 *
 *	<input class="productinfo" name="partnumber">
 *	<input class="productinfo" name="description">
 *
 *	...will validate unless at least one of them is filled.
 *
 * partnumber:	{require_from_group: [1,".productinfo"]},
 * description: {require_from_group: [1,".productinfo"]}
 *
 * options[0]: number of fields that must be filled in the group
 * options[1]: CSS selector that defines the group of conditionally required fields
 */
$.validator.addMethod( "require_from_group", function( value, element, options ) {
	var $fields = $( options[ 1 ], element.form ),
		$fieldsFirst = $fields.eq( 0 ),
		validator = $fieldsFirst.data( "valid_req_grp" ) ? $fieldsFirst.data( "valid_req_grp" ) : $.extend( {}, this ),
		isValid = $fields.filter( function() {
			return validator.elementValue( this );
		} ).length >= options[ 0 ];

	// Store the cloned validator for future validation
	$fieldsFirst.data( "valid_req_grp", validator );

	// If element isn't being validated, run each require_from_group field's validation rules
	if ( !$( element ).data( "being_validated" ) ) {
		$fields.data( "being_validated", true );
		$fields.each( function() {
			validator.element( this );
		} );
		$fields.data( "being_validated", false );
	}
	return isValid;
}, $.validator.format( "Please fill at least {0} of these fields." ) );

/*
 * Lets you say "either at least X inputs that match selector Y must be filled,
 * OR they must all be skipped (left blank)."
 *
 * The end result, is that none of these inputs:
 *
 *	<input class="productinfo" name="partnumber">
 *	<input class="productinfo" name="description">
 *	<input class="productinfo" name="color">
 *
 *	...will validate unless either at least two of them are filled,
 *	OR none of them are.
 *
 * partnumber:	{skip_or_fill_minimum: [2,".productinfo"]},
 * description: {skip_or_fill_minimum: [2,".productinfo"]},
 * color:		{skip_or_fill_minimum: [2,".productinfo"]}
 *
 * options[0]: number of fields that must be filled in the group
 * options[1]: CSS selector that defines the group of conditionally required fields
 *
 */
$.validator.addMethod( "skip_or_fill_minimum", function( value, element, options ) {
	var $fields = $( options[ 1 ], element.form ),
		$fieldsFirst = $fields.eq( 0 ),
		validator = $fieldsFirst.data( "valid_skip" ) ? $fieldsFirst.data( "valid_skip" ) : $.extend( {}, this ),
		numberFilled = $fields.filter( function() {
			return validator.elementValue( this );
		} ).length,
		isValid = numberFilled === 0 || numberFilled >= options[ 0 ];

	// Store the cloned validator for future validation
	$fieldsFirst.data( "valid_skip", validator );

	// If element isn't being validated, run each skip_or_fill_minimum field's validation rules
	if ( !$( element ).data( "being_validated" ) ) {
		$fields.data( "being_validated", true );
		$fields.each( function() {
			validator.element( this );
		} );
		$fields.data( "being_validated", false );
	}
	return isValid;
}, $.validator.format( "Please either skip these fields or fill at least {0} of them." ) );

/* Validates US States and/or Territories by @jdforsythe
 * Can be case insensitive or require capitalization - default is case insensitive
 * Can include US Territories or not - default does not
 * Can include US Military postal abbreviations (AA, AE, AP) - default does not
 *
 * Note: "States" always includes DC (District of Colombia)
 *
 * Usage examples:
 *
 *  This is the default - case insensitive, no territories, no military zones
 *  stateInput: {
 *     caseSensitive: false,
 *     includeTerritories: false,
 *     includeMilitary: false
 *  }
 *
 *  Only allow capital letters, no territories, no military zones
 *  stateInput: {
 *     caseSensitive: false
 *  }
 *
 *  Case insensitive, include territories but not military zones
 *  stateInput: {
 *     includeTerritories: true
 *  }
 *
 *  Only allow capital letters, include territories and military zones
 *  stateInput: {
 *     caseSensitive: true,
 *     includeTerritories: true,
 *     includeMilitary: true
 *  }
 *
 */
$.validator.addMethod( "stateUS", function( value, element, options ) {
	var isDefault = typeof options === "undefined",
		caseSensitive = ( isDefault || typeof options.caseSensitive === "undefined" ) ? false : options.caseSensitive,
		includeTerritories = ( isDefault || typeof options.includeTerritories === "undefined" ) ? false : options.includeTerritories,
		includeMilitary = ( isDefault || typeof options.includeMilitary === "undefined" ) ? false : options.includeMilitary,
		regex;

	if ( !includeTerritories && !includeMilitary ) {
		regex = "^(A[KLRZ]|C[AOT]|D[CE]|FL|GA|HI|I[ADLN]|K[SY]|LA|M[ADEINOST]|N[CDEHJMVY]|O[HKR]|PA|RI|S[CD]|T[NX]|UT|V[AT]|W[AIVY])$";
	} else if ( includeTerritories && includeMilitary ) {
		regex = "^(A[AEKLPRSZ]|C[AOT]|D[CE]|FL|G[AU]|HI|I[ADLN]|K[SY]|LA|M[ADEINOPST]|N[CDEHJMVY]|O[HKR]|P[AR]|RI|S[CD]|T[NX]|UT|V[AIT]|W[AIVY])$";
	} else if ( includeTerritories ) {
		regex = "^(A[KLRSZ]|C[AOT]|D[CE]|FL|G[AU]|HI|I[ADLN]|K[SY]|LA|M[ADEINOPST]|N[CDEHJMVY]|O[HKR]|P[AR]|RI|S[CD]|T[NX]|UT|V[AIT]|W[AIVY])$";
	} else {
		regex = "^(A[AEKLPRZ]|C[AOT]|D[CE]|FL|GA|HI|I[ADLN]|K[SY]|LA|M[ADEINOST]|N[CDEHJMVY]|O[HKR]|PA|RI|S[CD]|T[NX]|UT|V[AT]|W[AIVY])$";
	}

	regex = caseSensitive ? new RegExp( regex ) : new RegExp( regex, "i" );
	return this.optional( element ) || regex.test( value );
}, "Please specify a valid state." );

// TODO check if value starts with <, otherwise don't try stripping anything
$.validator.addMethod( "strippedminlength", function( value, element, param ) {
	return $( value ).text().length >= param;
}, $.validator.format( "Please enter at least {0} characters." ) );

$.validator.addMethod( "time", function( value, element ) {
	return this.optional( element ) || /^([01]\d|2[0-3]|[0-9])(:[0-5]\d){1,2}$/.test( value );
}, "Please enter a valid time, between 00:00 and 23:59." );

$.validator.addMethod( "time12h", function( value, element ) {
	return this.optional( element ) || /^((0?[1-9]|1[012])(:[0-5]\d){1,2}(\ ?[AP]M))$/i.test( value );
}, "Please enter a valid time in 12-hour am/pm format." );

// Same as url, but TLD is optional
$.validator.addMethod( "url2", function( value, element ) {
	return this.optional( element ) || /^(?:(?:(?:https?|ftp):)?\/\/)(?:(?:[^\]\[?\/<~#`!@$^&*()+=}|:";',>{ ]|%[0-9A-Fa-f]{2})+(?::(?:[^\]\[?\/<~#`!@$^&*()+=}|:";',>{ ]|%[0-9A-Fa-f]{2})*)?@)?(?:(?!(?:10|127)(?:\.\d{1,3}){3})(?!(?:169\.254|192\.168)(?:\.\d{1,3}){2})(?!172\.(?:1[6-9]|2\d|3[0-1])(?:\.\d{1,3}){2})(?:[1-9]\d?|1\d\d|2[01]\d|22[0-3])(?:\.(?:1?\d{1,2}|2[0-4]\d|25[0-5])){2}(?:\.(?:[1-9]\d?|1\d\d|2[0-4]\d|25[0-4]))|(?:(?:[a-z0-9\u00a1-\uffff][a-z0-9\u00a1-\uffff_-]{0,62})?[a-z0-9\u00a1-\uffff]\.)+(?:[a-z\u00a1-\uffff]{2,}\.?)|(?:(?:[a-z0-9\u00a1-\uffff][a-z0-9\u00a1-\uffff_-]{0,62})?[a-z0-9\u00a1-\uffff])|(?:(?:[a-z0-9\u00a1-\uffff][a-z0-9\u00a1-\uffff_-]{0,62}\.)))(?::\d{2,5})?(?:[/?#]\S*)?$/i.test( value );
}, $.validator.messages.url );

/**
 * Return true, if the value is a valid vehicle identification number (VIN).
 *
 * Works with all kind of text inputs.
 *
 * @example <input type="text" size="20" name="VehicleID" class="{required:true,vinUS:true}" />
 * @desc Declares a required input element whose value must be a valid vehicle identification number.
 *
 * @name $.validator.methods.vinUS
 * @type Boolean
 * @cat Plugins/Validate/Methods
 */
$.validator.addMethod( "vinUS", function( v ) {
	if ( v.length !== 17 ) {
		return false;
	}

	var LL = [ "A", "B", "C", "D", "E", "F", "G", "H", "J", "K", "L", "M", "N", "P", "R", "S", "T", "U", "V", "W", "X", "Y", "Z" ],
		VL = [ 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 7, 9, 2, 3, 4, 5, 6, 7, 8, 9 ],
		FL = [ 8, 7, 6, 5, 4, 3, 2, 10, 0, 9, 8, 7, 6, 5, 4, 3, 2 ],
		rs = 0,
		i, n, d, f, cd, cdv;

	for ( i = 0; i < 17; i++ ) {
		f = FL[ i ];
		d = v.slice( i, i + 1 );
		if ( i === 8 ) {
			cdv = d;
		}
		if ( !isNaN( d ) ) {
			d *= f;
		} else {
			for ( n = 0; n < LL.length; n++ ) {
				if ( d.toUpperCase() === LL[ n ] ) {
					d = VL[ n ];
					d *= f;
					if ( isNaN( cdv ) && n === 8 ) {
						cdv = LL[ n ];
					}
					break;
				}
			}
		}
		rs += d;
	}
	cd = rs % 11;
	if ( cd === 10 ) {
		cd = "X";
	}
	if ( cd === cdv ) {
		return true;
	}
	return false;
}, "The specified vehicle identification number (VIN) is invalid." );

$.validator.addMethod( "zipcodeUS", function( value, element ) {
	return this.optional( element ) || /^\d{5}(-\d{4})?$/.test( value );
}, "The specified US ZIP Code is invalid." );

$.validator.addMethod( "ziprange", function( value, element ) {
	return this.optional( element ) || /^90[2-5]\d\{2\}-\d{4}$/.test( value );
}, "Your ZIP-code must be in the range 902xx-xxxx to 905xx-xxxx." );
return $;
}));
(function ($) {
  /**
   * Copyright 2012, Digital Fusion
   * Licensed under the MIT license.
   * http://teamdf.com/jquery-plugins/license/
   *
   * @author Sam Sehnert
   * @desc A small plugin that checks whether elements are within
   *       the user visible viewport of a web browser.
   *       can accounts for vertical position, horizontal, or both
   */
  var $w = $(window);
  $.fn.visible = function (partial, hidden, direction, container) {
    if (this.length < 1) return;

    // Set direction default to 'both'.
    direction = direction || "both";

    var $t = this.length > 1 ? this.eq(0) : this,
      isContained = typeof container !== "undefined" && container !== null,
      $c = isContained ? $(container) : $w,
      wPosition = isContained ? $c.position() : 0,
      t = $t.get(0),
      vpWidth = $c.outerWidth(),
      vpHeight = $c.outerHeight(),
      clientSize = hidden === true ? t.offsetWidth * t.offsetHeight : true;

    if (typeof t.getBoundingClientRect === "function") {
      // Use this native browser method, if available.
      var rec = t.getBoundingClientRect(),
        tViz = isContained
          ? rec.top - wPosition.top >= 0 && rec.top < vpHeight + wPosition.top
          : rec.top >= 0 && rec.top < vpHeight,
        bViz = isContained
          ? rec.bottom - wPosition.top > 0 &&
            rec.bottom <= vpHeight + wPosition.top
          : rec.bottom > 0 && rec.bottom <= vpHeight,
        lViz = isContained
          ? rec.left - wPosition.left >= 0 &&
            rec.left < vpWidth + wPosition.left
          : rec.left >= 0 && rec.left < vpWidth,
        rViz = isContained
          ? rec.right - wPosition.left > 0 &&
            rec.right < vpWidth + wPosition.left
          : rec.right > 0 && rec.right <= vpWidth,
        vVisible = partial ? tViz || bViz : tViz && bViz,
        hVisible = partial ? lViz || rViz : lViz && rViz,
        vVisible = rec.top < 0 && rec.bottom > vpHeight ? true : vVisible,
        hVisible = rec.left < 0 && rec.right > vpWidth ? true : hVisible;

      if (direction === "both") return clientSize && vVisible && hVisible;
      else if (direction === "vertical") return clientSize && vVisible;
      else if (direction === "horizontal") return clientSize && hVisible;
    } else {
      var viewTop = isContained ? 0 : wPosition,
        viewBottom = viewTop + vpHeight,
        viewLeft = $c.scrollLeft(),
        viewRight = viewLeft + vpWidth,
        position = $t.position(),
        _top = position.top,
        _bottom = _top + $t.height(),
        _left = position.left,
        _right = _left + $t.width(),
        compareTop = partial === true ? _bottom : _top,
        compareBottom = partial === true ? _top : _bottom,
        compareLeft = partial === true ? _right : _left,
        compareRight = partial === true ? _left : _right;

      if (direction === "both")
        return (
          !!clientSize &&
          compareBottom <= viewBottom &&
          compareTop >= viewTop &&
          compareRight <= viewRight &&
          compareLeft >= viewLeft
        );
      else if (direction === "vertical")
        return (
          !!clientSize && compareBottom <= viewBottom && compareTop >= viewTop
        );
      else if (direction === "horizontal")
        return (
          !!clientSize && compareRight <= viewRight && compareLeft >= viewLeft
        );
    }
  };
})(jQuery);

/*!
  * Bootstrap v5.3.7 (https://getbootstrap.com/)
  * Copyright 2011-2025 The Bootstrap Authors (https://github.com/twbs/bootstrap/graphs/contributors)
  * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
  */
(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :
  typeof define === 'function' && define.amd ? define(factory) :
  (global = typeof globalThis !== 'undefined' ? globalThis : global || self, global.bootstrap = factory());
})(this, (function () { 'use strict';

  /**
   * --------------------------------------------------------------------------
   * Bootstrap dom/data.js
   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
   * --------------------------------------------------------------------------
   */

  /**
   * Constants
   */

  const elementMap = new Map();
  const Data = {
    set(element, key, instance) {
      if (!elementMap.has(element)) {
        elementMap.set(element, new Map());
      }
      const instanceMap = elementMap.get(element);

      // make it clear we only want one instance per element
      // can be removed later when multiple key/instances are fine to be used
      if (!instanceMap.has(key) && instanceMap.size !== 0) {
        // eslint-disable-next-line no-console
        console.error(`Bootstrap doesn't allow more than one instance per element. Bound instance: ${Array.from(instanceMap.keys())[0]}.`);
        return;
      }
      instanceMap.set(key, instance);
    },
    get(element, key) {
      if (elementMap.has(element)) {
        return elementMap.get(element).get(key) || null;
      }
      return null;
    },
    remove(element, key) {
      if (!elementMap.has(element)) {
        return;
      }
      const instanceMap = elementMap.get(element);
      instanceMap.delete(key);

      // free up element references if there are no instances left for an element
      if (instanceMap.size === 0) {
        elementMap.delete(element);
      }
    }
  };

  /**
   * --------------------------------------------------------------------------
   * Bootstrap util/index.js
   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
   * --------------------------------------------------------------------------
   */

  const MAX_UID = 1000000;
  const MILLISECONDS_MULTIPLIER = 1000;
  const TRANSITION_END = 'transitionend';

  /**
   * Properly escape IDs selectors to handle weird IDs
   * @param {string} selector
   * @returns {string}
   */
  const parseSelector = selector => {
    if (selector && window.CSS && window.CSS.escape) {
      // document.querySelector needs escaping to handle IDs (html5+) containing for instance /
      selector = selector.replace(/#([^\s"#']+)/g, (match, id) => `#${CSS.escape(id)}`);
    }
    return selector;
  };

  // Shout-out Angus Croll (https://goo.gl/pxwQGp)
  const toType = object => {
    if (object === null || object === undefined) {
      return `${object}`;
    }
    return Object.prototype.toString.call(object).match(/\s([a-z]+)/i)[1].toLowerCase();
  };

  /**
   * Public Util API
   */

  const getUID = prefix => {
    do {
      prefix += Math.floor(Math.random() * MAX_UID);
    } while (document.getElementById(prefix));
    return prefix;
  };
  const getTransitionDurationFromElement = element => {
    if (!element) {
      return 0;
    }

    // Get transition-duration of the element
    let {
      transitionDuration,
      transitionDelay
    } = window.getComputedStyle(element);
    const floatTransitionDuration = Number.parseFloat(transitionDuration);
    const floatTransitionDelay = Number.parseFloat(transitionDelay);

    // Return 0 if element or transition duration is not found
    if (!floatTransitionDuration && !floatTransitionDelay) {
      return 0;
    }

    // If multiple durations are defined, take the first
    transitionDuration = transitionDuration.split(',')[0];
    transitionDelay = transitionDelay.split(',')[0];
    return (Number.parseFloat(transitionDuration) + Number.parseFloat(transitionDelay)) * MILLISECONDS_MULTIPLIER;
  };
  const triggerTransitionEnd = element => {
    element.dispatchEvent(new Event(TRANSITION_END));
  };
  const isElement$1 = object => {
    if (!object || typeof object !== 'object') {
      return false;
    }
    if (typeof object.jquery !== 'undefined') {
      object = object[0];
    }
    return typeof object.nodeType !== 'undefined';
  };
  const getElement = object => {
    // it's a jQuery object or a node element
    if (isElement$1(object)) {
      return object.jquery ? object[0] : object;
    }
    if (typeof object === 'string' && object.length > 0) {
      return document.querySelector(parseSelector(object));
    }
    return null;
  };
  const isVisible = element => {
    if (!isElement$1(element) || element.getClientRects().length === 0) {
      return false;
    }
    const elementIsVisible = getComputedStyle(element).getPropertyValue('visibility') === 'visible';
    // Handle `details` element as its content may falsie appear visible when it is closed
    const closedDetails = element.closest('details:not([open])');
    if (!closedDetails) {
      return elementIsVisible;
    }
    if (closedDetails !== element) {
      const summary = element.closest('summary');
      if (summary && summary.parentNode !== closedDetails) {
        return false;
      }
      if (summary === null) {
        return false;
      }
    }
    return elementIsVisible;
  };
  const isDisabled = element => {
    if (!element || element.nodeType !== Node.ELEMENT_NODE) {
      return true;
    }
    if (element.classList.contains('disabled')) {
      return true;
    }
    if (typeof element.disabled !== 'undefined') {
      return element.disabled;
    }
    return element.hasAttribute('disabled') && element.getAttribute('disabled') !== 'false';
  };
  const findShadowRoot = element => {
    if (!document.documentElement.attachShadow) {
      return null;
    }

    // Can find the shadow root otherwise it'll return the document
    if (typeof element.getRootNode === 'function') {
      const root = element.getRootNode();
      return root instanceof ShadowRoot ? root : null;
    }
    if (element instanceof ShadowRoot) {
      return element;
    }

    // when we don't find a shadow root
    if (!element.parentNode) {
      return null;
    }
    return findShadowRoot(element.parentNode);
  };
  const noop = () => {};

  /**
   * Trick to restart an element's animation
   *
   * @param {HTMLElement} element
   * @return void
   *
   * @see https://www.harrytheo.com/blog/2021/02/restart-a-css-animation-with-javascript/#restarting-a-css-animation
   */
  const reflow = element => {
    element.offsetHeight; // eslint-disable-line no-unused-expressions
  };
  const getjQuery = () => {
    if (window.jQuery && !document.body.hasAttribute('data-bs-no-jquery')) {
      return window.jQuery;
    }
    return null;
  };
  const DOMContentLoadedCallbacks = [];
  const onDOMContentLoaded = callback => {
    if (document.readyState === 'loading') {
      // add listener on the first call when the document is in loading state
      if (!DOMContentLoadedCallbacks.length) {
        document.addEventListener('DOMContentLoaded', () => {
          for (const callback of DOMContentLoadedCallbacks) {
            callback();
          }
        });
      }
      DOMContentLoadedCallbacks.push(callback);
    } else {
      callback();
    }
  };
  const isRTL = () => document.documentElement.dir === 'rtl';
  const defineJQueryPlugin = plugin => {
    onDOMContentLoaded(() => {
      const $ = getjQuery();
      /* istanbul ignore if */
      if ($) {
        const name = plugin.NAME;
        const JQUERY_NO_CONFLICT = $.fn[name];
        $.fn[name] = plugin.jQueryInterface;
        $.fn[name].Constructor = plugin;
        $.fn[name].noConflict = () => {
          $.fn[name] = JQUERY_NO_CONFLICT;
          return plugin.jQueryInterface;
        };
      }
    });
  };
  const execute = (possibleCallback, args = [], defaultValue = possibleCallback) => {
    return typeof possibleCallback === 'function' ? possibleCallback.call(...args) : defaultValue;
  };
  const executeAfterTransition = (callback, transitionElement, waitForTransition = true) => {
    if (!waitForTransition) {
      execute(callback);
      return;
    }
    const durationPadding = 5;
    const emulatedDuration = getTransitionDurationFromElement(transitionElement) + durationPadding;
    let called = false;
    const handler = ({
      target
    }) => {
      if (target !== transitionElement) {
        return;
      }
      called = true;
      transitionElement.removeEventListener(TRANSITION_END, handler);
      execute(callback);
    };
    transitionElement.addEventListener(TRANSITION_END, handler);
    setTimeout(() => {
      if (!called) {
        triggerTransitionEnd(transitionElement);
      }
    }, emulatedDuration);
  };

  /**
   * Return the previous/next element of a list.
   *
   * @param {array} list    The list of elements
   * @param activeElement   The active element
   * @param shouldGetNext   Choose to get next or previous element
   * @param isCycleAllowed
   * @return {Element|elem} The proper element
   */
  const getNextActiveElement = (list, activeElement, shouldGetNext, isCycleAllowed) => {
    const listLength = list.length;
    let index = list.indexOf(activeElement);

    // if the element does not exist in the list return an element
    // depending on the direction and if cycle is allowed
    if (index === -1) {
      return !shouldGetNext && isCycleAllowed ? list[listLength - 1] : list[0];
    }
    index += shouldGetNext ? 1 : -1;
    if (isCycleAllowed) {
      index = (index + listLength) % listLength;
    }
    return list[Math.max(0, Math.min(index, listLength - 1))];
  };

  /**
   * --------------------------------------------------------------------------
   * Bootstrap dom/event-handler.js
   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
   * --------------------------------------------------------------------------
   */


  /**
   * Constants
   */

  const namespaceRegex = /[^.]*(?=\..*)\.|.*/;
  const stripNameRegex = /\..*/;
  const stripUidRegex = /::\d+$/;
  const eventRegistry = {}; // Events storage
  let uidEvent = 1;
  const customEvents = {
    mouseenter: 'mouseover',
    mouseleave: 'mouseout'
  };
  const nativeEvents = new Set(['click', 'dblclick', 'mouseup', 'mousedown', 'contextmenu', 'mousewheel', 'DOMMouseScroll', 'mouseover', 'mouseout', 'mousemove', 'selectstart', 'selectend', 'keydown', 'keypress', 'keyup', 'orientationchange', 'touchstart', 'touchmove', 'touchend', 'touchcancel', 'pointerdown', 'pointermove', 'pointerup', 'pointerleave', 'pointercancel', 'gesturestart', 'gesturechange', 'gestureend', 'focus', 'blur', 'change', 'reset', 'select', 'submit', 'focusin', 'focusout', 'load', 'unload', 'beforeunload', 'resize', 'move', 'DOMContentLoaded', 'readystatechange', 'error', 'abort', 'scroll']);

  /**
   * Private methods
   */

  function makeEventUid(element, uid) {
    return uid && `${uid}::${uidEvent++}` || element.uidEvent || uidEvent++;
  }
  function getElementEvents(element) {
    const uid = makeEventUid(element);
    element.uidEvent = uid;
    eventRegistry[uid] = eventRegistry[uid] || {};
    return eventRegistry[uid];
  }
  function bootstrapHandler(element, fn) {
    return function handler(event) {
      hydrateObj(event, {
        delegateTarget: element
      });
      if (handler.oneOff) {
        EventHandler.off(element, event.type, fn);
      }
      return fn.apply(element, [event]);
    };
  }
  function bootstrapDelegationHandler(element, selector, fn) {
    return function handler(event) {
      const domElements = element.querySelectorAll(selector);
      for (let {
        target
      } = event; target && target !== this; target = target.parentNode) {
        for (const domElement of domElements) {
          if (domElement !== target) {
            continue;
          }
          hydrateObj(event, {
            delegateTarget: target
          });
          if (handler.oneOff) {
            EventHandler.off(element, event.type, selector, fn);
          }
          return fn.apply(target, [event]);
        }
      }
    };
  }
  function findHandler(events, callable, delegationSelector = null) {
    return Object.values(events).find(event => event.callable === callable && event.delegationSelector === delegationSelector);
  }
  function normalizeParameters(originalTypeEvent, handler, delegationFunction) {
    const isDelegated = typeof handler === 'string';
    // TODO: tooltip passes `false` instead of selector, so we need to check
    const callable = isDelegated ? delegationFunction : handler || delegationFunction;
    let typeEvent = getTypeEvent(originalTypeEvent);
    if (!nativeEvents.has(typeEvent)) {
      typeEvent = originalTypeEvent;
    }
    return [isDelegated, callable, typeEvent];
  }
  function addHandler(element, originalTypeEvent, handler, delegationFunction, oneOff) {
    if (typeof originalTypeEvent !== 'string' || !element) {
      return;
    }
    let [isDelegated, callable, typeEvent] = normalizeParameters(originalTypeEvent, handler, delegationFunction);

    // in case of mouseenter or mouseleave wrap the handler within a function that checks for its DOM position
    // this prevents the handler from being dispatched the same way as mouseover or mouseout does
    if (originalTypeEvent in customEvents) {
      const wrapFunction = fn => {
        return function (event) {
          if (!event.relatedTarget || event.relatedTarget !== event.delegateTarget && !event.delegateTarget.contains(event.relatedTarget)) {
            return fn.call(this, event);
          }
        };
      };
      callable = wrapFunction(callable);
    }
    const events = getElementEvents(element);
    const handlers = events[typeEvent] || (events[typeEvent] = {});
    const previousFunction = findHandler(handlers, callable, isDelegated ? handler : null);
    if (previousFunction) {
      previousFunction.oneOff = previousFunction.oneOff && oneOff;
      return;
    }
    const uid = makeEventUid(callable, originalTypeEvent.replace(namespaceRegex, ''));
    const fn = isDelegated ? bootstrapDelegationHandler(element, handler, callable) : bootstrapHandler(element, callable);
    fn.delegationSelector = isDelegated ? handler : null;
    fn.callable = callable;
    fn.oneOff = oneOff;
    fn.uidEvent = uid;
    handlers[uid] = fn;
    element.addEventListener(typeEvent, fn, isDelegated);
  }
  function removeHandler(element, events, typeEvent, handler, delegationSelector) {
    const fn = findHandler(events[typeEvent], handler, delegationSelector);
    if (!fn) {
      return;
    }
    element.removeEventListener(typeEvent, fn, Boolean(delegationSelector));
    delete events[typeEvent][fn.uidEvent];
  }
  function removeNamespacedHandlers(element, events, typeEvent, namespace) {
    const storeElementEvent = events[typeEvent] || {};
    for (const [handlerKey, event] of Object.entries(storeElementEvent)) {
      if (handlerKey.includes(namespace)) {
        removeHandler(element, events, typeEvent, event.callable, event.delegationSelector);
      }
    }
  }
  function getTypeEvent(event) {
    // allow to get the native events from namespaced events ('click.bs.button' --> 'click')
    event = event.replace(stripNameRegex, '');
    return customEvents[event] || event;
  }
  const EventHandler = {
    on(element, event, handler, delegationFunction) {
      addHandler(element, event, handler, delegationFunction, false);
    },
    one(element, event, handler, delegationFunction) {
      addHandler(element, event, handler, delegationFunction, true);
    },
    off(element, originalTypeEvent, handler, delegationFunction) {
      if (typeof originalTypeEvent !== 'string' || !element) {
        return;
      }
      const [isDelegated, callable, typeEvent] = normalizeParameters(originalTypeEvent, handler, delegationFunction);
      const inNamespace = typeEvent !== originalTypeEvent;
      const events = getElementEvents(element);
      const storeElementEvent = events[typeEvent] || {};
      const isNamespace = originalTypeEvent.startsWith('.');
      if (typeof callable !== 'undefined') {
        // Simplest case: handler is passed, remove that listener ONLY.
        if (!Object.keys(storeElementEvent).length) {
          return;
        }
        removeHandler(element, events, typeEvent, callable, isDelegated ? handler : null);
        return;
      }
      if (isNamespace) {
        for (const elementEvent of Object.keys(events)) {
          removeNamespacedHandlers(element, events, elementEvent, originalTypeEvent.slice(1));
        }
      }
      for (const [keyHandlers, event] of Object.entries(storeElementEvent)) {
        const handlerKey = keyHandlers.replace(stripUidRegex, '');
        if (!inNamespace || originalTypeEvent.includes(handlerKey)) {
          removeHandler(element, events, typeEvent, event.callable, event.delegationSelector);
        }
      }
    },
    trigger(element, event, args) {
      if (typeof event !== 'string' || !element) {
        return null;
      }
      const $ = getjQuery();
      const typeEvent = getTypeEvent(event);
      const inNamespace = event !== typeEvent;
      let jQueryEvent = null;
      let bubbles = true;
      let nativeDispatch = true;
      let defaultPrevented = false;
      if (inNamespace && $) {
        jQueryEvent = $.Event(event, args);
        $(element).trigger(jQueryEvent);
        bubbles = !jQueryEvent.isPropagationStopped();
        nativeDispatch = !jQueryEvent.isImmediatePropagationStopped();
        defaultPrevented = jQueryEvent.isDefaultPrevented();
      }
      const evt = hydrateObj(new Event(event, {
        bubbles,
        cancelable: true
      }), args);
      if (defaultPrevented) {
        evt.preventDefault();
      }
      if (nativeDispatch) {
        element.dispatchEvent(evt);
      }
      if (evt.defaultPrevented && jQueryEvent) {
        jQueryEvent.preventDefault();
      }
      return evt;
    }
  };
  function hydrateObj(obj, meta = {}) {
    for (const [key, value] of Object.entries(meta)) {
      try {
        obj[key] = value;
      } catch (_unused) {
        Object.defineProperty(obj, key, {
          configurable: true,
          get() {
            return value;
          }
        });
      }
    }
    return obj;
  }

  /**
   * --------------------------------------------------------------------------
   * Bootstrap dom/manipulator.js
   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
   * --------------------------------------------------------------------------
   */

  function normalizeData(value) {
    if (value === 'true') {
      return true;
    }
    if (value === 'false') {
      return false;
    }
    if (value === Number(value).toString()) {
      return Number(value);
    }
    if (value === '' || value === 'null') {
      return null;
    }
    if (typeof value !== 'string') {
      return value;
    }
    try {
      return JSON.parse(decodeURIComponent(value));
    } catch (_unused) {
      return value;
    }
  }
  function normalizeDataKey(key) {
    return key.replace(/[A-Z]/g, chr => `-${chr.toLowerCase()}`);
  }
  const Manipulator = {
    setDataAttribute(element, key, value) {
      element.setAttribute(`data-bs-${normalizeDataKey(key)}`, value);
    },
    removeDataAttribute(element, key) {
      element.removeAttribute(`data-bs-${normalizeDataKey(key)}`);
    },
    getDataAttributes(element) {
      if (!element) {
        return {};
      }
      const attributes = {};
      const bsKeys = Object.keys(element.dataset).filter(key => key.startsWith('bs') && !key.startsWith('bsConfig'));
      for (const key of bsKeys) {
        let pureKey = key.replace(/^bs/, '');
        pureKey = pureKey.charAt(0).toLowerCase() + pureKey.slice(1);
        attributes[pureKey] = normalizeData(element.dataset[key]);
      }
      return attributes;
    },
    getDataAttribute(element, key) {
      return normalizeData(element.getAttribute(`data-bs-${normalizeDataKey(key)}`));
    }
  };

  /**
   * --------------------------------------------------------------------------
   * Bootstrap util/config.js
   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
   * --------------------------------------------------------------------------
   */


  /**
   * Class definition
   */

  class Config {
    // Getters
    static get Default() {
      return {};
    }
    static get DefaultType() {
      return {};
    }
    static get NAME() {
      throw new Error('You have to implement the static method "NAME", for each component!');
    }
    _getConfig(config) {
      config = this._mergeConfigObj(config);
      config = this._configAfterMerge(config);
      this._typeCheckConfig(config);
      return config;
    }
    _configAfterMerge(config) {
      return config;
    }
    _mergeConfigObj(config, element) {
      const jsonConfig = isElement$1(element) ? Manipulator.getDataAttribute(element, 'config') : {}; // try to parse

      return {
        ...this.constructor.Default,
        ...(typeof jsonConfig === 'object' ? jsonConfig : {}),
        ...(isElement$1(element) ? Manipulator.getDataAttributes(element) : {}),
        ...(typeof config === 'object' ? config : {})
      };
    }
    _typeCheckConfig(config, configTypes = this.constructor.DefaultType) {
      for (const [property, expectedTypes] of Object.entries(configTypes)) {
        const value = config[property];
        const valueType = isElement$1(value) ? 'element' : toType(value);
        if (!new RegExp(expectedTypes).test(valueType)) {
          throw new TypeError(`${this.constructor.NAME.toUpperCase()}: Option "${property}" provided type "${valueType}" but expected type "${expectedTypes}".`);
        }
      }
    }
  }

  /**
   * --------------------------------------------------------------------------
   * Bootstrap base-component.js
   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
   * --------------------------------------------------------------------------
   */


  /**
   * Constants
   */

  const VERSION = '5.3.7';

  /**
   * Class definition
   */

  class BaseComponent extends Config {
    constructor(element, config) {
      super();
      element = getElement(element);
      if (!element) {
        return;
      }
      this._element = element;
      this._config = this._getConfig(config);
      Data.set(this._element, this.constructor.DATA_KEY, this);
    }

    // Public
    dispose() {
      Data.remove(this._element, this.constructor.DATA_KEY);
      EventHandler.off(this._element, this.constructor.EVENT_KEY);
      for (const propertyName of Object.getOwnPropertyNames(this)) {
        this[propertyName] = null;
      }
    }

    // Private
    _queueCallback(callback, element, isAnimated = true) {
      executeAfterTransition(callback, element, isAnimated);
    }
    _getConfig(config) {
      config = this._mergeConfigObj(config, this._element);
      config = this._configAfterMerge(config);
      this._typeCheckConfig(config);
      return config;
    }

    // Static
    static getInstance(element) {
      return Data.get(getElement(element), this.DATA_KEY);
    }
    static getOrCreateInstance(element, config = {}) {
      return this.getInstance(element) || new this(element, typeof config === 'object' ? config : null);
    }
    static get VERSION() {
      return VERSION;
    }
    static get DATA_KEY() {
      return `bs.${this.NAME}`;
    }
    static get EVENT_KEY() {
      return `.${this.DATA_KEY}`;
    }
    static eventName(name) {
      return `${name}${this.EVENT_KEY}`;
    }
  }

  /**
   * --------------------------------------------------------------------------
   * Bootstrap dom/selector-engine.js
   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
   * --------------------------------------------------------------------------
   */

  const getSelector = element => {
    let selector = element.getAttribute('data-bs-target');
    if (!selector || selector === '#') {
      let hrefAttribute = element.getAttribute('href');

      // The only valid content that could double as a selector are IDs or classes,
      // so everything starting with `#` or `.`. If a "real" URL is used as the selector,
      // `document.querySelector` will rightfully complain it is invalid.
      // See https://github.com/twbs/bootstrap/issues/32273
      if (!hrefAttribute || !hrefAttribute.includes('#') && !hrefAttribute.startsWith('.')) {
        return null;
      }

      // Just in case some CMS puts out a full URL with the anchor appended
      if (hrefAttribute.includes('#') && !hrefAttribute.startsWith('#')) {
        hrefAttribute = `#${hrefAttribute.split('#')[1]}`;
      }
      selector = hrefAttribute && hrefAttribute !== '#' ? hrefAttribute.trim() : null;
    }
    return selector ? selector.split(',').map(sel => parseSelector(sel)).join(',') : null;
  };
  const SelectorEngine = {
    find(selector, element = document.documentElement) {
      return [].concat(...Element.prototype.querySelectorAll.call(element, selector));
    },
    findOne(selector, element = document.documentElement) {
      return Element.prototype.querySelector.call(element, selector);
    },
    children(element, selector) {
      return [].concat(...element.children).filter(child => child.matches(selector));
    },
    parents(element, selector) {
      const parents = [];
      let ancestor = element.parentNode.closest(selector);
      while (ancestor) {
        parents.push(ancestor);
        ancestor = ancestor.parentNode.closest(selector);
      }
      return parents;
    },
    prev(element, selector) {
      let previous = element.previousElementSibling;
      while (previous) {
        if (previous.matches(selector)) {
          return [previous];
        }
        previous = previous.previousElementSibling;
      }
      return [];
    },
    // TODO: this is now unused; remove later along with prev()
    next(element, selector) {
      let next = element.nextElementSibling;
      while (next) {
        if (next.matches(selector)) {
          return [next];
        }
        next = next.nextElementSibling;
      }
      return [];
    },
    focusableChildren(element) {
      const focusables = ['a', 'button', 'input', 'textarea', 'select', 'details', '[tabindex]', '[contenteditable="true"]'].map(selector => `${selector}:not([tabindex^="-"])`).join(',');
      return this.find(focusables, element).filter(el => !isDisabled(el) && isVisible(el));
    },
    getSelectorFromElement(element) {
      const selector = getSelector(element);
      if (selector) {
        return SelectorEngine.findOne(selector) ? selector : null;
      }
      return null;
    },
    getElementFromSelector(element) {
      const selector = getSelector(element);
      return selector ? SelectorEngine.findOne(selector) : null;
    },
    getMultipleElementsFromSelector(element) {
      const selector = getSelector(element);
      return selector ? SelectorEngine.find(selector) : [];
    }
  };

  /**
   * --------------------------------------------------------------------------
   * Bootstrap util/component-functions.js
   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
   * --------------------------------------------------------------------------
   */

  const enableDismissTrigger = (component, method = 'hide') => {
    const clickEvent = `click.dismiss${component.EVENT_KEY}`;
    const name = component.NAME;
    EventHandler.on(document, clickEvent, `[data-bs-dismiss="${name}"]`, function (event) {
      if (['A', 'AREA'].includes(this.tagName)) {
        event.preventDefault();
      }
      if (isDisabled(this)) {
        return;
      }
      const target = SelectorEngine.getElementFromSelector(this) || this.closest(`.${name}`);
      const instance = component.getOrCreateInstance(target);

      // Method argument is left, for Alert and only, as it doesn't implement the 'hide' method
      instance[method]();
    });
  };

  /**
   * --------------------------------------------------------------------------
   * Bootstrap alert.js
   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
   * --------------------------------------------------------------------------
   */


  /**
   * Constants
   */

  const NAME$f = 'alert';
  const DATA_KEY$a = 'bs.alert';
  const EVENT_KEY$b = `.${DATA_KEY$a}`;
  const EVENT_CLOSE = `close${EVENT_KEY$b}`;
  const EVENT_CLOSED = `closed${EVENT_KEY$b}`;
  const CLASS_NAME_FADE$5 = 'fade';
  const CLASS_NAME_SHOW$8 = 'show';

  /**
   * Class definition
   */

  class Alert extends BaseComponent {
    // Getters
    static get NAME() {
      return NAME$f;
    }

    // Public
    close() {
      const closeEvent = EventHandler.trigger(this._element, EVENT_CLOSE);
      if (closeEvent.defaultPrevented) {
        return;
      }
      this._element.classList.remove(CLASS_NAME_SHOW$8);
      const isAnimated = this._element.classList.contains(CLASS_NAME_FADE$5);
      this._queueCallback(() => this._destroyElement(), this._element, isAnimated);
    }

    // Private
    _destroyElement() {
      this._element.remove();
      EventHandler.trigger(this._element, EVENT_CLOSED);
      this.dispose();
    }

    // Static
    static jQueryInterface(config) {
      return this.each(function () {
        const data = Alert.getOrCreateInstance(this);
        if (typeof config !== 'string') {
          return;
        }
        if (data[config] === undefined || config.startsWith('_') || config === 'constructor') {
          throw new TypeError(`No method named "${config}"`);
        }
        data[config](this);
      });
    }
  }

  /**
   * Data API implementation
   */

  enableDismissTrigger(Alert, 'close');

  /**
   * jQuery
   */

  defineJQueryPlugin(Alert);

  /**
   * --------------------------------------------------------------------------
   * Bootstrap button.js
   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
   * --------------------------------------------------------------------------
   */


  /**
   * Constants
   */

  const NAME$e = 'button';
  const DATA_KEY$9 = 'bs.button';
  const EVENT_KEY$a = `.${DATA_KEY$9}`;
  const DATA_API_KEY$6 = '.data-api';
  const CLASS_NAME_ACTIVE$3 = 'active';
  const SELECTOR_DATA_TOGGLE$5 = '[data-bs-toggle="button"]';
  const EVENT_CLICK_DATA_API$6 = `click${EVENT_KEY$a}${DATA_API_KEY$6}`;

  /**
   * Class definition
   */

  class Button extends BaseComponent {
    // Getters
    static get NAME() {
      return NAME$e;
    }

    // Public
    toggle() {
      // Toggle class and sync the `aria-pressed` attribute with the return value of the `.toggle()` method
      this._element.setAttribute('aria-pressed', this._element.classList.toggle(CLASS_NAME_ACTIVE$3));
    }

    // Static
    static jQueryInterface(config) {
      return this.each(function () {
        const data = Button.getOrCreateInstance(this);
        if (config === 'toggle') {
          data[config]();
        }
      });
    }
  }

  /**
   * Data API implementation
   */

  EventHandler.on(document, EVENT_CLICK_DATA_API$6, SELECTOR_DATA_TOGGLE$5, event => {
    event.preventDefault();
    const button = event.target.closest(SELECTOR_DATA_TOGGLE$5);
    const data = Button.getOrCreateInstance(button);
    data.toggle();
  });

  /**
   * jQuery
   */

  defineJQueryPlugin(Button);

  /**
   * --------------------------------------------------------------------------
   * Bootstrap util/swipe.js
   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
   * --------------------------------------------------------------------------
   */


  /**
   * Constants
   */

  const NAME$d = 'swipe';
  const EVENT_KEY$9 = '.bs.swipe';
  const EVENT_TOUCHSTART = `touchstart${EVENT_KEY$9}`;
  const EVENT_TOUCHMOVE = `touchmove${EVENT_KEY$9}`;
  const EVENT_TOUCHEND = `touchend${EVENT_KEY$9}`;
  const EVENT_POINTERDOWN = `pointerdown${EVENT_KEY$9}`;
  const EVENT_POINTERUP = `pointerup${EVENT_KEY$9}`;
  const POINTER_TYPE_TOUCH = 'touch';
  const POINTER_TYPE_PEN = 'pen';
  const CLASS_NAME_POINTER_EVENT = 'pointer-event';
  const SWIPE_THRESHOLD = 40;
  const Default$c = {
    endCallback: null,
    leftCallback: null,
    rightCallback: null
  };
  const DefaultType$c = {
    endCallback: '(function|null)',
    leftCallback: '(function|null)',
    rightCallback: '(function|null)'
  };

  /**
   * Class definition
   */

  class Swipe extends Config {
    constructor(element, config) {
      super();
      this._element = element;
      if (!element || !Swipe.isSupported()) {
        return;
      }
      this._config = this._getConfig(config);
      this._deltaX = 0;
      this._supportPointerEvents = Boolean(window.PointerEvent);
      this._initEvents();
    }

    // Getters
    static get Default() {
      return Default$c;
    }
    static get DefaultType() {
      return DefaultType$c;
    }
    static get NAME() {
      return NAME$d;
    }

    // Public
    dispose() {
      EventHandler.off(this._element, EVENT_KEY$9);
    }

    // Private
    _start(event) {
      if (!this._supportPointerEvents) {
        this._deltaX = event.touches[0].clientX;
        return;
      }
      if (this._eventIsPointerPenTouch(event)) {
        this._deltaX = event.clientX;
      }
    }
    _end(event) {
      if (this._eventIsPointerPenTouch(event)) {
        this._deltaX = event.clientX - this._deltaX;
      }
      this._handleSwipe();
      execute(this._config.endCallback);
    }
    _move(event) {
      this._deltaX = event.touches && event.touches.length > 1 ? 0 : event.touches[0].clientX - this._deltaX;
    }
    _handleSwipe() {
      const absDeltaX = Math.abs(this._deltaX);
      if (absDeltaX <= SWIPE_THRESHOLD) {
        return;
      }
      const direction = absDeltaX / this._deltaX;
      this._deltaX = 0;
      if (!direction) {
        return;
      }
      execute(direction > 0 ? this._config.rightCallback : this._config.leftCallback);
    }
    _initEvents() {
      if (this._supportPointerEvents) {
        EventHandler.on(this._element, EVENT_POINTERDOWN, event => this._start(event));
        EventHandler.on(this._element, EVENT_POINTERUP, event => this._end(event));
        this._element.classList.add(CLASS_NAME_POINTER_EVENT);
      } else {
        EventHandler.on(this._element, EVENT_TOUCHSTART, event => this._start(event));
        EventHandler.on(this._element, EVENT_TOUCHMOVE, event => this._move(event));
        EventHandler.on(this._element, EVENT_TOUCHEND, event => this._end(event));
      }
    }
    _eventIsPointerPenTouch(event) {
      return this._supportPointerEvents && (event.pointerType === POINTER_TYPE_PEN || event.pointerType === POINTER_TYPE_TOUCH);
    }

    // Static
    static isSupported() {
      return 'ontouchstart' in document.documentElement || navigator.maxTouchPoints > 0;
    }
  }

  /**
   * --------------------------------------------------------------------------
   * Bootstrap carousel.js
   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
   * --------------------------------------------------------------------------
   */


  /**
   * Constants
   */

  const NAME$c = 'carousel';
  const DATA_KEY$8 = 'bs.carousel';
  const EVENT_KEY$8 = `.${DATA_KEY$8}`;
  const DATA_API_KEY$5 = '.data-api';
  const ARROW_LEFT_KEY$1 = 'ArrowLeft';
  const ARROW_RIGHT_KEY$1 = 'ArrowRight';
  const TOUCHEVENT_COMPAT_WAIT = 500; // Time for mouse compat events to fire after touch

  const ORDER_NEXT = 'next';
  const ORDER_PREV = 'prev';
  const DIRECTION_LEFT = 'left';
  const DIRECTION_RIGHT = 'right';
  const EVENT_SLIDE = `slide${EVENT_KEY$8}`;
  const EVENT_SLID = `slid${EVENT_KEY$8}`;
  const EVENT_KEYDOWN$1 = `keydown${EVENT_KEY$8}`;
  const EVENT_MOUSEENTER$1 = `mouseenter${EVENT_KEY$8}`;
  const EVENT_MOUSELEAVE$1 = `mouseleave${EVENT_KEY$8}`;
  const EVENT_DRAG_START = `dragstart${EVENT_KEY$8}`;
  const EVENT_LOAD_DATA_API$3 = `load${EVENT_KEY$8}${DATA_API_KEY$5}`;
  const EVENT_CLICK_DATA_API$5 = `click${EVENT_KEY$8}${DATA_API_KEY$5}`;
  const CLASS_NAME_CAROUSEL = 'carousel';
  const CLASS_NAME_ACTIVE$2 = 'active';
  const CLASS_NAME_SLIDE = 'slide';
  const CLASS_NAME_END = 'carousel-item-end';
  const CLASS_NAME_START = 'carousel-item-start';
  const CLASS_NAME_NEXT = 'carousel-item-next';
  const CLASS_NAME_PREV = 'carousel-item-prev';
  const SELECTOR_ACTIVE = '.active';
  const SELECTOR_ITEM = '.carousel-item';
  const SELECTOR_ACTIVE_ITEM = SELECTOR_ACTIVE + SELECTOR_ITEM;
  const SELECTOR_ITEM_IMG = '.carousel-item img';
  const SELECTOR_INDICATORS = '.carousel-indicators';
  const SELECTOR_DATA_SLIDE = '[data-bs-slide], [data-bs-slide-to]';
  const SELECTOR_DATA_RIDE = '[data-bs-ride="carousel"]';
  const KEY_TO_DIRECTION = {
    [ARROW_LEFT_KEY$1]: DIRECTION_RIGHT,
    [ARROW_RIGHT_KEY$1]: DIRECTION_LEFT
  };
  const Default$b = {
    interval: 5000,
    keyboard: true,
    pause: 'hover',
    ride: false,
    touch: true,
    wrap: true
  };
  const DefaultType$b = {
    interval: '(number|boolean)',
    // TODO:v6 remove boolean support
    keyboard: 'boolean',
    pause: '(string|boolean)',
    ride: '(boolean|string)',
    touch: 'boolean',
    wrap: 'boolean'
  };

  /**
   * Class definition
   */

  class Carousel extends BaseComponent {
    constructor(element, config) {
      super(element, config);
      this._interval = null;
      this._activeElement = null;
      this._isSliding = false;
      this.touchTimeout = null;
      this._swipeHelper = null;
      this._indicatorsElement = SelectorEngine.findOne(SELECTOR_INDICATORS, this._element);
      this._addEventListeners();
      if (this._config.ride === CLASS_NAME_CAROUSEL) {
        this.cycle();
      }
    }

    // Getters
    static get Default() {
      return Default$b;
    }
    static get DefaultType() {
      return DefaultType$b;
    }
    static get NAME() {
      return NAME$c;
    }

    // Public
    next() {
      this._slide(ORDER_NEXT);
    }
    nextWhenVisible() {
      // FIXME TODO use `document.visibilityState`
      // Don't call next when the page isn't visible
      // or the carousel or its parent isn't visible
      if (!document.hidden && isVisible(this._element)) {
        this.next();
      }
    }
    prev() {
      this._slide(ORDER_PREV);
    }
    pause() {
      if (this._isSliding) {
        triggerTransitionEnd(this._element);
      }
      this._clearInterval();
    }
    cycle() {
      this._clearInterval();
      this._updateInterval();
      this._interval = setInterval(() => this.nextWhenVisible(), this._config.interval);
    }
    _maybeEnableCycle() {
      if (!this._config.ride) {
        return;
      }
      if (this._isSliding) {
        EventHandler.one(this._element, EVENT_SLID, () => this.cycle());
        return;
      }
      this.cycle();
    }
    to(index) {
      const items = this._getItems();
      if (index > items.length - 1 || index < 0) {
        return;
      }
      if (this._isSliding) {
        EventHandler.one(this._element, EVENT_SLID, () => this.to(index));
        return;
      }
      const activeIndex = this._getItemIndex(this._getActive());
      if (activeIndex === index) {
        return;
      }
      const order = index > activeIndex ? ORDER_NEXT : ORDER_PREV;
      this._slide(order, items[index]);
    }
    dispose() {
      if (this._swipeHelper) {
        this._swipeHelper.dispose();
      }
      super.dispose();
    }

    // Private
    _configAfterMerge(config) {
      config.defaultInterval = config.interval;
      return config;
    }
    _addEventListeners() {
      if (this._config.keyboard) {
        EventHandler.on(this._element, EVENT_KEYDOWN$1, event => this._keydown(event));
      }
      if (this._config.pause === 'hover') {
        EventHandler.on(this._element, EVENT_MOUSEENTER$1, () => this.pause());
        EventHandler.on(this._element, EVENT_MOUSELEAVE$1, () => this._maybeEnableCycle());
      }
      if (this._config.touch && Swipe.isSupported()) {
        this._addTouchEventListeners();
      }
    }
    _addTouchEventListeners() {
      for (const img of SelectorEngine.find(SELECTOR_ITEM_IMG, this._element)) {
        EventHandler.on(img, EVENT_DRAG_START, event => event.preventDefault());
      }
      const endCallBack = () => {
        if (this._config.pause !== 'hover') {
          return;
        }

        // If it's a touch-enabled device, mouseenter/leave are fired as
        // part of the mouse compatibility events on first tap - the carousel
        // would stop cycling until user tapped out of it;
        // here, we listen for touchend, explicitly pause the carousel
        // (as if it's the second time we tap on it, mouseenter compat event
        // is NOT fired) and after a timeout (to allow for mouse compatibility
        // events to fire) we explicitly restart cycling

        this.pause();
        if (this.touchTimeout) {
          clearTimeout(this.touchTimeout);
        }
        this.touchTimeout = setTimeout(() => this._maybeEnableCycle(), TOUCHEVENT_COMPAT_WAIT + this._config.interval);
      };
      const swipeConfig = {
        leftCallback: () => this._slide(this._directionToOrder(DIRECTION_LEFT)),
        rightCallback: () => this._slide(this._directionToOrder(DIRECTION_RIGHT)),
        endCallback: endCallBack
      };
      this._swipeHelper = new Swipe(this._element, swipeConfig);
    }
    _keydown(event) {
      if (/input|textarea/i.test(event.target.tagName)) {
        return;
      }
      const direction = KEY_TO_DIRECTION[event.key];
      if (direction) {
        event.preventDefault();
        this._slide(this._directionToOrder(direction));
      }
    }
    _getItemIndex(element) {
      return this._getItems().indexOf(element);
    }
    _setActiveIndicatorElement(index) {
      if (!this._indicatorsElement) {
        return;
      }
      const activeIndicator = SelectorEngine.findOne(SELECTOR_ACTIVE, this._indicatorsElement);
      activeIndicator.classList.remove(CLASS_NAME_ACTIVE$2);
      activeIndicator.removeAttribute('aria-current');
      const newActiveIndicator = SelectorEngine.findOne(`[data-bs-slide-to="${index}"]`, this._indicatorsElement);
      if (newActiveIndicator) {
        newActiveIndicator.classList.add(CLASS_NAME_ACTIVE$2);
        newActiveIndicator.setAttribute('aria-current', 'true');
      }
    }
    _updateInterval() {
      const element = this._activeElement || this._getActive();
      if (!element) {
        return;
      }
      const elementInterval = Number.parseInt(element.getAttribute('data-bs-interval'), 10);
      this._config.interval = elementInterval || this._config.defaultInterval;
    }
    _slide(order, element = null) {
      if (this._isSliding) {
        return;
      }
      const activeElement = this._getActive();
      const isNext = order === ORDER_NEXT;
      const nextElement = element || getNextActiveElement(this._getItems(), activeElement, isNext, this._config.wrap);
      if (nextElement === activeElement) {
        return;
      }
      const nextElementIndex = this._getItemIndex(nextElement);
      const triggerEvent = eventName => {
        return EventHandler.trigger(this._element, eventName, {
          relatedTarget: nextElement,
          direction: this._orderToDirection(order),
          from: this._getItemIndex(activeElement),
          to: nextElementIndex
        });
      };
      const slideEvent = triggerEvent(EVENT_SLIDE);
      if (slideEvent.defaultPrevented) {
        return;
      }
      if (!activeElement || !nextElement) {
        // Some weirdness is happening, so we bail
        // TODO: change tests that use empty divs to avoid this check
        return;
      }
      const isCycling = Boolean(this._interval);
      this.pause();
      this._isSliding = true;
      this._setActiveIndicatorElement(nextElementIndex);
      this._activeElement = nextElement;
      const directionalClassName = isNext ? CLASS_NAME_START : CLASS_NAME_END;
      const orderClassName = isNext ? CLASS_NAME_NEXT : CLASS_NAME_PREV;
      nextElement.classList.add(orderClassName);
      reflow(nextElement);
      activeElement.classList.add(directionalClassName);
      nextElement.classList.add(directionalClassName);
      const completeCallBack = () => {
        nextElement.classList.remove(directionalClassName, orderClassName);
        nextElement.classList.add(CLASS_NAME_ACTIVE$2);
        activeElement.classList.remove(CLASS_NAME_ACTIVE$2, orderClassName, directionalClassName);
        this._isSliding = false;
        triggerEvent(EVENT_SLID);
      };
      this._queueCallback(completeCallBack, activeElement, this._isAnimated());
      if (isCycling) {
        this.cycle();
      }
    }
    _isAnimated() {
      return this._element.classList.contains(CLASS_NAME_SLIDE);
    }
    _getActive() {
      return SelectorEngine.findOne(SELECTOR_ACTIVE_ITEM, this._element);
    }
    _getItems() {
      return SelectorEngine.find(SELECTOR_ITEM, this._element);
    }
    _clearInterval() {
      if (this._interval) {
        clearInterval(this._interval);
        this._interval = null;
      }
    }
    _directionToOrder(direction) {
      if (isRTL()) {
        return direction === DIRECTION_LEFT ? ORDER_PREV : ORDER_NEXT;
      }
      return direction === DIRECTION_LEFT ? ORDER_NEXT : ORDER_PREV;
    }
    _orderToDirection(order) {
      if (isRTL()) {
        return order === ORDER_PREV ? DIRECTION_LEFT : DIRECTION_RIGHT;
      }
      return order === ORDER_PREV ? DIRECTION_RIGHT : DIRECTION_LEFT;
    }

    // Static
    static jQueryInterface(config) {
      return this.each(function () {
        const data = Carousel.getOrCreateInstance(this, config);
        if (typeof config === 'number') {
          data.to(config);
          return;
        }
        if (typeof config === 'string') {
          if (data[config] === undefined || config.startsWith('_') || config === 'constructor') {
            throw new TypeError(`No method named "${config}"`);
          }
          data[config]();
        }
      });
    }
  }

  /**
   * Data API implementation
   */

  EventHandler.on(document, EVENT_CLICK_DATA_API$5, SELECTOR_DATA_SLIDE, function (event) {
    const target = SelectorEngine.getElementFromSelector(this);
    if (!target || !target.classList.contains(CLASS_NAME_CAROUSEL)) {
      return;
    }
    event.preventDefault();
    const carousel = Carousel.getOrCreateInstance(target);
    const slideIndex = this.getAttribute('data-bs-slide-to');
    if (slideIndex) {
      carousel.to(slideIndex);
      carousel._maybeEnableCycle();
      return;
    }
    if (Manipulator.getDataAttribute(this, 'slide') === 'next') {
      carousel.next();
      carousel._maybeEnableCycle();
      return;
    }
    carousel.prev();
    carousel._maybeEnableCycle();
  });
  EventHandler.on(window, EVENT_LOAD_DATA_API$3, () => {
    const carousels = SelectorEngine.find(SELECTOR_DATA_RIDE);
    for (const carousel of carousels) {
      Carousel.getOrCreateInstance(carousel);
    }
  });

  /**
   * jQuery
   */

  defineJQueryPlugin(Carousel);

  /**
   * --------------------------------------------------------------------------
   * Bootstrap collapse.js
   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
   * --------------------------------------------------------------------------
   */


  /**
   * Constants
   */

  const NAME$b = 'collapse';
  const DATA_KEY$7 = 'bs.collapse';
  const EVENT_KEY$7 = `.${DATA_KEY$7}`;
  const DATA_API_KEY$4 = '.data-api';
  const EVENT_SHOW$6 = `show${EVENT_KEY$7}`;
  const EVENT_SHOWN$6 = `shown${EVENT_KEY$7}`;
  const EVENT_HIDE$6 = `hide${EVENT_KEY$7}`;
  const EVENT_HIDDEN$6 = `hidden${EVENT_KEY$7}`;
  const EVENT_CLICK_DATA_API$4 = `click${EVENT_KEY$7}${DATA_API_KEY$4}`;
  const CLASS_NAME_SHOW$7 = 'show';
  const CLASS_NAME_COLLAPSE = 'collapse';
  const CLASS_NAME_COLLAPSING = 'collapsing';
  const CLASS_NAME_COLLAPSED = 'collapsed';
  const CLASS_NAME_DEEPER_CHILDREN = `:scope .${CLASS_NAME_COLLAPSE} .${CLASS_NAME_COLLAPSE}`;
  const CLASS_NAME_HORIZONTAL = 'collapse-horizontal';
  const WIDTH = 'width';
  const HEIGHT = 'height';
  const SELECTOR_ACTIVES = '.collapse.show, .collapse.collapsing';
  const SELECTOR_DATA_TOGGLE$4 = '[data-bs-toggle="collapse"]';
  const Default$a = {
    parent: null,
    toggle: true
  };
  const DefaultType$a = {
    parent: '(null|element)',
    toggle: 'boolean'
  };

  /**
   * Class definition
   */

  class Collapse extends BaseComponent {
    constructor(element, config) {
      super(element, config);
      this._isTransitioning = false;
      this._triggerArray = [];
      const toggleList = SelectorEngine.find(SELECTOR_DATA_TOGGLE$4);
      for (const elem of toggleList) {
        const selector = SelectorEngine.getSelectorFromElement(elem);
        const filterElement = SelectorEngine.find(selector).filter(foundElement => foundElement === this._element);
        if (selector !== null && filterElement.length) {
          this._triggerArray.push(elem);
        }
      }
      this._initializeChildren();
      if (!this._config.parent) {
        this._addAriaAndCollapsedClass(this._triggerArray, this._isShown());
      }
      if (this._config.toggle) {
        this.toggle();
      }
    }

    // Getters
    static get Default() {
      return Default$a;
    }
    static get DefaultType() {
      return DefaultType$a;
    }
    static get NAME() {
      return NAME$b;
    }

    // Public
    toggle() {
      if (this._isShown()) {
        this.hide();
      } else {
        this.show();
      }
    }
    show() {
      if (this._isTransitioning || this._isShown()) {
        return;
      }
      let activeChildren = [];

      // find active children
      if (this._config.parent) {
        activeChildren = this._getFirstLevelChildren(SELECTOR_ACTIVES).filter(element => element !== this._element).map(element => Collapse.getOrCreateInstance(element, {
          toggle: false
        }));
      }
      if (activeChildren.length && activeChildren[0]._isTransitioning) {
        return;
      }
      const startEvent = EventHandler.trigger(this._element, EVENT_SHOW$6);
      if (startEvent.defaultPrevented) {
        return;
      }
      for (const activeInstance of activeChildren) {
        activeInstance.hide();
      }
      const dimension = this._getDimension();
      this._element.classList.remove(CLASS_NAME_COLLAPSE);
      this._element.classList.add(CLASS_NAME_COLLAPSING);
      this._element.style[dimension] = 0;
      this._addAriaAndCollapsedClass(this._triggerArray, true);
      this._isTransitioning = true;
      const complete = () => {
        this._isTransitioning = false;
        this._element.classList.remove(CLASS_NAME_COLLAPSING);
        this._element.classList.add(CLASS_NAME_COLLAPSE, CLASS_NAME_SHOW$7);
        this._element.style[dimension] = '';
        EventHandler.trigger(this._element, EVENT_SHOWN$6);
      };
      const capitalizedDimension = dimension[0].toUpperCase() + dimension.slice(1);
      const scrollSize = `scroll${capitalizedDimension}`;
      this._queueCallback(complete, this._element, true);
      this._element.style[dimension] = `${this._element[scrollSize]}px`;
    }
    hide() {
      if (this._isTransitioning || !this._isShown()) {
        return;
      }
      const startEvent = EventHandler.trigger(this._element, EVENT_HIDE$6);
      if (startEvent.defaultPrevented) {
        return;
      }
      const dimension = this._getDimension();
      this._element.style[dimension] = `${this._element.getBoundingClientRect()[dimension]}px`;
      reflow(this._element);
      this._element.classList.add(CLASS_NAME_COLLAPSING);
      this._element.classList.remove(CLASS_NAME_COLLAPSE, CLASS_NAME_SHOW$7);
      for (const trigger of this._triggerArray) {
        const element = SelectorEngine.getElementFromSelector(trigger);
        if (element && !this._isShown(element)) {
          this._addAriaAndCollapsedClass([trigger], false);
        }
      }
      this._isTransitioning = true;
      const complete = () => {
        this._isTransitioning = false;
        this._element.classList.remove(CLASS_NAME_COLLAPSING);
        this._element.classList.add(CLASS_NAME_COLLAPSE);
        EventHandler.trigger(this._element, EVENT_HIDDEN$6);
      };
      this._element.style[dimension] = '';
      this._queueCallback(complete, this._element, true);
    }

    // Private
    _isShown(element = this._element) {
      return element.classList.contains(CLASS_NAME_SHOW$7);
    }
    _configAfterMerge(config) {
      config.toggle = Boolean(config.toggle); // Coerce string values
      config.parent = getElement(config.parent);
      return config;
    }
    _getDimension() {
      return this._element.classList.contains(CLASS_NAME_HORIZONTAL) ? WIDTH : HEIGHT;
    }
    _initializeChildren() {
      if (!this._config.parent) {
        return;
      }
      const children = this._getFirstLevelChildren(SELECTOR_DATA_TOGGLE$4);
      for (const element of children) {
        const selected = SelectorEngine.getElementFromSelector(element);
        if (selected) {
          this._addAriaAndCollapsedClass([element], this._isShown(selected));
        }
      }
    }
    _getFirstLevelChildren(selector) {
      const children = SelectorEngine.find(CLASS_NAME_DEEPER_CHILDREN, this._config.parent);
      // remove children if greater depth
      return SelectorEngine.find(selector, this._config.parent).filter(element => !children.includes(element));
    }
    _addAriaAndCollapsedClass(triggerArray, isOpen) {
      if (!triggerArray.length) {
        return;
      }
      for (const element of triggerArray) {
        element.classList.toggle(CLASS_NAME_COLLAPSED, !isOpen);
        element.setAttribute('aria-expanded', isOpen);
      }
    }

    // Static
    static jQueryInterface(config) {
      const _config = {};
      if (typeof config === 'string' && /show|hide/.test(config)) {
        _config.toggle = false;
      }
      return this.each(function () {
        const data = Collapse.getOrCreateInstance(this, _config);
        if (typeof config === 'string') {
          if (typeof data[config] === 'undefined') {
            throw new TypeError(`No method named "${config}"`);
          }
          data[config]();
        }
      });
    }
  }

  /**
   * Data API implementation
   */

  EventHandler.on(document, EVENT_CLICK_DATA_API$4, SELECTOR_DATA_TOGGLE$4, function (event) {
    // preventDefault only for <a> elements (which change the URL) not inside the collapsible element
    if (event.target.tagName === 'A' || event.delegateTarget && event.delegateTarget.tagName === 'A') {
      event.preventDefault();
    }
    for (const element of SelectorEngine.getMultipleElementsFromSelector(this)) {
      Collapse.getOrCreateInstance(element, {
        toggle: false
      }).toggle();
    }
  });

  /**
   * jQuery
   */

  defineJQueryPlugin(Collapse);

  var top = 'top';
  var bottom = 'bottom';
  var right = 'right';
  var left = 'left';
  var auto = 'auto';
  var basePlacements = [top, bottom, right, left];
  var start = 'start';
  var end = 'end';
  var clippingParents = 'clippingParents';
  var viewport = 'viewport';
  var popper = 'popper';
  var reference = 'reference';
  var variationPlacements = /*#__PURE__*/basePlacements.reduce(function (acc, placement) {
    return acc.concat([placement + "-" + start, placement + "-" + end]);
  }, []);
  var placements = /*#__PURE__*/[].concat(basePlacements, [auto]).reduce(function (acc, placement) {
    return acc.concat([placement, placement + "-" + start, placement + "-" + end]);
  }, []); // modifiers that need to read the DOM

  var beforeRead = 'beforeRead';
  var read = 'read';
  var afterRead = 'afterRead'; // pure-logic modifiers

  var beforeMain = 'beforeMain';
  var main = 'main';
  var afterMain = 'afterMain'; // modifier with the purpose to write to the DOM (or write into a framework state)

  var beforeWrite = 'beforeWrite';
  var write = 'write';
  var afterWrite = 'afterWrite';
  var modifierPhases = [beforeRead, read, afterRead, beforeMain, main, afterMain, beforeWrite, write, afterWrite];

  function getNodeName(element) {
    return element ? (element.nodeName || '').toLowerCase() : null;
  }

  function getWindow(node) {
    if (node == null) {
      return window;
    }

    if (node.toString() !== '[object Window]') {
      var ownerDocument = node.ownerDocument;
      return ownerDocument ? ownerDocument.defaultView || window : window;
    }

    return node;
  }

  function isElement(node) {
    var OwnElement = getWindow(node).Element;
    return node instanceof OwnElement || node instanceof Element;
  }

  function isHTMLElement(node) {
    var OwnElement = getWindow(node).HTMLElement;
    return node instanceof OwnElement || node instanceof HTMLElement;
  }

  function isShadowRoot(node) {
    // IE 11 has no ShadowRoot
    if (typeof ShadowRoot === 'undefined') {
      return false;
    }

    var OwnElement = getWindow(node).ShadowRoot;
    return node instanceof OwnElement || node instanceof ShadowRoot;
  }

  // and applies them to the HTMLElements such as popper and arrow

  function applyStyles(_ref) {
    var state = _ref.state;
    Object.keys(state.elements).forEach(function (name) {
      var style = state.styles[name] || {};
      var attributes = state.attributes[name] || {};
      var element = state.elements[name]; // arrow is optional + virtual elements

      if (!isHTMLElement(element) || !getNodeName(element)) {
        return;
      } // Flow doesn't support to extend this property, but it's the most
      // effective way to apply styles to an HTMLElement
      // $FlowFixMe[cannot-write]


      Object.assign(element.style, style);
      Object.keys(attributes).forEach(function (name) {
        var value = attributes[name];

        if (value === false) {
          element.removeAttribute(name);
        } else {
          element.setAttribute(name, value === true ? '' : value);
        }
      });
    });
  }

  function effect$2(_ref2) {
    var state = _ref2.state;
    var initialStyles = {
      popper: {
        position: state.options.strategy,
        left: '0',
        top: '0',
        margin: '0'
      },
      arrow: {
        position: 'absolute'
      },
      reference: {}
    };
    Object.assign(state.elements.popper.style, initialStyles.popper);
    state.styles = initialStyles;

    if (state.elements.arrow) {
      Object.assign(state.elements.arrow.style, initialStyles.arrow);
    }

    return function () {
      Object.keys(state.elements).forEach(function (name) {
        var element = state.elements[name];
        var attributes = state.attributes[name] || {};
        var styleProperties = Object.keys(state.styles.hasOwnProperty(name) ? state.styles[name] : initialStyles[name]); // Set all values to an empty string to unset them

        var style = styleProperties.reduce(function (style, property) {
          style[property] = '';
          return style;
        }, {}); // arrow is optional + virtual elements

        if (!isHTMLElement(element) || !getNodeName(element)) {
          return;
        }

        Object.assign(element.style, style);
        Object.keys(attributes).forEach(function (attribute) {
          element.removeAttribute(attribute);
        });
      });
    };
  } // eslint-disable-next-line import/no-unused-modules


  const applyStyles$1 = {
    name: 'applyStyles',
    enabled: true,
    phase: 'write',
    fn: applyStyles,
    effect: effect$2,
    requires: ['computeStyles']
  };

  function getBasePlacement(placement) {
    return placement.split('-')[0];
  }

  var max = Math.max;
  var min = Math.min;
  var round = Math.round;

  function getUAString() {
    var uaData = navigator.userAgentData;

    if (uaData != null && uaData.brands && Array.isArray(uaData.brands)) {
      return uaData.brands.map(function (item) {
        return item.brand + "/" + item.version;
      }).join(' ');
    }

    return navigator.userAgent;
  }

  function isLayoutViewport() {
    return !/^((?!chrome|android).)*safari/i.test(getUAString());
  }

  function getBoundingClientRect(element, includeScale, isFixedStrategy) {
    if (includeScale === void 0) {
      includeScale = false;
    }

    if (isFixedStrategy === void 0) {
      isFixedStrategy = false;
    }

    var clientRect = element.getBoundingClientRect();
    var scaleX = 1;
    var scaleY = 1;

    if (includeScale && isHTMLElement(element)) {
      scaleX = element.offsetWidth > 0 ? round(clientRect.width) / element.offsetWidth || 1 : 1;
      scaleY = element.offsetHeight > 0 ? round(clientRect.height) / element.offsetHeight || 1 : 1;
    }

    var _ref = isElement(element) ? getWindow(element) : window,
        visualViewport = _ref.visualViewport;

    var addVisualOffsets = !isLayoutViewport() && isFixedStrategy;
    var x = (clientRect.left + (addVisualOffsets && visualViewport ? visualViewport.offsetLeft : 0)) / scaleX;
    var y = (clientRect.top + (addVisualOffsets && visualViewport ? visualViewport.offsetTop : 0)) / scaleY;
    var width = clientRect.width / scaleX;
    var height = clientRect.height / scaleY;
    return {
      width: width,
      height: height,
      top: y,
      right: x + width,
      bottom: y + height,
      left: x,
      x: x,
      y: y
    };
  }

  // means it doesn't take into account transforms.

  function getLayoutRect(element) {
    var clientRect = getBoundingClientRect(element); // Use the clientRect sizes if it's not been transformed.
    // Fixes https://github.com/popperjs/popper-core/issues/1223

    var width = element.offsetWidth;
    var height = element.offsetHeight;

    if (Math.abs(clientRect.width - width) <= 1) {
      width = clientRect.width;
    }

    if (Math.abs(clientRect.height - height) <= 1) {
      height = clientRect.height;
    }

    return {
      x: element.offsetLeft,
      y: element.offsetTop,
      width: width,
      height: height
    };
  }

  function contains(parent, child) {
    var rootNode = child.getRootNode && child.getRootNode(); // First, attempt with faster native method

    if (parent.contains(child)) {
      return true;
    } // then fallback to custom implementation with Shadow DOM support
    else if (rootNode && isShadowRoot(rootNode)) {
        var next = child;

        do {
          if (next && parent.isSameNode(next)) {
            return true;
          } // $FlowFixMe[prop-missing]: need a better way to handle this...


          next = next.parentNode || next.host;
        } while (next);
      } // Give up, the result is false


    return false;
  }

  function getComputedStyle$1(element) {
    return getWindow(element).getComputedStyle(element);
  }

  function isTableElement(element) {
    return ['table', 'td', 'th'].indexOf(getNodeName(element)) >= 0;
  }

  function getDocumentElement(element) {
    // $FlowFixMe[incompatible-return]: assume body is always available
    return ((isElement(element) ? element.ownerDocument : // $FlowFixMe[prop-missing]
    element.document) || window.document).documentElement;
  }

  function getParentNode(element) {
    if (getNodeName(element) === 'html') {
      return element;
    }

    return (// this is a quicker (but less type safe) way to save quite some bytes from the bundle
      // $FlowFixMe[incompatible-return]
      // $FlowFixMe[prop-missing]
      element.assignedSlot || // step into the shadow DOM of the parent of a slotted node
      element.parentNode || ( // DOM Element detected
      isShadowRoot(element) ? element.host : null) || // ShadowRoot detected
      // $FlowFixMe[incompatible-call]: HTMLElement is a Node
      getDocumentElement(element) // fallback

    );
  }

  function getTrueOffsetParent(element) {
    if (!isHTMLElement(element) || // https://github.com/popperjs/popper-core/issues/837
    getComputedStyle$1(element).position === 'fixed') {
      return null;
    }

    return element.offsetParent;
  } // `.offsetParent` reports `null` for fixed elements, while absolute elements
  // return the containing block


  function getContainingBlock(element) {
    var isFirefox = /firefox/i.test(getUAString());
    var isIE = /Trident/i.test(getUAString());

    if (isIE && isHTMLElement(element)) {
      // In IE 9, 10 and 11 fixed elements containing block is always established by the viewport
      var elementCss = getComputedStyle$1(element);

      if (elementCss.position === 'fixed') {
        return null;
      }
    }

    var currentNode = getParentNode(element);

    if (isShadowRoot(currentNode)) {
      currentNode = currentNode.host;
    }

    while (isHTMLElement(currentNode) && ['html', 'body'].indexOf(getNodeName(currentNode)) < 0) {
      var css = getComputedStyle$1(currentNode); // This is non-exhaustive but covers the most common CSS properties that
      // create a containing block.
      // https://developer.mozilla.org/en-US/docs/Web/CSS/Containing_block#identifying_the_containing_block

      if (css.transform !== 'none' || css.perspective !== 'none' || css.contain === 'paint' || ['transform', 'perspective'].indexOf(css.willChange) !== -1 || isFirefox && css.willChange === 'filter' || isFirefox && css.filter && css.filter !== 'none') {
        return currentNode;
      } else {
        currentNode = currentNode.parentNode;
      }
    }

    return null;
  } // Gets the closest ancestor positioned element. Handles some edge cases,
  // such as table ancestors and cross browser bugs.


  function getOffsetParent(element) {
    var window = getWindow(element);
    var offsetParent = getTrueOffsetParent(element);

    while (offsetParent && isTableElement(offsetParent) && getComputedStyle$1(offsetParent).position === 'static') {
      offsetParent = getTrueOffsetParent(offsetParent);
    }

    if (offsetParent && (getNodeName(offsetParent) === 'html' || getNodeName(offsetParent) === 'body' && getComputedStyle$1(offsetParent).position === 'static')) {
      return window;
    }

    return offsetParent || getContainingBlock(element) || window;
  }

  function getMainAxisFromPlacement(placement) {
    return ['top', 'bottom'].indexOf(placement) >= 0 ? 'x' : 'y';
  }

  function within(min$1, value, max$1) {
    return max(min$1, min(value, max$1));
  }
  function withinMaxClamp(min, value, max) {
    var v = within(min, value, max);
    return v > max ? max : v;
  }

  function getFreshSideObject() {
    return {
      top: 0,
      right: 0,
      bottom: 0,
      left: 0
    };
  }

  function mergePaddingObject(paddingObject) {
    return Object.assign({}, getFreshSideObject(), paddingObject);
  }

  function expandToHashMap(value, keys) {
    return keys.reduce(function (hashMap, key) {
      hashMap[key] = value;
      return hashMap;
    }, {});
  }

  var toPaddingObject = function toPaddingObject(padding, state) {
    padding = typeof padding === 'function' ? padding(Object.assign({}, state.rects, {
      placement: state.placement
    })) : padding;
    return mergePaddingObject(typeof padding !== 'number' ? padding : expandToHashMap(padding, basePlacements));
  };

  function arrow(_ref) {
    var _state$modifiersData$;

    var state = _ref.state,
        name = _ref.name,
        options = _ref.options;
    var arrowElement = state.elements.arrow;
    var popperOffsets = state.modifiersData.popperOffsets;
    var basePlacement = getBasePlacement(state.placement);
    var axis = getMainAxisFromPlacement(basePlacement);
    var isVertical = [left, right].indexOf(basePlacement) >= 0;
    var len = isVertical ? 'height' : 'width';

    if (!arrowElement || !popperOffsets) {
      return;
    }

    var paddingObject = toPaddingObject(options.padding, state);
    var arrowRect = getLayoutRect(arrowElement);
    var minProp = axis === 'y' ? top : left;
    var maxProp = axis === 'y' ? bottom : right;
    var endDiff = state.rects.reference[len] + state.rects.reference[axis] - popperOffsets[axis] - state.rects.popper[len];
    var startDiff = popperOffsets[axis] - state.rects.reference[axis];
    var arrowOffsetParent = getOffsetParent(arrowElement);
    var clientSize = arrowOffsetParent ? axis === 'y' ? arrowOffsetParent.clientHeight || 0 : arrowOffsetParent.clientWidth || 0 : 0;
    var centerToReference = endDiff / 2 - startDiff / 2; // Make sure the arrow doesn't overflow the popper if the center point is
    // outside of the popper bounds

    var min = paddingObject[minProp];
    var max = clientSize - arrowRect[len] - paddingObject[maxProp];
    var center = clientSize / 2 - arrowRect[len] / 2 + centerToReference;
    var offset = within(min, center, max); // Prevents breaking syntax highlighting...

    var axisProp = axis;
    state.modifiersData[name] = (_state$modifiersData$ = {}, _state$modifiersData$[axisProp] = offset, _state$modifiersData$.centerOffset = offset - center, _state$modifiersData$);
  }

  function effect$1(_ref2) {
    var state = _ref2.state,
        options = _ref2.options;
    var _options$element = options.element,
        arrowElement = _options$element === void 0 ? '[data-popper-arrow]' : _options$element;

    if (arrowElement == null) {
      return;
    } // CSS selector


    if (typeof arrowElement === 'string') {
      arrowElement = state.elements.popper.querySelector(arrowElement);

      if (!arrowElement) {
        return;
      }
    }

    if (!contains(state.elements.popper, arrowElement)) {
      return;
    }

    state.elements.arrow = arrowElement;
  } // eslint-disable-next-line import/no-unused-modules


  const arrow$1 = {
    name: 'arrow',
    enabled: true,
    phase: 'main',
    fn: arrow,
    effect: effect$1,
    requires: ['popperOffsets'],
    requiresIfExists: ['preventOverflow']
  };

  function getVariation(placement) {
    return placement.split('-')[1];
  }

  var unsetSides = {
    top: 'auto',
    right: 'auto',
    bottom: 'auto',
    left: 'auto'
  }; // Round the offsets to the nearest suitable subpixel based on the DPR.
  // Zooming can change the DPR, but it seems to report a value that will
  // cleanly divide the values into the appropriate subpixels.

  function roundOffsetsByDPR(_ref, win) {
    var x = _ref.x,
        y = _ref.y;
    var dpr = win.devicePixelRatio || 1;
    return {
      x: round(x * dpr) / dpr || 0,
      y: round(y * dpr) / dpr || 0
    };
  }

  function mapToStyles(_ref2) {
    var _Object$assign2;

    var popper = _ref2.popper,
        popperRect = _ref2.popperRect,
        placement = _ref2.placement,
        variation = _ref2.variation,
        offsets = _ref2.offsets,
        position = _ref2.position,
        gpuAcceleration = _ref2.gpuAcceleration,
        adaptive = _ref2.adaptive,
        roundOffsets = _ref2.roundOffsets,
        isFixed = _ref2.isFixed;
    var _offsets$x = offsets.x,
        x = _offsets$x === void 0 ? 0 : _offsets$x,
        _offsets$y = offsets.y,
        y = _offsets$y === void 0 ? 0 : _offsets$y;

    var _ref3 = typeof roundOffsets === 'function' ? roundOffsets({
      x: x,
      y: y
    }) : {
      x: x,
      y: y
    };

    x = _ref3.x;
    y = _ref3.y;
    var hasX = offsets.hasOwnProperty('x');
    var hasY = offsets.hasOwnProperty('y');
    var sideX = left;
    var sideY = top;
    var win = window;

    if (adaptive) {
      var offsetParent = getOffsetParent(popper);
      var heightProp = 'clientHeight';
      var widthProp = 'clientWidth';

      if (offsetParent === getWindow(popper)) {
        offsetParent = getDocumentElement(popper);

        if (getComputedStyle$1(offsetParent).position !== 'static' && position === 'absolute') {
          heightProp = 'scrollHeight';
          widthProp = 'scrollWidth';
        }
      } // $FlowFixMe[incompatible-cast]: force type refinement, we compare offsetParent with window above, but Flow doesn't detect it


      offsetParent = offsetParent;

      if (placement === top || (placement === left || placement === right) && variation === end) {
        sideY = bottom;
        var offsetY = isFixed && offsetParent === win && win.visualViewport ? win.visualViewport.height : // $FlowFixMe[prop-missing]
        offsetParent[heightProp];
        y -= offsetY - popperRect.height;
        y *= gpuAcceleration ? 1 : -1;
      }

      if (placement === left || (placement === top || placement === bottom) && variation === end) {
        sideX = right;
        var offsetX = isFixed && offsetParent === win && win.visualViewport ? win.visualViewport.width : // $FlowFixMe[prop-missing]
        offsetParent[widthProp];
        x -= offsetX - popperRect.width;
        x *= gpuAcceleration ? 1 : -1;
      }
    }

    var commonStyles = Object.assign({
      position: position
    }, adaptive && unsetSides);

    var _ref4 = roundOffsets === true ? roundOffsetsByDPR({
      x: x,
      y: y
    }, getWindow(popper)) : {
      x: x,
      y: y
    };

    x = _ref4.x;
    y = _ref4.y;

    if (gpuAcceleration) {
      var _Object$assign;

      return Object.assign({}, commonStyles, (_Object$assign = {}, _Object$assign[sideY] = hasY ? '0' : '', _Object$assign[sideX] = hasX ? '0' : '', _Object$assign.transform = (win.devicePixelRatio || 1) <= 1 ? "translate(" + x + "px, " + y + "px)" : "translate3d(" + x + "px, " + y + "px, 0)", _Object$assign));
    }

    return Object.assign({}, commonStyles, (_Object$assign2 = {}, _Object$assign2[sideY] = hasY ? y + "px" : '', _Object$assign2[sideX] = hasX ? x + "px" : '', _Object$assign2.transform = '', _Object$assign2));
  }

  function computeStyles(_ref5) {
    var state = _ref5.state,
        options = _ref5.options;
    var _options$gpuAccelerat = options.gpuAcceleration,
        gpuAcceleration = _options$gpuAccelerat === void 0 ? true : _options$gpuAccelerat,
        _options$adaptive = options.adaptive,
        adaptive = _options$adaptive === void 0 ? true : _options$adaptive,
        _options$roundOffsets = options.roundOffsets,
        roundOffsets = _options$roundOffsets === void 0 ? true : _options$roundOffsets;
    var commonStyles = {
      placement: getBasePlacement(state.placement),
      variation: getVariation(state.placement),
      popper: state.elements.popper,
      popperRect: state.rects.popper,
      gpuAcceleration: gpuAcceleration,
      isFixed: state.options.strategy === 'fixed'
    };

    if (state.modifiersData.popperOffsets != null) {
      state.styles.popper = Object.assign({}, state.styles.popper, mapToStyles(Object.assign({}, commonStyles, {
        offsets: state.modifiersData.popperOffsets,
        position: state.options.strategy,
        adaptive: adaptive,
        roundOffsets: roundOffsets
      })));
    }

    if (state.modifiersData.arrow != null) {
      state.styles.arrow = Object.assign({}, state.styles.arrow, mapToStyles(Object.assign({}, commonStyles, {
        offsets: state.modifiersData.arrow,
        position: 'absolute',
        adaptive: false,
        roundOffsets: roundOffsets
      })));
    }

    state.attributes.popper = Object.assign({}, state.attributes.popper, {
      'data-popper-placement': state.placement
    });
  } // eslint-disable-next-line import/no-unused-modules


  const computeStyles$1 = {
    name: 'computeStyles',
    enabled: true,
    phase: 'beforeWrite',
    fn: computeStyles,
    data: {}
  };

  var passive = {
    passive: true
  };

  function effect(_ref) {
    var state = _ref.state,
        instance = _ref.instance,
        options = _ref.options;
    var _options$scroll = options.scroll,
        scroll = _options$scroll === void 0 ? true : _options$scroll,
        _options$resize = options.resize,
        resize = _options$resize === void 0 ? true : _options$resize;
    var window = getWindow(state.elements.popper);
    var scrollParents = [].concat(state.scrollParents.reference, state.scrollParents.popper);

    if (scroll) {
      scrollParents.forEach(function (scrollParent) {
        scrollParent.addEventListener('scroll', instance.update, passive);
      });
    }

    if (resize) {
      window.addEventListener('resize', instance.update, passive);
    }

    return function () {
      if (scroll) {
        scrollParents.forEach(function (scrollParent) {
          scrollParent.removeEventListener('scroll', instance.update, passive);
        });
      }

      if (resize) {
        window.removeEventListener('resize', instance.update, passive);
      }
    };
  } // eslint-disable-next-line import/no-unused-modules


  const eventListeners = {
    name: 'eventListeners',
    enabled: true,
    phase: 'write',
    fn: function fn() {},
    effect: effect,
    data: {}
  };

  var hash$1 = {
    left: 'right',
    right: 'left',
    bottom: 'top',
    top: 'bottom'
  };
  function getOppositePlacement(placement) {
    return placement.replace(/left|right|bottom|top/g, function (matched) {
      return hash$1[matched];
    });
  }

  var hash = {
    start: 'end',
    end: 'start'
  };
  function getOppositeVariationPlacement(placement) {
    return placement.replace(/start|end/g, function (matched) {
      return hash[matched];
    });
  }

  function getWindowScroll(node) {
    var win = getWindow(node);
    var scrollLeft = win.pageXOffset;
    var scrollTop = win.pageYOffset;
    return {
      scrollLeft: scrollLeft,
      scrollTop: scrollTop
    };
  }

  function getWindowScrollBarX(element) {
    // If <html> has a CSS width greater than the viewport, then this will be
    // incorrect for RTL.
    // Popper 1 is broken in this case and never had a bug report so let's assume
    // it's not an issue. I don't think anyone ever specifies width on <html>
    // anyway.
    // Browsers where the left scrollbar doesn't cause an issue report `0` for
    // this (e.g. Edge 2019, IE11, Safari)
    return getBoundingClientRect(getDocumentElement(element)).left + getWindowScroll(element).scrollLeft;
  }

  function getViewportRect(element, strategy) {
    var win = getWindow(element);
    var html = getDocumentElement(element);
    var visualViewport = win.visualViewport;
    var width = html.clientWidth;
    var height = html.clientHeight;
    var x = 0;
    var y = 0;

    if (visualViewport) {
      width = visualViewport.width;
      height = visualViewport.height;
      var layoutViewport = isLayoutViewport();

      if (layoutViewport || !layoutViewport && strategy === 'fixed') {
        x = visualViewport.offsetLeft;
        y = visualViewport.offsetTop;
      }
    }

    return {
      width: width,
      height: height,
      x: x + getWindowScrollBarX(element),
      y: y
    };
  }

  // of the `<html>` and `<body>` rect bounds if horizontally scrollable

  function getDocumentRect(element) {
    var _element$ownerDocumen;

    var html = getDocumentElement(element);
    var winScroll = getWindowScroll(element);
    var body = (_element$ownerDocumen = element.ownerDocument) == null ? void 0 : _element$ownerDocumen.body;
    var width = max(html.scrollWidth, html.clientWidth, body ? body.scrollWidth : 0, body ? body.clientWidth : 0);
    var height = max(html.scrollHeight, html.clientHeight, body ? body.scrollHeight : 0, body ? body.clientHeight : 0);
    var x = -winScroll.scrollLeft + getWindowScrollBarX(element);
    var y = -winScroll.scrollTop;

    if (getComputedStyle$1(body || html).direction === 'rtl') {
      x += max(html.clientWidth, body ? body.clientWidth : 0) - width;
    }

    return {
      width: width,
      height: height,
      x: x,
      y: y
    };
  }

  function isScrollParent(element) {
    // Firefox wants us to check `-x` and `-y` variations as well
    var _getComputedStyle = getComputedStyle$1(element),
        overflow = _getComputedStyle.overflow,
        overflowX = _getComputedStyle.overflowX,
        overflowY = _getComputedStyle.overflowY;

    return /auto|scroll|overlay|hidden/.test(overflow + overflowY + overflowX);
  }

  function getScrollParent(node) {
    if (['html', 'body', '#document'].indexOf(getNodeName(node)) >= 0) {
      // $FlowFixMe[incompatible-return]: assume body is always available
      return node.ownerDocument.body;
    }

    if (isHTMLElement(node) && isScrollParent(node)) {
      return node;
    }

    return getScrollParent(getParentNode(node));
  }

  /*
  given a DOM element, return the list of all scroll parents, up the list of ancesors
  until we get to the top window object. This list is what we attach scroll listeners
  to, because if any of these parent elements scroll, we'll need to re-calculate the
  reference element's position.
  */

  function listScrollParents(element, list) {
    var _element$ownerDocumen;

    if (list === void 0) {
      list = [];
    }

    var scrollParent = getScrollParent(element);
    var isBody = scrollParent === ((_element$ownerDocumen = element.ownerDocument) == null ? void 0 : _element$ownerDocumen.body);
    var win = getWindow(scrollParent);
    var target = isBody ? [win].concat(win.visualViewport || [], isScrollParent(scrollParent) ? scrollParent : []) : scrollParent;
    var updatedList = list.concat(target);
    return isBody ? updatedList : // $FlowFixMe[incompatible-call]: isBody tells us target will be an HTMLElement here
    updatedList.concat(listScrollParents(getParentNode(target)));
  }

  function rectToClientRect(rect) {
    return Object.assign({}, rect, {
      left: rect.x,
      top: rect.y,
      right: rect.x + rect.width,
      bottom: rect.y + rect.height
    });
  }

  function getInnerBoundingClientRect(element, strategy) {
    var rect = getBoundingClientRect(element, false, strategy === 'fixed');
    rect.top = rect.top + element.clientTop;
    rect.left = rect.left + element.clientLeft;
    rect.bottom = rect.top + element.clientHeight;
    rect.right = rect.left + element.clientWidth;
    rect.width = element.clientWidth;
    rect.height = element.clientHeight;
    rect.x = rect.left;
    rect.y = rect.top;
    return rect;
  }

  function getClientRectFromMixedType(element, clippingParent, strategy) {
    return clippingParent === viewport ? rectToClientRect(getViewportRect(element, strategy)) : isElement(clippingParent) ? getInnerBoundingClientRect(clippingParent, strategy) : rectToClientRect(getDocumentRect(getDocumentElement(element)));
  } // A "clipping parent" is an overflowable container with the characteristic of
  // clipping (or hiding) overflowing elements with a position different from
  // `initial`


  function getClippingParents(element) {
    var clippingParents = listScrollParents(getParentNode(element));
    var canEscapeClipping = ['absolute', 'fixed'].indexOf(getComputedStyle$1(element).position) >= 0;
    var clipperElement = canEscapeClipping && isHTMLElement(element) ? getOffsetParent(element) : element;

    if (!isElement(clipperElement)) {
      return [];
    } // $FlowFixMe[incompatible-return]: https://github.com/facebook/flow/issues/1414


    return clippingParents.filter(function (clippingParent) {
      return isElement(clippingParent) && contains(clippingParent, clipperElement) && getNodeName(clippingParent) !== 'body';
    });
  } // Gets the maximum area that the element is visible in due to any number of
  // clipping parents


  function getClippingRect(element, boundary, rootBoundary, strategy) {
    var mainClippingParents = boundary === 'clippingParents' ? getClippingParents(element) : [].concat(boundary);
    var clippingParents = [].concat(mainClippingParents, [rootBoundary]);
    var firstClippingParent = clippingParents[0];
    var clippingRect = clippingParents.reduce(function (accRect, clippingParent) {
      var rect = getClientRectFromMixedType(element, clippingParent, strategy);
      accRect.top = max(rect.top, accRect.top);
      accRect.right = min(rect.right, accRect.right);
      accRect.bottom = min(rect.bottom, accRect.bottom);
      accRect.left = max(rect.left, accRect.left);
      return accRect;
    }, getClientRectFromMixedType(element, firstClippingParent, strategy));
    clippingRect.width = clippingRect.right - clippingRect.left;
    clippingRect.height = clippingRect.bottom - clippingRect.top;
    clippingRect.x = clippingRect.left;
    clippingRect.y = clippingRect.top;
    return clippingRect;
  }

  function computeOffsets(_ref) {
    var reference = _ref.reference,
        element = _ref.element,
        placement = _ref.placement;
    var basePlacement = placement ? getBasePlacement(placement) : null;
    var variation = placement ? getVariation(placement) : null;
    var commonX = reference.x + reference.width / 2 - element.width / 2;
    var commonY = reference.y + reference.height / 2 - element.height / 2;
    var offsets;

    switch (basePlacement) {
      case top:
        offsets = {
          x: commonX,
          y: reference.y - element.height
        };
        break;

      case bottom:
        offsets = {
          x: commonX,
          y: reference.y + reference.height
        };
        break;

      case right:
        offsets = {
          x: reference.x + reference.width,
          y: commonY
        };
        break;

      case left:
        offsets = {
          x: reference.x - element.width,
          y: commonY
        };
        break;

      default:
        offsets = {
          x: reference.x,
          y: reference.y
        };
    }

    var mainAxis = basePlacement ? getMainAxisFromPlacement(basePlacement) : null;

    if (mainAxis != null) {
      var len = mainAxis === 'y' ? 'height' : 'width';

      switch (variation) {
        case start:
          offsets[mainAxis] = offsets[mainAxis] - (reference[len] / 2 - element[len] / 2);
          break;

        case end:
          offsets[mainAxis] = offsets[mainAxis] + (reference[len] / 2 - element[len] / 2);
          break;
      }
    }

    return offsets;
  }

  function detectOverflow(state, options) {
    if (options === void 0) {
      options = {};
    }

    var _options = options,
        _options$placement = _options.placement,
        placement = _options$placement === void 0 ? state.placement : _options$placement,
        _options$strategy = _options.strategy,
        strategy = _options$strategy === void 0 ? state.strategy : _options$strategy,
        _options$boundary = _options.boundary,
        boundary = _options$boundary === void 0 ? clippingParents : _options$boundary,
        _options$rootBoundary = _options.rootBoundary,
        rootBoundary = _options$rootBoundary === void 0 ? viewport : _options$rootBoundary,
        _options$elementConte = _options.elementContext,
        elementContext = _options$elementConte === void 0 ? popper : _options$elementConte,
        _options$altBoundary = _options.altBoundary,
        altBoundary = _options$altBoundary === void 0 ? false : _options$altBoundary,
        _options$padding = _options.padding,
        padding = _options$padding === void 0 ? 0 : _options$padding;
    var paddingObject = mergePaddingObject(typeof padding !== 'number' ? padding : expandToHashMap(padding, basePlacements));
    var altContext = elementContext === popper ? reference : popper;
    var popperRect = state.rects.popper;
    var element = state.elements[altBoundary ? altContext : elementContext];
    var clippingClientRect = getClippingRect(isElement(element) ? element : element.contextElement || getDocumentElement(state.elements.popper), boundary, rootBoundary, strategy);
    var referenceClientRect = getBoundingClientRect(state.elements.reference);
    var popperOffsets = computeOffsets({
      reference: referenceClientRect,
      element: popperRect,
      placement: placement
    });
    var popperClientRect = rectToClientRect(Object.assign({}, popperRect, popperOffsets));
    var elementClientRect = elementContext === popper ? popperClientRect : referenceClientRect; // positive = overflowing the clipping rect
    // 0 or negative = within the clipping rect

    var overflowOffsets = {
      top: clippingClientRect.top - elementClientRect.top + paddingObject.top,
      bottom: elementClientRect.bottom - clippingClientRect.bottom + paddingObject.bottom,
      left: clippingClientRect.left - elementClientRect.left + paddingObject.left,
      right: elementClientRect.right - clippingClientRect.right + paddingObject.right
    };
    var offsetData = state.modifiersData.offset; // Offsets can be applied only to the popper element

    if (elementContext === popper && offsetData) {
      var offset = offsetData[placement];
      Object.keys(overflowOffsets).forEach(function (key) {
        var multiply = [right, bottom].indexOf(key) >= 0 ? 1 : -1;
        var axis = [top, bottom].indexOf(key) >= 0 ? 'y' : 'x';
        overflowOffsets[key] += offset[axis] * multiply;
      });
    }

    return overflowOffsets;
  }

  function computeAutoPlacement(state, options) {
    if (options === void 0) {
      options = {};
    }

    var _options = options,
        placement = _options.placement,
        boundary = _options.boundary,
        rootBoundary = _options.rootBoundary,
        padding = _options.padding,
        flipVariations = _options.flipVariations,
        _options$allowedAutoP = _options.allowedAutoPlacements,
        allowedAutoPlacements = _options$allowedAutoP === void 0 ? placements : _options$allowedAutoP;
    var variation = getVariation(placement);
    var placements$1 = variation ? flipVariations ? variationPlacements : variationPlacements.filter(function (placement) {
      return getVariation(placement) === variation;
    }) : basePlacements;
    var allowedPlacements = placements$1.filter(function (placement) {
      return allowedAutoPlacements.indexOf(placement) >= 0;
    });

    if (allowedPlacements.length === 0) {
      allowedPlacements = placements$1;
    } // $FlowFixMe[incompatible-type]: Flow seems to have problems with two array unions...


    var overflows = allowedPlacements.reduce(function (acc, placement) {
      acc[placement] = detectOverflow(state, {
        placement: placement,
        boundary: boundary,
        rootBoundary: rootBoundary,
        padding: padding
      })[getBasePlacement(placement)];
      return acc;
    }, {});
    return Object.keys(overflows).sort(function (a, b) {
      return overflows[a] - overflows[b];
    });
  }

  function getExpandedFallbackPlacements(placement) {
    if (getBasePlacement(placement) === auto) {
      return [];
    }

    var oppositePlacement = getOppositePlacement(placement);
    return [getOppositeVariationPlacement(placement), oppositePlacement, getOppositeVariationPlacement(oppositePlacement)];
  }

  function flip(_ref) {
    var state = _ref.state,
        options = _ref.options,
        name = _ref.name;

    if (state.modifiersData[name]._skip) {
      return;
    }

    var _options$mainAxis = options.mainAxis,
        checkMainAxis = _options$mainAxis === void 0 ? true : _options$mainAxis,
        _options$altAxis = options.altAxis,
        checkAltAxis = _options$altAxis === void 0 ? true : _options$altAxis,
        specifiedFallbackPlacements = options.fallbackPlacements,
        padding = options.padding,
        boundary = options.boundary,
        rootBoundary = options.rootBoundary,
        altBoundary = options.altBoundary,
        _options$flipVariatio = options.flipVariations,
        flipVariations = _options$flipVariatio === void 0 ? true : _options$flipVariatio,
        allowedAutoPlacements = options.allowedAutoPlacements;
    var preferredPlacement = state.options.placement;
    var basePlacement = getBasePlacement(preferredPlacement);
    var isBasePlacement = basePlacement === preferredPlacement;
    var fallbackPlacements = specifiedFallbackPlacements || (isBasePlacement || !flipVariations ? [getOppositePlacement(preferredPlacement)] : getExpandedFallbackPlacements(preferredPlacement));
    var placements = [preferredPlacement].concat(fallbackPlacements).reduce(function (acc, placement) {
      return acc.concat(getBasePlacement(placement) === auto ? computeAutoPlacement(state, {
        placement: placement,
        boundary: boundary,
        rootBoundary: rootBoundary,
        padding: padding,
        flipVariations: flipVariations,
        allowedAutoPlacements: allowedAutoPlacements
      }) : placement);
    }, []);
    var referenceRect = state.rects.reference;
    var popperRect = state.rects.popper;
    var checksMap = new Map();
    var makeFallbackChecks = true;
    var firstFittingPlacement = placements[0];

    for (var i = 0; i < placements.length; i++) {
      var placement = placements[i];

      var _basePlacement = getBasePlacement(placement);

      var isStartVariation = getVariation(placement) === start;
      var isVertical = [top, bottom].indexOf(_basePlacement) >= 0;
      var len = isVertical ? 'width' : 'height';
      var overflow = detectOverflow(state, {
        placement: placement,
        boundary: boundary,
        rootBoundary: rootBoundary,
        altBoundary: altBoundary,
        padding: padding
      });
      var mainVariationSide = isVertical ? isStartVariation ? right : left : isStartVariation ? bottom : top;

      if (referenceRect[len] > popperRect[len]) {
        mainVariationSide = getOppositePlacement(mainVariationSide);
      }

      var altVariationSide = getOppositePlacement(mainVariationSide);
      var checks = [];

      if (checkMainAxis) {
        checks.push(overflow[_basePlacement] <= 0);
      }

      if (checkAltAxis) {
        checks.push(overflow[mainVariationSide] <= 0, overflow[altVariationSide] <= 0);
      }

      if (checks.every(function (check) {
        return check;
      })) {
        firstFittingPlacement = placement;
        makeFallbackChecks = false;
        break;
      }

      checksMap.set(placement, checks);
    }

    if (makeFallbackChecks) {
      // `2` may be desired in some cases – research later
      var numberOfChecks = flipVariations ? 3 : 1;

      var _loop = function _loop(_i) {
        var fittingPlacement = placements.find(function (placement) {
          var checks = checksMap.get(placement);

          if (checks) {
            return checks.slice(0, _i).every(function (check) {
              return check;
            });
          }
        });

        if (fittingPlacement) {
          firstFittingPlacement = fittingPlacement;
          return "break";
        }
      };

      for (var _i = numberOfChecks; _i > 0; _i--) {
        var _ret = _loop(_i);

        if (_ret === "break") break;
      }
    }

    if (state.placement !== firstFittingPlacement) {
      state.modifiersData[name]._skip = true;
      state.placement = firstFittingPlacement;
      state.reset = true;
    }
  } // eslint-disable-next-line import/no-unused-modules


  const flip$1 = {
    name: 'flip',
    enabled: true,
    phase: 'main',
    fn: flip,
    requiresIfExists: ['offset'],
    data: {
      _skip: false
    }
  };

  function getSideOffsets(overflow, rect, preventedOffsets) {
    if (preventedOffsets === void 0) {
      preventedOffsets = {
        x: 0,
        y: 0
      };
    }

    return {
      top: overflow.top - rect.height - preventedOffsets.y,
      right: overflow.right - rect.width + preventedOffsets.x,
      bottom: overflow.bottom - rect.height + preventedOffsets.y,
      left: overflow.left - rect.width - preventedOffsets.x
    };
  }

  function isAnySideFullyClipped(overflow) {
    return [top, right, bottom, left].some(function (side) {
      return overflow[side] >= 0;
    });
  }

  function hide(_ref) {
    var state = _ref.state,
        name = _ref.name;
    var referenceRect = state.rects.reference;
    var popperRect = state.rects.popper;
    var preventedOffsets = state.modifiersData.preventOverflow;
    var referenceOverflow = detectOverflow(state, {
      elementContext: 'reference'
    });
    var popperAltOverflow = detectOverflow(state, {
      altBoundary: true
    });
    var referenceClippingOffsets = getSideOffsets(referenceOverflow, referenceRect);
    var popperEscapeOffsets = getSideOffsets(popperAltOverflow, popperRect, preventedOffsets);
    var isReferenceHidden = isAnySideFullyClipped(referenceClippingOffsets);
    var hasPopperEscaped = isAnySideFullyClipped(popperEscapeOffsets);
    state.modifiersData[name] = {
      referenceClippingOffsets: referenceClippingOffsets,
      popperEscapeOffsets: popperEscapeOffsets,
      isReferenceHidden: isReferenceHidden,
      hasPopperEscaped: hasPopperEscaped
    };
    state.attributes.popper = Object.assign({}, state.attributes.popper, {
      'data-popper-reference-hidden': isReferenceHidden,
      'data-popper-escaped': hasPopperEscaped
    });
  } // eslint-disable-next-line import/no-unused-modules


  const hide$1 = {
    name: 'hide',
    enabled: true,
    phase: 'main',
    requiresIfExists: ['preventOverflow'],
    fn: hide
  };

  function distanceAndSkiddingToXY(placement, rects, offset) {
    var basePlacement = getBasePlacement(placement);
    var invertDistance = [left, top].indexOf(basePlacement) >= 0 ? -1 : 1;

    var _ref = typeof offset === 'function' ? offset(Object.assign({}, rects, {
      placement: placement
    })) : offset,
        skidding = _ref[0],
        distance = _ref[1];

    skidding = skidding || 0;
    distance = (distance || 0) * invertDistance;
    return [left, right].indexOf(basePlacement) >= 0 ? {
      x: distance,
      y: skidding
    } : {
      x: skidding,
      y: distance
    };
  }

  function offset(_ref2) {
    var state = _ref2.state,
        options = _ref2.options,
        name = _ref2.name;
    var _options$offset = options.offset,
        offset = _options$offset === void 0 ? [0, 0] : _options$offset;
    var data = placements.reduce(function (acc, placement) {
      acc[placement] = distanceAndSkiddingToXY(placement, state.rects, offset);
      return acc;
    }, {});
    var _data$state$placement = data[state.placement],
        x = _data$state$placement.x,
        y = _data$state$placement.y;

    if (state.modifiersData.popperOffsets != null) {
      state.modifiersData.popperOffsets.x += x;
      state.modifiersData.popperOffsets.y += y;
    }

    state.modifiersData[name] = data;
  } // eslint-disable-next-line import/no-unused-modules


  const offset$1 = {
    name: 'offset',
    enabled: true,
    phase: 'main',
    requires: ['popperOffsets'],
    fn: offset
  };

  function popperOffsets(_ref) {
    var state = _ref.state,
        name = _ref.name;
    // Offsets are the actual position the popper needs to have to be
    // properly positioned near its reference element
    // This is the most basic placement, and will be adjusted by
    // the modifiers in the next step
    state.modifiersData[name] = computeOffsets({
      reference: state.rects.reference,
      element: state.rects.popper,
      placement: state.placement
    });
  } // eslint-disable-next-line import/no-unused-modules


  const popperOffsets$1 = {
    name: 'popperOffsets',
    enabled: true,
    phase: 'read',
    fn: popperOffsets,
    data: {}
  };

  function getAltAxis(axis) {
    return axis === 'x' ? 'y' : 'x';
  }

  function preventOverflow(_ref) {
    var state = _ref.state,
        options = _ref.options,
        name = _ref.name;
    var _options$mainAxis = options.mainAxis,
        checkMainAxis = _options$mainAxis === void 0 ? true : _options$mainAxis,
        _options$altAxis = options.altAxis,
        checkAltAxis = _options$altAxis === void 0 ? false : _options$altAxis,
        boundary = options.boundary,
        rootBoundary = options.rootBoundary,
        altBoundary = options.altBoundary,
        padding = options.padding,
        _options$tether = options.tether,
        tether = _options$tether === void 0 ? true : _options$tether,
        _options$tetherOffset = options.tetherOffset,
        tetherOffset = _options$tetherOffset === void 0 ? 0 : _options$tetherOffset;
    var overflow = detectOverflow(state, {
      boundary: boundary,
      rootBoundary: rootBoundary,
      padding: padding,
      altBoundary: altBoundary
    });
    var basePlacement = getBasePlacement(state.placement);
    var variation = getVariation(state.placement);
    var isBasePlacement = !variation;
    var mainAxis = getMainAxisFromPlacement(basePlacement);
    var altAxis = getAltAxis(mainAxis);
    var popperOffsets = state.modifiersData.popperOffsets;
    var referenceRect = state.rects.reference;
    var popperRect = state.rects.popper;
    var tetherOffsetValue = typeof tetherOffset === 'function' ? tetherOffset(Object.assign({}, state.rects, {
      placement: state.placement
    })) : tetherOffset;
    var normalizedTetherOffsetValue = typeof tetherOffsetValue === 'number' ? {
      mainAxis: tetherOffsetValue,
      altAxis: tetherOffsetValue
    } : Object.assign({
      mainAxis: 0,
      altAxis: 0
    }, tetherOffsetValue);
    var offsetModifierState = state.modifiersData.offset ? state.modifiersData.offset[state.placement] : null;
    var data = {
      x: 0,
      y: 0
    };

    if (!popperOffsets) {
      return;
    }

    if (checkMainAxis) {
      var _offsetModifierState$;

      var mainSide = mainAxis === 'y' ? top : left;
      var altSide = mainAxis === 'y' ? bottom : right;
      var len = mainAxis === 'y' ? 'height' : 'width';
      var offset = popperOffsets[mainAxis];
      var min$1 = offset + overflow[mainSide];
      var max$1 = offset - overflow[altSide];
      var additive = tether ? -popperRect[len] / 2 : 0;
      var minLen = variation === start ? referenceRect[len] : popperRect[len];
      var maxLen = variation === start ? -popperRect[len] : -referenceRect[len]; // We need to include the arrow in the calculation so the arrow doesn't go
      // outside the reference bounds

      var arrowElement = state.elements.arrow;
      var arrowRect = tether && arrowElement ? getLayoutRect(arrowElement) : {
        width: 0,
        height: 0
      };
      var arrowPaddingObject = state.modifiersData['arrow#persistent'] ? state.modifiersData['arrow#persistent'].padding : getFreshSideObject();
      var arrowPaddingMin = arrowPaddingObject[mainSide];
      var arrowPaddingMax = arrowPaddingObject[altSide]; // If the reference length is smaller than the arrow length, we don't want
      // to include its full size in the calculation. If the reference is small
      // and near the edge of a boundary, the popper can overflow even if the
      // reference is not overflowing as well (e.g. virtual elements with no
      // width or height)

      var arrowLen = within(0, referenceRect[len], arrowRect[len]);
      var minOffset = isBasePlacement ? referenceRect[len] / 2 - additive - arrowLen - arrowPaddingMin - normalizedTetherOffsetValue.mainAxis : minLen - arrowLen - arrowPaddingMin - normalizedTetherOffsetValue.mainAxis;
      var maxOffset = isBasePlacement ? -referenceRect[len] / 2 + additive + arrowLen + arrowPaddingMax + normalizedTetherOffsetValue.mainAxis : maxLen + arrowLen + arrowPaddingMax + normalizedTetherOffsetValue.mainAxis;
      var arrowOffsetParent = state.elements.arrow && getOffsetParent(state.elements.arrow);
      var clientOffset = arrowOffsetParent ? mainAxis === 'y' ? arrowOffsetParent.clientTop || 0 : arrowOffsetParent.clientLeft || 0 : 0;
      var offsetModifierValue = (_offsetModifierState$ = offsetModifierState == null ? void 0 : offsetModifierState[mainAxis]) != null ? _offsetModifierState$ : 0;
      var tetherMin = offset + minOffset - offsetModifierValue - clientOffset;
      var tetherMax = offset + maxOffset - offsetModifierValue;
      var preventedOffset = within(tether ? min(min$1, tetherMin) : min$1, offset, tether ? max(max$1, tetherMax) : max$1);
      popperOffsets[mainAxis] = preventedOffset;
      data[mainAxis] = preventedOffset - offset;
    }

    if (checkAltAxis) {
      var _offsetModifierState$2;

      var _mainSide = mainAxis === 'x' ? top : left;

      var _altSide = mainAxis === 'x' ? bottom : right;

      var _offset = popperOffsets[altAxis];

      var _len = altAxis === 'y' ? 'height' : 'width';

      var _min = _offset + overflow[_mainSide];

      var _max = _offset - overflow[_altSide];

      var isOriginSide = [top, left].indexOf(basePlacement) !== -1;

      var _offsetModifierValue = (_offsetModifierState$2 = offsetModifierState == null ? void 0 : offsetModifierState[altAxis]) != null ? _offsetModifierState$2 : 0;

      var _tetherMin = isOriginSide ? _min : _offset - referenceRect[_len] - popperRect[_len] - _offsetModifierValue + normalizedTetherOffsetValue.altAxis;

      var _tetherMax = isOriginSide ? _offset + referenceRect[_len] + popperRect[_len] - _offsetModifierValue - normalizedTetherOffsetValue.altAxis : _max;

      var _preventedOffset = tether && isOriginSide ? withinMaxClamp(_tetherMin, _offset, _tetherMax) : within(tether ? _tetherMin : _min, _offset, tether ? _tetherMax : _max);

      popperOffsets[altAxis] = _preventedOffset;
      data[altAxis] = _preventedOffset - _offset;
    }

    state.modifiersData[name] = data;
  } // eslint-disable-next-line import/no-unused-modules


  const preventOverflow$1 = {
    name: 'preventOverflow',
    enabled: true,
    phase: 'main',
    fn: preventOverflow,
    requiresIfExists: ['offset']
  };

  function getHTMLElementScroll(element) {
    return {
      scrollLeft: element.scrollLeft,
      scrollTop: element.scrollTop
    };
  }

  function getNodeScroll(node) {
    if (node === getWindow(node) || !isHTMLElement(node)) {
      return getWindowScroll(node);
    } else {
      return getHTMLElementScroll(node);
    }
  }

  function isElementScaled(element) {
    var rect = element.getBoundingClientRect();
    var scaleX = round(rect.width) / element.offsetWidth || 1;
    var scaleY = round(rect.height) / element.offsetHeight || 1;
    return scaleX !== 1 || scaleY !== 1;
  } // Returns the composite rect of an element relative to its offsetParent.
  // Composite means it takes into account transforms as well as layout.


  function getCompositeRect(elementOrVirtualElement, offsetParent, isFixed) {
    if (isFixed === void 0) {
      isFixed = false;
    }

    var isOffsetParentAnElement = isHTMLElement(offsetParent);
    var offsetParentIsScaled = isHTMLElement(offsetParent) && isElementScaled(offsetParent);
    var documentElement = getDocumentElement(offsetParent);
    var rect = getBoundingClientRect(elementOrVirtualElement, offsetParentIsScaled, isFixed);
    var scroll = {
      scrollLeft: 0,
      scrollTop: 0
    };
    var offsets = {
      x: 0,
      y: 0
    };

    if (isOffsetParentAnElement || !isOffsetParentAnElement && !isFixed) {
      if (getNodeName(offsetParent) !== 'body' || // https://github.com/popperjs/popper-core/issues/1078
      isScrollParent(documentElement)) {
        scroll = getNodeScroll(offsetParent);
      }

      if (isHTMLElement(offsetParent)) {
        offsets = getBoundingClientRect(offsetParent, true);
        offsets.x += offsetParent.clientLeft;
        offsets.y += offsetParent.clientTop;
      } else if (documentElement) {
        offsets.x = getWindowScrollBarX(documentElement);
      }
    }

    return {
      x: rect.left + scroll.scrollLeft - offsets.x,
      y: rect.top + scroll.scrollTop - offsets.y,
      width: rect.width,
      height: rect.height
    };
  }

  function order(modifiers) {
    var map = new Map();
    var visited = new Set();
    var result = [];
    modifiers.forEach(function (modifier) {
      map.set(modifier.name, modifier);
    }); // On visiting object, check for its dependencies and visit them recursively

    function sort(modifier) {
      visited.add(modifier.name);
      var requires = [].concat(modifier.requires || [], modifier.requiresIfExists || []);
      requires.forEach(function (dep) {
        if (!visited.has(dep)) {
          var depModifier = map.get(dep);

          if (depModifier) {
            sort(depModifier);
          }
        }
      });
      result.push(modifier);
    }

    modifiers.forEach(function (modifier) {
      if (!visited.has(modifier.name)) {
        // check for visited object
        sort(modifier);
      }
    });
    return result;
  }

  function orderModifiers(modifiers) {
    // order based on dependencies
    var orderedModifiers = order(modifiers); // order based on phase

    return modifierPhases.reduce(function (acc, phase) {
      return acc.concat(orderedModifiers.filter(function (modifier) {
        return modifier.phase === phase;
      }));
    }, []);
  }

  function debounce(fn) {
    var pending;
    return function () {
      if (!pending) {
        pending = new Promise(function (resolve) {
          Promise.resolve().then(function () {
            pending = undefined;
            resolve(fn());
          });
        });
      }

      return pending;
    };
  }

  function mergeByName(modifiers) {
    var merged = modifiers.reduce(function (merged, current) {
      var existing = merged[current.name];
      merged[current.name] = existing ? Object.assign({}, existing, current, {
        options: Object.assign({}, existing.options, current.options),
        data: Object.assign({}, existing.data, current.data)
      }) : current;
      return merged;
    }, {}); // IE11 does not support Object.values

    return Object.keys(merged).map(function (key) {
      return merged[key];
    });
  }

  var DEFAULT_OPTIONS = {
    placement: 'bottom',
    modifiers: [],
    strategy: 'absolute'
  };

  function areValidElements() {
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return !args.some(function (element) {
      return !(element && typeof element.getBoundingClientRect === 'function');
    });
  }

  function popperGenerator(generatorOptions) {
    if (generatorOptions === void 0) {
      generatorOptions = {};
    }

    var _generatorOptions = generatorOptions,
        _generatorOptions$def = _generatorOptions.defaultModifiers,
        defaultModifiers = _generatorOptions$def === void 0 ? [] : _generatorOptions$def,
        _generatorOptions$def2 = _generatorOptions.defaultOptions,
        defaultOptions = _generatorOptions$def2 === void 0 ? DEFAULT_OPTIONS : _generatorOptions$def2;
    return function createPopper(reference, popper, options) {
      if (options === void 0) {
        options = defaultOptions;
      }

      var state = {
        placement: 'bottom',
        orderedModifiers: [],
        options: Object.assign({}, DEFAULT_OPTIONS, defaultOptions),
        modifiersData: {},
        elements: {
          reference: reference,
          popper: popper
        },
        attributes: {},
        styles: {}
      };
      var effectCleanupFns = [];
      var isDestroyed = false;
      var instance = {
        state: state,
        setOptions: function setOptions(setOptionsAction) {
          var options = typeof setOptionsAction === 'function' ? setOptionsAction(state.options) : setOptionsAction;
          cleanupModifierEffects();
          state.options = Object.assign({}, defaultOptions, state.options, options);
          state.scrollParents = {
            reference: isElement(reference) ? listScrollParents(reference) : reference.contextElement ? listScrollParents(reference.contextElement) : [],
            popper: listScrollParents(popper)
          }; // Orders the modifiers based on their dependencies and `phase`
          // properties

          var orderedModifiers = orderModifiers(mergeByName([].concat(defaultModifiers, state.options.modifiers))); // Strip out disabled modifiers

          state.orderedModifiers = orderedModifiers.filter(function (m) {
            return m.enabled;
          });
          runModifierEffects();
          return instance.update();
        },
        // Sync update – it will always be executed, even if not necessary. This
        // is useful for low frequency updates where sync behavior simplifies the
        // logic.
        // For high frequency updates (e.g. `resize` and `scroll` events), always
        // prefer the async Popper#update method
        forceUpdate: function forceUpdate() {
          if (isDestroyed) {
            return;
          }

          var _state$elements = state.elements,
              reference = _state$elements.reference,
              popper = _state$elements.popper; // Don't proceed if `reference` or `popper` are not valid elements
          // anymore

          if (!areValidElements(reference, popper)) {
            return;
          } // Store the reference and popper rects to be read by modifiers


          state.rects = {
            reference: getCompositeRect(reference, getOffsetParent(popper), state.options.strategy === 'fixed'),
            popper: getLayoutRect(popper)
          }; // Modifiers have the ability to reset the current update cycle. The
          // most common use case for this is the `flip` modifier changing the
          // placement, which then needs to re-run all the modifiers, because the
          // logic was previously ran for the previous placement and is therefore
          // stale/incorrect

          state.reset = false;
          state.placement = state.options.placement; // On each update cycle, the `modifiersData` property for each modifier
          // is filled with the initial data specified by the modifier. This means
          // it doesn't persist and is fresh on each update.
          // To ensure persistent data, use `${name}#persistent`

          state.orderedModifiers.forEach(function (modifier) {
            return state.modifiersData[modifier.name] = Object.assign({}, modifier.data);
          });

          for (var index = 0; index < state.orderedModifiers.length; index++) {
            if (state.reset === true) {
              state.reset = false;
              index = -1;
              continue;
            }

            var _state$orderedModifie = state.orderedModifiers[index],
                fn = _state$orderedModifie.fn,
                _state$orderedModifie2 = _state$orderedModifie.options,
                _options = _state$orderedModifie2 === void 0 ? {} : _state$orderedModifie2,
                name = _state$orderedModifie.name;

            if (typeof fn === 'function') {
              state = fn({
                state: state,
                options: _options,
                name: name,
                instance: instance
              }) || state;
            }
          }
        },
        // Async and optimistically optimized update – it will not be executed if
        // not necessary (debounced to run at most once-per-tick)
        update: debounce(function () {
          return new Promise(function (resolve) {
            instance.forceUpdate();
            resolve(state);
          });
        }),
        destroy: function destroy() {
          cleanupModifierEffects();
          isDestroyed = true;
        }
      };

      if (!areValidElements(reference, popper)) {
        return instance;
      }

      instance.setOptions(options).then(function (state) {
        if (!isDestroyed && options.onFirstUpdate) {
          options.onFirstUpdate(state);
        }
      }); // Modifiers have the ability to execute arbitrary code before the first
      // update cycle runs. They will be executed in the same order as the update
      // cycle. This is useful when a modifier adds some persistent data that
      // other modifiers need to use, but the modifier is run after the dependent
      // one.

      function runModifierEffects() {
        state.orderedModifiers.forEach(function (_ref) {
          var name = _ref.name,
              _ref$options = _ref.options,
              options = _ref$options === void 0 ? {} : _ref$options,
              effect = _ref.effect;

          if (typeof effect === 'function') {
            var cleanupFn = effect({
              state: state,
              name: name,
              instance: instance,
              options: options
            });

            var noopFn = function noopFn() {};

            effectCleanupFns.push(cleanupFn || noopFn);
          }
        });
      }

      function cleanupModifierEffects() {
        effectCleanupFns.forEach(function (fn) {
          return fn();
        });
        effectCleanupFns = [];
      }

      return instance;
    };
  }
  var createPopper$2 = /*#__PURE__*/popperGenerator(); // eslint-disable-next-line import/no-unused-modules

  var defaultModifiers$1 = [eventListeners, popperOffsets$1, computeStyles$1, applyStyles$1];
  var createPopper$1 = /*#__PURE__*/popperGenerator({
    defaultModifiers: defaultModifiers$1
  }); // eslint-disable-next-line import/no-unused-modules

  var defaultModifiers = [eventListeners, popperOffsets$1, computeStyles$1, applyStyles$1, offset$1, flip$1, preventOverflow$1, arrow$1, hide$1];
  var createPopper = /*#__PURE__*/popperGenerator({
    defaultModifiers: defaultModifiers
  }); // eslint-disable-next-line import/no-unused-modules

  const Popper = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
    __proto__: null,
    afterMain,
    afterRead,
    afterWrite,
    applyStyles: applyStyles$1,
    arrow: arrow$1,
    auto,
    basePlacements,
    beforeMain,
    beforeRead,
    beforeWrite,
    bottom,
    clippingParents,
    computeStyles: computeStyles$1,
    createPopper,
    createPopperBase: createPopper$2,
    createPopperLite: createPopper$1,
    detectOverflow,
    end,
    eventListeners,
    flip: flip$1,
    hide: hide$1,
    left,
    main,
    modifierPhases,
    offset: offset$1,
    placements,
    popper,
    popperGenerator,
    popperOffsets: popperOffsets$1,
    preventOverflow: preventOverflow$1,
    read,
    reference,
    right,
    start,
    top,
    variationPlacements,
    viewport,
    write
  }, Symbol.toStringTag, { value: 'Module' }));

  /**
   * --------------------------------------------------------------------------
   * Bootstrap dropdown.js
   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
   * --------------------------------------------------------------------------
   */


  /**
   * Constants
   */

  const NAME$a = 'dropdown';
  const DATA_KEY$6 = 'bs.dropdown';
  const EVENT_KEY$6 = `.${DATA_KEY$6}`;
  const DATA_API_KEY$3 = '.data-api';
  const ESCAPE_KEY$2 = 'Escape';
  const TAB_KEY$1 = 'Tab';
  const ARROW_UP_KEY$1 = 'ArrowUp';
  const ARROW_DOWN_KEY$1 = 'ArrowDown';
  const RIGHT_MOUSE_BUTTON = 2; // MouseEvent.button value for the secondary button, usually the right button

  const EVENT_HIDE$5 = `hide${EVENT_KEY$6}`;
  const EVENT_HIDDEN$5 = `hidden${EVENT_KEY$6}`;
  const EVENT_SHOW$5 = `show${EVENT_KEY$6}`;
  const EVENT_SHOWN$5 = `shown${EVENT_KEY$6}`;
  const EVENT_CLICK_DATA_API$3 = `click${EVENT_KEY$6}${DATA_API_KEY$3}`;
  const EVENT_KEYDOWN_DATA_API = `keydown${EVENT_KEY$6}${DATA_API_KEY$3}`;
  const EVENT_KEYUP_DATA_API = `keyup${EVENT_KEY$6}${DATA_API_KEY$3}`;
  const CLASS_NAME_SHOW$6 = 'show';
  const CLASS_NAME_DROPUP = 'dropup';
  const CLASS_NAME_DROPEND = 'dropend';
  const CLASS_NAME_DROPSTART = 'dropstart';
  const CLASS_NAME_DROPUP_CENTER = 'dropup-center';
  const CLASS_NAME_DROPDOWN_CENTER = 'dropdown-center';
  const SELECTOR_DATA_TOGGLE$3 = '[data-bs-toggle="dropdown"]:not(.disabled):not(:disabled)';
  const SELECTOR_DATA_TOGGLE_SHOWN = `${SELECTOR_DATA_TOGGLE$3}.${CLASS_NAME_SHOW$6}`;
  const SELECTOR_MENU = '.dropdown-menu';
  const SELECTOR_NAVBAR = '.navbar';
  const SELECTOR_NAVBAR_NAV = '.navbar-nav';
  const SELECTOR_VISIBLE_ITEMS = '.dropdown-menu .dropdown-item:not(.disabled):not(:disabled)';
  const PLACEMENT_TOP = isRTL() ? 'top-end' : 'top-start';
  const PLACEMENT_TOPEND = isRTL() ? 'top-start' : 'top-end';
  const PLACEMENT_BOTTOM = isRTL() ? 'bottom-end' : 'bottom-start';
  const PLACEMENT_BOTTOMEND = isRTL() ? 'bottom-start' : 'bottom-end';
  const PLACEMENT_RIGHT = isRTL() ? 'left-start' : 'right-start';
  const PLACEMENT_LEFT = isRTL() ? 'right-start' : 'left-start';
  const PLACEMENT_TOPCENTER = 'top';
  const PLACEMENT_BOTTOMCENTER = 'bottom';
  const Default$9 = {
    autoClose: true,
    boundary: 'clippingParents',
    display: 'dynamic',
    offset: [0, 2],
    popperConfig: null,
    reference: 'toggle'
  };
  const DefaultType$9 = {
    autoClose: '(boolean|string)',
    boundary: '(string|element)',
    display: 'string',
    offset: '(array|string|function)',
    popperConfig: '(null|object|function)',
    reference: '(string|element|object)'
  };

  /**
   * Class definition
   */

  class Dropdown extends BaseComponent {
    constructor(element, config) {
      super(element, config);
      this._popper = null;
      this._parent = this._element.parentNode; // dropdown wrapper
      // TODO: v6 revert #37011 & change markup https://getbootstrap.com/docs/5.3/forms/input-group/
      this._menu = SelectorEngine.next(this._element, SELECTOR_MENU)[0] || SelectorEngine.prev(this._element, SELECTOR_MENU)[0] || SelectorEngine.findOne(SELECTOR_MENU, this._parent);
      this._inNavbar = this._detectNavbar();
    }

    // Getters
    static get Default() {
      return Default$9;
    }
    static get DefaultType() {
      return DefaultType$9;
    }
    static get NAME() {
      return NAME$a;
    }

    // Public
    toggle() {
      return this._isShown() ? this.hide() : this.show();
    }
    show() {
      if (isDisabled(this._element) || this._isShown()) {
        return;
      }
      const relatedTarget = {
        relatedTarget: this._element
      };
      const showEvent = EventHandler.trigger(this._element, EVENT_SHOW$5, relatedTarget);
      if (showEvent.defaultPrevented) {
        return;
      }
      this._createPopper();

      // If this is a touch-enabled device we add extra
      // empty mouseover listeners to the body's immediate children;
      // only needed because of broken event delegation on iOS
      // https://www.quirksmode.org/blog/archives/2014/02/mouse_event_bub.html
      if ('ontouchstart' in document.documentElement && !this._parent.closest(SELECTOR_NAVBAR_NAV)) {
        for (const element of [].concat(...document.body.children)) {
          EventHandler.on(element, 'mouseover', noop);
        }
      }
      this._element.focus();
      this._element.setAttribute('aria-expanded', true);
      this._menu.classList.add(CLASS_NAME_SHOW$6);
      this._element.classList.add(CLASS_NAME_SHOW$6);
      EventHandler.trigger(this._element, EVENT_SHOWN$5, relatedTarget);
    }
    hide() {
      if (isDisabled(this._element) || !this._isShown()) {
        return;
      }
      const relatedTarget = {
        relatedTarget: this._element
      };
      this._completeHide(relatedTarget);
    }
    dispose() {
      if (this._popper) {
        this._popper.destroy();
      }
      super.dispose();
    }
    update() {
      this._inNavbar = this._detectNavbar();
      if (this._popper) {
        this._popper.update();
      }
    }

    // Private
    _completeHide(relatedTarget) {
      const hideEvent = EventHandler.trigger(this._element, EVENT_HIDE$5, relatedTarget);
      if (hideEvent.defaultPrevented) {
        return;
      }

      // If this is a touch-enabled device we remove the extra
      // empty mouseover listeners we added for iOS support
      if ('ontouchstart' in document.documentElement) {
        for (const element of [].concat(...document.body.children)) {
          EventHandler.off(element, 'mouseover', noop);
        }
      }
      if (this._popper) {
        this._popper.destroy();
      }
      this._menu.classList.remove(CLASS_NAME_SHOW$6);
      this._element.classList.remove(CLASS_NAME_SHOW$6);
      this._element.setAttribute('aria-expanded', 'false');
      Manipulator.removeDataAttribute(this._menu, 'popper');
      EventHandler.trigger(this._element, EVENT_HIDDEN$5, relatedTarget);

      // Explicitly return focus to the trigger element
      this._element.focus();
    }
    _getConfig(config) {
      config = super._getConfig(config);
      if (typeof config.reference === 'object' && !isElement$1(config.reference) && typeof config.reference.getBoundingClientRect !== 'function') {
        // Popper virtual elements require a getBoundingClientRect method
        throw new TypeError(`${NAME$a.toUpperCase()}: Option "reference" provided type "object" without a required "getBoundingClientRect" method.`);
      }
      return config;
    }
    _createPopper() {
      if (typeof Popper === 'undefined') {
        throw new TypeError('Bootstrap\'s dropdowns require Popper (https://popper.js.org/docs/v2/)');
      }
      let referenceElement = this._element;
      if (this._config.reference === 'parent') {
        referenceElement = this._parent;
      } else if (isElement$1(this._config.reference)) {
        referenceElement = getElement(this._config.reference);
      } else if (typeof this._config.reference === 'object') {
        referenceElement = this._config.reference;
      }
      const popperConfig = this._getPopperConfig();
      this._popper = createPopper(referenceElement, this._menu, popperConfig);
    }
    _isShown() {
      return this._menu.classList.contains(CLASS_NAME_SHOW$6);
    }
    _getPlacement() {
      const parentDropdown = this._parent;
      if (parentDropdown.classList.contains(CLASS_NAME_DROPEND)) {
        return PLACEMENT_RIGHT;
      }
      if (parentDropdown.classList.contains(CLASS_NAME_DROPSTART)) {
        return PLACEMENT_LEFT;
      }
      if (parentDropdown.classList.contains(CLASS_NAME_DROPUP_CENTER)) {
        return PLACEMENT_TOPCENTER;
      }
      if (parentDropdown.classList.contains(CLASS_NAME_DROPDOWN_CENTER)) {
        return PLACEMENT_BOTTOMCENTER;
      }

      // We need to trim the value because custom properties can also include spaces
      const isEnd = getComputedStyle(this._menu).getPropertyValue('--bs-position').trim() === 'end';
      if (parentDropdown.classList.contains(CLASS_NAME_DROPUP)) {
        return isEnd ? PLACEMENT_TOPEND : PLACEMENT_TOP;
      }
      return isEnd ? PLACEMENT_BOTTOMEND : PLACEMENT_BOTTOM;
    }
    _detectNavbar() {
      return this._element.closest(SELECTOR_NAVBAR) !== null;
    }
    _getOffset() {
      const {
        offset
      } = this._config;
      if (typeof offset === 'string') {
        return offset.split(',').map(value => Number.parseInt(value, 10));
      }
      if (typeof offset === 'function') {
        return popperData => offset(popperData, this._element);
      }
      return offset;
    }
    _getPopperConfig() {
      const defaultBsPopperConfig = {
        placement: this._getPlacement(),
        modifiers: [{
          name: 'preventOverflow',
          options: {
            boundary: this._config.boundary
          }
        }, {
          name: 'offset',
          options: {
            offset: this._getOffset()
          }
        }]
      };

      // Disable Popper if we have a static display or Dropdown is in Navbar
      if (this._inNavbar || this._config.display === 'static') {
        Manipulator.setDataAttribute(this._menu, 'popper', 'static'); // TODO: v6 remove
        defaultBsPopperConfig.modifiers = [{
          name: 'applyStyles',
          enabled: false
        }];
      }
      return {
        ...defaultBsPopperConfig,
        ...execute(this._config.popperConfig, [undefined, defaultBsPopperConfig])
      };
    }
    _selectMenuItem({
      key,
      target
    }) {
      const items = SelectorEngine.find(SELECTOR_VISIBLE_ITEMS, this._menu).filter(element => isVisible(element));
      if (!items.length) {
        return;
      }

      // if target isn't included in items (e.g. when expanding the dropdown)
      // allow cycling to get the last item in case key equals ARROW_UP_KEY
      getNextActiveElement(items, target, key === ARROW_DOWN_KEY$1, !items.includes(target)).focus();
    }

    // Static
    static jQueryInterface(config) {
      return this.each(function () {
        const data = Dropdown.getOrCreateInstance(this, config);
        if (typeof config !== 'string') {
          return;
        }
        if (typeof data[config] === 'undefined') {
          throw new TypeError(`No method named "${config}"`);
        }
        data[config]();
      });
    }
    static clearMenus(event) {
      if (event.button === RIGHT_MOUSE_BUTTON || event.type === 'keyup' && event.key !== TAB_KEY$1) {
        return;
      }
      const openToggles = SelectorEngine.find(SELECTOR_DATA_TOGGLE_SHOWN);
      for (const toggle of openToggles) {
        const context = Dropdown.getInstance(toggle);
        if (!context || context._config.autoClose === false) {
          continue;
        }
        const composedPath = event.composedPath();
        const isMenuTarget = composedPath.includes(context._menu);
        if (composedPath.includes(context._element) || context._config.autoClose === 'inside' && !isMenuTarget || context._config.autoClose === 'outside' && isMenuTarget) {
          continue;
        }

        // Tab navigation through the dropdown menu or events from contained inputs shouldn't close the menu
        if (context._menu.contains(event.target) && (event.type === 'keyup' && event.key === TAB_KEY$1 || /input|select|option|textarea|form/i.test(event.target.tagName))) {
          continue;
        }
        const relatedTarget = {
          relatedTarget: context._element
        };
        if (event.type === 'click') {
          relatedTarget.clickEvent = event;
        }
        context._completeHide(relatedTarget);
      }
    }
    static dataApiKeydownHandler(event) {
      // If not an UP | DOWN | ESCAPE key => not a dropdown command
      // If input/textarea && if key is other than ESCAPE => not a dropdown command

      const isInput = /input|textarea/i.test(event.target.tagName);
      const isEscapeEvent = event.key === ESCAPE_KEY$2;
      const isUpOrDownEvent = [ARROW_UP_KEY$1, ARROW_DOWN_KEY$1].includes(event.key);
      if (!isUpOrDownEvent && !isEscapeEvent) {
        return;
      }
      if (isInput && !isEscapeEvent) {
        return;
      }
      event.preventDefault();

      // TODO: v6 revert #37011 & change markup https://getbootstrap.com/docs/5.3/forms/input-group/
      const getToggleButton = this.matches(SELECTOR_DATA_TOGGLE$3) ? this : SelectorEngine.prev(this, SELECTOR_DATA_TOGGLE$3)[0] || SelectorEngine.next(this, SELECTOR_DATA_TOGGLE$3)[0] || SelectorEngine.findOne(SELECTOR_DATA_TOGGLE$3, event.delegateTarget.parentNode);
      const instance = Dropdown.getOrCreateInstance(getToggleButton);
      if (isUpOrDownEvent) {
        event.stopPropagation();
        instance.show();
        instance._selectMenuItem(event);
        return;
      }
      if (instance._isShown()) {
        // else is escape and we check if it is shown
        event.stopPropagation();
        instance.hide();
        getToggleButton.focus();
      }
    }
  }

  /**
   * Data API implementation
   */

  EventHandler.on(document, EVENT_KEYDOWN_DATA_API, SELECTOR_DATA_TOGGLE$3, Dropdown.dataApiKeydownHandler);
  EventHandler.on(document, EVENT_KEYDOWN_DATA_API, SELECTOR_MENU, Dropdown.dataApiKeydownHandler);
  EventHandler.on(document, EVENT_CLICK_DATA_API$3, Dropdown.clearMenus);
  EventHandler.on(document, EVENT_KEYUP_DATA_API, Dropdown.clearMenus);
  EventHandler.on(document, EVENT_CLICK_DATA_API$3, SELECTOR_DATA_TOGGLE$3, function (event) {
    event.preventDefault();
    Dropdown.getOrCreateInstance(this).toggle();
  });

  /**
   * jQuery
   */

  defineJQueryPlugin(Dropdown);

  /**
   * --------------------------------------------------------------------------
   * Bootstrap util/backdrop.js
   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
   * --------------------------------------------------------------------------
   */


  /**
   * Constants
   */

  const NAME$9 = 'backdrop';
  const CLASS_NAME_FADE$4 = 'fade';
  const CLASS_NAME_SHOW$5 = 'show';
  const EVENT_MOUSEDOWN = `mousedown.bs.${NAME$9}`;
  const Default$8 = {
    className: 'modal-backdrop',
    clickCallback: null,
    isAnimated: false,
    isVisible: true,
    // if false, we use the backdrop helper without adding any element to the dom
    rootElement: 'body' // give the choice to place backdrop under different elements
  };
  const DefaultType$8 = {
    className: 'string',
    clickCallback: '(function|null)',
    isAnimated: 'boolean',
    isVisible: 'boolean',
    rootElement: '(element|string)'
  };

  /**
   * Class definition
   */

  class Backdrop extends Config {
    constructor(config) {
      super();
      this._config = this._getConfig(config);
      this._isAppended = false;
      this._element = null;
    }

    // Getters
    static get Default() {
      return Default$8;
    }
    static get DefaultType() {
      return DefaultType$8;
    }
    static get NAME() {
      return NAME$9;
    }

    // Public
    show(callback) {
      if (!this._config.isVisible) {
        execute(callback);
        return;
      }
      this._append();
      const element = this._getElement();
      if (this._config.isAnimated) {
        reflow(element);
      }
      element.classList.add(CLASS_NAME_SHOW$5);
      this._emulateAnimation(() => {
        execute(callback);
      });
    }
    hide(callback) {
      if (!this._config.isVisible) {
        execute(callback);
        return;
      }
      this._getElement().classList.remove(CLASS_NAME_SHOW$5);
      this._emulateAnimation(() => {
        this.dispose();
        execute(callback);
      });
    }
    dispose() {
      if (!this._isAppended) {
        return;
      }
      EventHandler.off(this._element, EVENT_MOUSEDOWN);
      this._element.remove();
      this._isAppended = false;
    }

    // Private
    _getElement() {
      if (!this._element) {
        const backdrop = document.createElement('div');
        backdrop.className = this._config.className;
        if (this._config.isAnimated) {
          backdrop.classList.add(CLASS_NAME_FADE$4);
        }
        this._element = backdrop;
      }
      return this._element;
    }
    _configAfterMerge(config) {
      // use getElement() with the default "body" to get a fresh Element on each instantiation
      config.rootElement = getElement(config.rootElement);
      return config;
    }
    _append() {
      if (this._isAppended) {
        return;
      }
      const element = this._getElement();
      this._config.rootElement.append(element);
      EventHandler.on(element, EVENT_MOUSEDOWN, () => {
        execute(this._config.clickCallback);
      });
      this._isAppended = true;
    }
    _emulateAnimation(callback) {
      executeAfterTransition(callback, this._getElement(), this._config.isAnimated);
    }
  }

  /**
   * --------------------------------------------------------------------------
   * Bootstrap util/focustrap.js
   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
   * --------------------------------------------------------------------------
   */


  /**
   * Constants
   */

  const NAME$8 = 'focustrap';
  const DATA_KEY$5 = 'bs.focustrap';
  const EVENT_KEY$5 = `.${DATA_KEY$5}`;
  const EVENT_FOCUSIN$2 = `focusin${EVENT_KEY$5}`;
  const EVENT_KEYDOWN_TAB = `keydown.tab${EVENT_KEY$5}`;
  const TAB_KEY = 'Tab';
  const TAB_NAV_FORWARD = 'forward';
  const TAB_NAV_BACKWARD = 'backward';
  const Default$7 = {
    autofocus: true,
    trapElement: null // The element to trap focus inside of
  };
  const DefaultType$7 = {
    autofocus: 'boolean',
    trapElement: 'element'
  };

  /**
   * Class definition
   */

  class FocusTrap extends Config {
    constructor(config) {
      super();
      this._config = this._getConfig(config);
      this._isActive = false;
      this._lastTabNavDirection = null;
    }

    // Getters
    static get Default() {
      return Default$7;
    }
    static get DefaultType() {
      return DefaultType$7;
    }
    static get NAME() {
      return NAME$8;
    }

    // Public
    activate() {
      if (this._isActive) {
        return;
      }
      if (this._config.autofocus) {
        this._config.trapElement.focus();
      }
      EventHandler.off(document, EVENT_KEY$5); // guard against infinite focus loop
      EventHandler.on(document, EVENT_FOCUSIN$2, event => this._handleFocusin(event));
      EventHandler.on(document, EVENT_KEYDOWN_TAB, event => this._handleKeydown(event));
      this._isActive = true;
    }
    deactivate() {
      if (!this._isActive) {
        return;
      }
      this._isActive = false;
      EventHandler.off(document, EVENT_KEY$5);
    }

    // Private
    _handleFocusin(event) {
      const {
        trapElement
      } = this._config;
      if (event.target === document || event.target === trapElement || trapElement.contains(event.target)) {
        return;
      }
      const elements = SelectorEngine.focusableChildren(trapElement);
      if (elements.length === 0) {
        trapElement.focus();
      } else if (this._lastTabNavDirection === TAB_NAV_BACKWARD) {
        elements[elements.length - 1].focus();
      } else {
        elements[0].focus();
      }
    }
    _handleKeydown(event) {
      if (event.key !== TAB_KEY) {
        return;
      }
      this._lastTabNavDirection = event.shiftKey ? TAB_NAV_BACKWARD : TAB_NAV_FORWARD;
    }
  }

  /**
   * --------------------------------------------------------------------------
   * Bootstrap util/scrollBar.js
   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
   * --------------------------------------------------------------------------
   */


  /**
   * Constants
   */

  const SELECTOR_FIXED_CONTENT = '.fixed-top, .fixed-bottom, .is-fixed, .sticky-top';
  const SELECTOR_STICKY_CONTENT = '.sticky-top';
  const PROPERTY_PADDING = 'padding-right';
  const PROPERTY_MARGIN = 'margin-right';

  /**
   * Class definition
   */

  class ScrollBarHelper {
    constructor() {
      this._element = document.body;
    }

    // Public
    getWidth() {
      // https://developer.mozilla.org/en-US/docs/Web/API/Window/innerWidth#usage_notes
      const documentWidth = document.documentElement.clientWidth;
      return Math.abs(window.innerWidth - documentWidth);
    }
    hide() {
      const width = this.getWidth();
      this._disableOverFlow();
      // give padding to element to balance the hidden scrollbar width
      this._setElementAttributes(this._element, PROPERTY_PADDING, calculatedValue => calculatedValue + width);
      // trick: We adjust positive paddingRight and negative marginRight to sticky-top elements to keep showing fullwidth
      this._setElementAttributes(SELECTOR_FIXED_CONTENT, PROPERTY_PADDING, calculatedValue => calculatedValue + width);
      this._setElementAttributes(SELECTOR_STICKY_CONTENT, PROPERTY_MARGIN, calculatedValue => calculatedValue - width);
    }
    reset() {
      this._resetElementAttributes(this._element, 'overflow');
      this._resetElementAttributes(this._element, PROPERTY_PADDING);
      this._resetElementAttributes(SELECTOR_FIXED_CONTENT, PROPERTY_PADDING);
      this._resetElementAttributes(SELECTOR_STICKY_CONTENT, PROPERTY_MARGIN);
    }
    isOverflowing() {
      return this.getWidth() > 0;
    }

    // Private
    _disableOverFlow() {
      this._saveInitialAttribute(this._element, 'overflow');
      this._element.style.overflow = 'hidden';
    }
    _setElementAttributes(selector, styleProperty, callback) {
      const scrollbarWidth = this.getWidth();
      const manipulationCallBack = element => {
        if (element !== this._element && window.innerWidth > element.clientWidth + scrollbarWidth) {
          return;
        }
        this._saveInitialAttribute(element, styleProperty);
        const calculatedValue = window.getComputedStyle(element).getPropertyValue(styleProperty);
        element.style.setProperty(styleProperty, `${callback(Number.parseFloat(calculatedValue))}px`);
      };
      this._applyManipulationCallback(selector, manipulationCallBack);
    }
    _saveInitialAttribute(element, styleProperty) {
      const actualValue = element.style.getPropertyValue(styleProperty);
      if (actualValue) {
        Manipulator.setDataAttribute(element, styleProperty, actualValue);
      }
    }
    _resetElementAttributes(selector, styleProperty) {
      const manipulationCallBack = element => {
        const value = Manipulator.getDataAttribute(element, styleProperty);
        // We only want to remove the property if the value is `null`; the value can also be zero
        if (value === null) {
          element.style.removeProperty(styleProperty);
          return;
        }
        Manipulator.removeDataAttribute(element, styleProperty);
        element.style.setProperty(styleProperty, value);
      };
      this._applyManipulationCallback(selector, manipulationCallBack);
    }
    _applyManipulationCallback(selector, callBack) {
      if (isElement$1(selector)) {
        callBack(selector);
        return;
      }
      for (const sel of SelectorEngine.find(selector, this._element)) {
        callBack(sel);
      }
    }
  }

  /**
   * --------------------------------------------------------------------------
   * Bootstrap modal.js
   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
   * --------------------------------------------------------------------------
   */


  /**
   * Constants
   */

  const NAME$7 = 'modal';
  const DATA_KEY$4 = 'bs.modal';
  const EVENT_KEY$4 = `.${DATA_KEY$4}`;
  const DATA_API_KEY$2 = '.data-api';
  const ESCAPE_KEY$1 = 'Escape';
  const EVENT_HIDE$4 = `hide${EVENT_KEY$4}`;
  const EVENT_HIDE_PREVENTED$1 = `hidePrevented${EVENT_KEY$4}`;
  const EVENT_HIDDEN$4 = `hidden${EVENT_KEY$4}`;
  const EVENT_SHOW$4 = `show${EVENT_KEY$4}`;
  const EVENT_SHOWN$4 = `shown${EVENT_KEY$4}`;
  const EVENT_RESIZE$1 = `resize${EVENT_KEY$4}`;
  const EVENT_CLICK_DISMISS = `click.dismiss${EVENT_KEY$4}`;
  const EVENT_MOUSEDOWN_DISMISS = `mousedown.dismiss${EVENT_KEY$4}`;
  const EVENT_KEYDOWN_DISMISS$1 = `keydown.dismiss${EVENT_KEY$4}`;
  const EVENT_CLICK_DATA_API$2 = `click${EVENT_KEY$4}${DATA_API_KEY$2}`;
  const CLASS_NAME_OPEN = 'modal-open';
  const CLASS_NAME_FADE$3 = 'fade';
  const CLASS_NAME_SHOW$4 = 'show';
  const CLASS_NAME_STATIC = 'modal-static';
  const OPEN_SELECTOR$1 = '.modal.show';
  const SELECTOR_DIALOG = '.modal-dialog';
  const SELECTOR_MODAL_BODY = '.modal-body';
  const SELECTOR_DATA_TOGGLE$2 = '[data-bs-toggle="modal"]';
  const Default$6 = {
    backdrop: true,
    focus: true,
    keyboard: true
  };
  const DefaultType$6 = {
    backdrop: '(boolean|string)',
    focus: 'boolean',
    keyboard: 'boolean'
  };

  /**
   * Class definition
   */

  class Modal extends BaseComponent {
    constructor(element, config) {
      super(element, config);
      this._dialog = SelectorEngine.findOne(SELECTOR_DIALOG, this._element);
      this._backdrop = this._initializeBackDrop();
      this._focustrap = this._initializeFocusTrap();
      this._isShown = false;
      this._isTransitioning = false;
      this._scrollBar = new ScrollBarHelper();
      this._addEventListeners();
    }

    // Getters
    static get Default() {
      return Default$6;
    }
    static get DefaultType() {
      return DefaultType$6;
    }
    static get NAME() {
      return NAME$7;
    }

    // Public
    toggle(relatedTarget) {
      return this._isShown ? this.hide() : this.show(relatedTarget);
    }
    show(relatedTarget) {
      if (this._isShown || this._isTransitioning) {
        return;
      }
      const showEvent = EventHandler.trigger(this._element, EVENT_SHOW$4, {
        relatedTarget
      });
      if (showEvent.defaultPrevented) {
        return;
      }
      this._isShown = true;
      this._isTransitioning = true;
      this._scrollBar.hide();
      document.body.classList.add(CLASS_NAME_OPEN);
      this._adjustDialog();
      this._backdrop.show(() => this._showElement(relatedTarget));
    }
    hide() {
      if (!this._isShown || this._isTransitioning) {
        return;
      }
      const hideEvent = EventHandler.trigger(this._element, EVENT_HIDE$4);
      if (hideEvent.defaultPrevented) {
        return;
      }
      this._isShown = false;
      this._isTransitioning = true;
      this._focustrap.deactivate();
      this._element.classList.remove(CLASS_NAME_SHOW$4);
      this._queueCallback(() => this._hideModal(), this._element, this._isAnimated());
    }
    dispose() {
      EventHandler.off(window, EVENT_KEY$4);
      EventHandler.off(this._dialog, EVENT_KEY$4);
      this._backdrop.dispose();
      this._focustrap.deactivate();
      super.dispose();
    }
    handleUpdate() {
      this._adjustDialog();
    }

    // Private
    _initializeBackDrop() {
      return new Backdrop({
        isVisible: Boolean(this._config.backdrop),
        // 'static' option will be translated to true, and booleans will keep their value,
        isAnimated: this._isAnimated()
      });
    }
    _initializeFocusTrap() {
      return new FocusTrap({
        trapElement: this._element
      });
    }
    _showElement(relatedTarget) {
      // try to append dynamic modal
      if (!document.body.contains(this._element)) {
        document.body.append(this._element);
      }
      this._element.style.display = 'block';
      this._element.removeAttribute('aria-hidden');
      this._element.setAttribute('aria-modal', true);
      this._element.setAttribute('role', 'dialog');
      this._element.scrollTop = 0;
      const modalBody = SelectorEngine.findOne(SELECTOR_MODAL_BODY, this._dialog);
      if (modalBody) {
        modalBody.scrollTop = 0;
      }
      reflow(this._element);
      this._element.classList.add(CLASS_NAME_SHOW$4);
      const transitionComplete = () => {
        if (this._config.focus) {
          this._focustrap.activate();
        }
        this._isTransitioning = false;
        EventHandler.trigger(this._element, EVENT_SHOWN$4, {
          relatedTarget
        });
      };
      this._queueCallback(transitionComplete, this._dialog, this._isAnimated());
    }
    _addEventListeners() {
      EventHandler.on(this._element, EVENT_KEYDOWN_DISMISS$1, event => {
        if (event.key !== ESCAPE_KEY$1) {
          return;
        }
        if (this._config.keyboard) {
          this.hide();
          return;
        }
        this._triggerBackdropTransition();
      });
      EventHandler.on(window, EVENT_RESIZE$1, () => {
        if (this._isShown && !this._isTransitioning) {
          this._adjustDialog();
        }
      });
      EventHandler.on(this._element, EVENT_MOUSEDOWN_DISMISS, event => {
        // a bad trick to segregate clicks that may start inside dialog but end outside, and avoid listen to scrollbar clicks
        EventHandler.one(this._element, EVENT_CLICK_DISMISS, event2 => {
          if (this._element !== event.target || this._element !== event2.target) {
            return;
          }
          if (this._config.backdrop === 'static') {
            this._triggerBackdropTransition();
            return;
          }
          if (this._config.backdrop) {
            this.hide();
          }
        });
      });
    }
    _hideModal() {
      this._element.style.display = 'none';
      this._element.setAttribute('aria-hidden', true);
      this._element.removeAttribute('aria-modal');
      this._element.removeAttribute('role');
      this._isTransitioning = false;
      this._backdrop.hide(() => {
        document.body.classList.remove(CLASS_NAME_OPEN);
        this._resetAdjustments();
        this._scrollBar.reset();
        EventHandler.trigger(this._element, EVENT_HIDDEN$4);
      });
    }
    _isAnimated() {
      return this._element.classList.contains(CLASS_NAME_FADE$3);
    }
    _triggerBackdropTransition() {
      const hideEvent = EventHandler.trigger(this._element, EVENT_HIDE_PREVENTED$1);
      if (hideEvent.defaultPrevented) {
        return;
      }
      const isModalOverflowing = this._element.scrollHeight > document.documentElement.clientHeight;
      const initialOverflowY = this._element.style.overflowY;
      // return if the following background transition hasn't yet completed
      if (initialOverflowY === 'hidden' || this._element.classList.contains(CLASS_NAME_STATIC)) {
        return;
      }
      if (!isModalOverflowing) {
        this._element.style.overflowY = 'hidden';
      }
      this._element.classList.add(CLASS_NAME_STATIC);
      this._queueCallback(() => {
        this._element.classList.remove(CLASS_NAME_STATIC);
        this._queueCallback(() => {
          this._element.style.overflowY = initialOverflowY;
        }, this._dialog);
      }, this._dialog);
      this._element.focus();
    }

    /**
     * The following methods are used to handle overflowing modals
     */

    _adjustDialog() {
      const isModalOverflowing = this._element.scrollHeight > document.documentElement.clientHeight;
      const scrollbarWidth = this._scrollBar.getWidth();
      const isBodyOverflowing = scrollbarWidth > 0;
      if (isBodyOverflowing && !isModalOverflowing) {
        const property = isRTL() ? 'paddingLeft' : 'paddingRight';
        this._element.style[property] = `${scrollbarWidth}px`;
      }
      if (!isBodyOverflowing && isModalOverflowing) {
        const property = isRTL() ? 'paddingRight' : 'paddingLeft';
        this._element.style[property] = `${scrollbarWidth}px`;
      }
    }
    _resetAdjustments() {
      this._element.style.paddingLeft = '';
      this._element.style.paddingRight = '';
    }

    // Static
    static jQueryInterface(config, relatedTarget) {
      return this.each(function () {
        const data = Modal.getOrCreateInstance(this, config);
        if (typeof config !== 'string') {
          return;
        }
        if (typeof data[config] === 'undefined') {
          throw new TypeError(`No method named "${config}"`);
        }
        data[config](relatedTarget);
      });
    }
  }

  /**
   * Data API implementation
   */

  EventHandler.on(document, EVENT_CLICK_DATA_API$2, SELECTOR_DATA_TOGGLE$2, function (event) {
    const target = SelectorEngine.getElementFromSelector(this);
    if (['A', 'AREA'].includes(this.tagName)) {
      event.preventDefault();
    }
    EventHandler.one(target, EVENT_SHOW$4, showEvent => {
      if (showEvent.defaultPrevented) {
        // only register focus restorer if modal will actually get shown
        return;
      }
      EventHandler.one(target, EVENT_HIDDEN$4, () => {
        if (isVisible(this)) {
          this.focus();
        }
      });
    });

    // avoid conflict when clicking modal toggler while another one is open
    const alreadyOpen = SelectorEngine.findOne(OPEN_SELECTOR$1);
    if (alreadyOpen) {
      Modal.getInstance(alreadyOpen).hide();
    }
    const data = Modal.getOrCreateInstance(target);
    data.toggle(this);
  });
  enableDismissTrigger(Modal);

  /**
   * jQuery
   */

  defineJQueryPlugin(Modal);

  /**
   * --------------------------------------------------------------------------
   * Bootstrap offcanvas.js
   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
   * --------------------------------------------------------------------------
   */


  /**
   * Constants
   */

  const NAME$6 = 'offcanvas';
  const DATA_KEY$3 = 'bs.offcanvas';
  const EVENT_KEY$3 = `.${DATA_KEY$3}`;
  const DATA_API_KEY$1 = '.data-api';
  const EVENT_LOAD_DATA_API$2 = `load${EVENT_KEY$3}${DATA_API_KEY$1}`;
  const ESCAPE_KEY = 'Escape';
  const CLASS_NAME_SHOW$3 = 'show';
  const CLASS_NAME_SHOWING$1 = 'showing';
  const CLASS_NAME_HIDING = 'hiding';
  const CLASS_NAME_BACKDROP = 'offcanvas-backdrop';
  const OPEN_SELECTOR = '.offcanvas.show';
  const EVENT_SHOW$3 = `show${EVENT_KEY$3}`;
  const EVENT_SHOWN$3 = `shown${EVENT_KEY$3}`;
  const EVENT_HIDE$3 = `hide${EVENT_KEY$3}`;
  const EVENT_HIDE_PREVENTED = `hidePrevented${EVENT_KEY$3}`;
  const EVENT_HIDDEN$3 = `hidden${EVENT_KEY$3}`;
  const EVENT_RESIZE = `resize${EVENT_KEY$3}`;
  const EVENT_CLICK_DATA_API$1 = `click${EVENT_KEY$3}${DATA_API_KEY$1}`;
  const EVENT_KEYDOWN_DISMISS = `keydown.dismiss${EVENT_KEY$3}`;
  const SELECTOR_DATA_TOGGLE$1 = '[data-bs-toggle="offcanvas"]';
  const Default$5 = {
    backdrop: true,
    keyboard: true,
    scroll: false
  };
  const DefaultType$5 = {
    backdrop: '(boolean|string)',
    keyboard: 'boolean',
    scroll: 'boolean'
  };

  /**
   * Class definition
   */

  class Offcanvas extends BaseComponent {
    constructor(element, config) {
      super(element, config);
      this._isShown = false;
      this._backdrop = this._initializeBackDrop();
      this._focustrap = this._initializeFocusTrap();
      this._addEventListeners();
    }

    // Getters
    static get Default() {
      return Default$5;
    }
    static get DefaultType() {
      return DefaultType$5;
    }
    static get NAME() {
      return NAME$6;
    }

    // Public
    toggle(relatedTarget) {
      return this._isShown ? this.hide() : this.show(relatedTarget);
    }
    show(relatedTarget) {
      if (this._isShown) {
        return;
      }
      const showEvent = EventHandler.trigger(this._element, EVENT_SHOW$3, {
        relatedTarget
      });
      if (showEvent.defaultPrevented) {
        return;
      }
      this._isShown = true;
      this._backdrop.show();
      if (!this._config.scroll) {
        new ScrollBarHelper().hide();
      }
      this._element.setAttribute('aria-modal', true);
      this._element.setAttribute('role', 'dialog');
      this._element.classList.add(CLASS_NAME_SHOWING$1);
      const completeCallBack = () => {
        if (!this._config.scroll || this._config.backdrop) {
          this._focustrap.activate();
        }
        this._element.classList.add(CLASS_NAME_SHOW$3);
        this._element.classList.remove(CLASS_NAME_SHOWING$1);
        EventHandler.trigger(this._element, EVENT_SHOWN$3, {
          relatedTarget
        });
      };
      this._queueCallback(completeCallBack, this._element, true);
    }
    hide() {
      if (!this._isShown) {
        return;
      }
      const hideEvent = EventHandler.trigger(this._element, EVENT_HIDE$3);
      if (hideEvent.defaultPrevented) {
        return;
      }
      this._focustrap.deactivate();
      this._element.blur();
      this._isShown = false;
      this._element.classList.add(CLASS_NAME_HIDING);
      this._backdrop.hide();
      const completeCallback = () => {
        this._element.classList.remove(CLASS_NAME_SHOW$3, CLASS_NAME_HIDING);
        this._element.removeAttribute('aria-modal');
        this._element.removeAttribute('role');
        if (!this._config.scroll) {
          new ScrollBarHelper().reset();
        }
        EventHandler.trigger(this._element, EVENT_HIDDEN$3);
      };
      this._queueCallback(completeCallback, this._element, true);
    }
    dispose() {
      this._backdrop.dispose();
      this._focustrap.deactivate();
      super.dispose();
    }

    // Private
    _initializeBackDrop() {
      const clickCallback = () => {
        if (this._config.backdrop === 'static') {
          EventHandler.trigger(this._element, EVENT_HIDE_PREVENTED);
          return;
        }
        this.hide();
      };

      // 'static' option will be translated to true, and booleans will keep their value
      const isVisible = Boolean(this._config.backdrop);
      return new Backdrop({
        className: CLASS_NAME_BACKDROP,
        isVisible,
        isAnimated: true,
        rootElement: this._element.parentNode,
        clickCallback: isVisible ? clickCallback : null
      });
    }
    _initializeFocusTrap() {
      return new FocusTrap({
        trapElement: this._element
      });
    }
    _addEventListeners() {
      EventHandler.on(this._element, EVENT_KEYDOWN_DISMISS, event => {
        if (event.key !== ESCAPE_KEY) {
          return;
        }
        if (this._config.keyboard) {
          this.hide();
          return;
        }
        EventHandler.trigger(this._element, EVENT_HIDE_PREVENTED);
      });
    }

    // Static
    static jQueryInterface(config) {
      return this.each(function () {
        const data = Offcanvas.getOrCreateInstance(this, config);
        if (typeof config !== 'string') {
          return;
        }
        if (data[config] === undefined || config.startsWith('_') || config === 'constructor') {
          throw new TypeError(`No method named "${config}"`);
        }
        data[config](this);
      });
    }
  }

  /**
   * Data API implementation
   */

  EventHandler.on(document, EVENT_CLICK_DATA_API$1, SELECTOR_DATA_TOGGLE$1, function (event) {
    const target = SelectorEngine.getElementFromSelector(this);
    if (['A', 'AREA'].includes(this.tagName)) {
      event.preventDefault();
    }
    if (isDisabled(this)) {
      return;
    }
    EventHandler.one(target, EVENT_HIDDEN$3, () => {
      // focus on trigger when it is closed
      if (isVisible(this)) {
        this.focus();
      }
    });

    // avoid conflict when clicking a toggler of an offcanvas, while another is open
    const alreadyOpen = SelectorEngine.findOne(OPEN_SELECTOR);
    if (alreadyOpen && alreadyOpen !== target) {
      Offcanvas.getInstance(alreadyOpen).hide();
    }
    const data = Offcanvas.getOrCreateInstance(target);
    data.toggle(this);
  });
  EventHandler.on(window, EVENT_LOAD_DATA_API$2, () => {
    for (const selector of SelectorEngine.find(OPEN_SELECTOR)) {
      Offcanvas.getOrCreateInstance(selector).show();
    }
  });
  EventHandler.on(window, EVENT_RESIZE, () => {
    for (const element of SelectorEngine.find('[aria-modal][class*=show][class*=offcanvas-]')) {
      if (getComputedStyle(element).position !== 'fixed') {
        Offcanvas.getOrCreateInstance(element).hide();
      }
    }
  });
  enableDismissTrigger(Offcanvas);

  /**
   * jQuery
   */

  defineJQueryPlugin(Offcanvas);

  /**
   * --------------------------------------------------------------------------
   * Bootstrap util/sanitizer.js
   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
   * --------------------------------------------------------------------------
   */

  // js-docs-start allow-list
  const ARIA_ATTRIBUTE_PATTERN = /^aria-[\w-]*$/i;
  const DefaultAllowlist = {
    // Global attributes allowed on any supplied element below.
    '*': ['class', 'dir', 'id', 'lang', 'role', ARIA_ATTRIBUTE_PATTERN],
    a: ['target', 'href', 'title', 'rel'],
    area: [],
    b: [],
    br: [],
    col: [],
    code: [],
    dd: [],
    div: [],
    dl: [],
    dt: [],
    em: [],
    hr: [],
    h1: [],
    h2: [],
    h3: [],
    h4: [],
    h5: [],
    h6: [],
    i: [],
    img: ['src', 'srcset', 'alt', 'title', 'width', 'height'],
    li: [],
    ol: [],
    p: [],
    pre: [],
    s: [],
    small: [],
    span: [],
    sub: [],
    sup: [],
    strong: [],
    u: [],
    ul: []
  };
  // js-docs-end allow-list

  const uriAttributes = new Set(['background', 'cite', 'href', 'itemtype', 'longdesc', 'poster', 'src', 'xlink:href']);

  /**
   * A pattern that recognizes URLs that are safe wrt. XSS in URL navigation
   * contexts.
   *
   * Shout-out to Angular https://github.com/angular/angular/blob/15.2.8/packages/core/src/sanitization/url_sanitizer.ts#L38
   */
  const SAFE_URL_PATTERN = /^(?!javascript:)(?:[a-z0-9+.-]+:|[^&:/?#]*(?:[/?#]|$))/i;
  const allowedAttribute = (attribute, allowedAttributeList) => {
    const attributeName = attribute.nodeName.toLowerCase();
    if (allowedAttributeList.includes(attributeName)) {
      if (uriAttributes.has(attributeName)) {
        return Boolean(SAFE_URL_PATTERN.test(attribute.nodeValue));
      }
      return true;
    }

    // Check if a regular expression validates the attribute.
    return allowedAttributeList.filter(attributeRegex => attributeRegex instanceof RegExp).some(regex => regex.test(attributeName));
  };
  function sanitizeHtml(unsafeHtml, allowList, sanitizeFunction) {
    if (!unsafeHtml.length) {
      return unsafeHtml;
    }
    if (sanitizeFunction && typeof sanitizeFunction === 'function') {
      return sanitizeFunction(unsafeHtml);
    }
    const domParser = new window.DOMParser();
    const createdDocument = domParser.parseFromString(unsafeHtml, 'text/html');
    const elements = [].concat(...createdDocument.body.querySelectorAll('*'));
    for (const element of elements) {
      const elementName = element.nodeName.toLowerCase();
      if (!Object.keys(allowList).includes(elementName)) {
        element.remove();
        continue;
      }
      const attributeList = [].concat(...element.attributes);
      const allowedAttributes = [].concat(allowList['*'] || [], allowList[elementName] || []);
      for (const attribute of attributeList) {
        if (!allowedAttribute(attribute, allowedAttributes)) {
          element.removeAttribute(attribute.nodeName);
        }
      }
    }
    return createdDocument.body.innerHTML;
  }

  /**
   * --------------------------------------------------------------------------
   * Bootstrap util/template-factory.js
   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
   * --------------------------------------------------------------------------
   */


  /**
   * Constants
   */

  const NAME$5 = 'TemplateFactory';
  const Default$4 = {
    allowList: DefaultAllowlist,
    content: {},
    // { selector : text ,  selector2 : text2 , }
    extraClass: '',
    html: false,
    sanitize: true,
    sanitizeFn: null,
    template: '<div></div>'
  };
  const DefaultType$4 = {
    allowList: 'object',
    content: 'object',
    extraClass: '(string|function)',
    html: 'boolean',
    sanitize: 'boolean',
    sanitizeFn: '(null|function)',
    template: 'string'
  };
  const DefaultContentType = {
    entry: '(string|element|function|null)',
    selector: '(string|element)'
  };

  /**
   * Class definition
   */

  class TemplateFactory extends Config {
    constructor(config) {
      super();
      this._config = this._getConfig(config);
    }

    // Getters
    static get Default() {
      return Default$4;
    }
    static get DefaultType() {
      return DefaultType$4;
    }
    static get NAME() {
      return NAME$5;
    }

    // Public
    getContent() {
      return Object.values(this._config.content).map(config => this._resolvePossibleFunction(config)).filter(Boolean);
    }
    hasContent() {
      return this.getContent().length > 0;
    }
    changeContent(content) {
      this._checkContent(content);
      this._config.content = {
        ...this._config.content,
        ...content
      };
      return this;
    }
    toHtml() {
      const templateWrapper = document.createElement('div');
      templateWrapper.innerHTML = this._maybeSanitize(this._config.template);
      for (const [selector, text] of Object.entries(this._config.content)) {
        this._setContent(templateWrapper, text, selector);
      }
      const template = templateWrapper.children[0];
      const extraClass = this._resolvePossibleFunction(this._config.extraClass);
      if (extraClass) {
        template.classList.add(...extraClass.split(' '));
      }
      return template;
    }

    // Private
    _typeCheckConfig(config) {
      super._typeCheckConfig(config);
      this._checkContent(config.content);
    }
    _checkContent(arg) {
      for (const [selector, content] of Object.entries(arg)) {
        super._typeCheckConfig({
          selector,
          entry: content
        }, DefaultContentType);
      }
    }
    _setContent(template, content, selector) {
      const templateElement = SelectorEngine.findOne(selector, template);
      if (!templateElement) {
        return;
      }
      content = this._resolvePossibleFunction(content);
      if (!content) {
        templateElement.remove();
        return;
      }
      if (isElement$1(content)) {
        this._putElementInTemplate(getElement(content), templateElement);
        return;
      }
      if (this._config.html) {
        templateElement.innerHTML = this._maybeSanitize(content);
        return;
      }
      templateElement.textContent = content;
    }
    _maybeSanitize(arg) {
      return this._config.sanitize ? sanitizeHtml(arg, this._config.allowList, this._config.sanitizeFn) : arg;
    }
    _resolvePossibleFunction(arg) {
      return execute(arg, [undefined, this]);
    }
    _putElementInTemplate(element, templateElement) {
      if (this._config.html) {
        templateElement.innerHTML = '';
        templateElement.append(element);
        return;
      }
      templateElement.textContent = element.textContent;
    }
  }

  /**
   * --------------------------------------------------------------------------
   * Bootstrap tooltip.js
   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
   * --------------------------------------------------------------------------
   */


  /**
   * Constants
   */

  const NAME$4 = 'tooltip';
  const DISALLOWED_ATTRIBUTES = new Set(['sanitize', 'allowList', 'sanitizeFn']);
  const CLASS_NAME_FADE$2 = 'fade';
  const CLASS_NAME_MODAL = 'modal';
  const CLASS_NAME_SHOW$2 = 'show';
  const SELECTOR_TOOLTIP_INNER = '.tooltip-inner';
  const SELECTOR_MODAL = `.${CLASS_NAME_MODAL}`;
  const EVENT_MODAL_HIDE = 'hide.bs.modal';
  const TRIGGER_HOVER = 'hover';
  const TRIGGER_FOCUS = 'focus';
  const TRIGGER_CLICK = 'click';
  const TRIGGER_MANUAL = 'manual';
  const EVENT_HIDE$2 = 'hide';
  const EVENT_HIDDEN$2 = 'hidden';
  const EVENT_SHOW$2 = 'show';
  const EVENT_SHOWN$2 = 'shown';
  const EVENT_INSERTED = 'inserted';
  const EVENT_CLICK$1 = 'click';
  const EVENT_FOCUSIN$1 = 'focusin';
  const EVENT_FOCUSOUT$1 = 'focusout';
  const EVENT_MOUSEENTER = 'mouseenter';
  const EVENT_MOUSELEAVE = 'mouseleave';
  const AttachmentMap = {
    AUTO: 'auto',
    TOP: 'top',
    RIGHT: isRTL() ? 'left' : 'right',
    BOTTOM: 'bottom',
    LEFT: isRTL() ? 'right' : 'left'
  };
  const Default$3 = {
    allowList: DefaultAllowlist,
    animation: true,
    boundary: 'clippingParents',
    container: false,
    customClass: '',
    delay: 0,
    fallbackPlacements: ['top', 'right', 'bottom', 'left'],
    html: false,
    offset: [0, 6],
    placement: 'top',
    popperConfig: null,
    sanitize: true,
    sanitizeFn: null,
    selector: false,
    template: '<div class="tooltip" role="tooltip">' + '<div class="tooltip-arrow"></div>' + '<div class="tooltip-inner"></div>' + '</div>',
    title: '',
    trigger: 'hover focus'
  };
  const DefaultType$3 = {
    allowList: 'object',
    animation: 'boolean',
    boundary: '(string|element)',
    container: '(string|element|boolean)',
    customClass: '(string|function)',
    delay: '(number|object)',
    fallbackPlacements: 'array',
    html: 'boolean',
    offset: '(array|string|function)',
    placement: '(string|function)',
    popperConfig: '(null|object|function)',
    sanitize: 'boolean',
    sanitizeFn: '(null|function)',
    selector: '(string|boolean)',
    template: 'string',
    title: '(string|element|function)',
    trigger: 'string'
  };

  /**
   * Class definition
   */

  class Tooltip extends BaseComponent {
    constructor(element, config) {
      if (typeof Popper === 'undefined') {
        throw new TypeError('Bootstrap\'s tooltips require Popper (https://popper.js.org/docs/v2/)');
      }
      super(element, config);

      // Private
      this._isEnabled = true;
      this._timeout = 0;
      this._isHovered = null;
      this._activeTrigger = {};
      this._popper = null;
      this._templateFactory = null;
      this._newContent = null;

      // Protected
      this.tip = null;
      this._setListeners();
      if (!this._config.selector) {
        this._fixTitle();
      }
    }

    // Getters
    static get Default() {
      return Default$3;
    }
    static get DefaultType() {
      return DefaultType$3;
    }
    static get NAME() {
      return NAME$4;
    }

    // Public
    enable() {
      this._isEnabled = true;
    }
    disable() {
      this._isEnabled = false;
    }
    toggleEnabled() {
      this._isEnabled = !this._isEnabled;
    }
    toggle() {
      if (!this._isEnabled) {
        return;
      }
      if (this._isShown()) {
        this._leave();
        return;
      }
      this._enter();
    }
    dispose() {
      clearTimeout(this._timeout);
      EventHandler.off(this._element.closest(SELECTOR_MODAL), EVENT_MODAL_HIDE, this._hideModalHandler);
      if (this._element.getAttribute('data-bs-original-title')) {
        this._element.setAttribute('title', this._element.getAttribute('data-bs-original-title'));
      }
      this._disposePopper();
      super.dispose();
    }
    show() {
      if (this._element.style.display === 'none') {
        throw new Error('Please use show on visible elements');
      }
      if (!(this._isWithContent() && this._isEnabled)) {
        return;
      }
      const showEvent = EventHandler.trigger(this._element, this.constructor.eventName(EVENT_SHOW$2));
      const shadowRoot = findShadowRoot(this._element);
      const isInTheDom = (shadowRoot || this._element.ownerDocument.documentElement).contains(this._element);
      if (showEvent.defaultPrevented || !isInTheDom) {
        return;
      }

      // TODO: v6 remove this or make it optional
      this._disposePopper();
      const tip = this._getTipElement();
      this._element.setAttribute('aria-describedby', tip.getAttribute('id'));
      const {
        container
      } = this._config;
      if (!this._element.ownerDocument.documentElement.contains(this.tip)) {
        container.append(tip);
        EventHandler.trigger(this._element, this.constructor.eventName(EVENT_INSERTED));
      }
      this._popper = this._createPopper(tip);
      tip.classList.add(CLASS_NAME_SHOW$2);

      // If this is a touch-enabled device we add extra
      // empty mouseover listeners to the body's immediate children;
      // only needed because of broken event delegation on iOS
      // https://www.quirksmode.org/blog/archives/2014/02/mouse_event_bub.html
      if ('ontouchstart' in document.documentElement) {
        for (const element of [].concat(...document.body.children)) {
          EventHandler.on(element, 'mouseover', noop);
        }
      }
      const complete = () => {
        EventHandler.trigger(this._element, this.constructor.eventName(EVENT_SHOWN$2));
        if (this._isHovered === false) {
          this._leave();
        }
        this._isHovered = false;
      };
      this._queueCallback(complete, this.tip, this._isAnimated());
    }
    hide() {
      if (!this._isShown()) {
        return;
      }
      const hideEvent = EventHandler.trigger(this._element, this.constructor.eventName(EVENT_HIDE$2));
      if (hideEvent.defaultPrevented) {
        return;
      }
      const tip = this._getTipElement();
      tip.classList.remove(CLASS_NAME_SHOW$2);

      // If this is a touch-enabled device we remove the extra
      // empty mouseover listeners we added for iOS support
      if ('ontouchstart' in document.documentElement) {
        for (const element of [].concat(...document.body.children)) {
          EventHandler.off(element, 'mouseover', noop);
        }
      }
      this._activeTrigger[TRIGGER_CLICK] = false;
      this._activeTrigger[TRIGGER_FOCUS] = false;
      this._activeTrigger[TRIGGER_HOVER] = false;
      this._isHovered = null; // it is a trick to support manual triggering

      const complete = () => {
        if (this._isWithActiveTrigger()) {
          return;
        }
        if (!this._isHovered) {
          this._disposePopper();
        }
        this._element.removeAttribute('aria-describedby');
        EventHandler.trigger(this._element, this.constructor.eventName(EVENT_HIDDEN$2));
      };
      this._queueCallback(complete, this.tip, this._isAnimated());
    }
    update() {
      if (this._popper) {
        this._popper.update();
      }
    }

    // Protected
    _isWithContent() {
      return Boolean(this._getTitle());
    }
    _getTipElement() {
      if (!this.tip) {
        this.tip = this._createTipElement(this._newContent || this._getContentForTemplate());
      }
      return this.tip;
    }
    _createTipElement(content) {
      const tip = this._getTemplateFactory(content).toHtml();

      // TODO: remove this check in v6
      if (!tip) {
        return null;
      }
      tip.classList.remove(CLASS_NAME_FADE$2, CLASS_NAME_SHOW$2);
      // TODO: v6 the following can be achieved with CSS only
      tip.classList.add(`bs-${this.constructor.NAME}-auto`);
      const tipId = getUID(this.constructor.NAME).toString();
      tip.setAttribute('id', tipId);
      if (this._isAnimated()) {
        tip.classList.add(CLASS_NAME_FADE$2);
      }
      return tip;
    }
    setContent(content) {
      this._newContent = content;
      if (this._isShown()) {
        this._disposePopper();
        this.show();
      }
    }
    _getTemplateFactory(content) {
      if (this._templateFactory) {
        this._templateFactory.changeContent(content);
      } else {
        this._templateFactory = new TemplateFactory({
          ...this._config,
          // the `content` var has to be after `this._config`
          // to override config.content in case of popover
          content,
          extraClass: this._resolvePossibleFunction(this._config.customClass)
        });
      }
      return this._templateFactory;
    }
    _getContentForTemplate() {
      return {
        [SELECTOR_TOOLTIP_INNER]: this._getTitle()
      };
    }
    _getTitle() {
      return this._resolvePossibleFunction(this._config.title) || this._element.getAttribute('data-bs-original-title');
    }

    // Private
    _initializeOnDelegatedTarget(event) {
      return this.constructor.getOrCreateInstance(event.delegateTarget, this._getDelegateConfig());
    }
    _isAnimated() {
      return this._config.animation || this.tip && this.tip.classList.contains(CLASS_NAME_FADE$2);
    }
    _isShown() {
      return this.tip && this.tip.classList.contains(CLASS_NAME_SHOW$2);
    }
    _createPopper(tip) {
      const placement = execute(this._config.placement, [this, tip, this._element]);
      const attachment = AttachmentMap[placement.toUpperCase()];
      return createPopper(this._element, tip, this._getPopperConfig(attachment));
    }
    _getOffset() {
      const {
        offset
      } = this._config;
      if (typeof offset === 'string') {
        return offset.split(',').map(value => Number.parseInt(value, 10));
      }
      if (typeof offset === 'function') {
        return popperData => offset(popperData, this._element);
      }
      return offset;
    }
    _resolvePossibleFunction(arg) {
      return execute(arg, [this._element, this._element]);
    }
    _getPopperConfig(attachment) {
      const defaultBsPopperConfig = {
        placement: attachment,
        modifiers: [{
          name: 'flip',
          options: {
            fallbackPlacements: this._config.fallbackPlacements
          }
        }, {
          name: 'offset',
          options: {
            offset: this._getOffset()
          }
        }, {
          name: 'preventOverflow',
          options: {
            boundary: this._config.boundary
          }
        }, {
          name: 'arrow',
          options: {
            element: `.${this.constructor.NAME}-arrow`
          }
        }, {
          name: 'preSetPlacement',
          enabled: true,
          phase: 'beforeMain',
          fn: data => {
            // Pre-set Popper's placement attribute in order to read the arrow sizes properly.
            // Otherwise, Popper mixes up the width and height dimensions since the initial arrow style is for top placement
            this._getTipElement().setAttribute('data-popper-placement', data.state.placement);
          }
        }]
      };
      return {
        ...defaultBsPopperConfig,
        ...execute(this._config.popperConfig, [undefined, defaultBsPopperConfig])
      };
    }
    _setListeners() {
      const triggers = this._config.trigger.split(' ');
      for (const trigger of triggers) {
        if (trigger === 'click') {
          EventHandler.on(this._element, this.constructor.eventName(EVENT_CLICK$1), this._config.selector, event => {
            const context = this._initializeOnDelegatedTarget(event);
            context._activeTrigger[TRIGGER_CLICK] = !(context._isShown() && context._activeTrigger[TRIGGER_CLICK]);
            context.toggle();
          });
        } else if (trigger !== TRIGGER_MANUAL) {
          const eventIn = trigger === TRIGGER_HOVER ? this.constructor.eventName(EVENT_MOUSEENTER) : this.constructor.eventName(EVENT_FOCUSIN$1);
          const eventOut = trigger === TRIGGER_HOVER ? this.constructor.eventName(EVENT_MOUSELEAVE) : this.constructor.eventName(EVENT_FOCUSOUT$1);
          EventHandler.on(this._element, eventIn, this._config.selector, event => {
            const context = this._initializeOnDelegatedTarget(event);
            context._activeTrigger[event.type === 'focusin' ? TRIGGER_FOCUS : TRIGGER_HOVER] = true;
            context._enter();
          });
          EventHandler.on(this._element, eventOut, this._config.selector, event => {
            const context = this._initializeOnDelegatedTarget(event);
            context._activeTrigger[event.type === 'focusout' ? TRIGGER_FOCUS : TRIGGER_HOVER] = context._element.contains(event.relatedTarget);
            context._leave();
          });
        }
      }
      this._hideModalHandler = () => {
        if (this._element) {
          this.hide();
        }
      };
      EventHandler.on(this._element.closest(SELECTOR_MODAL), EVENT_MODAL_HIDE, this._hideModalHandler);
    }
    _fixTitle() {
      const title = this._element.getAttribute('title');
      if (!title) {
        return;
      }
      if (!this._element.getAttribute('aria-label') && !this._element.textContent.trim()) {
        this._element.setAttribute('aria-label', title);
      }
      this._element.setAttribute('data-bs-original-title', title); // DO NOT USE IT. Is only for backwards compatibility
      this._element.removeAttribute('title');
    }
    _enter() {
      if (this._isShown() || this._isHovered) {
        this._isHovered = true;
        return;
      }
      this._isHovered = true;
      this._setTimeout(() => {
        if (this._isHovered) {
          this.show();
        }
      }, this._config.delay.show);
    }
    _leave() {
      if (this._isWithActiveTrigger()) {
        return;
      }
      this._isHovered = false;
      this._setTimeout(() => {
        if (!this._isHovered) {
          this.hide();
        }
      }, this._config.delay.hide);
    }
    _setTimeout(handler, timeout) {
      clearTimeout(this._timeout);
      this._timeout = setTimeout(handler, timeout);
    }
    _isWithActiveTrigger() {
      return Object.values(this._activeTrigger).includes(true);
    }
    _getConfig(config) {
      const dataAttributes = Manipulator.getDataAttributes(this._element);
      for (const dataAttribute of Object.keys(dataAttributes)) {
        if (DISALLOWED_ATTRIBUTES.has(dataAttribute)) {
          delete dataAttributes[dataAttribute];
        }
      }
      config = {
        ...dataAttributes,
        ...(typeof config === 'object' && config ? config : {})
      };
      config = this._mergeConfigObj(config);
      config = this._configAfterMerge(config);
      this._typeCheckConfig(config);
      return config;
    }
    _configAfterMerge(config) {
      config.container = config.container === false ? document.body : getElement(config.container);
      if (typeof config.delay === 'number') {
        config.delay = {
          show: config.delay,
          hide: config.delay
        };
      }
      if (typeof config.title === 'number') {
        config.title = config.title.toString();
      }
      if (typeof config.content === 'number') {
        config.content = config.content.toString();
      }
      return config;
    }
    _getDelegateConfig() {
      const config = {};
      for (const [key, value] of Object.entries(this._config)) {
        if (this.constructor.Default[key] !== value) {
          config[key] = value;
        }
      }
      config.selector = false;
      config.trigger = 'manual';

      // In the future can be replaced with:
      // const keysWithDifferentValues = Object.entries(this._config).filter(entry => this.constructor.Default[entry[0]] !== this._config[entry[0]])
      // `Object.fromEntries(keysWithDifferentValues)`
      return config;
    }
    _disposePopper() {
      if (this._popper) {
        this._popper.destroy();
        this._popper = null;
      }
      if (this.tip) {
        this.tip.remove();
        this.tip = null;
      }
    }

    // Static
    static jQueryInterface(config) {
      return this.each(function () {
        const data = Tooltip.getOrCreateInstance(this, config);
        if (typeof config !== 'string') {
          return;
        }
        if (typeof data[config] === 'undefined') {
          throw new TypeError(`No method named "${config}"`);
        }
        data[config]();
      });
    }
  }

  /**
   * jQuery
   */

  defineJQueryPlugin(Tooltip);

  /**
   * --------------------------------------------------------------------------
   * Bootstrap popover.js
   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
   * --------------------------------------------------------------------------
   */


  /**
   * Constants
   */

  const NAME$3 = 'popover';
  const SELECTOR_TITLE = '.popover-header';
  const SELECTOR_CONTENT = '.popover-body';
  const Default$2 = {
    ...Tooltip.Default,
    content: '',
    offset: [0, 8],
    placement: 'right',
    template: '<div class="popover" role="tooltip">' + '<div class="popover-arrow"></div>' + '<h3 class="popover-header"></h3>' + '<div class="popover-body"></div>' + '</div>',
    trigger: 'click'
  };
  const DefaultType$2 = {
    ...Tooltip.DefaultType,
    content: '(null|string|element|function)'
  };

  /**
   * Class definition
   */

  class Popover extends Tooltip {
    // Getters
    static get Default() {
      return Default$2;
    }
    static get DefaultType() {
      return DefaultType$2;
    }
    static get NAME() {
      return NAME$3;
    }

    // Overrides
    _isWithContent() {
      return this._getTitle() || this._getContent();
    }

    // Private
    _getContentForTemplate() {
      return {
        [SELECTOR_TITLE]: this._getTitle(),
        [SELECTOR_CONTENT]: this._getContent()
      };
    }
    _getContent() {
      return this._resolvePossibleFunction(this._config.content);
    }

    // Static
    static jQueryInterface(config) {
      return this.each(function () {
        const data = Popover.getOrCreateInstance(this, config);
        if (typeof config !== 'string') {
          return;
        }
        if (typeof data[config] === 'undefined') {
          throw new TypeError(`No method named "${config}"`);
        }
        data[config]();
      });
    }
  }

  /**
   * jQuery
   */

  defineJQueryPlugin(Popover);

  /**
   * --------------------------------------------------------------------------
   * Bootstrap scrollspy.js
   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
   * --------------------------------------------------------------------------
   */


  /**
   * Constants
   */

  const NAME$2 = 'scrollspy';
  const DATA_KEY$2 = 'bs.scrollspy';
  const EVENT_KEY$2 = `.${DATA_KEY$2}`;
  const DATA_API_KEY = '.data-api';
  const EVENT_ACTIVATE = `activate${EVENT_KEY$2}`;
  const EVENT_CLICK = `click${EVENT_KEY$2}`;
  const EVENT_LOAD_DATA_API$1 = `load${EVENT_KEY$2}${DATA_API_KEY}`;
  const CLASS_NAME_DROPDOWN_ITEM = 'dropdown-item';
  const CLASS_NAME_ACTIVE$1 = 'active';
  const SELECTOR_DATA_SPY = '[data-bs-spy="scroll"]';
  const SELECTOR_TARGET_LINKS = '[href]';
  const SELECTOR_NAV_LIST_GROUP = '.nav, .list-group';
  const SELECTOR_NAV_LINKS = '.nav-link';
  const SELECTOR_NAV_ITEMS = '.nav-item';
  const SELECTOR_LIST_ITEMS = '.list-group-item';
  const SELECTOR_LINK_ITEMS = `${SELECTOR_NAV_LINKS}, ${SELECTOR_NAV_ITEMS} > ${SELECTOR_NAV_LINKS}, ${SELECTOR_LIST_ITEMS}`;
  const SELECTOR_DROPDOWN = '.dropdown';
  const SELECTOR_DROPDOWN_TOGGLE$1 = '.dropdown-toggle';
  const Default$1 = {
    offset: null,
    // TODO: v6 @deprecated, keep it for backwards compatibility reasons
    rootMargin: '0px 0px -25%',
    smoothScroll: false,
    target: null,
    threshold: [0.1, 0.5, 1]
  };
  const DefaultType$1 = {
    offset: '(number|null)',
    // TODO v6 @deprecated, keep it for backwards compatibility reasons
    rootMargin: 'string',
    smoothScroll: 'boolean',
    target: 'element',
    threshold: 'array'
  };

  /**
   * Class definition
   */

  class ScrollSpy extends BaseComponent {
    constructor(element, config) {
      super(element, config);

      // this._element is the observablesContainer and config.target the menu links wrapper
      this._targetLinks = new Map();
      this._observableSections = new Map();
      this._rootElement = getComputedStyle(this._element).overflowY === 'visible' ? null : this._element;
      this._activeTarget = null;
      this._observer = null;
      this._previousScrollData = {
        visibleEntryTop: 0,
        parentScrollTop: 0
      };
      this.refresh(); // initialize
    }

    // Getters
    static get Default() {
      return Default$1;
    }
    static get DefaultType() {
      return DefaultType$1;
    }
    static get NAME() {
      return NAME$2;
    }

    // Public
    refresh() {
      this._initializeTargetsAndObservables();
      this._maybeEnableSmoothScroll();
      if (this._observer) {
        this._observer.disconnect();
      } else {
        this._observer = this._getNewObserver();
      }
      for (const section of this._observableSections.values()) {
        this._observer.observe(section);
      }
    }
    dispose() {
      this._observer.disconnect();
      super.dispose();
    }

    // Private
    _configAfterMerge(config) {
      // TODO: on v6 target should be given explicitly & remove the {target: 'ss-target'} case
      config.target = getElement(config.target) || document.body;

      // TODO: v6 Only for backwards compatibility reasons. Use rootMargin only
      config.rootMargin = config.offset ? `${config.offset}px 0px -30%` : config.rootMargin;
      if (typeof config.threshold === 'string') {
        config.threshold = config.threshold.split(',').map(value => Number.parseFloat(value));
      }
      return config;
    }
    _maybeEnableSmoothScroll() {
      if (!this._config.smoothScroll) {
        return;
      }

      // unregister any previous listeners
      EventHandler.off(this._config.target, EVENT_CLICK);
      EventHandler.on(this._config.target, EVENT_CLICK, SELECTOR_TARGET_LINKS, event => {
        const observableSection = this._observableSections.get(event.target.hash);
        if (observableSection) {
          event.preventDefault();
          const root = this._rootElement || window;
          const height = observableSection.offsetTop - this._element.offsetTop;
          if (root.scrollTo) {
            root.scrollTo({
              top: height,
              behavior: 'smooth'
            });
            return;
          }

          // Chrome 60 doesn't support `scrollTo`
          root.scrollTop = height;
        }
      });
    }
    _getNewObserver() {
      const options = {
        root: this._rootElement,
        threshold: this._config.threshold,
        rootMargin: this._config.rootMargin
      };
      return new IntersectionObserver(entries => this._observerCallback(entries), options);
    }

    // The logic of selection
    _observerCallback(entries) {
      const targetElement = entry => this._targetLinks.get(`#${entry.target.id}`);
      const activate = entry => {
        this._previousScrollData.visibleEntryTop = entry.target.offsetTop;
        this._process(targetElement(entry));
      };
      const parentScrollTop = (this._rootElement || document.documentElement).scrollTop;
      const userScrollsDown = parentScrollTop >= this._previousScrollData.parentScrollTop;
      this._previousScrollData.parentScrollTop = parentScrollTop;
      for (const entry of entries) {
        if (!entry.isIntersecting) {
          this._activeTarget = null;
          this._clearActiveClass(targetElement(entry));
          continue;
        }
        const entryIsLowerThanPrevious = entry.target.offsetTop >= this._previousScrollData.visibleEntryTop;
        // if we are scrolling down, pick the bigger offsetTop
        if (userScrollsDown && entryIsLowerThanPrevious) {
          activate(entry);
          // if parent isn't scrolled, let's keep the first visible item, breaking the iteration
          if (!parentScrollTop) {
            return;
          }
          continue;
        }

        // if we are scrolling up, pick the smallest offsetTop
        if (!userScrollsDown && !entryIsLowerThanPrevious) {
          activate(entry);
        }
      }
    }
    _initializeTargetsAndObservables() {
      this._targetLinks = new Map();
      this._observableSections = new Map();
      const targetLinks = SelectorEngine.find(SELECTOR_TARGET_LINKS, this._config.target);
      for (const anchor of targetLinks) {
        // ensure that the anchor has an id and is not disabled
        if (!anchor.hash || isDisabled(anchor)) {
          continue;
        }
        const observableSection = SelectorEngine.findOne(decodeURI(anchor.hash), this._element);

        // ensure that the observableSection exists & is visible
        if (isVisible(observableSection)) {
          this._targetLinks.set(decodeURI(anchor.hash), anchor);
          this._observableSections.set(anchor.hash, observableSection);
        }
      }
    }
    _process(target) {
      if (this._activeTarget === target) {
        return;
      }
      this._clearActiveClass(this._config.target);
      this._activeTarget = target;
      target.classList.add(CLASS_NAME_ACTIVE$1);
      this._activateParents(target);
      EventHandler.trigger(this._element, EVENT_ACTIVATE, {
        relatedTarget: target
      });
    }
    _activateParents(target) {
      // Activate dropdown parents
      if (target.classList.contains(CLASS_NAME_DROPDOWN_ITEM)) {
        SelectorEngine.findOne(SELECTOR_DROPDOWN_TOGGLE$1, target.closest(SELECTOR_DROPDOWN)).classList.add(CLASS_NAME_ACTIVE$1);
        return;
      }
      for (const listGroup of SelectorEngine.parents(target, SELECTOR_NAV_LIST_GROUP)) {
        // Set triggered links parents as active
        // With both <ul> and <nav> markup a parent is the previous sibling of any nav ancestor
        for (const item of SelectorEngine.prev(listGroup, SELECTOR_LINK_ITEMS)) {
          item.classList.add(CLASS_NAME_ACTIVE$1);
        }
      }
    }
    _clearActiveClass(parent) {
      parent.classList.remove(CLASS_NAME_ACTIVE$1);
      const activeNodes = SelectorEngine.find(`${SELECTOR_TARGET_LINKS}.${CLASS_NAME_ACTIVE$1}`, parent);
      for (const node of activeNodes) {
        node.classList.remove(CLASS_NAME_ACTIVE$1);
      }
    }

    // Static
    static jQueryInterface(config) {
      return this.each(function () {
        const data = ScrollSpy.getOrCreateInstance(this, config);
        if (typeof config !== 'string') {
          return;
        }
        if (data[config] === undefined || config.startsWith('_') || config === 'constructor') {
          throw new TypeError(`No method named "${config}"`);
        }
        data[config]();
      });
    }
  }

  /**
   * Data API implementation
   */

  EventHandler.on(window, EVENT_LOAD_DATA_API$1, () => {
    for (const spy of SelectorEngine.find(SELECTOR_DATA_SPY)) {
      ScrollSpy.getOrCreateInstance(spy);
    }
  });

  /**
   * jQuery
   */

  defineJQueryPlugin(ScrollSpy);

  /**
   * --------------------------------------------------------------------------
   * Bootstrap tab.js
   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
   * --------------------------------------------------------------------------
   */


  /**
   * Constants
   */

  const NAME$1 = 'tab';
  const DATA_KEY$1 = 'bs.tab';
  const EVENT_KEY$1 = `.${DATA_KEY$1}`;
  const EVENT_HIDE$1 = `hide${EVENT_KEY$1}`;
  const EVENT_HIDDEN$1 = `hidden${EVENT_KEY$1}`;
  const EVENT_SHOW$1 = `show${EVENT_KEY$1}`;
  const EVENT_SHOWN$1 = `shown${EVENT_KEY$1}`;
  const EVENT_CLICK_DATA_API = `click${EVENT_KEY$1}`;
  const EVENT_KEYDOWN = `keydown${EVENT_KEY$1}`;
  const EVENT_LOAD_DATA_API = `load${EVENT_KEY$1}`;
  const ARROW_LEFT_KEY = 'ArrowLeft';
  const ARROW_RIGHT_KEY = 'ArrowRight';
  const ARROW_UP_KEY = 'ArrowUp';
  const ARROW_DOWN_KEY = 'ArrowDown';
  const HOME_KEY = 'Home';
  const END_KEY = 'End';
  const CLASS_NAME_ACTIVE = 'active';
  const CLASS_NAME_FADE$1 = 'fade';
  const CLASS_NAME_SHOW$1 = 'show';
  const CLASS_DROPDOWN = 'dropdown';
  const SELECTOR_DROPDOWN_TOGGLE = '.dropdown-toggle';
  const SELECTOR_DROPDOWN_MENU = '.dropdown-menu';
  const NOT_SELECTOR_DROPDOWN_TOGGLE = `:not(${SELECTOR_DROPDOWN_TOGGLE})`;
  const SELECTOR_TAB_PANEL = '.list-group, .nav, [role="tablist"]';
  const SELECTOR_OUTER = '.nav-item, .list-group-item';
  const SELECTOR_INNER = `.nav-link${NOT_SELECTOR_DROPDOWN_TOGGLE}, .list-group-item${NOT_SELECTOR_DROPDOWN_TOGGLE}, [role="tab"]${NOT_SELECTOR_DROPDOWN_TOGGLE}`;
  const SELECTOR_DATA_TOGGLE = '[data-bs-toggle="tab"], [data-bs-toggle="pill"], [data-bs-toggle="list"]'; // TODO: could only be `tab` in v6
  const SELECTOR_INNER_ELEM = `${SELECTOR_INNER}, ${SELECTOR_DATA_TOGGLE}`;
  const SELECTOR_DATA_TOGGLE_ACTIVE = `.${CLASS_NAME_ACTIVE}[data-bs-toggle="tab"], .${CLASS_NAME_ACTIVE}[data-bs-toggle="pill"], .${CLASS_NAME_ACTIVE}[data-bs-toggle="list"]`;

  /**
   * Class definition
   */

  class Tab extends BaseComponent {
    constructor(element) {
      super(element);
      this._parent = this._element.closest(SELECTOR_TAB_PANEL);
      if (!this._parent) {
        return;
        // TODO: should throw exception in v6
        // throw new TypeError(`${element.outerHTML} has not a valid parent ${SELECTOR_INNER_ELEM}`)
      }

      // Set up initial aria attributes
      this._setInitialAttributes(this._parent, this._getChildren());
      EventHandler.on(this._element, EVENT_KEYDOWN, event => this._keydown(event));
    }

    // Getters
    static get NAME() {
      return NAME$1;
    }

    // Public
    show() {
      // Shows this elem and deactivate the active sibling if exists
      const innerElem = this._element;
      if (this._elemIsActive(innerElem)) {
        return;
      }

      // Search for active tab on same parent to deactivate it
      const active = this._getActiveElem();
      const hideEvent = active ? EventHandler.trigger(active, EVENT_HIDE$1, {
        relatedTarget: innerElem
      }) : null;
      const showEvent = EventHandler.trigger(innerElem, EVENT_SHOW$1, {
        relatedTarget: active
      });
      if (showEvent.defaultPrevented || hideEvent && hideEvent.defaultPrevented) {
        return;
      }
      this._deactivate(active, innerElem);
      this._activate(innerElem, active);
    }

    // Private
    _activate(element, relatedElem) {
      if (!element) {
        return;
      }
      element.classList.add(CLASS_NAME_ACTIVE);
      this._activate(SelectorEngine.getElementFromSelector(element)); // Search and activate/show the proper section

      const complete = () => {
        if (element.getAttribute('role') !== 'tab') {
          element.classList.add(CLASS_NAME_SHOW$1);
          return;
        }
        element.removeAttribute('tabindex');
        element.setAttribute('aria-selected', true);
        this._toggleDropDown(element, true);
        EventHandler.trigger(element, EVENT_SHOWN$1, {
          relatedTarget: relatedElem
        });
      };
      this._queueCallback(complete, element, element.classList.contains(CLASS_NAME_FADE$1));
    }
    _deactivate(element, relatedElem) {
      if (!element) {
        return;
      }
      element.classList.remove(CLASS_NAME_ACTIVE);
      element.blur();
      this._deactivate(SelectorEngine.getElementFromSelector(element)); // Search and deactivate the shown section too

      const complete = () => {
        if (element.getAttribute('role') !== 'tab') {
          element.classList.remove(CLASS_NAME_SHOW$1);
          return;
        }
        element.setAttribute('aria-selected', false);
        element.setAttribute('tabindex', '-1');
        this._toggleDropDown(element, false);
        EventHandler.trigger(element, EVENT_HIDDEN$1, {
          relatedTarget: relatedElem
        });
      };
      this._queueCallback(complete, element, element.classList.contains(CLASS_NAME_FADE$1));
    }
    _keydown(event) {
      if (![ARROW_LEFT_KEY, ARROW_RIGHT_KEY, ARROW_UP_KEY, ARROW_DOWN_KEY, HOME_KEY, END_KEY].includes(event.key)) {
        return;
      }
      event.stopPropagation(); // stopPropagation/preventDefault both added to support up/down keys without scrolling the page
      event.preventDefault();
      const children = this._getChildren().filter(element => !isDisabled(element));
      let nextActiveElement;
      if ([HOME_KEY, END_KEY].includes(event.key)) {
        nextActiveElement = children[event.key === HOME_KEY ? 0 : children.length - 1];
      } else {
        const isNext = [ARROW_RIGHT_KEY, ARROW_DOWN_KEY].includes(event.key);
        nextActiveElement = getNextActiveElement(children, event.target, isNext, true);
      }
      if (nextActiveElement) {
        nextActiveElement.focus({
          preventScroll: true
        });
        Tab.getOrCreateInstance(nextActiveElement).show();
      }
    }
    _getChildren() {
      // collection of inner elements
      return SelectorEngine.find(SELECTOR_INNER_ELEM, this._parent);
    }
    _getActiveElem() {
      return this._getChildren().find(child => this._elemIsActive(child)) || null;
    }
    _setInitialAttributes(parent, children) {
      this._setAttributeIfNotExists(parent, 'role', 'tablist');
      for (const child of children) {
        this._setInitialAttributesOnChild(child);
      }
    }
    _setInitialAttributesOnChild(child) {
      child = this._getInnerElement(child);
      const isActive = this._elemIsActive(child);
      const outerElem = this._getOuterElement(child);
      child.setAttribute('aria-selected', isActive);
      if (outerElem !== child) {
        this._setAttributeIfNotExists(outerElem, 'role', 'presentation');
      }
      if (!isActive) {
        child.setAttribute('tabindex', '-1');
      }
      this._setAttributeIfNotExists(child, 'role', 'tab');

      // set attributes to the related panel too
      this._setInitialAttributesOnTargetPanel(child);
    }
    _setInitialAttributesOnTargetPanel(child) {
      const target = SelectorEngine.getElementFromSelector(child);
      if (!target) {
        return;
      }
      this._setAttributeIfNotExists(target, 'role', 'tabpanel');
      if (child.id) {
        this._setAttributeIfNotExists(target, 'aria-labelledby', `${child.id}`);
      }
    }
    _toggleDropDown(element, open) {
      const outerElem = this._getOuterElement(element);
      if (!outerElem.classList.contains(CLASS_DROPDOWN)) {
        return;
      }
      const toggle = (selector, className) => {
        const element = SelectorEngine.findOne(selector, outerElem);
        if (element) {
          element.classList.toggle(className, open);
        }
      };
      toggle(SELECTOR_DROPDOWN_TOGGLE, CLASS_NAME_ACTIVE);
      toggle(SELECTOR_DROPDOWN_MENU, CLASS_NAME_SHOW$1);
      outerElem.setAttribute('aria-expanded', open);
    }
    _setAttributeIfNotExists(element, attribute, value) {
      if (!element.hasAttribute(attribute)) {
        element.setAttribute(attribute, value);
      }
    }
    _elemIsActive(elem) {
      return elem.classList.contains(CLASS_NAME_ACTIVE);
    }

    // Try to get the inner element (usually the .nav-link)
    _getInnerElement(elem) {
      return elem.matches(SELECTOR_INNER_ELEM) ? elem : SelectorEngine.findOne(SELECTOR_INNER_ELEM, elem);
    }

    // Try to get the outer element (usually the .nav-item)
    _getOuterElement(elem) {
      return elem.closest(SELECTOR_OUTER) || elem;
    }

    // Static
    static jQueryInterface(config) {
      return this.each(function () {
        const data = Tab.getOrCreateInstance(this);
        if (typeof config !== 'string') {
          return;
        }
        if (data[config] === undefined || config.startsWith('_') || config === 'constructor') {
          throw new TypeError(`No method named "${config}"`);
        }
        data[config]();
      });
    }
  }

  /**
   * Data API implementation
   */

  EventHandler.on(document, EVENT_CLICK_DATA_API, SELECTOR_DATA_TOGGLE, function (event) {
    if (['A', 'AREA'].includes(this.tagName)) {
      event.preventDefault();
    }
    if (isDisabled(this)) {
      return;
    }
    Tab.getOrCreateInstance(this).show();
  });

  /**
   * Initialize on focus
   */
  EventHandler.on(window, EVENT_LOAD_DATA_API, () => {
    for (const element of SelectorEngine.find(SELECTOR_DATA_TOGGLE_ACTIVE)) {
      Tab.getOrCreateInstance(element);
    }
  });
  /**
   * jQuery
   */

  defineJQueryPlugin(Tab);

  /**
   * --------------------------------------------------------------------------
   * Bootstrap toast.js
   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
   * --------------------------------------------------------------------------
   */


  /**
   * Constants
   */

  const NAME = 'toast';
  const DATA_KEY = 'bs.toast';
  const EVENT_KEY = `.${DATA_KEY}`;
  const EVENT_MOUSEOVER = `mouseover${EVENT_KEY}`;
  const EVENT_MOUSEOUT = `mouseout${EVENT_KEY}`;
  const EVENT_FOCUSIN = `focusin${EVENT_KEY}`;
  const EVENT_FOCUSOUT = `focusout${EVENT_KEY}`;
  const EVENT_HIDE = `hide${EVENT_KEY}`;
  const EVENT_HIDDEN = `hidden${EVENT_KEY}`;
  const EVENT_SHOW = `show${EVENT_KEY}`;
  const EVENT_SHOWN = `shown${EVENT_KEY}`;
  const CLASS_NAME_FADE = 'fade';
  const CLASS_NAME_HIDE = 'hide'; // @deprecated - kept here only for backwards compatibility
  const CLASS_NAME_SHOW = 'show';
  const CLASS_NAME_SHOWING = 'showing';
  const DefaultType = {
    animation: 'boolean',
    autohide: 'boolean',
    delay: 'number'
  };
  const Default = {
    animation: true,
    autohide: true,
    delay: 5000
  };

  /**
   * Class definition
   */

  class Toast extends BaseComponent {
    constructor(element, config) {
      super(element, config);
      this._timeout = null;
      this._hasMouseInteraction = false;
      this._hasKeyboardInteraction = false;
      this._setListeners();
    }

    // Getters
    static get Default() {
      return Default;
    }
    static get DefaultType() {
      return DefaultType;
    }
    static get NAME() {
      return NAME;
    }

    // Public
    show() {
      const showEvent = EventHandler.trigger(this._element, EVENT_SHOW);
      if (showEvent.defaultPrevented) {
        return;
      }
      this._clearTimeout();
      if (this._config.animation) {
        this._element.classList.add(CLASS_NAME_FADE);
      }
      const complete = () => {
        this._element.classList.remove(CLASS_NAME_SHOWING);
        EventHandler.trigger(this._element, EVENT_SHOWN);
        this._maybeScheduleHide();
      };
      this._element.classList.remove(CLASS_NAME_HIDE); // @deprecated
      reflow(this._element);
      this._element.classList.add(CLASS_NAME_SHOW, CLASS_NAME_SHOWING);
      this._queueCallback(complete, this._element, this._config.animation);
    }
    hide() {
      if (!this.isShown()) {
        return;
      }
      const hideEvent = EventHandler.trigger(this._element, EVENT_HIDE);
      if (hideEvent.defaultPrevented) {
        return;
      }
      const complete = () => {
        this._element.classList.add(CLASS_NAME_HIDE); // @deprecated
        this._element.classList.remove(CLASS_NAME_SHOWING, CLASS_NAME_SHOW);
        EventHandler.trigger(this._element, EVENT_HIDDEN);
      };
      this._element.classList.add(CLASS_NAME_SHOWING);
      this._queueCallback(complete, this._element, this._config.animation);
    }
    dispose() {
      this._clearTimeout();
      if (this.isShown()) {
        this._element.classList.remove(CLASS_NAME_SHOW);
      }
      super.dispose();
    }
    isShown() {
      return this._element.classList.contains(CLASS_NAME_SHOW);
    }

    // Private
    _maybeScheduleHide() {
      if (!this._config.autohide) {
        return;
      }
      if (this._hasMouseInteraction || this._hasKeyboardInteraction) {
        return;
      }
      this._timeout = setTimeout(() => {
        this.hide();
      }, this._config.delay);
    }
    _onInteraction(event, isInteracting) {
      switch (event.type) {
        case 'mouseover':
        case 'mouseout':
          {
            this._hasMouseInteraction = isInteracting;
            break;
          }
        case 'focusin':
        case 'focusout':
          {
            this._hasKeyboardInteraction = isInteracting;
            break;
          }
      }
      if (isInteracting) {
        this._clearTimeout();
        return;
      }
      const nextElement = event.relatedTarget;
      if (this._element === nextElement || this._element.contains(nextElement)) {
        return;
      }
      this._maybeScheduleHide();
    }
    _setListeners() {
      EventHandler.on(this._element, EVENT_MOUSEOVER, event => this._onInteraction(event, true));
      EventHandler.on(this._element, EVENT_MOUSEOUT, event => this._onInteraction(event, false));
      EventHandler.on(this._element, EVENT_FOCUSIN, event => this._onInteraction(event, true));
      EventHandler.on(this._element, EVENT_FOCUSOUT, event => this._onInteraction(event, false));
    }
    _clearTimeout() {
      clearTimeout(this._timeout);
      this._timeout = null;
    }

    // Static
    static jQueryInterface(config) {
      return this.each(function () {
        const data = Toast.getOrCreateInstance(this, config);
        if (typeof config === 'string') {
          if (typeof data[config] === 'undefined') {
            throw new TypeError(`No method named "${config}"`);
          }
          data[config](this);
        }
      });
    }
  }

  /**
   * Data API implementation
   */

  enableDismissTrigger(Toast);

  /**
   * jQuery
   */

  defineJQueryPlugin(Toast);

  /**
   * --------------------------------------------------------------------------
   * Bootstrap index.umd.js
   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
   * --------------------------------------------------------------------------
   */

  const index_umd = {
    Alert,
    Button,
    Carousel,
    Collapse,
    Dropdown,
    Modal,
    Offcanvas,
    Popover,
    ScrollSpy,
    Tab,
    Toast,
    Tooltip
  };

  return index_umd;

}));
//# sourceMappingURL=bootstrap.bundle.js.map

/*! =======================================================
                      VERSION  10.6.2              
========================================================= */
"use strict";

var _typeof =
  typeof Symbol === "function" && typeof Symbol.iterator === "symbol"
    ? function (obj) {
        return typeof obj;
      }
    : function (obj) {
        return obj &&
          typeof Symbol === "function" &&
          obj.constructor === Symbol &&
          obj !== Symbol.prototype
          ? "symbol"
          : typeof obj;
      };

/*! =========================================================
 * bootstrap-slider.js
 *
 * Maintainers:
 *		Kyle Kemp
 *			- Twitter: @seiyria
 *			- Github:  seiyria
 *		Rohit Kalkur
 *			- Twitter: @Rovolutionary
 *			- Github:  rovolution
 *
 * =========================================================
 *
 * bootstrap-slider is released under the MIT License
 * Copyright (c) 2019 Kyle Kemp, Rohit Kalkur, and contributors
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following
 * conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
 * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 *
 * ========================================================= */

/**
 * Bridget makes jQuery widgets
 * v1.0.1
 * MIT license
 */
var windowIsDefined =
  (typeof window === "undefined" ? "undefined" : _typeof(window)) === "object";

(function (factory) {
  if (typeof define === "function" && define.amd) {
    define(["jquery"], factory);
  } else if (
    (typeof module === "undefined" ? "undefined" : _typeof(module)) ===
      "object" &&
    module.exports
  ) {
    var jQuery;
    try {
      jQuery = require("jquery");
    } catch (err) {
      jQuery = null;
    }
    module.exports = factory(jQuery);
  } else if (window) {
    window.Slider = factory(window.jQuery);
  }
})(function ($) {
  // Constants
  var NAMESPACE_MAIN = "slider";
  var NAMESPACE_ALTERNATE = "bootstrapSlider";

  // Polyfill console methods
  if (windowIsDefined && !window.console) {
    window.console = {};
  }
  if (windowIsDefined && !window.console.log) {
    window.console.log = function () {};
  }
  if (windowIsDefined && !window.console.warn) {
    window.console.warn = function () {};
  }

  // Reference to Slider constructor
  var Slider;

  (function ($) {
    "use strict";

    // -------------------------- utils -------------------------- //

    var slice = Array.prototype.slice;

    function noop() {}

    // -------------------------- definition -------------------------- //

    function defineBridget($) {
      // bail if no jQuery
      if (!$) {
        return;
      }

      // -------------------------- addOptionMethod -------------------------- //

      /**
       * adds option method -> $().plugin('option', {...})
       * @param {Function} PluginClass - constructor class
       */
      function addOptionMethod(PluginClass) {
        // don't overwrite original option method
        if (PluginClass.prototype.option) {
          return;
        }

        // option setter
        PluginClass.prototype.option = function (opts) {
          // bail out if not an object
          if (!$.isPlainObject(opts)) {
            return;
          }
          this.options = $.extend(true, this.options, opts);
        };
      }

      // -------------------------- plugin bridge -------------------------- //

      // helper function for logging errors
      // $.error breaks jQuery chaining
      var logError =
        typeof console === "undefined"
          ? noop
          : function (message) {
              console.error(message);
            };

      /**
       * jQuery plugin bridge, access methods like $elem.plugin('method')
       * @param {String} namespace - plugin name
       * @param {Function} PluginClass - constructor class
       */
      function bridge(namespace, PluginClass) {
        // add to jQuery fn namespace
        $.fn[namespace] = function (options) {
          if (typeof options === "string") {
            // call plugin method when first argument is a string
            // get arguments for method
            var args = slice.call(arguments, 1);

            for (var i = 0, len = this.length; i < len; i++) {
              var elem = this[i];
              var instance = $.data(elem, namespace);
              if (!instance) {
                logError(
                  "cannot call methods on " +
                    namespace +
                    " prior to initialization; " +
                    "attempted to call '" +
                    options +
                    "'"
                );
                continue;
              }
              if (
                !$.isFunction(instance[options]) ||
                options.charAt(0) === "_"
              ) {
                logError(
                  "no such method '" +
                    options +
                    "' for " +
                    namespace +
                    " instance"
                );
                continue;
              }

              // trigger method with arguments
              var returnValue = instance[options].apply(instance, args);

              // break look and return first value if provided
              if (returnValue !== undefined && returnValue !== instance) {
                return returnValue;
              }
            }
            // return this if no return value
            return this;
          } else {
            var objects = this.map(function () {
              var instance = $.data(this, namespace);
              if (instance) {
                // apply options & init
                instance.option(options);
                instance._init();
              } else {
                // initialize new instance
                instance = new PluginClass(this, options);
                $.data(this, namespace, instance);
              }
              return $(this);
            });

            if (objects.length === 1) {
              return objects[0];
            }
            return objects;
          }
        };
      }

      // -------------------------- bridget -------------------------- //

      /**
       * converts a Prototypical class into a proper jQuery plugin
       *   the class must have a ._init method
       * @param {String} namespace - plugin name, used in $().pluginName
       * @param {Function} PluginClass - constructor class
       */
      $.bridget = function (namespace, PluginClass) {
        addOptionMethod(PluginClass);
        bridge(namespace, PluginClass);
      };

      return $.bridget;
    }

    // get jquery from browser global
    defineBridget($);
  })($);

  /*************************************************
 			BOOTSTRAP-SLIDER SOURCE CODE
 	**************************************************/

  (function ($) {
    var autoRegisterNamespace = void 0;

    var ErrorMsgs = {
      formatInvalidInputErrorMsg: function formatInvalidInputErrorMsg(input) {
        return "Invalid input value '" + input + "' passed in";
      },
      callingContextNotSliderInstance:
        "Calling context element does not have instance of Slider bound to it. Check your code to make sure the JQuery object returned from the call to the slider() initializer is calling the method",
    };

    var SliderScale = {
      linear: {
        getValue: function getValue(value, options) {
          if (value < options.min) {
            return options.min;
          } else if (value > options.max) {
            return options.max;
          } else {
            return value;
          }
        },
        toValue: function toValue(percentage) {
          var rawValue =
            (percentage / 100) * (this.options.max - this.options.min);
          var shouldAdjustWithBase = true;
          if (this.options.ticks_positions.length > 0) {
            var minv,
              maxv,
              minp,
              maxp = 0;
            for (var i = 1; i < this.options.ticks_positions.length; i++) {
              if (percentage <= this.options.ticks_positions[i]) {
                minv = this.options.ticks[i - 1];
                minp = this.options.ticks_positions[i - 1];
                maxv = this.options.ticks[i];
                maxp = this.options.ticks_positions[i];

                break;
              }
            }
            var partialPercentage = (percentage - minp) / (maxp - minp);
            rawValue = minv + partialPercentage * (maxv - minv);
            shouldAdjustWithBase = false;
          }

          var adjustment = shouldAdjustWithBase ? this.options.min : 0;
          var value =
            adjustment +
            Math.round(rawValue / this.options.step) * this.options.step;
          return SliderScale.linear.getValue(value, this.options);
        },
        toPercentage: function toPercentage(value) {
          if (this.options.max === this.options.min) {
            return 0;
          }

          if (this.options.ticks_positions.length > 0) {
            var minv,
              maxv,
              minp,
              maxp = 0;
            for (var i = 0; i < this.options.ticks.length; i++) {
              if (value <= this.options.ticks[i]) {
                minv = i > 0 ? this.options.ticks[i - 1] : 0;
                minp = i > 0 ? this.options.ticks_positions[i - 1] : 0;
                maxv = this.options.ticks[i];
                maxp = this.options.ticks_positions[i];

                break;
              }
            }
            if (i > 0) {
              var partialPercentage = (value - minv) / (maxv - minv);
              return minp + partialPercentage * (maxp - minp);
            }
          }

          return (
            (100 * (value - this.options.min)) /
            (this.options.max - this.options.min)
          );
        },
      },

      logarithmic: {
        /* Based on http://stackoverflow.com/questions/846221/logarithmic-slider */
        toValue: function toValue(percentage) {
          var offset = 1 - this.options.min;
          var min = Math.log(this.options.min + offset);
          var max = Math.log(this.options.max + offset);
          var value = Math.exp(min + ((max - min) * percentage) / 100) - offset;
          if (Math.round(value) === max) {
            return max;
          }
          value =
            this.options.min +
            Math.round((value - this.options.min) / this.options.step) *
              this.options.step;
          /* Rounding to the nearest step could exceed the min or
           * max, so clip to those values. */
          return SliderScale.linear.getValue(value, this.options);
        },
        toPercentage: function toPercentage(value) {
          if (this.options.max === this.options.min) {
            return 0;
          } else {
            var offset = 1 - this.options.min;
            var max = Math.log(this.options.max + offset);
            var min = Math.log(this.options.min + offset);
            var v = Math.log(value + offset);
            return (100 * (v - min)) / (max - min);
          }
        },
      },
    };

    /*************************************************
  						CONSTRUCTOR
  	**************************************************/
    Slider = function Slider(element, options) {
      createNewSlider.call(this, element, options);
      return this;
    };

    function createNewSlider(element, options) {
      /*
   	The internal state object is used to store data about the current 'state' of slider.
   	This includes values such as the `value`, `enabled`, etc...
   */
      this._state = {
        value: null,
        enabled: null,
        offset: null,
        size: null,
        percentage: null,
        inDrag: false,
        over: false,
        tickIndex: null,
      };

      // The objects used to store the reference to the tick methods if ticks_tooltip is on
      this.ticksCallbackMap = {};
      this.handleCallbackMap = {};

      if (typeof element === "string") {
        this.element = document.querySelector(element);
      } else if (element instanceof HTMLElement) {
        this.element = element;
      }

      /*************************************************
   					Process Options
   	**************************************************/
      options = options ? options : {};
      var optionTypes = Object.keys(this.defaultOptions);

      var isMinSet = options.hasOwnProperty("min");
      var isMaxSet = options.hasOwnProperty("max");

      for (var i = 0; i < optionTypes.length; i++) {
        var optName = optionTypes[i];

        // First check if an option was passed in via the constructor
        var val = options[optName];
        // If no data attrib, then check data atrributes
        val =
          typeof val !== "undefined"
            ? val
            : getDataAttrib(this.element, optName);
        // Finally, if nothing was specified, use the defaults
        val = val !== null ? val : this.defaultOptions[optName];

        // Set all options on the instance of the Slider
        if (!this.options) {
          this.options = {};
        }
        this.options[optName] = val;
      }

      this.ticksAreValid =
        Array.isArray(this.options.ticks) && this.options.ticks.length > 0;

      // Lock to ticks only when ticks[] is defined and set
      if (!this.ticksAreValid) {
        this.options.lock_to_ticks = false;
      }

      // Check options.rtl
      if (this.options.rtl === "auto") {
        var computedStyle = window.getComputedStyle(this.element);
        if (computedStyle != null) {
          this.options.rtl = computedStyle.direction === "rtl";
        } else {
          // Fix for Firefox bug in versions less than 62:
          // https://bugzilla.mozilla.org/show_bug.cgi?id=548397
          // https://bugzilla.mozilla.org/show_bug.cgi?id=1467722
          this.options.rtl = this.element.style.direction === "rtl";
        }
      }

      /*
   	Validate `tooltip_position` against 'orientation`
   	- if `tooltip_position` is incompatible with orientation, swith it to a default compatible with specified `orientation`
   		-- default for "vertical" -> "right", "left" if rtl
   		-- default for "horizontal" -> "top"
   */
      if (
        this.options.orientation === "vertical" &&
        (this.options.tooltip_position === "top" ||
          this.options.tooltip_position === "bottom")
      ) {
        if (this.options.rtl) {
          this.options.tooltip_position = "left";
        } else {
          this.options.tooltip_position = "right";
        }
      } else if (
        this.options.orientation === "horizontal" &&
        (this.options.tooltip_position === "left" ||
          this.options.tooltip_position === "right")
      ) {
        this.options.tooltip_position = "top";
      }

      function getDataAttrib(element, optName) {
        var dataName = "data-slider-" + optName.replace(/_/g, "-");
        var dataValString = element.getAttribute(dataName);

        try {
          return JSON.parse(dataValString);
        } catch (err) {
          return dataValString;
        }
      }

      /*************************************************
   					Create Markup
   	**************************************************/

      var origWidth = this.element.style.width;
      var updateSlider = false;
      var parent = this.element.parentNode;
      var sliderTrackSelection;
      var sliderTrackLow, sliderTrackHigh;
      var sliderMinHandle;
      var sliderMaxHandle;

      if (this.sliderElem) {
        updateSlider = true;
      } else {
        /* Create elements needed for slider */
        this.sliderElem = document.createElement("div");
        this.sliderElem.className = "slider";

        /* Create slider track elements */
        var sliderTrack = document.createElement("div");
        sliderTrack.className = "slider-track";

        sliderTrackLow = document.createElement("div");
        sliderTrackLow.className = "slider-track-low";

        sliderTrackSelection = document.createElement("div");
        sliderTrackSelection.className = "slider-selection";

        sliderTrackHigh = document.createElement("div");
        sliderTrackHigh.className = "slider-track-high";

        sliderMinHandle = document.createElement("div");
        sliderMinHandle.className = "slider-handle min-slider-handle";
        sliderMinHandle.setAttribute("role", "slider");
        sliderMinHandle.setAttribute("aria-valuemin", this.options.min);
        sliderMinHandle.setAttribute("aria-valuemax", this.options.max);

        sliderMaxHandle = document.createElement("div");
        sliderMaxHandle.className = "slider-handle max-slider-handle";
        sliderMaxHandle.setAttribute("role", "slider");
        sliderMaxHandle.setAttribute("aria-valuemin", this.options.min);
        sliderMaxHandle.setAttribute("aria-valuemax", this.options.max);

        sliderTrack.appendChild(sliderTrackLow);
        sliderTrack.appendChild(sliderTrackSelection);
        sliderTrack.appendChild(sliderTrackHigh);

        /* Create highlight range elements */
        this.rangeHighlightElements = [];
        var rangeHighlightsOpts = this.options.rangeHighlights;
        if (
          Array.isArray(rangeHighlightsOpts) &&
          rangeHighlightsOpts.length > 0
        ) {
          for (var j = 0; j < rangeHighlightsOpts.length; j++) {
            var rangeHighlightElement = document.createElement("div");
            var customClassString = rangeHighlightsOpts[j].class || "";
            rangeHighlightElement.className =
              "slider-rangeHighlight slider-selection " + customClassString;
            this.rangeHighlightElements.push(rangeHighlightElement);
            sliderTrack.appendChild(rangeHighlightElement);
          }
        }

        /* Add aria-labelledby to handle's */
        var isLabelledbyArray = Array.isArray(this.options.labelledby);
        if (isLabelledbyArray && this.options.labelledby[0]) {
          sliderMinHandle.setAttribute(
            "aria-labelledby",
            this.options.labelledby[0]
          );
        }
        if (isLabelledbyArray && this.options.labelledby[1]) {
          sliderMaxHandle.setAttribute(
            "aria-labelledby",
            this.options.labelledby[1]
          );
        }
        if (!isLabelledbyArray && this.options.labelledby) {
          sliderMinHandle.setAttribute(
            "aria-labelledby",
            this.options.labelledby
          );
          sliderMaxHandle.setAttribute(
            "aria-labelledby",
            this.options.labelledby
          );
        }

        /* Create ticks */
        this.ticks = [];
        if (
          Array.isArray(this.options.ticks) &&
          this.options.ticks.length > 0
        ) {
          this.ticksContainer = document.createElement("div");
          this.ticksContainer.className = "slider-tick-container";

          for (i = 0; i < this.options.ticks.length; i++) {
            var tick = document.createElement("div");
            tick.className = "slider-tick";
            if (this.options.ticks_tooltip) {
              var tickListenerReference = this._addTickListener();
              var enterCallback = tickListenerReference.addMouseEnter(
                this,
                tick,
                i
              );
              var leaveCallback = tickListenerReference.addMouseLeave(
                this,
                tick
              );

              this.ticksCallbackMap[i] = {
                mouseEnter: enterCallback,
                mouseLeave: leaveCallback,
              };
            }
            this.ticks.push(tick);
            this.ticksContainer.appendChild(tick);
          }

          sliderTrackSelection.className += " tick-slider-selection";
        }

        this.tickLabels = [];
        if (
          Array.isArray(this.options.ticks_labels) &&
          this.options.ticks_labels.length > 0
        ) {
          this.tickLabelContainer = document.createElement("div");
          this.tickLabelContainer.className = "slider-tick-label-container";

          for (i = 0; i < this.options.ticks_labels.length; i++) {
            var label = document.createElement("div");
            var noTickPositionsSpecified =
              this.options.ticks_positions.length === 0;
            var tickLabelsIndex =
              this.options.reversed && noTickPositionsSpecified
                ? this.options.ticks_labels.length - (i + 1)
                : i;
            label.className = "slider-tick-label";
            label.innerHTML = this.options.ticks_labels[tickLabelsIndex];

            this.tickLabels.push(label);
            this.tickLabelContainer.appendChild(label);
          }
        }

        var createAndAppendTooltipSubElements = function createAndAppendTooltipSubElements(
          tooltipElem
        ) {
          var arrow = document.createElement("div");
          arrow.className = "datooltip-arrow";

          var inner = document.createElement("div");
          inner.className = "datooltip-inner";

          tooltipElem.appendChild(arrow);
          tooltipElem.appendChild(inner);
        };

        /* Create tooltip elements */
        var sliderTooltip = document.createElement("div");
        sliderTooltip.className = "datooltip datooltip-main";
        sliderTooltip.setAttribute("role", "presentation");
        createAndAppendTooltipSubElements(sliderTooltip);

        var sliderTooltipMin = document.createElement("div");
        sliderTooltipMin.className = "datooltip datooltip-min";
        sliderTooltipMin.setAttribute("role", "presentation");
        createAndAppendTooltipSubElements(sliderTooltipMin);

        var sliderTooltipMax = document.createElement("div");
        sliderTooltipMax.className = "datooltip datooltip-max";
        sliderTooltipMax.setAttribute("role", "presentation");
        createAndAppendTooltipSubElements(sliderTooltipMax);

        /* Append components to sliderElem */
        this.sliderElem.appendChild(sliderTrack);
        this.sliderElem.appendChild(sliderTooltip);
        this.sliderElem.appendChild(sliderTooltipMin);
        this.sliderElem.appendChild(sliderTooltipMax);

        if (this.tickLabelContainer) {
          this.sliderElem.appendChild(this.tickLabelContainer);
        }
        if (this.ticksContainer) {
          this.sliderElem.appendChild(this.ticksContainer);
        }

        this.sliderElem.appendChild(sliderMinHandle);
        this.sliderElem.appendChild(sliderMaxHandle);

        /* Append slider element to parent container, right before the original <input> element */
        parent.insertBefore(this.sliderElem, this.element);

        /* Hide original <input> element */
        this.element.style.display = "none";
      }
      /* If JQuery exists, cache JQ references */
      if ($) {
        this.$element = $(this.element);
        this.$sliderElem = $(this.sliderElem);
      }

      /*************************************************
   						Setup
   	**************************************************/
      this.eventToCallbackMap = {};
      this.sliderElem.id = this.options.id;

      this.touchCapable =
        "ontouchstart" in window ||
        (window.DocumentTouch && document instanceof window.DocumentTouch);

      this.touchX = 0;
      this.touchY = 0;

      this.tooltip = this.sliderElem.querySelector(".datooltip-main");
      this.tooltipInner = this.tooltip.querySelector(".datooltip-inner");

      this.tooltip_min = this.sliderElem.querySelector(".datooltip-min");
      this.tooltipInner_min = this.tooltip_min.querySelector(
        ".datooltip-inner"
      );

      this.tooltip_max = this.sliderElem.querySelector(".datooltip-max");
      this.tooltipInner_max = this.tooltip_max.querySelector(
        ".datooltip-inner"
      );

      if (SliderScale[this.options.scale]) {
        this.options.scale = SliderScale[this.options.scale];
      }

      if (updateSlider === true) {
        // Reset classes
        this._removeClass(this.sliderElem, "slider-horizontal");
        this._removeClass(this.sliderElem, "slider-vertical");
        this._removeClass(this.sliderElem, "slider-rtl");
        this._removeClass(this.tooltip, "hide");
        this._removeClass(this.tooltip_min, "hide");
        this._removeClass(this.tooltip_max, "hide");

        // Undo existing inline styles for track
        ["left", "right", "top", "width", "height"].forEach(function (prop) {
          this._removeProperty(this.trackLow, prop);
          this._removeProperty(this.trackSelection, prop);
          this._removeProperty(this.trackHigh, prop);
        }, this);

        // Undo inline styles on handles
        [this.handle1, this.handle2].forEach(function (handle) {
          this._removeProperty(handle, "left");
          this._removeProperty(handle, "right");
          this._removeProperty(handle, "top");
        }, this);

        // Undo inline styles and classes on tooltips
        [this.tooltip, this.tooltip_min, this.tooltip_max].forEach(function (
          tooltip
        ) {
          this._removeProperty(tooltip, "left");
          this._removeProperty(tooltip, "right");
          this._removeProperty(tooltip, "top");

          this._removeClass(tooltip, "right");
          this._removeClass(tooltip, "left");
          this._removeClass(tooltip, "top");
        },
        this);
      }

      if (this.options.orientation === "vertical") {
        this._addClass(this.sliderElem, "slider-vertical");
        this.stylePos = "top";
        this.mousePos = "pageY";
        this.sizePos = "offsetHeight";
      } else {
        this._addClass(this.sliderElem, "slider-horizontal");
        this.sliderElem.style.width = origWidth;
        this.options.orientation = "horizontal";
        if (this.options.rtl) {
          this.stylePos = "right";
        } else {
          this.stylePos = "left";
        }
        this.mousePos = "clientX";
        this.sizePos = "offsetWidth";
      }
      // specific rtl class
      if (this.options.rtl) {
        this._addClass(this.sliderElem, "slider-rtl");
      }
      this._setTooltipPosition();
      /* In case ticks are specified, overwrite the min and max bounds */
      if (Array.isArray(this.options.ticks) && this.options.ticks.length > 0) {
        if (!isMaxSet) {
          this.options.max = Math.max.apply(Math, this.options.ticks);
        }
        if (!isMinSet) {
          this.options.min = Math.min.apply(Math, this.options.ticks);
        }
      }

      if (Array.isArray(this.options.value)) {
        this.options.range = true;
        this._state.value = this.options.value;
      } else if (this.options.range) {
        // User wants a range, but value is not an array
        this._state.value = [this.options.value, this.options.max];
      } else {
        this._state.value = this.options.value;
      }

      this.trackLow = sliderTrackLow || this.trackLow;
      this.trackSelection = sliderTrackSelection || this.trackSelection;
      this.trackHigh = sliderTrackHigh || this.trackHigh;

      if (this.options.selection === "none") {
        this._addClass(this.trackLow, "hide");
        this._addClass(this.trackSelection, "hide");
        this._addClass(this.trackHigh, "hide");
      } else if (
        this.options.selection === "after" ||
        this.options.selection === "before"
      ) {
        this._removeClass(this.trackLow, "hide");
        this._removeClass(this.trackSelection, "hide");
        this._removeClass(this.trackHigh, "hide");
      }

      this.handle1 = sliderMinHandle || this.handle1;
      this.handle2 = sliderMaxHandle || this.handle2;

      if (updateSlider === true) {
        // Reset classes
        this._removeClass(this.handle1, "round triangle");
        this._removeClass(this.handle2, "round triangle hide");

        for (i = 0; i < this.ticks.length; i++) {
          this._removeClass(this.ticks[i], "round triangle hide");
        }
      }

      var availableHandleModifiers = ["round", "triangle", "custom"];
      var isValidHandleType =
        availableHandleModifiers.indexOf(this.options.handle) !== -1;
      if (isValidHandleType) {
        this._addClass(this.handle1, this.options.handle);
        this._addClass(this.handle2, this.options.handle);

        for (i = 0; i < this.ticks.length; i++) {
          this._addClass(this.ticks[i], this.options.handle);
        }
      }

      this._state.offset = this._offset(this.sliderElem);
      this._state.size = this.sliderElem[this.sizePos];
      this.setValue(this._state.value);

      /******************************************
   				Bind Event Listeners
   	******************************************/

      // Bind keyboard handlers
      this.handle1Keydown = this._keydown.bind(this, 0);
      this.handle1.addEventListener("keydown", this.handle1Keydown, false);

      this.handle2Keydown = this._keydown.bind(this, 1);
      this.handle2.addEventListener("keydown", this.handle2Keydown, false);

      this.mousedown = this._mousedown.bind(this);
      this.touchstart = this._touchstart.bind(this);
      this.touchmove = this._touchmove.bind(this);

      if (this.touchCapable) {
        this.sliderElem.addEventListener("touchstart", this.touchstart, false);
        this.sliderElem.addEventListener("touchmove", this.touchmove, false);
      }

      this.sliderElem.addEventListener("mousedown", this.mousedown, false);

      // Bind window handlers
      this.resize = this._resize.bind(this);
      window.addEventListener("resize", this.resize, false);

      // Bind tooltip-related handlers
      if (this.options.tooltip === "hide") {
        this._addClass(this.tooltip, "hide");
        this._addClass(this.tooltip_min, "hide");
        this._addClass(this.tooltip_max, "hide");
      } else if (this.options.tooltip === "always") {
        this._showTooltip();
        this._alwaysShowTooltip = true;
      } else {
        this.showTooltip = this._showTooltip.bind(this);
        this.hideTooltip = this._hideTooltip.bind(this);

        if (this.options.ticks_tooltip) {
          var callbackHandle = this._addTickListener();
          //create handle1 listeners and store references in map
          var mouseEnter = callbackHandle.addMouseEnter(this, this.handle1);
          var mouseLeave = callbackHandle.addMouseLeave(this, this.handle1);
          this.handleCallbackMap.handle1 = {
            mouseEnter: mouseEnter,
            mouseLeave: mouseLeave,
          };
          //create handle2 listeners and store references in map
          mouseEnter = callbackHandle.addMouseEnter(this, this.handle2);
          mouseLeave = callbackHandle.addMouseLeave(this, this.handle2);
          this.handleCallbackMap.handle2 = {
            mouseEnter: mouseEnter,
            mouseLeave: mouseLeave,
          };
        } else {
          this.sliderElem.addEventListener(
            "mouseenter",
            this.showTooltip,
            false
          );
          this.sliderElem.addEventListener(
            "mouseleave",
            this.hideTooltip,
            false
          );

          if (this.touchCapable) {
            this.sliderElem.addEventListener(
              "touchstart",
              this.showTooltip,
              false
            );
            this.sliderElem.addEventListener(
              "touchmove",
              this.showTooltip,
              false
            );
            this.sliderElem.addEventListener(
              "touchend",
              this.hideTooltip,
              false
            );
          }
        }

        this.handle1.addEventListener("focus", this.showTooltip, false);
        this.handle1.addEventListener("blur", this.hideTooltip, false);

        this.handle2.addEventListener("focus", this.showTooltip, false);
        this.handle2.addEventListener("blur", this.hideTooltip, false);

        if (this.touchCapable) {
          this.handle1.addEventListener("touchstart", this.showTooltip, false);
          this.handle1.addEventListener("touchmove", this.showTooltip, false);
          this.handle1.addEventListener("touchend", this.hideTooltip, false);

          this.handle2.addEventListener("touchstart", this.showTooltip, false);
          this.handle2.addEventListener("touchmove", this.showTooltip, false);
          this.handle2.addEventListener("touchend", this.hideTooltip, false);
        }
      }

      if (this.options.enabled) {
        this.enable();
      } else {
        this.disable();
      }
    }

    /*************************************************
  				INSTANCE PROPERTIES/METHODS
  	- Any methods bound to the prototype are considered
  part of the plugin's `public` interface
  	**************************************************/
    Slider.prototype = {
      _init: function _init() {}, // NOTE: Must exist to support bridget

      constructor: Slider,

      defaultOptions: {
        id: "",
        min: 0,
        max: 10,
        step: 1,
        precision: 0,
        orientation: "horizontal",
        value: 5,
        range: false,
        selection: "before",
        tooltip: "show",
        tooltip_split: false,
        lock_to_ticks: false,
        handle: "round",
        reversed: false,
        rtl: "auto",
        enabled: true,
        formatter: function formatter(val) {
          if (Array.isArray(val)) {
            return val[0] + " : " + val[1];
          } else {
            return val;
          }
        },
        natural_arrow_keys: false,
        ticks: [],
        ticks_positions: [],
        ticks_labels: [],
        ticks_snap_bounds: 0,
        ticks_tooltip: false,
        scale: "linear",
        focus: false,
        tooltip_position: null,
        labelledby: null,
        rangeHighlights: [],
      },

      getElement: function getElement() {
        return this.sliderElem;
      },

      getValue: function getValue() {
        if (this.options.range) {
          return this._state.value;
        } else {
          return this._state.value[0];
        }
      },

      setValue: function setValue(val, triggerSlideEvent, triggerChangeEvent) {
        if (!val) {
          val = 0;
        }
        var oldValue = this.getValue();
        this._state.value = this._validateInputValue(val);
        var applyPrecision = this._applyPrecision.bind(this);

        if (this.options.range) {
          this._state.value[0] = applyPrecision(this._state.value[0]);
          this._state.value[1] = applyPrecision(this._state.value[1]);

          if (this.ticksAreValid && this.options.lock_to_ticks) {
            this._state.value[0] = this.options.ticks[
              this._getClosestTickIndex(this._state.value[0])
            ];
            this._state.value[1] = this.options.ticks[
              this._getClosestTickIndex(this._state.value[1])
            ];
          }

          this._state.value[0] = Math.max(
            this.options.min,
            Math.min(this.options.max, this._state.value[0])
          );
          this._state.value[1] = Math.max(
            this.options.min,
            Math.min(this.options.max, this._state.value[1])
          );
        } else {
          this._state.value = applyPrecision(this._state.value);

          if (this.ticksAreValid && this.options.lock_to_ticks) {
            this._state.value = this.options.ticks[
              this._getClosestTickIndex(this._state.value)
            ];
          }

          this._state.value = [
            Math.max(
              this.options.min,
              Math.min(this.options.max, this._state.value)
            ),
          ];
          this._addClass(this.handle2, "hide");
          if (this.options.selection === "after") {
            this._state.value[1] = this.options.max;
          } else {
            this._state.value[1] = this.options.min;
          }
        }

        // Determine which ticks the handle(s) are set at (if applicable)
        this._setTickIndex();

        if (this.options.max > this.options.min) {
          this._state.percentage = [
            this._toPercentage(this._state.value[0]),
            this._toPercentage(this._state.value[1]),
            (this.options.step * 100) / (this.options.max - this.options.min),
          ];
        } else {
          this._state.percentage = [0, 0, 100];
        }

        this._layout();
        var newValue = this.options.range
          ? this._state.value
          : this._state.value[0];

        this._setDataVal(newValue);
        if (triggerSlideEvent === true) {
          this._trigger("slide", newValue);
        }

        var hasChanged = false;
        if (Array.isArray(newValue)) {
          hasChanged =
            oldValue[0] !== newValue[0] || oldValue[1] !== newValue[1];
        } else {
          hasChanged = oldValue !== newValue;
        }

        if (hasChanged && triggerChangeEvent === true) {
          this._trigger("change", {
            oldValue: oldValue,
            newValue: newValue,
          });
        }

        return this;
      },

      destroy: function destroy() {
        // Remove event handlers on slider elements
        this._removeSliderEventHandlers();

        // Remove the slider from the DOM
        this.sliderElem.parentNode.removeChild(this.sliderElem);
        /* Show original <input> element */
        this.element.style.display = "";

        // Clear out custom event bindings
        this._cleanUpEventCallbacksMap();

        // Remove data values
        this.element.removeAttribute("data");

        // Remove JQuery handlers/data
        if ($) {
          this._unbindJQueryEventHandlers();
          if (autoRegisterNamespace === NAMESPACE_MAIN) {
            this.$element.removeData(autoRegisterNamespace);
          }
          this.$element.removeData(NAMESPACE_ALTERNATE);
        }
      },

      disable: function disable() {
        this._state.enabled = false;
        this.handle1.removeAttribute("tabindex");
        this.handle2.removeAttribute("tabindex");
        this._addClass(this.sliderElem, "slider-disabled");
        this._trigger("slideDisabled");

        return this;
      },

      enable: function enable() {
        this._state.enabled = true;
        this.handle1.setAttribute("tabindex", 0);
        this.handle2.setAttribute("tabindex", 0);
        this._removeClass(this.sliderElem, "slider-disabled");
        this._trigger("slideEnabled");

        return this;
      },

      toggle: function toggle() {
        if (this._state.enabled) {
          this.disable();
        } else {
          this.enable();
        }
        return this;
      },

      isEnabled: function isEnabled() {
        return this._state.enabled;
      },

      on: function on(evt, callback) {
        this._bindNonQueryEventHandler(evt, callback);
        return this;
      },

      off: function off(evt, callback) {
        if ($) {
          this.$element.off(evt, callback);
          this.$sliderElem.off(evt, callback);
        } else {
          this._unbindNonQueryEventHandler(evt, callback);
        }
      },

      getAttribute: function getAttribute(attribute) {
        if (attribute) {
          return this.options[attribute];
        } else {
          return this.options;
        }
      },

      setAttribute: function setAttribute(attribute, value) {
        this.options[attribute] = value;
        return this;
      },

      refresh: function refresh(options) {
        var currentValue = this.getValue();
        this._removeSliderEventHandlers();
        createNewSlider.call(this, this.element, this.options);
        // Don't reset slider's value on refresh if `useCurrentValue` is true
        if (options && options.useCurrentValue === true) {
          this.setValue(currentValue);
        }
        if ($) {
          // Bind new instance of slider to the element
          if (autoRegisterNamespace === NAMESPACE_MAIN) {
            $.data(this.element, NAMESPACE_MAIN, this);
            $.data(this.element, NAMESPACE_ALTERNATE, this);
          } else {
            $.data(this.element, NAMESPACE_ALTERNATE, this);
          }
        }
        return this;
      },

      relayout: function relayout() {
        this._resize();
        return this;
      },

      /******************************+
   				HELPERS
   	- Any method that is not part of the public interface.
   - Place it underneath this comment block and write its signature like so:
   		_fnName : function() {...}
   	********************************/
      _removeTooltipListener: function _removeTooltipListener(event, handler) {
        this.handle1.removeEventListener(event, handler, false);
        this.handle2.removeEventListener(event, handler, false);
      },
      _removeSliderEventHandlers: function _removeSliderEventHandlers() {
        // Remove keydown event listeners
        this.handle1.removeEventListener("keydown", this.handle1Keydown, false);
        this.handle2.removeEventListener("keydown", this.handle2Keydown, false);

        //remove the listeners from the ticks and handles if they had their own listeners
        if (this.options.ticks_tooltip) {
          var ticks = this.ticksContainer.getElementsByClassName("slider-tick");
          for (var i = 0; i < ticks.length; i++) {
            ticks[i].removeEventListener(
              "mouseenter",
              this.ticksCallbackMap[i].mouseEnter,
              false
            );
            ticks[i].removeEventListener(
              "mouseleave",
              this.ticksCallbackMap[i].mouseLeave,
              false
            );
          }
          if (
            this.handleCallbackMap.handle1 &&
            this.handleCallbackMap.handle2
          ) {
            this.handle1.removeEventListener(
              "mouseenter",
              this.handleCallbackMap.handle1.mouseEnter,
              false
            );
            this.handle2.removeEventListener(
              "mouseenter",
              this.handleCallbackMap.handle2.mouseEnter,
              false
            );
            this.handle1.removeEventListener(
              "mouseleave",
              this.handleCallbackMap.handle1.mouseLeave,
              false
            );
            this.handle2.removeEventListener(
              "mouseleave",
              this.handleCallbackMap.handle2.mouseLeave,
              false
            );
          }
        }

        this.handleCallbackMap = null;
        this.ticksCallbackMap = null;

        if (this.showTooltip) {
          this._removeTooltipListener("focus", this.showTooltip);
        }
        if (this.hideTooltip) {
          this._removeTooltipListener("blur", this.hideTooltip);
        }

        // Remove event listeners from sliderElem
        if (this.showTooltip) {
          this.sliderElem.removeEventListener(
            "mouseenter",
            this.showTooltip,
            false
          );
        }
        if (this.hideTooltip) {
          this.sliderElem.removeEventListener(
            "mouseleave",
            this.hideTooltip,
            false
          );
        }

        this.sliderElem.removeEventListener("mousedown", this.mousedown, false);

        if (this.touchCapable) {
          // Remove touch event listeners from handles
          if (this.showTooltip) {
            this.handle1.removeEventListener(
              "touchstart",
              this.showTooltip,
              false
            );
            this.handle1.removeEventListener(
              "touchmove",
              this.showTooltip,
              false
            );
            this.handle2.removeEventListener(
              "touchstart",
              this.showTooltip,
              false
            );
            this.handle2.removeEventListener(
              "touchmove",
              this.showTooltip,
              false
            );
          }
          if (this.hideTooltip) {
            this.handle1.removeEventListener(
              "touchend",
              this.hideTooltip,
              false
            );
            this.handle2.removeEventListener(
              "touchend",
              this.hideTooltip,
              false
            );
          }

          // Remove event listeners from sliderElem
          if (this.showTooltip) {
            this.sliderElem.removeEventListener(
              "touchstart",
              this.showTooltip,
              false
            );
            this.sliderElem.removeEventListener(
              "touchmove",
              this.showTooltip,
              false
            );
          }
          if (this.hideTooltip) {
            this.sliderElem.removeEventListener(
              "touchend",
              this.hideTooltip,
              false
            );
          }

          this.sliderElem.removeEventListener(
            "touchstart",
            this.touchstart,
            false
          );
          this.sliderElem.removeEventListener(
            "touchmove",
            this.touchmove,
            false
          );
        }

        // Remove window event listener
        window.removeEventListener("resize", this.resize, false);
      },
      _bindNonQueryEventHandler: function _bindNonQueryEventHandler(
        evt,
        callback
      ) {
        if (this.eventToCallbackMap[evt] === undefined) {
          this.eventToCallbackMap[evt] = [];
        }
        this.eventToCallbackMap[evt].push(callback);
      },
      _unbindNonQueryEventHandler: function _unbindNonQueryEventHandler(
        evt,
        callback
      ) {
        var callbacks = this.eventToCallbackMap[evt];
        if (callbacks !== undefined) {
          for (var i = 0; i < callbacks.length; i++) {
            if (callbacks[i] === callback) {
              callbacks.splice(i, 1);
              break;
            }
          }
        }
      },
      _cleanUpEventCallbacksMap: function _cleanUpEventCallbacksMap() {
        var eventNames = Object.keys(this.eventToCallbackMap);
        for (var i = 0; i < eventNames.length; i++) {
          var eventName = eventNames[i];
          delete this.eventToCallbackMap[eventName];
        }
      },
      _showTooltip: function _showTooltip() {
        if (this.options.tooltip_split === false) {
          this._addClass(this.tooltip, "show");
          this.tooltip_min.style.display = "none";
          this.tooltip_max.style.display = "none";
        } else {
          this._addClass(this.tooltip_min, "show");
          this._addClass(this.tooltip_max, "show");
          this.tooltip.style.display = "none";
        }
        this._state.over = true;
      },
      _hideTooltip: function _hideTooltip() {
        if (this._state.inDrag === false && this._alwaysShowTooltip !== true) {
          this._removeClass(this.tooltip, "show");
          this._removeClass(this.tooltip_min, "show");
          this._removeClass(this.tooltip_max, "show");
        }
        this._state.over = false;
      },
      _setToolTipOnMouseOver: function _setToolTipOnMouseOver(tempState) {
        var self = this;
        var formattedTooltipVal = this.options.formatter(
          !tempState ? this._state.value[0] : tempState.value[0]
        );
        var positionPercentages = !tempState
          ? getPositionPercentages(this._state, this.options.reversed)
          : getPositionPercentages(tempState, this.options.reversed);
        this._setText(this.tooltipInner, formattedTooltipVal);

        this.tooltip.style[this.stylePos] = positionPercentages[0] + "%";

        function getPositionPercentages(state, reversed) {
          if (reversed) {
            return [
              100 - state.percentage[0],
              self.options.range
                ? 100 - state.percentage[1]
                : state.percentage[1],
            ];
          }
          return [state.percentage[0], state.percentage[1]];
        }
      },
      _copyState: function _copyState() {
        return {
          value: [this._state.value[0], this._state.value[1]],
          enabled: this._state.enabled,
          offset: this._state.offset,
          size: this._state.size,
          percentage: [
            this._state.percentage[0],
            this._state.percentage[1],
            this._state.percentage[2],
          ],
          inDrag: this._state.inDrag,
          over: this._state.over,
          // deleted or null'd keys
          dragged: this._state.dragged,
          keyCtrl: this._state.keyCtrl,
        };
      },
      _addTickListener: function _addTickListener() {
        return {
          addMouseEnter: function addMouseEnter(reference, element, index) {
            var enter = function enter() {
              var tempState = reference._copyState();
              // Which handle is being hovered over?
              var val =
                element === reference.handle1
                  ? tempState.value[0]
                  : tempState.value[1];
              var per = void 0;

              // Setup value and percentage for tick's 'mouseenter'
              if (index !== undefined) {
                val = reference.options.ticks[index];
                per =
                  (reference.options.ticks_positions.length > 0 &&
                    reference.options.ticks_positions[index]) ||
                  reference._toPercentage(reference.options.ticks[index]);
              } else {
                per = reference._toPercentage(val);
              }

              tempState.value[0] = val;
              tempState.percentage[0] = per;
              reference._setToolTipOnMouseOver(tempState);
              reference._showTooltip();
            };
            element.addEventListener("mouseenter", enter, false);
            return enter;
          },
          addMouseLeave: function addMouseLeave(reference, element) {
            var leave = function leave() {
              reference._hideTooltip();
            };
            element.addEventListener("mouseleave", leave, false);
            return leave;
          },
        };
      },
      _layout: function _layout() {
        var positionPercentages;
        var formattedValue;

        if (this.options.reversed) {
          positionPercentages = [
            100 - this._state.percentage[0],
            this.options.range
              ? 100 - this._state.percentage[1]
              : this._state.percentage[1],
          ];
        } else {
          positionPercentages = [
            this._state.percentage[0],
            this._state.percentage[1],
          ];
        }

        this.handle1.style[this.stylePos] = positionPercentages[0] + "%";
        this.handle1.setAttribute("aria-valuenow", this._state.value[0]);
        formattedValue = this.options.formatter(this._state.value[0]);
        if (isNaN(formattedValue)) {
          this.handle1.setAttribute("aria-valuetext", formattedValue);
        } else {
          this.handle1.removeAttribute("aria-valuetext");
        }

        this.handle2.style[this.stylePos] = positionPercentages[1] + "%";
        this.handle2.setAttribute("aria-valuenow", this._state.value[1]);
        formattedValue = this.options.formatter(this._state.value[1]);
        if (isNaN(formattedValue)) {
          this.handle2.setAttribute("aria-valuetext", formattedValue);
        } else {
          this.handle2.removeAttribute("aria-valuetext");
        }

        /* Position highlight range elements */
        if (
          this.rangeHighlightElements.length > 0 &&
          Array.isArray(this.options.rangeHighlights) &&
          this.options.rangeHighlights.length > 0
        ) {
          for (var _i = 0; _i < this.options.rangeHighlights.length; _i++) {
            var startPercent = this._toPercentage(
              this.options.rangeHighlights[_i].start
            );
            var endPercent = this._toPercentage(
              this.options.rangeHighlights[_i].end
            );

            if (this.options.reversed) {
              var sp = 100 - endPercent;
              endPercent = 100 - startPercent;
              startPercent = sp;
            }

            var currentRange = this._createHighlightRange(
              startPercent,
              endPercent
            );

            if (currentRange) {
              if (this.options.orientation === "vertical") {
                this.rangeHighlightElements[_i].style.top =
                  currentRange.start + "%";
                this.rangeHighlightElements[_i].style.height =
                  currentRange.size + "%";
              } else {
                if (this.options.rtl) {
                  this.rangeHighlightElements[_i].style.right =
                    currentRange.start + "%";
                } else {
                  this.rangeHighlightElements[_i].style.left =
                    currentRange.start + "%";
                }
                this.rangeHighlightElements[_i].style.width =
                  currentRange.size + "%";
              }
            } else {
              this.rangeHighlightElements[_i].style.display = "none";
            }
          }
        }

        /* Position ticks and labels */
        if (
          Array.isArray(this.options.ticks) &&
          this.options.ticks.length > 0
        ) {
          var styleSize =
            this.options.orientation === "vertical" ? "height" : "width";
          var styleMargin;
          if (this.options.orientation === "vertical") {
            styleMargin = "marginTop";
          } else {
            if (this.options.rtl) {
              styleMargin = "marginRight";
            } else {
              styleMargin = "marginLeft";
            }
          }
          var labelSize = this._state.size / (this.options.ticks.length - 1);

          if (this.tickLabelContainer) {
            var extraMargin = 0;
            if (this.options.ticks_positions.length === 0) {
              if (this.options.orientation !== "vertical") {
                this.tickLabelContainer.style[styleMargin] =
                  -labelSize / 2 + "px";
              }

              extraMargin = this.tickLabelContainer.offsetHeight;
            } else {
              /* Chidren are position absolute, calculate height by finding the max offsetHeight of a child */
              for (i = 0; i < this.tickLabelContainer.childNodes.length; i++) {
                if (
                  this.tickLabelContainer.childNodes[i].offsetHeight >
                  extraMargin
                ) {
                  extraMargin = this.tickLabelContainer.childNodes[i]
                    .offsetHeight;
                }
              }
            }
            if (this.options.orientation === "horizontal") {
              this.sliderElem.style.marginBottom = extraMargin + "px";
            }
          }
          for (var i = 0; i < this.options.ticks.length; i++) {
            var percentage =
              this.options.ticks_positions[i] ||
              this._toPercentage(this.options.ticks[i]);

            if (this.options.reversed) {
              percentage = 100 - percentage;
            }

            this.ticks[i].style[this.stylePos] = percentage + "%";

            /* Set class labels to denote whether ticks are in the selection */
            this._removeClass(this.ticks[i], "in-selection");
            if (!this.options.range) {
              if (
                this.options.selection === "after" &&
                percentage >= positionPercentages[0]
              ) {
                this._addClass(this.ticks[i], "in-selection");
              } else if (
                this.options.selection === "before" &&
                percentage <= positionPercentages[0]
              ) {
                this._addClass(this.ticks[i], "in-selection");
              }
            } else if (
              percentage >= positionPercentages[0] &&
              percentage <= positionPercentages[1]
            ) {
              this._addClass(this.ticks[i], "in-selection");
            }

            if (this.tickLabels[i]) {
              this.tickLabels[i].style[styleSize] = labelSize + "px";

              if (
                this.options.orientation !== "vertical" &&
                this.options.ticks_positions[i] !== undefined
              ) {
                this.tickLabels[i].style.position = "absolute";
                this.tickLabels[i].style[this.stylePos] = percentage + "%";
                this.tickLabels[i].style[styleMargin] = -labelSize / 2 + "px";
              } else if (this.options.orientation === "vertical") {
                if (this.options.rtl) {
                  this.tickLabels[i].style["marginRight"] =
                    this.sliderElem.offsetWidth + "px";
                } else {
                  this.tickLabels[i].style["marginLeft"] =
                    this.sliderElem.offsetWidth + "px";
                }
                this.tickLabelContainer.style[styleMargin] =
                  (this.sliderElem.offsetWidth / 2) * -1 + "px";
              }

              /* Set class labels to indicate tick labels are in the selection or selected */
              this._removeClass(
                this.tickLabels[i],
                "label-in-selection label-is-selection"
              );
              if (!this.options.range) {
                if (
                  this.options.selection === "after" &&
                  percentage >= positionPercentages[0]
                ) {
                  this._addClass(this.tickLabels[i], "label-in-selection");
                } else if (
                  this.options.selection === "before" &&
                  percentage <= positionPercentages[0]
                ) {
                  this._addClass(this.tickLabels[i], "label-in-selection");
                }
                if (percentage === positionPercentages[0]) {
                  this._addClass(this.tickLabels[i], "label-is-selection");
                }
              } else if (
                percentage >= positionPercentages[0] &&
                percentage <= positionPercentages[1]
              ) {
                this._addClass(this.tickLabels[i], "label-in-selection");
                if (
                  percentage === positionPercentages[0] ||
                  positionPercentages[1]
                ) {
                  this._addClass(this.tickLabels[i], "label-is-selection");
                }
              }
            }
          }
        }

        var formattedTooltipVal;

        if (this.options.range) {
          formattedTooltipVal = this.options.formatter(this._state.value);
          this._setText(this.tooltipInner, formattedTooltipVal);
          this.tooltip.style[this.stylePos] =
            (positionPercentages[1] + positionPercentages[0]) / 2 + "%";

          var innerTooltipMinText = this.options.formatter(
            this._state.value[0]
          );
          this._setText(this.tooltipInner_min, innerTooltipMinText);

          var innerTooltipMaxText = this.options.formatter(
            this._state.value[1]
          );
          this._setText(this.tooltipInner_max, innerTooltipMaxText);

          this.tooltip_min.style[this.stylePos] = positionPercentages[0] + "%";

          this.tooltip_max.style[this.stylePos] = positionPercentages[1] + "%";
        } else {
          formattedTooltipVal = this.options.formatter(this._state.value[0]);
          this._setText(this.tooltipInner, formattedTooltipVal);

          this.tooltip.style[this.stylePos] = positionPercentages[0] + "%";
        }

        if (this.options.orientation === "vertical") {
          this.trackLow.style.top = "0";
          this.trackLow.style.height =
            Math.min(positionPercentages[0], positionPercentages[1]) + "%";

          this.trackSelection.style.top =
            Math.min(positionPercentages[0], positionPercentages[1]) + "%";
          this.trackSelection.style.height =
            Math.abs(positionPercentages[0] - positionPercentages[1]) + "%";

          this.trackHigh.style.bottom = "0";
          this.trackHigh.style.height =
            100 -
            Math.min(positionPercentages[0], positionPercentages[1]) -
            Math.abs(positionPercentages[0] - positionPercentages[1]) +
            "%";
        } else {
          if (this.stylePos === "right") {
            this.trackLow.style.right = "0";
          } else {
            this.trackLow.style.left = "0";
          }
          this.trackLow.style.width =
            Math.min(positionPercentages[0], positionPercentages[1]) + "%";

          if (this.stylePos === "right") {
            this.trackSelection.style.right =
              Math.min(positionPercentages[0], positionPercentages[1]) + "%";
          } else {
            this.trackSelection.style.left =
              Math.min(positionPercentages[0], positionPercentages[1]) + "%";
          }
          this.trackSelection.style.width =
            Math.abs(positionPercentages[0] - positionPercentages[1]) + "%";

          if (this.stylePos === "right") {
            this.trackHigh.style.left = "0";
          } else {
            this.trackHigh.style.right = "0";
          }
          this.trackHigh.style.width =
            100 -
            Math.min(positionPercentages[0], positionPercentages[1]) -
            Math.abs(positionPercentages[0] - positionPercentages[1]) +
            "%";

          var offset_min = this.tooltip_min.getBoundingClientRect();
          var offset_max = this.tooltip_max.getBoundingClientRect();

          if (this.options.tooltip_position === "bottom") {
            if (offset_min.right > offset_max.left) {
              this._removeClass(this.tooltip_max, "bottom");
              this._addClass(this.tooltip_max, "top");
              this.tooltip_max.style.top = "";
              this.tooltip_max.style.bottom = 22 + "px";
            } else {
              this._removeClass(this.tooltip_max, "top");
              this._addClass(this.tooltip_max, "bottom");
              this.tooltip_max.style.top = this.tooltip_min.style.top;
              this.tooltip_max.style.bottom = "";
            }
          } else {
            if (offset_min.right > offset_max.left) {
              this._removeClass(this.tooltip_max, "top");
              this._addClass(this.tooltip_max, "bottom");
              this.tooltip_max.style.top = 18 + "px";
            } else {
              this._removeClass(this.tooltip_max, "bottom");
              this._addClass(this.tooltip_max, "top");
              this.tooltip_max.style.top = this.tooltip_min.style.top;
            }
          }
        }
      },
      _createHighlightRange: function _createHighlightRange(start, end) {
        if (this._isHighlightRange(start, end)) {
          if (start > end) {
            return { start: end, size: start - end };
          }
          return { start: start, size: end - start };
        }
        return null;
      },
      _isHighlightRange: function _isHighlightRange(start, end) {
        if (0 <= start && start <= 100 && 0 <= end && end <= 100) {
          return true;
        } else {
          return false;
        }
      },
      _resize: function _resize(ev) {
        /*jshint unused:false*/
        this._state.offset = this._offset(this.sliderElem);
        this._state.size = this.sliderElem[this.sizePos];
        this._layout();
      },
      _removeProperty: function _removeProperty(element, prop) {
        if (element.style.removeProperty) {
          element.style.removeProperty(prop);
        } else {
          element.style.removeAttribute(prop);
        }
      },
      _mousedown: function _mousedown(ev) {
        if (!this._state.enabled) {
          return false;
        }

        if (ev.preventDefault) {
          ev.preventDefault();
        }

        this._state.offset = this._offset(this.sliderElem);
        this._state.size = this.sliderElem[this.sizePos];

        var percentage = this._getPercentage(ev);

        if (this.options.range) {
          var diff1 = Math.abs(this._state.percentage[0] - percentage);
          var diff2 = Math.abs(this._state.percentage[1] - percentage);
          this._state.dragged = diff1 < diff2 ? 0 : 1;
          this._adjustPercentageForRangeSliders(percentage);
        } else {
          this._state.dragged = 0;
        }

        this._state.percentage[this._state.dragged] = percentage;

        if (this.touchCapable) {
          document.removeEventListener("touchmove", this.mousemove, false);
          document.removeEventListener("touchend", this.mouseup, false);
        }

        if (this.mousemove) {
          document.removeEventListener("mousemove", this.mousemove, false);
        }
        if (this.mouseup) {
          document.removeEventListener("mouseup", this.mouseup, false);
        }

        this.mousemove = this._mousemove.bind(this);
        this.mouseup = this._mouseup.bind(this);

        if (this.touchCapable) {
          // Touch: Bind touch events:
          document.addEventListener("touchmove", this.mousemove, false);
          document.addEventListener("touchend", this.mouseup, false);
        }
        // Bind mouse events:
        document.addEventListener("mousemove", this.mousemove, false);
        document.addEventListener("mouseup", this.mouseup, false);

        this._state.inDrag = true;
        var newValue = this._calculateValue();

        this._trigger("slideStart", newValue);

        this.setValue(newValue, false, true);

        ev.returnValue = false;

        if (this.options.focus) {
          this._triggerFocusOnHandle(this._state.dragged);
        }

        return true;
      },
      _touchstart: function _touchstart(ev) {
        this._mousedown(ev);
      },
      _triggerFocusOnHandle: function _triggerFocusOnHandle(handleIdx) {
        if (handleIdx === 0) {
          this.handle1.focus();
        }
        if (handleIdx === 1) {
          this.handle2.focus();
        }
      },
      _keydown: function _keydown(handleIdx, ev) {
        if (!this._state.enabled) {
          return false;
        }

        var dir;
        switch (ev.keyCode) {
          case 37: // left
          case 40:
            // down
            dir = -1;
            break;
          case 39: // right
          case 38:
            // up
            dir = 1;
            break;
        }
        if (!dir) {
          return;
        }

        // use natural arrow keys instead of from min to max
        if (this.options.natural_arrow_keys) {
          var isHorizontal = this.options.orientation === "horizontal";
          var isVertical = this.options.orientation === "vertical";
          var isRTL = this.options.rtl;
          var isReversed = this.options.reversed;

          if (isHorizontal) {
            if (isRTL) {
              if (!isReversed) {
                dir = -dir;
              }
            } else {
              if (isReversed) {
                dir = -dir;
              }
            }
          } else if (isVertical) {
            if (!isReversed) {
              dir = -dir;
            }
          }
        }

        var val;
        if (this.ticksAreValid && this.options.lock_to_ticks) {
          var index = void 0;
          // Find tick index that handle 1/2 is currently on
          index = this.options.ticks.indexOf(this._state.value[handleIdx]);
          if (index === -1) {
            // Set default to first tick
            index = 0;
            window.console.warn(
              "(lock_to_ticks) _keydown: index should not be -1"
            );
          }
          index += dir;
          index = Math.max(0, Math.min(this.options.ticks.length - 1, index));
          val = this.options.ticks[index];
        } else {
          val = this._state.value[handleIdx] + dir * this.options.step;
        }
        var percentage = this._toPercentage(val);
        this._state.keyCtrl = handleIdx;
        if (this.options.range) {
          this._adjustPercentageForRangeSliders(percentage);
          var val1 = !this._state.keyCtrl ? val : this._state.value[0];
          var val2 = this._state.keyCtrl ? val : this._state.value[1];
          // Restrict values within limits
          val = [
            Math.max(this.options.min, Math.min(this.options.max, val1)),
            Math.max(this.options.min, Math.min(this.options.max, val2)),
          ];
        } else {
          val = Math.max(this.options.min, Math.min(this.options.max, val));
        }

        this._trigger("slideStart", val);

        this.setValue(val, true, true);

        this._trigger("slideStop", val);

        this._pauseEvent(ev);
        delete this._state.keyCtrl;

        return false;
      },
      _pauseEvent: function _pauseEvent(ev) {
        if (ev.stopPropagation) {
          ev.stopPropagation();
        }
        if (ev.preventDefault) {
          ev.preventDefault();
        }
        ev.cancelBubble = true;
        ev.returnValue = false;
      },
      _mousemove: function _mousemove(ev) {
        if (!this._state.enabled) {
          return false;
        }

        var percentage = this._getPercentage(ev);
        this._adjustPercentageForRangeSliders(percentage);
        this._state.percentage[this._state.dragged] = percentage;

        var val = this._calculateValue(true);
        this.setValue(val, true, true);

        return false;
      },
      _touchmove: function _touchmove(ev) {
        if (ev.changedTouches === undefined) {
          return;
        }

        // Prevent page from scrolling and only drag the slider
        if (ev.preventDefault) {
          ev.preventDefault();
        }
      },
      _adjustPercentageForRangeSliders: function _adjustPercentageForRangeSliders(
        percentage
      ) {
        if (this.options.range) {
          var precision = this._getNumDigitsAfterDecimalPlace(percentage);
          precision = precision ? precision - 1 : 0;
          var percentageWithAdjustedPrecision = this._applyToFixedAndParseFloat(
            percentage,
            precision
          );
          if (
            this._state.dragged === 0 &&
            this._applyToFixedAndParseFloat(
              this._state.percentage[1],
              precision
            ) < percentageWithAdjustedPrecision
          ) {
            this._state.percentage[0] = this._state.percentage[1];
            this._state.dragged = 1;
          } else if (
            this._state.dragged === 1 &&
            this._applyToFixedAndParseFloat(
              this._state.percentage[0],
              precision
            ) > percentageWithAdjustedPrecision
          ) {
            this._state.percentage[1] = this._state.percentage[0];
            this._state.dragged = 0;
          } else if (
            this._state.keyCtrl === 0 &&
            this._toPercentage(this._state.value[1]) < percentage
          ) {
            this._state.percentage[0] = this._state.percentage[1];
            this._state.keyCtrl = 1;
            this.handle2.focus();
          } else if (
            this._state.keyCtrl === 1 &&
            this._toPercentage(this._state.value[0]) > percentage
          ) {
            this._state.percentage[1] = this._state.percentage[0];
            this._state.keyCtrl = 0;
            this.handle1.focus();
          }
        }
      },
      _mouseup: function _mouseup(ev) {
        if (!this._state.enabled) {
          return false;
        }

        var percentage = this._getPercentage(ev);
        this._adjustPercentageForRangeSliders(percentage);
        this._state.percentage[this._state.dragged] = percentage;

        if (this.touchCapable) {
          // Touch: Unbind touch event handlers:
          document.removeEventListener("touchmove", this.mousemove, false);
          document.removeEventListener("touchend", this.mouseup, false);
        }
        // Unbind mouse event handlers:
        document.removeEventListener("mousemove", this.mousemove, false);
        document.removeEventListener("mouseup", this.mouseup, false);

        this._state.inDrag = false;
        if (this._state.over === false) {
          this._hideTooltip();
        }
        var val = this._calculateValue(true);

        this.setValue(val, false, true);
        this._trigger("slideStop", val);

        // No longer need 'dragged' after mouse up
        this._state.dragged = null;

        return false;
      },
      _setValues: function _setValues(index, val) {
        var comp = 0 === index ? 0 : 100;
        if (this._state.percentage[index] !== comp) {
          val.data[index] = this._toValue(this._state.percentage[index]);
          val.data[index] = this._applyPrecision(val.data[index]);
        }
      },
      _calculateValue: function _calculateValue(snapToClosestTick) {
        var val = {};
        if (this.options.range) {
          val.data = [this.options.min, this.options.max];
          this._setValues(0, val);
          this._setValues(1, val);
          if (snapToClosestTick) {
            val.data[0] = this._snapToClosestTick(val.data[0]);
            val.data[1] = this._snapToClosestTick(val.data[1]);
          }
        } else {
          val.data = this._toValue(this._state.percentage[0]);
          val.data = parseFloat(val.data);
          val.data = this._applyPrecision(val.data);
          if (snapToClosestTick) {
            val.data = this._snapToClosestTick(val.data);
          }
        }

        return val.data;
      },
      _snapToClosestTick: function _snapToClosestTick(val) {
        var min = [val, Infinity];
        for (var i = 0; i < this.options.ticks.length; i++) {
          var diff = Math.abs(this.options.ticks[i] - val);
          if (diff <= min[1]) {
            min = [this.options.ticks[i], diff];
          }
        }
        if (min[1] <= this.options.ticks_snap_bounds) {
          return min[0];
        }
        return val;
      },

      _applyPrecision: function _applyPrecision(val) {
        var precision =
          this.options.precision ||
          this._getNumDigitsAfterDecimalPlace(this.options.step);
        return this._applyToFixedAndParseFloat(val, precision);
      },
      _getNumDigitsAfterDecimalPlace: function _getNumDigitsAfterDecimalPlace(
        num
      ) {
        var match = ("" + num).match(/(?:\.(\d+))?(?:[eE]([+-]?\d+))?$/);
        if (!match) {
          return 0;
        }
        return Math.max(
          0,
          (match[1] ? match[1].length : 0) - (match[2] ? +match[2] : 0)
        );
      },
      _applyToFixedAndParseFloat: function _applyToFixedAndParseFloat(
        num,
        toFixedInput
      ) {
        var truncatedNum = num.toFixed(toFixedInput);
        return parseFloat(truncatedNum);
      },
      /*
   	Credits to Mike Samuel for the following method!
   	Source: http://stackoverflow.com/questions/10454518/javascript-how-to-retrieve-the-number-of-decimals-of-a-string-number
   */
      _getPercentage: function _getPercentage(ev) {
        if (
          this.touchCapable &&
          (ev.type === "touchstart" ||
            ev.type === "touchmove" ||
            ev.type === "touchend")
        ) {
          ev = ev.changedTouches[0];
        }

        var eventPosition = ev[this.mousePos];
        var sliderOffset = this._state.offset[this.stylePos];
        var distanceToSlide = eventPosition - sliderOffset;
        if (this.stylePos === "right") {
          distanceToSlide = -distanceToSlide;
        }
        // Calculate what percent of the length the slider handle has slid
        var percentage = (distanceToSlide / this._state.size) * 100;
        percentage =
          Math.round(percentage / this._state.percentage[2]) *
          this._state.percentage[2];
        if (this.options.reversed) {
          percentage = 100 - percentage;
        }

        // Make sure the percent is within the bounds of the slider.
        // 0% corresponds to the 'min' value of the slide
        // 100% corresponds to the 'max' value of the slide
        return Math.max(0, Math.min(100, percentage));
      },
      _validateInputValue: function _validateInputValue(val) {
        if (!isNaN(+val)) {
          return +val;
        } else if (Array.isArray(val)) {
          this._validateArray(val);
          return val;
        } else {
          throw new Error(ErrorMsgs.formatInvalidInputErrorMsg(val));
        }
      },
      _validateArray: function _validateArray(val) {
        for (var i = 0; i < val.length; i++) {
          var input = val[i];
          if (typeof input !== "number") {
            throw new Error(ErrorMsgs.formatInvalidInputErrorMsg(input));
          }
        }
      },
      _setDataVal: function _setDataVal(val) {
        this.element.setAttribute("data-value", val);
        this.element.setAttribute("value", val);
        this.element.value = val;
      },
      _trigger: function _trigger(evt, val) {
        val = val || val === 0 ? val : undefined;

        var callbackFnArray = this.eventToCallbackMap[evt];
        if (callbackFnArray && callbackFnArray.length) {
          for (var i = 0; i < callbackFnArray.length; i++) {
            var callbackFn = callbackFnArray[i];
            callbackFn(val);
          }
        }

        /* If JQuery exists, trigger JQuery events */
        if ($) {
          this._triggerJQueryEvent(evt, val);
        }
      },
      _triggerJQueryEvent: function _triggerJQueryEvent(evt, val) {
        var eventData = {
          type: evt,
          value: val,
        };
        this.$element.trigger(eventData);
        this.$sliderElem.trigger(eventData);
      },
      _unbindJQueryEventHandlers: function _unbindJQueryEventHandlers() {
        this.$element.off();
        this.$sliderElem.off();
      },
      _setText: function _setText(element, text) {
        if (typeof element.textContent !== "undefined") {
          element.textContent = text;
        } else if (typeof element.innerText !== "undefined") {
          element.innerText = text;
        }
      },
      _removeClass: function _removeClass(element, classString) {
        var classes = classString.split(" ");
        var newClasses = element.className;

        for (var i = 0; i < classes.length; i++) {
          var classTag = classes[i];
          var regex = new RegExp("(?:\\s|^)" + classTag + "(?:\\s|$)");
          newClasses = newClasses.replace(regex, " ");
        }

        element.className = newClasses.trim();
      },
      _addClass: function _addClass(element, classString) {
        var classes = classString.split(" ");
        var newClasses = element.className;

        for (var i = 0; i < classes.length; i++) {
          var classTag = classes[i];
          var regex = new RegExp("(?:\\s|^)" + classTag + "(?:\\s|$)");
          var ifClassExists = regex.test(newClasses);

          if (!ifClassExists) {
            newClasses += " " + classTag;
          }
        }

        element.className = newClasses.trim();
      },
      _offsetLeft: function _offsetLeft(obj) {
        return obj.getBoundingClientRect().left;
      },
      _offsetRight: function _offsetRight(obj) {
        return obj.getBoundingClientRect().right;
      },
      _offsetTop: function _offsetTop(obj) {
        var offsetTop = obj.offsetTop;
        while ((obj = obj.offsetParent) && !isNaN(obj.offsetTop)) {
          offsetTop += obj.offsetTop;
          if (obj.tagName !== "BODY") {
            offsetTop -= obj.scrollTop;
          }
        }
        return offsetTop;
      },
      _offset: function _offset(obj) {
        return {
          left: this._offsetLeft(obj),
          right: this._offsetRight(obj),
          top: this._offsetTop(obj),
        };
      },
      _css: function _css(elementRef, styleName, value) {
        if ($) {
          $.style(elementRef, styleName, value);
        } else {
          var style = styleName
            .replace(/^-ms-/, "ms-")
            .replace(/-([\da-z])/gi, function (all, letter) {
              return letter.toUpperCase();
            });
          elementRef.style[style] = value;
        }
      },
      _toValue: function _toValue(percentage) {
        return this.options.scale.toValue.apply(this, [percentage]);
      },
      _toPercentage: function _toPercentage(value) {
        return this.options.scale.toPercentage.apply(this, [value]);
      },
      _setTooltipPosition: function _setTooltipPosition() {
        var tooltips = [this.tooltip, this.tooltip_min, this.tooltip_max];
        if (this.options.orientation === "vertical") {
          var tooltipPos;
          if (this.options.tooltip_position) {
            tooltipPos = this.options.tooltip_position;
          } else {
            if (this.options.rtl) {
              tooltipPos = "left";
            } else {
              tooltipPos = "right";
            }
          }
          var oppositeSide = tooltipPos === "left" ? "right" : "left";
          tooltips.forEach(
            function (tooltip) {
              this._addClass(tooltip, tooltipPos);
              tooltip.style[oppositeSide] = "100%";
            }.bind(this)
          );
        } else if (this.options.tooltip_position === "bottom") {
          tooltips.forEach(
            function (tooltip) {
              this._addClass(tooltip, "bottom");
              tooltip.style.top = 22 + "px";
            }.bind(this)
          );
        } else {
          tooltips.forEach(
            function (tooltip) {
              this._addClass(tooltip, "top");
              tooltip.style.top = -this.tooltip.outerHeight - 14 + "px";
            }.bind(this)
          );
        }
      },
      _getClosestTickIndex: function _getClosestTickIndex(val) {
        var difference = Math.abs(val - this.options.ticks[0]);
        var index = 0;
        for (var i = 0; i < this.options.ticks.length; ++i) {
          var d = Math.abs(val - this.options.ticks[i]);
          if (d < difference) {
            difference = d;
            index = i;
          }
        }
        return index;
      },
      /**
       * Attempts to find the index in `ticks[]` the slider values are set at.
       * The indexes can be -1 to indicate the slider value is not set at a value in `ticks[]`.
       */
      _setTickIndex: function _setTickIndex() {
        if (this.ticksAreValid) {
          this._state.tickIndex = [
            this.options.ticks.indexOf(this._state.value[0]),
            this.options.ticks.indexOf(this._state.value[1]),
          ];
        }
      },
    };

    /*********************************
  		Attach to global namespace
  	*********************************/
    if ($ && $.fn) {
      if (!$.fn.slider) {
        $.bridget(NAMESPACE_MAIN, Slider);
        autoRegisterNamespace = NAMESPACE_MAIN;
      } else {
        if (windowIsDefined) {
          window.console.warn(
            "bootstrap-slider.js - WARNING: $.fn.slider namespace is already bound. Use the $.fn.bootstrapSlider namespace instead."
          );
        }
        autoRegisterNamespace = NAMESPACE_ALTERNATE;
      }
      $.bridget(NAMESPACE_ALTERNATE, Slider);

      // Auto-Register data-provide="slider" Elements
      $(function () {
        $("input[data-provide=slider]")[autoRegisterNamespace]();
      });
    }
  })($);

  return Slider;
});

/*!
 * LABELAUTY jQuery Plugin
 *
 * @file: jquery-labelauty.js
 * @author: Francisco Neves (@fntneves)
 * @site: www.francisconeves.com
 * @license: MIT License
 */

// Edited by Jonathan Pyle, 2018-2019

(function ($) {
  $.fn.labelauty = function (options) {
    /*
     * Our default settings
     * Hope you don't need to change anything, with these settings
     */
    var settings = $.extend(
      {
        // Development Mode
        // This will activate console debug messages
        development: false,

        // Trigger Class
        // This class will be used to apply styles
        class: "labelauty",

        // Use icon?
        // If false, then only a text label represents the input
        icon: true,

        // Use text label ?
        // If false, then only an icon represents the input
        label: true,

        // Separator between labels' messages
        // If you use this separator for anything, choose a new one
        separator: "|",

        // Default Checked Message
        // This message will be visible when input is checked
        checked_label: "Checked",

        // Default UnChecked Message
        // This message will be visible when input is unchecked
        unchecked_label: "Unchecked",

        // Force random ID's
        // Replace original ID's with random ID's,
        force_random_id: false,

        // Minimum Label Width
        // This value will be used to apply a minimum width to the text labels
        minimum_width: false,

        // Use the greatest width between two text labels ?
        // If this has a true value, then label width will be the greatest between labels
        same_width: false,
      },
      options,
    );

    /*
     * Let's create the core function
     * It will try to cover all settings and mistakes of using
     */
    return this.each(function () {
      var $object = $(this);
      var selected = $object.is(":checked");
      var type = $object.attr("type");
      var use_icons = true;
      var use_labels = true;
      var labels;
      var labels_object;
      var color;
      var classes;
      var input_id;

      //Get the aria label from the input element
      var aria_label = $object.attr("aria-label");

      // Hide the object form screen readers
      $object.attr("aria-hidden", true);

      // Test if object is a check input
      // Don't mess me up, come on
      if ($object.is(":checkbox") === false && $object.is(":radio") === false)
        return this;

      classes = $object
        .attr("class")
        .split(/\s+/)
        .filter(function (value, index, arr) {
          return value != "da-to-labelauty";
        });
      // Add "labelauty" class to all checkboxes
      // So you can apply some custom styles
      $object.addClass(settings.class);

      // Get the value of "data-labelauty" attribute
      // Then, we have the labels for each case (or not, as we will see)
      labels = $object.attr("data-labelauty");
      color = $object.attr("data-color");

      use_labels = settings.label;
      use_icons = settings.icon;

      // It's time to check if it's going to the right way
      // Null values, more labels than expected or no labels will be handled here
      if (use_labels === true) {
        if (labels == null || labels.length === 0) {
          // If attribute has no label and we want to use, then use the default labels
          labels_object = [settings.unchecked_label, settings.checked_label];
        } else {
          // Ok, ok, it's time to split Checked and Unchecked labels
          // We split, by the "settings.separator" option
          labels_object = labels.split(settings.separator);

          // Now, let's check if exist _only_ two labels
          // If there's more than two, then we do not use labels :(
          // Else, do some additional tests
          if (labels_object.length > 2) {
            use_labels = false;
            debug(
              settings.development,
              "There's more than two labels. LABELAUTY will not use labels.",
            );
          } else {
            // If there's just one label (no split by "settings.separator"), it will be used for both cases
            // Here, we have the possibility of use the same label for both cases
            if (labels_object.length === 1)
              debug(
                settings.development,
                "There's just one label. LABELAUTY will use this one for both cases.",
              );
          }
        }
      }

      /*
       * Let's begin the beauty
       */

      // Start hiding ugly checkboxes
      // Obviously, we don't need native checkboxes :O
      $object.css({ display: "none" });

      // We don't need more data-labelauty attributes!
      // Ok, ok, it's just for beauty improvement
      $object.removeAttr("data-labelauty");

      // Now, grab checkbox ID Attribute for "label" tag use
      // If there's no ID Attribute, then generate a new one
      input_id = $object.attr("id");

      if (
        settings.force_random_id ||
        input_id == null ||
        input_id.trim() === ""
      ) {
        var input_id_number = 1 + Math.floor(Math.random() * 1024000);
        input_id = "labelauty-" + input_id_number;

        // Is there any element with this random ID ?
        // If exists, then increment until get an unused ID
        while ($(input_id).length !== 0) {
          input_id_number++;
          input_id = "labelauty-" + input_id_number;
          debug(
            settings.development,
            "Holy crap, between 1024 thousand numbers, one raised a conflict. Trying again.",
          );
        }

        $object.attr("id", input_id);
      }

      // Now, add necessary tags to make this work
      // Here, we're going to test some control variables and act properly

      var element = jQuery(
        create(
          input_id,
          aria_label,
          selected,
          type,
          labels_object,
          use_labels,
          use_icons,
        ),
      );

      for (var idx = 0; idx < classes.length; idx++) {
        $(element).addClass(classes[idx]);
      }
      if ($object.is(":checked")) {
        $(element).addClass("btn-" + color);
        $(element).removeClass(
          "btn-light bg-secondary-subtle text-light-emphasis",
        );
        $(element).attr("aria-checked", true);
      } else {
        $(element).removeClass("btn-" + color);
        $(element).addClass(
          "btn-light bg-secondary-subtle text-light-emphasis",
        );
        $(element).attr("aria-checked", false);
      }
      var the_name = $object.attr("name");
      if (type == "radio") {
        $object.on("change", function () {
          $object
            .parents(".da-fieldset")
            .first()
            .find(".da-has-error")
            .remove();
          var anyChecked = false;
          $('input.labelauty[name="' + the_name + '"]:enabled').each(
            function () {
              if ($(this).is(":checked")) {
                $(this)
                  .next()
                  .addClass("btn-" + color);
                $(this)
                  .next()
                  .removeClass(
                    "btn-light bg-secondary-subtle text-light-emphasis",
                  );
                $(this).next().attr("aria-checked", true);
                anyChecked = true;
              } else {
                $(this)
                  .next()
                  .removeClass("btn-" + color);
                $(this)
                  .next()
                  .addClass(
                    "btn-light bg-secondary-subtle text-light-emphasis",
                  );
                $(this).next().attr("aria-checked", false);
              }
            },
          );
          if (anyChecked) {
            $('input.labelauty[name="' + the_name + '"]:enabled').each(
              function () {
                if ($(this).is(":checked")) {
                  $(this).next().attr("tabindex", 0);
                } else {
                  $(this).next().attr("tabindex", -1);
                }
              },
            );
          }
        });
      } else {
        $object.on("change", function () {
          $object
            .parents(".da-fieldset")
            .first()
            .find(".da-has-error")
            .remove();
          if ($(this).is(":checked")) {
            $(this)
              .next()
              .addClass("btn-" + color);
            $(this)
              .next()
              .removeClass("btn-light bg-secondary-subtle text-light-emphasis");
            $(this).next().attr("aria-checked", true);
          } else {
            $(this)
              .next()
              .removeClass("btn-" + color);
            $(this)
              .next()
              .addClass("btn-light bg-secondary-subtle text-light-emphasis");
            $(this).next().attr("aria-checked", false);
          }
        });
      }

      element.keydown(function (event) {
        $object.parents(".da-fieldset").first().find(".da-has-error").remove();
        var theCode = event.which || event.keyCode;
        if ($object.closest(".dachoicewithhelp").length > 0) {
          if (theCode === 40) {
            event.preventDefault();
            var nextElement = $object
              .closest(".dachoicewithhelp")
              .next("div")
              .find("label");
            if (nextElement.length) {
              nextElement.focus();
              nextElement.click();
            }
            return false;
          }
          if (theCode === 38) {
            event.preventDefault();
            var prevElement = $object
              .closest(".dachoicewithhelp")
              .prev("div")
              .find("label");
            if (prevElement.length) {
              prevElement.focus();
              prevElement.click();
            }
            return false;
          }
        } else {
          if (theCode === 40) {
            event.preventDefault();
            var nextElement = $object.next("label").next("input").next("label");
            if (nextElement.length) {
              nextElement.focus();
              nextElement.click();
            }
            return false;
          }
          if (theCode === 38) {
            event.preventDefault();
            var prevElement = $object.prev("label");
            if (prevElement.length) {
              prevElement.focus();
              prevElement.click();
            }
            return false;
          }
        }
        if (theCode === 32 || theCode === 13) {
          event.preventDefault();
          if ($object.is(":checked")) {
            $(this).addClass("btn-" + color);
            $(this).removeClass(
              "btn-light bg-secondary-subtle text-light-emphasis",
            );
            $object.prop("checked", false);
            $(this).attr("aria-checked", true);
          } else {
            $(this).addClass("btn-" + color);
            $(this).removeClass(
              "btn-light bg-secondary-subtle text-light-emphasis",
            );
            $object.prop("checked", true);
            $(this).attr("aria-checked", false);
          }
          $object.trigger("change");
        }
      });

      $object.after(element);

      // Now, add "min-width" to label
      // Let's say the truth, a fixed width is more beautiful than a variable width
      if (settings.minimum_width !== false)
        $object
          .next("label[for='" + input_id + "']")
          .css({ "min-width": settings.minimum_width });

      // Now, add "min-width" to label
      // Let's say the truth, a fixed width is more beautiful than a variable width
      if (settings.same_width != false && settings.label == true) {
        var label_object = $object.next("label[for='" + input_id + "']");
        var unchecked_width = getRealWidth(
          label_object.find("span.labelauty-unchecked"),
        );
        var checked_width = getRealWidth(
          label_object.find("span.labelauty-checked"),
        );

        if (unchecked_width > checked_width)
          label_object.find("span.labelauty-checked").width(unchecked_width);
        else label_object.find("span.labelauty-unchecked").width(checked_width);
      }
    });
  };

  /*
   * Tricky code to work with hidden elements, like tabs.
   * Note: This code is based on jquery.actual plugin.
   * https://github.com/dreamerslab/jquery.actual
   */
  function getRealWidth(element) {
    var width = 0;
    var $target = element;
    var css_class = "hiddenelement";

    $target = $target.clone().attr("class", css_class).appendTo("body");
    width = $target.width(true);
    $target.remove();

    return width;
  }

  function debug(debug, message) {
    if (debug && window.console && window.console.log)
      window.console.log("jQuery-LABELAUTY: " + message);
  }

  function decode_html(text) {
    text = text.replace(/&amp;/g, "&");
    text = text.replace(/&lt;/g, "<");
    text = text.replace(/&gt;/g, ">");
    text = text.replace(/&quot;/g, '"');
    return text;
  }
  function create(
    input_id,
    aria_label,
    selected,
    type,
    messages_object,
    label,
    icon,
  ) {
    var block;
    var unchecked_message;
    var checked_message;
    var aria = "";

    if (messages_object == null) unchecked_message = checked_message = "";
    else {
      unchecked_message = messages_object[0];

      // If checked message is null, then put the same text of unchecked message
      if (messages_object[1] == null) checked_message = unchecked_message;
      else checked_message = messages_object[1];
    }
    var uncheck_icon;
    if (type == "checkbox") {
      uncheck_icon = '<i class="fa-regular fa-square fa-fw"></i>';
    } else {
      uncheck_icon = '<i class="fa-regular fa-circle fa-fw"></i>';
    }
    var check_icon;
    if (type == "checkbox") {
      check_icon = '<i class="fa-solid fa-check fa-fw"></i>';
    } else {
      check_icon = '<i class="fa-solid fa-check-circle fa-fw"></i>';
    }

    if (aria_label == null) aria = "";
    else
      aria =
        'tabindex="0" role="' +
        type +
        '" aria-checked="' +
        selected +
        '" aria-label="' +
        aria_label +
        '"';

    if (label == true && icon == true) {
      block =
        '<label class="text-start btn btn-light bg-secondary-subtle text-light-emphasis dalabelauty" for="' +
        input_id +
        '" ' +
        aria +
        ">" +
        '<span class="labelauty-unchecked-image text-body-secondary">' +
        uncheck_icon +
        "</span>" +
        '<span class="labelauty-unchecked">' +
        decode_html(unchecked_message) +
        "</span>" +
        '<span class="labelauty-checked-image">' +
        check_icon +
        "</span>" +
        '<span class="labelauty-checked">' +
        decode_html(checked_message) +
        "</span>" +
        "</label>";
    } else if (label == true) {
      block =
        '<label class="text-start btn btn-light bg-secondary-subtle text-light-emphasis dalabelauty" for="' +
        input_id +
        '" ' +
        aria +
        ">" +
        '<span class="labelauty-unchecked">' +
        decode_html(unchecked_message) +
        "</span>" +
        '<span class="labelauty-checked">' +
        decode_html(checked_message) +
        "</span>" +
        "</label>";
    } else {
      block =
        '<label class="text-start btn btn-light bg-secondary-subtle text-light-emphasis dalabelauty" for="' +
        input_id +
        '" ' +
        aria +
        ">" +
        '<span class="labelauty-unchecked-image text-body-secondary">' +
        uncheck_icon +
        "</span>" +
        '<span class="labelauty-checked-image">' +
        check_icon +
        "</span>" +
        "</label>";
    }

    return block;
  }
})(window.jQuery);

/* piexifjs

The MIT License (MIT)

Copyright (c) 2014, 2015 hMatoba(https://github.com/hMatoba)

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
*/

(function () {
    "use strict";
    var that = {};
    that.version = "1.03";

    that.remove = function (jpeg) {
        var b64 = false;
        if (jpeg.slice(0, 2) == "\xff\xd8") {
        } else if (jpeg.slice(0, 23) == "data:image/jpeg;base64," || jpeg.slice(0, 22) == "data:image/jpg;base64,") {
            jpeg = atob(jpeg.split(",")[1]);
            b64 = true;
        } else {
            throw ("Given data is not jpeg.");
        }
        
        var segments = splitIntoSegments(jpeg);
        if (segments[1].slice(0, 2) == "\xff\xe1" && 
               segments[1].slice(4, 10) == "Exif\x00\x00") {
            segments = [segments[0]].concat(segments.slice(2));
        } else if (segments[2].slice(0, 2) == "\xff\xe1" &&
                   segments[2].slice(4, 10) == "Exif\x00\x00") {
            segments = segments.slice(0, 2).concat(segments.slice(3));
        } else {
            throw("Exif not found.");
        }
        
        var new_data = segments.join("");
        if (b64) {
            new_data = "data:image/jpeg;base64," + btoa(new_data);
        }

        return new_data;
    };


    that.insert = function (exif, jpeg) {
        var b64 = false;
        if (exif.slice(0, 6) != "\x45\x78\x69\x66\x00\x00") {
            throw ("Given data is not exif.");
        }
        if (jpeg.slice(0, 2) == "\xff\xd8") {
        } else if (jpeg.slice(0, 23) == "data:image/jpeg;base64," || jpeg.slice(0, 22) == "data:image/jpg;base64,") {
            jpeg = atob(jpeg.split(",")[1]);
            b64 = true;
        } else {
            throw ("Given data is not jpeg.");
        }

        var exifStr = "\xff\xe1" + pack(">H", [exif.length + 2]) + exif;
        var segments = splitIntoSegments(jpeg);
        var new_data = mergeSegments(segments, exifStr);
        if (b64) {
            new_data = "data:image/jpeg;base64," + btoa(new_data);
        }

        return new_data;
    };


    that.load = function (data) {
        var input_data;
        if (typeof (data) == "string") {
            if (data.slice(0, 2) == "\xff\xd8") {
                input_data = data;
            } else if (data.slice(0, 23) == "data:image/jpeg;base64," || data.slice(0, 22) == "data:image/jpg;base64,") {
                input_data = atob(data.split(",")[1]);
            } else if (data.slice(0, 4) == "Exif") {
                input_data = data.slice(6);
            } else {
                throw ("'load' gots invalid file data.");
            }
        } else {
            throw ("'load' gots invalid type argument.");
        }

        var exifDict = {};
        var exif_dict = {
            "0th": {},
            "Exif": {},
            "GPS": {},
            "Interop": {},
            "1st": {},
            "thumbnail": null
        };
        var exifReader = new ExifReader(input_data);
        if (exifReader.tiftag === null) {
            return exif_dict;
        }

        if (exifReader.tiftag.slice(0, 2) == "\x49\x49") {
            exifReader.endian_mark = "<";
        } else {
            exifReader.endian_mark = ">";
        }

        var pointer = unpack(exifReader.endian_mark + "L",
            exifReader.tiftag.slice(4, 8))[0];
        exif_dict["0th"] = exifReader.get_ifd(pointer, "0th");

        var first_ifd_pointer = exif_dict["0th"]["first_ifd_pointer"];
        delete exif_dict["0th"]["first_ifd_pointer"];

        if (34665 in exif_dict["0th"]) {
            pointer = exif_dict["0th"][34665];
            exif_dict["Exif"] = exifReader.get_ifd(pointer, "Exif");
        }
        if (34853 in exif_dict["0th"]) {
            pointer = exif_dict["0th"][34853];
            exif_dict["GPS"] = exifReader.get_ifd(pointer, "GPS");
        }
        if (40965 in exif_dict["Exif"]) {
            pointer = exif_dict["Exif"][40965];
            exif_dict["Interop"] = exifReader.get_ifd(pointer, "Interop");
        }
        if (first_ifd_pointer != "\x00\x00\x00\x00") {
            pointer = unpack(exifReader.endian_mark + "L",
                first_ifd_pointer)[0];
            exif_dict["1st"] = exifReader.get_ifd(pointer, "1st");
            if ((513 in exif_dict["1st"]) && (514 in exif_dict["1st"])) {
                var end = exif_dict["1st"][513] + exif_dict["1st"][514];
                var thumb = exifReader.tiftag.slice(exif_dict["1st"][513], end);
                exif_dict["thumbnail"] = thumb;
            }
        }

        return exif_dict;
    };


    that.dump = function (exif_dict_original) {
        var TIFF_HEADER_LENGTH = 8;

        var exif_dict = copy(exif_dict_original);
        var header = "Exif\x00\x00\x4d\x4d\x00\x2a\x00\x00\x00\x08";
        var exif_is = false;
        var gps_is = false;
        var interop_is = false;
        var first_is = false;

        var zeroth_ifd,
            exif_ifd,
            interop_ifd,
            gps_ifd,
            first_ifd;
        
        if ("0th" in exif_dict) {
            zeroth_ifd = exif_dict["0th"];
        } else {
            zeroth_ifd = {};
        }
        
        if ((("Exif" in exif_dict) && (Object.keys(exif_dict["Exif"]).length)) ||
            (("Interop" in exif_dict) && (Object.keys(exif_dict["Interop"]).length))) {
            zeroth_ifd[34665] = 1;
            exif_is = true;
            exif_ifd = exif_dict["Exif"];
            if (("Interop" in exif_dict) && Object.keys(exif_dict["Interop"]).length) {
                exif_ifd[40965] = 1;
                interop_is = true;
                interop_ifd = exif_dict["Interop"];
            } else if (Object.keys(exif_ifd).indexOf(that.ExifIFD.InteroperabilityTag.toString()) > -1) {
                delete exif_ifd[40965];
            }
        } else if (Object.keys(zeroth_ifd).indexOf(that.ImageIFD.ExifTag.toString()) > -1) {
            delete zeroth_ifd[34665];
        }

        if (("GPS" in exif_dict) && (Object.keys(exif_dict["GPS"]).length)) {
            zeroth_ifd[that.ImageIFD.GPSTag] = 1;
            gps_is = true;
            gps_ifd = exif_dict["GPS"];
        } else if (Object.keys(zeroth_ifd).indexOf(that.ImageIFD.GPSTag.toString()) > -1) {
            delete zeroth_ifd[that.ImageIFD.GPSTag];
        }
        
        if (("1st" in exif_dict) &&
            ("thumbnail" in exif_dict) &&
            (exif_dict["thumbnail"] != null)) {
            first_is = true;
            exif_dict["1st"][513] = 1;
            exif_dict["1st"][514] = 1;
            first_ifd = exif_dict["1st"];
        }
        
        var zeroth_set = _dict_to_bytes(zeroth_ifd, "0th", 0);
        var zeroth_length = (zeroth_set[0].length + exif_is * 12 + gps_is * 12 + 4 +
            zeroth_set[1].length);

        var exif_set,
            exif_bytes = "",
            exif_length = 0,
            gps_set,
            gps_bytes = "",
            gps_length = 0,
            interop_set,
            interop_bytes = "",
            interop_length = 0,
            first_set,
            first_bytes = "",
            thumbnail;
        if (exif_is) {
            exif_set = _dict_to_bytes(exif_ifd, "Exif", zeroth_length);
            exif_length = exif_set[0].length + interop_is * 12 + exif_set[1].length;
        }
        if (gps_is) {
            gps_set = _dict_to_bytes(gps_ifd, "GPS", zeroth_length + exif_length);
            gps_bytes = gps_set.join("");
            gps_length = gps_bytes.length;
        }
        if (interop_is) {
            var offset = zeroth_length + exif_length + gps_length;
            interop_set = _dict_to_bytes(interop_ifd, "Interop", offset);
            interop_bytes = interop_set.join("");
            interop_length = interop_bytes.length;
        }
        if (first_is) {
            var offset = zeroth_length + exif_length + gps_length + interop_length;
            first_set = _dict_to_bytes(first_ifd, "1st", offset);
            thumbnail = _get_thumbnail(exif_dict["thumbnail"]);
            if (thumbnail.length > 64000) {
                throw ("Given thumbnail is too large. max 64kB");
            }
        }

        var exif_pointer = "",
            gps_pointer = "",
            interop_pointer = "",
            first_ifd_pointer = "\x00\x00\x00\x00";
        if (exif_is) {
            var pointer_value = TIFF_HEADER_LENGTH + zeroth_length;
            var pointer_str = pack(">L", [pointer_value]);
            var key = 34665;
            var key_str = pack(">H", [key]);
            var type_str = pack(">H", [TYPES["Long"]]);
            var length_str = pack(">L", [1]);
            exif_pointer = key_str + type_str + length_str + pointer_str;
        }
        if (gps_is) {
            var pointer_value = TIFF_HEADER_LENGTH + zeroth_length + exif_length;
            var pointer_str = pack(">L", [pointer_value]);
            var key = 34853;
            var key_str = pack(">H", [key]);
            var type_str = pack(">H", [TYPES["Long"]]);
            var length_str = pack(">L", [1]);
            gps_pointer = key_str + type_str + length_str + pointer_str;
        }
        if (interop_is) {
            var pointer_value = (TIFF_HEADER_LENGTH +
                zeroth_length + exif_length + gps_length);
            var pointer_str = pack(">L", [pointer_value]);
            var key = 40965;
            var key_str = pack(">H", [key]);
            var type_str = pack(">H", [TYPES["Long"]]);
            var length_str = pack(">L", [1]);
            interop_pointer = key_str + type_str + length_str + pointer_str;
        }
        if (first_is) {
            var pointer_value = (TIFF_HEADER_LENGTH + zeroth_length +
                exif_length + gps_length + interop_length);
            first_ifd_pointer = pack(">L", [pointer_value]);
            var thumbnail_pointer = (pointer_value + first_set[0].length + 24 +
                4 + first_set[1].length);
            var thumbnail_p_bytes = ("\x02\x01\x00\x04\x00\x00\x00\x01" +
                pack(">L", [thumbnail_pointer]));
            var thumbnail_length_bytes = ("\x02\x02\x00\x04\x00\x00\x00\x01" +
                pack(">L", [thumbnail.length]));
            first_bytes = (first_set[0] + thumbnail_p_bytes +
                thumbnail_length_bytes + "\x00\x00\x00\x00" +
                first_set[1] + thumbnail);
        }

        var zeroth_bytes = (zeroth_set[0] + exif_pointer + gps_pointer +
            first_ifd_pointer + zeroth_set[1]);
        if (exif_is) {
            exif_bytes = exif_set[0] + interop_pointer + exif_set[1];
        }

        return (header + zeroth_bytes + exif_bytes + gps_bytes +
            interop_bytes + first_bytes);
    };


    function copy(obj) {
        return JSON.parse(JSON.stringify(obj));
    }


    function _get_thumbnail(jpeg) {
        var segments = splitIntoSegments(jpeg);
        while (("\xff\xe0" <= segments[1].slice(0, 2)) && (segments[1].slice(0, 2) <= "\xff\xef")) {
            segments = [segments[0]].concat(segments.slice(2));
        }
        return segments.join("");
    }


    function _pack_byte(array) {
        return pack(">" + nStr("B", array.length), array);
    }


    function _pack_short(array) {
        return pack(">" + nStr("H", array.length), array);
    }


    function _pack_long(array) {
        return pack(">" + nStr("L", array.length), array);
    }


    function _value_to_bytes(raw_value, value_type, offset) {
        var four_bytes_over = "";
        var value_str = "";
        var length,
            new_value,
            num,
            den;

        if (value_type == "Byte") {
            length = raw_value.length;
            if (length <= 4) {
                value_str = (_pack_byte(raw_value) +
                    nStr("\x00", 4 - length));
            } else {
                value_str = pack(">L", [offset]);
                four_bytes_over = _pack_byte(raw_value);
            }
        } else if (value_type == "Short") {
            length = raw_value.length;
            if (length <= 2) {
                value_str = (_pack_short(raw_value) +
                    nStr("\x00\x00", 2 - length));
            } else {
                value_str = pack(">L", [offset]);
                four_bytes_over = _pack_short(raw_value);
            }
        } else if (value_type == "Long") {
            length = raw_value.length;
            if (length <= 1) {
                value_str = _pack_long(raw_value);
            } else {
                value_str = pack(">L", [offset]);
                four_bytes_over = _pack_long(raw_value);
            }
        } else if (value_type == "Ascii") {
            new_value = raw_value + "\x00";
            length = new_value.length;
            if (length > 4) {
                value_str = pack(">L", [offset]);
                four_bytes_over = new_value;
            } else {
                value_str = new_value + nStr("\x00", 4 - length);
            }
        } else if (value_type == "Rational") {
            if (typeof (raw_value[0]) == "number") {
                length = 1;
                num = raw_value[0];
                den = raw_value[1];
                new_value = pack(">L", [num]) + pack(">L", [den]);
            } else {
                length = raw_value.length;
                new_value = "";
                for (var n = 0; n < length; n++) {
                    num = raw_value[n][0];
                    den = raw_value[n][1];
                    new_value += (pack(">L", [num]) +
                        pack(">L", [den]));
                }
            }
            value_str = pack(">L", [offset]);
            four_bytes_over = new_value;
        } else if (value_type == "SRational") {
            if (typeof (raw_value[0]) == "number") {
                length = 1;
                num = raw_value[0];
                den = raw_value[1];
                new_value = pack(">l", [num]) + pack(">l", [den]);
            } else {
                length = raw_value.length;
                new_value = "";
                for (var n = 0; n < length; n++) {
                    num = raw_value[n][0];
                    den = raw_value[n][1];
                    new_value += (pack(">l", [num]) +
                        pack(">l", [den]));
                }
            }
            value_str = pack(">L", [offset]);
            four_bytes_over = new_value;
        } else if (value_type == "Undefined") {
            length = raw_value.length;
            if (length > 4) {
                value_str = pack(">L", [offset]);
                four_bytes_over = raw_value;
            } else {
                value_str = raw_value + nStr("\x00", 4 - length);
            }
        }

        var length_str = pack(">L", [length]);

        return [length_str, value_str, four_bytes_over];
    }

    function _dict_to_bytes(ifd_dict, ifd, ifd_offset) {
        var TIFF_HEADER_LENGTH = 8;
        var tag_count = Object.keys(ifd_dict).length;
        var entry_header = pack(">H", [tag_count]);
        var entries_length;
        if (["0th", "1st"].indexOf(ifd) > -1) {
            entries_length = 2 + tag_count * 12 + 4;
        } else {
            entries_length = 2 + tag_count * 12;
        }
        var entries = "";
        var values = "";
        var key;

        for (var key in ifd_dict) {
            if (typeof (key) == "string") {
                key = parseInt(key);
            }
            if ((ifd == "0th") && ([34665, 34853].indexOf(key) > -1)) {
                continue;
            } else if ((ifd == "Exif") && (key == 40965)) {
                continue;
            } else if ((ifd == "1st") && ([513, 514].indexOf(key) > -1)) {
                continue;
            }

            var raw_value = ifd_dict[key];
            var key_str = pack(">H", [key]);
            var value_type = TAGS[ifd][key]["type"];
            var type_str = pack(">H", [TYPES[value_type]]);

            if (typeof (raw_value) == "number") {
                raw_value = [raw_value];
            }
            var offset = TIFF_HEADER_LENGTH + entries_length + ifd_offset + values.length;
            var b = _value_to_bytes(raw_value, value_type, offset);
            var length_str = b[0];
            var value_str = b[1];
            var four_bytes_over = b[2];

            entries += key_str + type_str + length_str + value_str;
            values += four_bytes_over;
        }

        return [entry_header + entries, values];
    }



    function ExifReader(data) {
        var segments,
            app1;
        if (data.slice(0, 2) == "\xff\xd8") { // JPEG
            segments = splitIntoSegments(data);
            app1 = getExifSeg(segments);
            if (app1) {
                this.tiftag = app1.slice(10);
            } else {
                this.tiftag = null;
            }
        } else if (["\x49\x49", "\x4d\x4d"].indexOf(data.slice(0, 2)) > -1) { // TIFF
            this.tiftag = data;
        } else if (data.slice(0, 4) == "Exif") { // Exif
            this.tiftag = data.slice(6);
        } else {
            throw ("Given file is neither JPEG nor TIFF.");
        }
    }

    ExifReader.prototype = {
        get_ifd: function (pointer, ifd_name) {
            var ifd_dict = {};
            var tag_count = unpack(this.endian_mark + "H",
                this.tiftag.slice(pointer, pointer + 2))[0];
            var offset = pointer + 2;
            var t;
            if (["0th", "1st"].indexOf(ifd_name) > -1) {
                t = "Image";
            } else {
                t = ifd_name;
            }

            for (var x = 0; x < tag_count; x++) {
                pointer = offset + 12 * x;
                var tag = unpack(this.endian_mark + "H",
                    this.tiftag.slice(pointer, pointer + 2))[0];
                var value_type = unpack(this.endian_mark + "H",
                    this.tiftag.slice(pointer + 2, pointer + 4))[0];
                var value_num = unpack(this.endian_mark + "L",
                    this.tiftag.slice(pointer + 4, pointer + 8))[0];
                var value = this.tiftag.slice(pointer + 8, pointer + 12);

                var v_set = [value_type, value_num, value];
                if (tag in TAGS[t]) {
                    ifd_dict[tag] = this.convert_value(v_set);
                }
            }

            if (ifd_name == "0th") {
                pointer = offset + 12 * tag_count;
                ifd_dict["first_ifd_pointer"] = this.tiftag.slice(pointer, pointer + 4);
            }

            return ifd_dict;
        },

        convert_value: function (val) {
            var data = null;
            var t = val[0];
            var length = val[1];
            var value = val[2];
            var pointer;

            if (t == 1) { // BYTE
                if (length > 4) {
                    pointer = unpack(this.endian_mark + "L", value)[0];
                    data = unpack(this.endian_mark + nStr("B", length),
                        this.tiftag.slice(pointer, pointer + length));
                } else {
                    data = unpack(this.endian_mark + nStr("B", length), value.slice(0, length));
                }
            } else if (t == 2) { // ASCII
                if (length > 4) {
                    pointer = unpack(this.endian_mark + "L", value)[0];
                    data = this.tiftag.slice(pointer, pointer + length - 1);
                } else {
                    data = value.slice(0, length - 1);
                }
            } else if (t == 3) { // SHORT
                if (length > 2) {
                    pointer = unpack(this.endian_mark + "L", value)[0];
                    data = unpack(this.endian_mark + nStr("H", length),
                        this.tiftag.slice(pointer, pointer + length * 2));
                } else {
                    data = unpack(this.endian_mark + nStr("H", length),
                        value.slice(0, length * 2));
                }
            } else if (t == 4) { // LONG
                if (length > 1) {
                    pointer = unpack(this.endian_mark + "L", value)[0];
                    data = unpack(this.endian_mark + nStr("L", length),
                        this.tiftag.slice(pointer, pointer + length * 4));
                } else {
                    data = unpack(this.endian_mark + nStr("L", length),
                        value);
                }
            } else if (t == 5) { // RATIONAL
                pointer = unpack(this.endian_mark + "L", value)[0];
                if (length > 1) {
                    data = [];
                    for (var x = 0; x < length; x++) {
                        data.push([unpack(this.endian_mark + "L",
                                this.tiftag.slice(pointer + x * 8, pointer + 4 + x * 8))[0],
                                   unpack(this.endian_mark + "L",
                                this.tiftag.slice(pointer + 4 + x * 8, pointer + 8 + x * 8))[0]
                                   ]);
                    }
                } else {
                    data = [unpack(this.endian_mark + "L",
                            this.tiftag.slice(pointer, pointer + 4))[0],
                            unpack(this.endian_mark + "L",
                            this.tiftag.slice(pointer + 4, pointer + 8))[0]
                            ];
                }
            } else if (t == 7) { // UNDEFINED BYTES
                if (length > 4) {
                    pointer = unpack(this.endian_mark + "L", value)[0];
                    data = this.tiftag.slice(pointer, pointer + length);
                } else {
                    data = value.slice(0, length);
                }
            } else if (t == 10) { // SRATIONAL
                pointer = unpack(this.endian_mark + "L", value)[0];
                if (length > 1) {
                    data = [];
                    for (var x = 0; x < length; x++) {
                        data.push([unpack(this.endian_mark + "l",
                                this.tiftag.slice(pointer + x * 8, pointer + 4 + x * 8))[0],
                                   unpack(this.endian_mark + "l",
                                this.tiftag.slice(pointer + 4 + x * 8, pointer + 8 + x * 8))[0]
                                  ]);
                    }
                } else {
                    data = [unpack(this.endian_mark + "l",
                            this.tiftag.slice(pointer, pointer + 4))[0],
                            unpack(this.endian_mark + "l",
                            this.tiftag.slice(pointer + 4, pointer + 8))[0]
                           ];
                }
            } else {
                throw ("Exif might be wrong. Got incorrect value " +
                    "type to decode. type:" + t);
            }

            if ((data instanceof Array) && (data.length == 1)) {
                return data[0];
            } else {
                return data;
            }
        },
    };


    if (typeof window !== "undefined" && typeof window.btoa === "function") {
        var btoa = window.btoa;
    }
    if (typeof btoa === "undefined") {
        var btoa = function (input) {        var output = "";
            var chr1, chr2, chr3, enc1, enc2, enc3, enc4;
            var i = 0;
            var keyStr = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";

            while (i < input.length) {

                chr1 = input.charCodeAt(i++);
                chr2 = input.charCodeAt(i++);
                chr3 = input.charCodeAt(i++);

                enc1 = chr1 >> 2;
                enc2 = ((chr1 & 3) << 4) | (chr2 >> 4);
                enc3 = ((chr2 & 15) << 2) | (chr3 >> 6);
                enc4 = chr3 & 63;

                if (isNaN(chr2)) {
                    enc3 = enc4 = 64;
                } else if (isNaN(chr3)) {
                    enc4 = 64;
                }

                output = output +
                keyStr.charAt(enc1) + keyStr.charAt(enc2) +
                keyStr.charAt(enc3) + keyStr.charAt(enc4);

            }

            return output;
        };
    }
    
    
    if (typeof window !== "undefined" && typeof window.atob === "function") {
        var atob = window.atob;
    }
    if (typeof atob === "undefined") {
        var atob = function (input) {
            var output = "";
            var chr1, chr2, chr3;
            var enc1, enc2, enc3, enc4;
            var i = 0;
            var keyStr = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";

            input = input.replace(/[^A-Za-z0-9\+\/\=]/g, "");

            while (i < input.length) {

                enc1 = keyStr.indexOf(input.charAt(i++));
                enc2 = keyStr.indexOf(input.charAt(i++));
                enc3 = keyStr.indexOf(input.charAt(i++));
                enc4 = keyStr.indexOf(input.charAt(i++));

                chr1 = (enc1 << 2) | (enc2 >> 4);
                chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);
                chr3 = ((enc3 & 3) << 6) | enc4;

                output = output + String.fromCharCode(chr1);

                if (enc3 != 64) {
                    output = output + String.fromCharCode(chr2);
                }
                if (enc4 != 64) {
                    output = output + String.fromCharCode(chr3);
                }

            }

            return output;
        };
    }


    function getImageSize(imageArray) {
        var segments = slice2Segments(imageArray);
        var seg,
            width,
            height,
            SOF = [192, 193, 194, 195, 197, 198, 199, 201, 202, 203, 205, 206, 207];

        for (var x = 0; x < segments.length; x++) {
            seg = segments[x];
            if (SOF.indexOf(seg[1]) >= 0) {
                height = seg[5] * 256 + seg[6];
                width = seg[7] * 256 + seg[8];
                break;
            }
        }
        return [width, height];
    }


    function pack(mark, array) {
        if (!(array instanceof Array)) {
            throw ("'pack' error. Got invalid type argument.");
        }
        if ((mark.length - 1) != array.length) {
            throw ("'pack' error. " + (mark.length - 1) + " marks, " + array.length + " elements.");
        }

        var littleEndian;
        if (mark[0] == "<") {
            littleEndian = true;
        } else if (mark[0] == ">") {
            littleEndian = false;
        } else {
            throw ("");
        }
        var packed = "";
        var p = 1;
        var val = null;
        var c = null;
        var valStr = null;

        while (c = mark[p]) {
            if (c.toLowerCase() == "b") {
                val = array[p - 1];
                if ((c == "b") && (val < 0)) {
                    val += 0x100;
                }
                if ((val > 0xff) || (val < 0)) {
                    throw ("'pack' error.");
                } else {
                    valStr = String.fromCharCode(val);
                }
            } else if (c == "H") {
                val = array[p - 1];
                if ((val > 0xffff) || (val < 0)) {
                    throw ("'pack' error.");
                } else {
                    valStr = String.fromCharCode(Math.floor((val % 0x10000) / 0x100)) +
                        String.fromCharCode(val % 0x100);
                    if (littleEndian) {
                        valStr = valStr.split("").reverse().join("");
                    }
                }
            } else if (c.toLowerCase() == "l") {
                val = array[p - 1];
                if ((c == "l") && (val < 0)) {
                    val += 0x100000000;
                }
                if ((val > 0xffffffff) || (val < 0)) {
                    throw ("'pack' error.");
                } else {
                    valStr = String.fromCharCode(Math.floor(val / 0x1000000)) +
                        String.fromCharCode(Math.floor((val % 0x1000000) / 0x10000)) +
                        String.fromCharCode(Math.floor((val % 0x10000) / 0x100)) +
                        String.fromCharCode(val % 0x100);
                    if (littleEndian) {
                        valStr = valStr.split("").reverse().join("");
                    }
                }
            } else {
                throw ("'pack' error.");
            }

            packed += valStr;
            p += 1;
        }

        return packed;
    }

    function unpack(mark, str) {
        if (typeof (str) != "string") {
            throw ("'unpack' error. Got invalid type argument.");
        }
        var l = 0;
        for (var markPointer = 1; markPointer < mark.length; markPointer++) {
            if (mark[markPointer].toLowerCase() == "b") {
                l += 1;
            } else if (mark[markPointer].toLowerCase() == "h") {
                l += 2;
            } else if (mark[markPointer].toLowerCase() == "l") {
                l += 4;
            } else {
                throw ("'unpack' error. Got invalid mark.");
            }
        }

        if (l != str.length) {
            throw ("'unpack' error. Mismatch between symbol and string length. " + l + ":" + str.length);
        }

        var littleEndian;
        if (mark[0] == "<") {
            littleEndian = true;
        } else if (mark[0] == ">") {
            littleEndian = false;
        } else {
            throw ("'unpack' error.");
        }
        var unpacked = [];
        var strPointer = 0;
        var p = 1;
        var val = null;
        var c = null;
        var length = null;
        var sliced = "";

        while (c = mark[p]) {
            if (c.toLowerCase() == "b") {
                length = 1;
                sliced = str.slice(strPointer, strPointer + length);
                val = sliced.charCodeAt(0);
                if ((c == "b") && (val >= 0x80)) {
                    val -= 0x100;
                }
            } else if (c == "H") {
                length = 2;
                sliced = str.slice(strPointer, strPointer + length);
                if (littleEndian) {
                    sliced = sliced.split("").reverse().join("");
                }
                val = sliced.charCodeAt(0) * 0x100 +
                    sliced.charCodeAt(1);
            } else if (c.toLowerCase() == "l") {
                length = 4;
                sliced = str.slice(strPointer, strPointer + length);
                if (littleEndian) {
                    sliced = sliced.split("").reverse().join("");
                }
                val = sliced.charCodeAt(0) * 0x1000000 +
                    sliced.charCodeAt(1) * 0x10000 +
                    sliced.charCodeAt(2) * 0x100 +
                    sliced.charCodeAt(3);
                if ((c == "l") && (val >= 0x80000000)) {
                    val -= 0x100000000;
                }
            } else {
                throw ("'unpack' error. " + c);
            }

            unpacked.push(val);
            strPointer += length;
            p += 1;
        }

        return unpacked;
    }

    function nStr(ch, num) {
        var str = "";
        for (var i = 0; i < num; i++) {
            str += ch;
        }
        return str;
    }

    function splitIntoSegments(data) {
        if (data.slice(0, 2) != "\xff\xd8") {
            throw ("Given data isn't JPEG.");
        }

        var head = 2;
        var segments = ["\xff\xd8"];
        while (true) {
            if (data.slice(head, head + 2) == "\xff\xda") {
                segments.push(data.slice(head));
                break;
            } else {
                var length = unpack(">H", data.slice(head + 2, head + 4))[0];
                var endPoint = head + length + 2;
                segments.push(data.slice(head, endPoint));
                head = endPoint;
            }

            if (head >= data.length) {
                throw ("Wrong JPEG data.");
            }
        }
        return segments;
    }


    function getExifSeg(segments) {
        var seg;
        for (var i = 0; i < segments.length; i++) {
            seg = segments[i];
            if (seg.slice(0, 2) == "\xff\xe1" &&
                   seg.slice(4, 10) == "Exif\x00\x00") {
                return seg;
            }
        }
        return null;
    }


    function mergeSegments(segments, exif) {
        
        if (segments[1].slice(0, 2) == "\xff\xe0" &&
            (segments[2].slice(0, 2) == "\xff\xe1" &&
             segments[2].slice(4, 10) == "Exif\x00\x00")) {
            if (exif) {
                segments[2] = exif;
                segments = ["\xff\xd8"].concat(segments.slice(2));
            } else if (exif == null) {
                segments = segments.slice(0, 2).concat(segments.slice(3));
            } else {
                segments = segments.slice(0).concat(segments.slice(2));
            }
        } else if (segments[1].slice(0, 2) == "\xff\xe0") {
            if (exif) {
                segments[1] = exif;
            }
        } else if (segments[1].slice(0, 2) == "\xff\xe1" &&
                   segments[1].slice(4, 10) == "Exif\x00\x00") {
            if (exif) {
                segments[1] = exif;
            } else if (exif == null) {
                segments = segments.slice(0).concat(segments.slice(2));
            }
        } else {
            if (exif) {
                segments = [segments[0], exif].concat(segments.slice(1));
            }
        }
        
        return segments.join("");
    }


    function toHex(str) {
        var hexStr = "";
        for (var i = 0; i < str.length; i++) {
            var h = str.charCodeAt(i);
            var hex = ((h < 10) ? "0" : "") + h.toString(16);
            hexStr += hex + " ";
        }
        return hexStr;
    }


    var TYPES = {
        "Byte": 1,
        "Ascii": 2,
        "Short": 3,
        "Long": 4,
        "Rational": 5,
        "Undefined": 7,
        "SLong": 9,
        "SRational": 10
    };


    var TAGS = {
        'Image': {
            11: {
                'name': 'ProcessingSoftware',
                'type': 'Ascii'
            },
            254: {
                'name': 'NewSubfileType',
                'type': 'Long'
            },
            255: {
                'name': 'SubfileType',
                'type': 'Short'
            },
            256: {
                'name': 'ImageWidth',
                'type': 'Long'
            },
            257: {
                'name': 'ImageLength',
                'type': 'Long'
            },
            258: {
                'name': 'BitsPerSample',
                'type': 'Short'
            },
            259: {
                'name': 'Compression',
                'type': 'Short'
            },
            262: {
                'name': 'PhotometricInterpretation',
                'type': 'Short'
            },
            263: {
                'name': 'Threshholding',
                'type': 'Short'
            },
            264: {
                'name': 'CellWidth',
                'type': 'Short'
            },
            265: {
                'name': 'CellLength',
                'type': 'Short'
            },
            266: {
                'name': 'FillOrder',
                'type': 'Short'
            },
            269: {
                'name': 'DocumentName',
                'type': 'Ascii'
            },
            270: {
                'name': 'ImageDescription',
                'type': 'Ascii'
            },
            271: {
                'name': 'Make',
                'type': 'Ascii'
            },
            272: {
                'name': 'Model',
                'type': 'Ascii'
            },
            273: {
                'name': 'StripOffsets',
                'type': 'Long'
            },
            274: {
                'name': 'Orientation',
                'type': 'Short'
            },
            277: {
                'name': 'SamplesPerPixel',
                'type': 'Short'
            },
            278: {
                'name': 'RowsPerStrip',
                'type': 'Long'
            },
            279: {
                'name': 'StripByteCounts',
                'type': 'Long'
            },
            282: {
                'name': 'XResolution',
                'type': 'Rational'
            },
            283: {
                'name': 'YResolution',
                'type': 'Rational'
            },
            284: {
                'name': 'PlanarConfiguration',
                'type': 'Short'
            },
            290: {
                'name': 'GrayResponseUnit',
                'type': 'Short'
            },
            291: {
                'name': 'GrayResponseCurve',
                'type': 'Short'
            },
            292: {
                'name': 'T4Options',
                'type': 'Long'
            },
            293: {
                'name': 'T6Options',
                'type': 'Long'
            },
            296: {
                'name': 'ResolutionUnit',
                'type': 'Short'
            },
            301: {
                'name': 'TransferFunction',
                'type': 'Short'
            },
            305: {
                'name': 'Software',
                'type': 'Ascii'
            },
            306: {
                'name': 'DateTime',
                'type': 'Ascii'
            },
            315: {
                'name': 'Artist',
                'type': 'Ascii'
            },
            316: {
                'name': 'HostComputer',
                'type': 'Ascii'
            },
            317: {
                'name': 'Predictor',
                'type': 'Short'
            },
            318: {
                'name': 'WhitePoint',
                'type': 'Rational'
            },
            319: {
                'name': 'PrimaryChromaticities',
                'type': 'Rational'
            },
            320: {
                'name': 'ColorMap',
                'type': 'Short'
            },
            321: {
                'name': 'HalftoneHints',
                'type': 'Short'
            },
            322: {
                'name': 'TileWidth',
                'type': 'Short'
            },
            323: {
                'name': 'TileLength',
                'type': 'Short'
            },
            324: {
                'name': 'TileOffsets',
                'type': 'Short'
            },
            325: {
                'name': 'TileByteCounts',
                'type': 'Short'
            },
            330: {
                'name': 'SubIFDs',
                'type': 'Long'
            },
            332: {
                'name': 'InkSet',
                'type': 'Short'
            },
            333: {
                'name': 'InkNames',
                'type': 'Ascii'
            },
            334: {
                'name': 'NumberOfInks',
                'type': 'Short'
            },
            336: {
                'name': 'DotRange',
                'type': 'Byte'
            },
            337: {
                'name': 'TargetPrinter',
                'type': 'Ascii'
            },
            338: {
                'name': 'ExtraSamples',
                'type': 'Short'
            },
            339: {
                'name': 'SampleFormat',
                'type': 'Short'
            },
            340: {
                'name': 'SMinSampleValue',
                'type': 'Short'
            },
            341: {
                'name': 'SMaxSampleValue',
                'type': 'Short'
            },
            342: {
                'name': 'TransferRange',
                'type': 'Short'
            },
            343: {
                'name': 'ClipPath',
                'type': 'Byte'
            },
            344: {
                'name': 'XClipPathUnits',
                'type': 'Long'
            },
            345: {
                'name': 'YClipPathUnits',
                'type': 'Long'
            },
            346: {
                'name': 'Indexed',
                'type': 'Short'
            },
            347: {
                'name': 'JPEGTables',
                'type': 'Undefined'
            },
            351: {
                'name': 'OPIProxy',
                'type': 'Short'
            },
            512: {
                'name': 'JPEGProc',
                'type': 'Long'
            },
            513: {
                'name': 'JPEGInterchangeFormat',
                'type': 'Long'
            },
            514: {
                'name': 'JPEGInterchangeFormatLength',
                'type': 'Long'
            },
            515: {
                'name': 'JPEGRestartInterval',
                'type': 'Short'
            },
            517: {
                'name': 'JPEGLosslessPredictors',
                'type': 'Short'
            },
            518: {
                'name': 'JPEGPointTransforms',
                'type': 'Short'
            },
            519: {
                'name': 'JPEGQTables',
                'type': 'Long'
            },
            520: {
                'name': 'JPEGDCTables',
                'type': 'Long'
            },
            521: {
                'name': 'JPEGACTables',
                'type': 'Long'
            },
            529: {
                'name': 'YCbCrCoefficients',
                'type': 'Rational'
            },
            530: {
                'name': 'YCbCrSubSampling',
                'type': 'Short'
            },
            531: {
                'name': 'YCbCrPositioning',
                'type': 'Short'
            },
            532: {
                'name': 'ReferenceBlackWhite',
                'type': 'Rational'
            },
            700: {
                'name': 'XMLPacket',
                'type': 'Byte'
            },
            18246: {
                'name': 'Rating',
                'type': 'Short'
            },
            18249: {
                'name': 'RatingPercent',
                'type': 'Short'
            },
            32781: {
                'name': 'ImageID',
                'type': 'Ascii'
            },
            33421: {
                'name': 'CFARepeatPatternDim',
                'type': 'Short'
            },
            33422: {
                'name': 'CFAPattern',
                'type': 'Byte'
            },
            33423: {
                'name': 'BatteryLevel',
                'type': 'Rational'
            },
            33432: {
                'name': 'Copyright',
                'type': 'Ascii'
            },
            33434: {
                'name': 'ExposureTime',
                'type': 'Rational'
            },
            34377: {
                'name': 'ImageResources',
                'type': 'Byte'
            },
            34665: {
                'name': 'ExifTag',
                'type': 'Long'
            },
            34675: {
                'name': 'InterColorProfile',
                'type': 'Undefined'
            },
            34853: {
                'name': 'GPSTag',
                'type': 'Long'
            },
            34857: {
                'name': 'Interlace',
                'type': 'Short'
            },
            34858: {
                'name': 'TimeZoneOffset',
                'type': 'Long'
            },
            34859: {
                'name': 'SelfTimerMode',
                'type': 'Short'
            },
            37387: {
                'name': 'FlashEnergy',
                'type': 'Rational'
            },
            37388: {
                'name': 'SpatialFrequencyResponse',
                'type': 'Undefined'
            },
            37389: {
                'name': 'Noise',
                'type': 'Undefined'
            },
            37390: {
                'name': 'FocalPlaneXResolution',
                'type': 'Rational'
            },
            37391: {
                'name': 'FocalPlaneYResolution',
                'type': 'Rational'
            },
            37392: {
                'name': 'FocalPlaneResolutionUnit',
                'type': 'Short'
            },
            37393: {
                'name': 'ImageNumber',
                'type': 'Long'
            },
            37394: {
                'name': 'SecurityClassification',
                'type': 'Ascii'
            },
            37395: {
                'name': 'ImageHistory',
                'type': 'Ascii'
            },
            37397: {
                'name': 'ExposureIndex',
                'type': 'Rational'
            },
            37398: {
                'name': 'TIFFEPStandardID',
                'type': 'Byte'
            },
            37399: {
                'name': 'SensingMethod',
                'type': 'Short'
            },
            40091: {
                'name': 'XPTitle',
                'type': 'Byte'
            },
            40092: {
                'name': 'XPComment',
                'type': 'Byte'
            },
            40093: {
                'name': 'XPAuthor',
                'type': 'Byte'
            },
            40094: {
                'name': 'XPKeywords',
                'type': 'Byte'
            },
            40095: {
                'name': 'XPSubject',
                'type': 'Byte'
            },
            50341: {
                'name': 'PrintImageMatching',
                'type': 'Undefined'
            },
            50706: {
                'name': 'DNGVersion',
                'type': 'Byte'
            },
            50707: {
                'name': 'DNGBackwardVersion',
                'type': 'Byte'
            },
            50708: {
                'name': 'UniqueCameraModel',
                'type': 'Ascii'
            },
            50709: {
                'name': 'LocalizedCameraModel',
                'type': 'Byte'
            },
            50710: {
                'name': 'CFAPlaneColor',
                'type': 'Byte'
            },
            50711: {
                'name': 'CFALayout',
                'type': 'Short'
            },
            50712: {
                'name': 'LinearizationTable',
                'type': 'Short'
            },
            50713: {
                'name': 'BlackLevelRepeatDim',
                'type': 'Short'
            },
            50714: {
                'name': 'BlackLevel',
                'type': 'Rational'
            },
            50715: {
                'name': 'BlackLevelDeltaH',
                'type': 'SRational'
            },
            50716: {
                'name': 'BlackLevelDeltaV',
                'type': 'SRational'
            },
            50717: {
                'name': 'WhiteLevel',
                'type': 'Short'
            },
            50718: {
                'name': 'DefaultScale',
                'type': 'Rational'
            },
            50719: {
                'name': 'DefaultCropOrigin',
                'type': 'Short'
            },
            50720: {
                'name': 'DefaultCropSize',
                'type': 'Short'
            },
            50721: {
                'name': 'ColorMatrix1',
                'type': 'SRational'
            },
            50722: {
                'name': 'ColorMatrix2',
                'type': 'SRational'
            },
            50723: {
                'name': 'CameraCalibration1',
                'type': 'SRational'
            },
            50724: {
                'name': 'CameraCalibration2',
                'type': 'SRational'
            },
            50725: {
                'name': 'ReductionMatrix1',
                'type': 'SRational'
            },
            50726: {
                'name': 'ReductionMatrix2',
                'type': 'SRational'
            },
            50727: {
                'name': 'AnalogBalance',
                'type': 'Rational'
            },
            50728: {
                'name': 'AsShotNeutral',
                'type': 'Short'
            },
            50729: {
                'name': 'AsShotWhiteXY',
                'type': 'Rational'
            },
            50730: {
                'name': 'BaselineExposure',
                'type': 'SRational'
            },
            50731: {
                'name': 'BaselineNoise',
                'type': 'Rational'
            },
            50732: {
                'name': 'BaselineSharpness',
                'type': 'Rational'
            },
            50733: {
                'name': 'BayerGreenSplit',
                'type': 'Long'
            },
            50734: {
                'name': 'LinearResponseLimit',
                'type': 'Rational'
            },
            50735: {
                'name': 'CameraSerialNumber',
                'type': 'Ascii'
            },
            50736: {
                'name': 'LensInfo',
                'type': 'Rational'
            },
            50737: {
                'name': 'ChromaBlurRadius',
                'type': 'Rational'
            },
            50738: {
                'name': 'AntiAliasStrength',
                'type': 'Rational'
            },
            50739: {
                'name': 'ShadowScale',
                'type': 'SRational'
            },
            50740: {
                'name': 'DNGPrivateData',
                'type': 'Byte'
            },
            50741: {
                'name': 'MakerNoteSafety',
                'type': 'Short'
            },
            50778: {
                'name': 'CalibrationIlluminant1',
                'type': 'Short'
            },
            50779: {
                'name': 'CalibrationIlluminant2',
                'type': 'Short'
            },
            50780: {
                'name': 'BestQualityScale',
                'type': 'Rational'
            },
            50781: {
                'name': 'RawDataUniqueID',
                'type': 'Byte'
            },
            50827: {
                'name': 'OriginalRawFileName',
                'type': 'Byte'
            },
            50828: {
                'name': 'OriginalRawFileData',
                'type': 'Undefined'
            },
            50829: {
                'name': 'ActiveArea',
                'type': 'Short'
            },
            50830: {
                'name': 'MaskedAreas',
                'type': 'Short'
            },
            50831: {
                'name': 'AsShotICCProfile',
                'type': 'Undefined'
            },
            50832: {
                'name': 'AsShotPreProfileMatrix',
                'type': 'SRational'
            },
            50833: {
                'name': 'CurrentICCProfile',
                'type': 'Undefined'
            },
            50834: {
                'name': 'CurrentPreProfileMatrix',
                'type': 'SRational'
            },
            50879: {
                'name': 'ColorimetricReference',
                'type': 'Short'
            },
            50931: {
                'name': 'CameraCalibrationSignature',
                'type': 'Byte'
            },
            50932: {
                'name': 'ProfileCalibrationSignature',
                'type': 'Byte'
            },
            50934: {
                'name': 'AsShotProfileName',
                'type': 'Byte'
            },
            50935: {
                'name': 'NoiseReductionApplied',
                'type': 'Rational'
            },
            50936: {
                'name': 'ProfileName',
                'type': 'Byte'
            },
            50937: {
                'name': 'ProfileHueSatMapDims',
                'type': 'Long'
            },
            50938: {
                'name': 'ProfileHueSatMapData1',
                'type': 'Float'
            },
            50939: {
                'name': 'ProfileHueSatMapData2',
                'type': 'Float'
            },
            50940: {
                'name': 'ProfileToneCurve',
                'type': 'Float'
            },
            50941: {
                'name': 'ProfileEmbedPolicy',
                'type': 'Long'
            },
            50942: {
                'name': 'ProfileCopyright',
                'type': 'Byte'
            },
            50964: {
                'name': 'ForwardMatrix1',
                'type': 'SRational'
            },
            50965: {
                'name': 'ForwardMatrix2',
                'type': 'SRational'
            },
            50966: {
                'name': 'PreviewApplicationName',
                'type': 'Byte'
            },
            50967: {
                'name': 'PreviewApplicationVersion',
                'type': 'Byte'
            },
            50968: {
                'name': 'PreviewSettingsName',
                'type': 'Byte'
            },
            50969: {
                'name': 'PreviewSettingsDigest',
                'type': 'Byte'
            },
            50970: {
                'name': 'PreviewColorSpace',
                'type': 'Long'
            },
            50971: {
                'name': 'PreviewDateTime',
                'type': 'Ascii'
            },
            50972: {
                'name': 'RawImageDigest',
                'type': 'Undefined'
            },
            50973: {
                'name': 'OriginalRawFileDigest',
                'type': 'Undefined'
            },
            50974: {
                'name': 'SubTileBlockSize',
                'type': 'Long'
            },
            50975: {
                'name': 'RowInterleaveFactor',
                'type': 'Long'
            },
            50981: {
                'name': 'ProfileLookTableDims',
                'type': 'Long'
            },
            50982: {
                'name': 'ProfileLookTableData',
                'type': 'Float'
            },
            51008: {
                'name': 'OpcodeList1',
                'type': 'Undefined'
            },
            51009: {
                'name': 'OpcodeList2',
                'type': 'Undefined'
            },
            51022: {
                'name': 'OpcodeList3',
                'type': 'Undefined'
            }
        },
        'Exif': {
            33434: {
                'name': 'ExposureTime',
                'type': 'Rational'
            },
            33437: {
                'name': 'FNumber',
                'type': 'Rational'
            },
            34850: {
                'name': 'ExposureProgram',
                'type': 'Short'
            },
            34852: {
                'name': 'SpectralSensitivity',
                'type': 'Ascii'
            },
            34855: {
                'name': 'ISOSpeedRatings',
                'type': 'Short'
            },
            34856: {
                'name': 'OECF',
                'type': 'Undefined'
            },
            34864: {
                'name': 'SensitivityType',
                'type': 'Short'
            },
            34865: {
                'name': 'StandardOutputSensitivity',
                'type': 'Long'
            },
            34866: {
                'name': 'RecommendedExposureIndex',
                'type': 'Long'
            },
            34867: {
                'name': 'ISOSpeed',
                'type': 'Long'
            },
            34868: {
                'name': 'ISOSpeedLatitudeyyy',
                'type': 'Long'
            },
            34869: {
                'name': 'ISOSpeedLatitudezzz',
                'type': 'Long'
            },
            36864: {
                'name': 'ExifVersion',
                'type': 'Undefined'
            },
            36867: {
                'name': 'DateTimeOriginal',
                'type': 'Ascii'
            },
            36868: {
                'name': 'DateTimeDigitized',
                'type': 'Ascii'
            },
            37121: {
                'name': 'ComponentsConfiguration',
                'type': 'Undefined'
            },
            37122: {
                'name': 'CompressedBitsPerPixel',
                'type': 'Rational'
            },
            37377: {
                'name': 'ShutterSpeedValue',
                'type': 'SRational'
            },
            37378: {
                'name': 'ApertureValue',
                'type': 'Rational'
            },
            37379: {
                'name': 'BrightnessValue',
                'type': 'SRational'
            },
            37380: {
                'name': 'ExposureBiasValue',
                'type': 'SRational'
            },
            37381: {
                'name': 'MaxApertureValue',
                'type': 'Rational'
            },
            37382: {
                'name': 'SubjectDistance',
                'type': 'Rational'
            },
            37383: {
                'name': 'MeteringMode',
                'type': 'Short'
            },
            37384: {
                'name': 'LightSource',
                'type': 'Short'
            },
            37385: {
                'name': 'Flash',
                'type': 'Short'
            },
            37386: {
                'name': 'FocalLength',
                'type': 'Rational'
            },
            37396: {
                'name': 'SubjectArea',
                'type': 'Short'
            },
            37500: {
                'name': 'MakerNote',
                'type': 'Undefined'
            },
            37510: {
                'name': 'UserComment',
                'type': 'Ascii'
            },
            37520: {
                'name': 'SubSecTime',
                'type': 'Ascii'
            },
            37521: {
                'name': 'SubSecTimeOriginal',
                'type': 'Ascii'
            },
            37522: {
                'name': 'SubSecTimeDigitized',
                'type': 'Ascii'
            },
            40960: {
                'name': 'FlashpixVersion',
                'type': 'Undefined'
            },
            40961: {
                'name': 'ColorSpace',
                'type': 'Short'
            },
            40962: {
                'name': 'PixelXDimension',
                'type': 'Long'
            },
            40963: {
                'name': 'PixelYDimension',
                'type': 'Long'
            },
            40964: {
                'name': 'RelatedSoundFile',
                'type': 'Ascii'
            },
            40965: {
                'name': 'InteroperabilityTag',
                'type': 'Long'
            },
            41483: {
                'name': 'FlashEnergy',
                'type': 'Rational'
            },
            41484: {
                'name': 'SpatialFrequencyResponse',
                'type': 'Undefined'
            },
            41486: {
                'name': 'FocalPlaneXResolution',
                'type': 'Rational'
            },
            41487: {
                'name': 'FocalPlaneYResolution',
                'type': 'Rational'
            },
            41488: {
                'name': 'FocalPlaneResolutionUnit',
                'type': 'Short'
            },
            41492: {
                'name': 'SubjectLocation',
                'type': 'Short'
            },
            41493: {
                'name': 'ExposureIndex',
                'type': 'Rational'
            },
            41495: {
                'name': 'SensingMethod',
                'type': 'Short'
            },
            41728: {
                'name': 'FileSource',
                'type': 'Undefined'
            },
            41729: {
                'name': 'SceneType',
                'type': 'Undefined'
            },
            41730: {
                'name': 'CFAPattern',
                'type': 'Undefined'
            },
            41985: {
                'name': 'CustomRendered',
                'type': 'Short'
            },
            41986: {
                'name': 'ExposureMode',
                'type': 'Short'
            },
            41987: {
                'name': 'WhiteBalance',
                'type': 'Short'
            },
            41988: {
                'name': 'DigitalZoomRatio',
                'type': 'Rational'
            },
            41989: {
                'name': 'FocalLengthIn35mmFilm',
                'type': 'Short'
            },
            41990: {
                'name': 'SceneCaptureType',
                'type': 'Short'
            },
            41991: {
                'name': 'GainControl',
                'type': 'Short'
            },
            41992: {
                'name': 'Contrast',
                'type': 'Short'
            },
            41993: {
                'name': 'Saturation',
                'type': 'Short'
            },
            41994: {
                'name': 'Sharpness',
                'type': 'Short'
            },
            41995: {
                'name': 'DeviceSettingDescription',
                'type': 'Undefined'
            },
            41996: {
                'name': 'SubjectDistanceRange',
                'type': 'Short'
            },
            42016: {
                'name': 'ImageUniqueID',
                'type': 'Ascii'
            },
            42032: {
                'name': 'CameraOwnerName',
                'type': 'Ascii'
            },
            42033: {
                'name': 'BodySerialNumber',
                'type': 'Ascii'
            },
            42034: {
                'name': 'LensSpecification',
                'type': 'Rational'
            },
            42035: {
                'name': 'LensMake',
                'type': 'Ascii'
            },
            42036: {
                'name': 'LensModel',
                'type': 'Ascii'
            },
            42037: {
                'name': 'LensSerialNumber',
                'type': 'Ascii'
            },
            42240: {
                'name': 'Gamma',
                'type': 'Rational'
            }
        },
        'GPS': {
            0: {
                'name': 'GPSVersionID',
                'type': 'Byte'
            },
            1: {
                'name': 'GPSLatitudeRef',
                'type': 'Ascii'
            },
            2: {
                'name': 'GPSLatitude',
                'type': 'Rational'
            },
            3: {
                'name': 'GPSLongitudeRef',
                'type': 'Ascii'
            },
            4: {
                'name': 'GPSLongitude',
                'type': 'Rational'
            },
            5: {
                'name': 'GPSAltitudeRef',
                'type': 'Byte'
            },
            6: {
                'name': 'GPSAltitude',
                'type': 'Rational'
            },
            7: {
                'name': 'GPSTimeStamp',
                'type': 'Rational'
            },
            8: {
                'name': 'GPSSatellites',
                'type': 'Ascii'
            },
            9: {
                'name': 'GPSStatus',
                'type': 'Ascii'
            },
            10: {
                'name': 'GPSMeasureMode',
                'type': 'Ascii'
            },
            11: {
                'name': 'GPSDOP',
                'type': 'Rational'
            },
            12: {
                'name': 'GPSSpeedRef',
                'type': 'Ascii'
            },
            13: {
                'name': 'GPSSpeed',
                'type': 'Rational'
            },
            14: {
                'name': 'GPSTrackRef',
                'type': 'Ascii'
            },
            15: {
                'name': 'GPSTrack',
                'type': 'Rational'
            },
            16: {
                'name': 'GPSImgDirectionRef',
                'type': 'Ascii'
            },
            17: {
                'name': 'GPSImgDirection',
                'type': 'Rational'
            },
            18: {
                'name': 'GPSMapDatum',
                'type': 'Ascii'
            },
            19: {
                'name': 'GPSDestLatitudeRef',
                'type': 'Ascii'
            },
            20: {
                'name': 'GPSDestLatitude',
                'type': 'Rational'
            },
            21: {
                'name': 'GPSDestLongitudeRef',
                'type': 'Ascii'
            },
            22: {
                'name': 'GPSDestLongitude',
                'type': 'Rational'
            },
            23: {
                'name': 'GPSDestBearingRef',
                'type': 'Ascii'
            },
            24: {
                'name': 'GPSDestBearing',
                'type': 'Rational'
            },
            25: {
                'name': 'GPSDestDistanceRef',
                'type': 'Ascii'
            },
            26: {
                'name': 'GPSDestDistance',
                'type': 'Rational'
            },
            27: {
                'name': 'GPSProcessingMethod',
                'type': 'Undefined'
            },
            28: {
                'name': 'GPSAreaInformation',
                'type': 'Undefined'
            },
            29: {
                'name': 'GPSDateStamp',
                'type': 'Ascii'
            },
            30: {
                'name': 'GPSDifferential',
                'type': 'Short'
            },
            31: {
                'name': 'GPSHPositioningError',
                'type': 'Rational'
            }
        },
        'Interop': {
            1: {
                'name': 'InteroperabilityIndex',
                'type': 'Ascii'
            }
        },
    };
    TAGS["0th"] = TAGS["Image"];
    TAGS["1st"] = TAGS["Image"];
    that.TAGS = TAGS;

    
    that.ImageIFD = {
        ProcessingSoftware:11,
        NewSubfileType:254,
        SubfileType:255,
        ImageWidth:256,
        ImageLength:257,
        BitsPerSample:258,
        Compression:259,
        PhotometricInterpretation:262,
        Threshholding:263,
        CellWidth:264,
        CellLength:265,
        FillOrder:266,
        DocumentName:269,
        ImageDescription:270,
        Make:271,
        Model:272,
        StripOffsets:273,
        Orientation:274,
        SamplesPerPixel:277,
        RowsPerStrip:278,
        StripByteCounts:279,
        XResolution:282,
        YResolution:283,
        PlanarConfiguration:284,
        GrayResponseUnit:290,
        GrayResponseCurve:291,
        T4Options:292,
        T6Options:293,
        ResolutionUnit:296,
        TransferFunction:301,
        Software:305,
        DateTime:306,
        Artist:315,
        HostComputer:316,
        Predictor:317,
        WhitePoint:318,
        PrimaryChromaticities:319,
        ColorMap:320,
        HalftoneHints:321,
        TileWidth:322,
        TileLength:323,
        TileOffsets:324,
        TileByteCounts:325,
        SubIFDs:330,
        InkSet:332,
        InkNames:333,
        NumberOfInks:334,
        DotRange:336,
        TargetPrinter:337,
        ExtraSamples:338,
        SampleFormat:339,
        SMinSampleValue:340,
        SMaxSampleValue:341,
        TransferRange:342,
        ClipPath:343,
        XClipPathUnits:344,
        YClipPathUnits:345,
        Indexed:346,
        JPEGTables:347,
        OPIProxy:351,
        JPEGProc:512,
        JPEGInterchangeFormat:513,
        JPEGInterchangeFormatLength:514,
        JPEGRestartInterval:515,
        JPEGLosslessPredictors:517,
        JPEGPointTransforms:518,
        JPEGQTables:519,
        JPEGDCTables:520,
        JPEGACTables:521,
        YCbCrCoefficients:529,
        YCbCrSubSampling:530,
        YCbCrPositioning:531,
        ReferenceBlackWhite:532,
        XMLPacket:700,
        Rating:18246,
        RatingPercent:18249,
        ImageID:32781,
        CFARepeatPatternDim:33421,
        CFAPattern:33422,
        BatteryLevel:33423,
        Copyright:33432,
        ExposureTime:33434,
        ImageResources:34377,
        ExifTag:34665,
        InterColorProfile:34675,
        GPSTag:34853,
        Interlace:34857,
        TimeZoneOffset:34858,
        SelfTimerMode:34859,
        FlashEnergy:37387,
        SpatialFrequencyResponse:37388,
        Noise:37389,
        FocalPlaneXResolution:37390,
        FocalPlaneYResolution:37391,
        FocalPlaneResolutionUnit:37392,
        ImageNumber:37393,
        SecurityClassification:37394,
        ImageHistory:37395,
        ExposureIndex:37397,
        TIFFEPStandardID:37398,
        SensingMethod:37399,
        XPTitle:40091,
        XPComment:40092,
        XPAuthor:40093,
        XPKeywords:40094,
        XPSubject:40095,
        PrintImageMatching:50341,
        DNGVersion:50706,
        DNGBackwardVersion:50707,
        UniqueCameraModel:50708,
        LocalizedCameraModel:50709,
        CFAPlaneColor:50710,
        CFALayout:50711,
        LinearizationTable:50712,
        BlackLevelRepeatDim:50713,
        BlackLevel:50714,
        BlackLevelDeltaH:50715,
        BlackLevelDeltaV:50716,
        WhiteLevel:50717,
        DefaultScale:50718,
        DefaultCropOrigin:50719,
        DefaultCropSize:50720,
        ColorMatrix1:50721,
        ColorMatrix2:50722,
        CameraCalibration1:50723,
        CameraCalibration2:50724,
        ReductionMatrix1:50725,
        ReductionMatrix2:50726,
        AnalogBalance:50727,
        AsShotNeutral:50728,
        AsShotWhiteXY:50729,
        BaselineExposure:50730,
        BaselineNoise:50731,
        BaselineSharpness:50732,
        BayerGreenSplit:50733,
        LinearResponseLimit:50734,
        CameraSerialNumber:50735,
        LensInfo:50736,
        ChromaBlurRadius:50737,
        AntiAliasStrength:50738,
        ShadowScale:50739,
        DNGPrivateData:50740,
        MakerNoteSafety:50741,
        CalibrationIlluminant1:50778,
        CalibrationIlluminant2:50779,
        BestQualityScale:50780,
        RawDataUniqueID:50781,
        OriginalRawFileName:50827,
        OriginalRawFileData:50828,
        ActiveArea:50829,
        MaskedAreas:50830,
        AsShotICCProfile:50831,
        AsShotPreProfileMatrix:50832,
        CurrentICCProfile:50833,
        CurrentPreProfileMatrix:50834,
        ColorimetricReference:50879,
        CameraCalibrationSignature:50931,
        ProfileCalibrationSignature:50932,
        AsShotProfileName:50934,
        NoiseReductionApplied:50935,
        ProfileName:50936,
        ProfileHueSatMapDims:50937,
        ProfileHueSatMapData1:50938,
        ProfileHueSatMapData2:50939,
        ProfileToneCurve:50940,
        ProfileEmbedPolicy:50941,
        ProfileCopyright:50942,
        ForwardMatrix1:50964,
        ForwardMatrix2:50965,
        PreviewApplicationName:50966,
        PreviewApplicationVersion:50967,
        PreviewSettingsName:50968,
        PreviewSettingsDigest:50969,
        PreviewColorSpace:50970,
        PreviewDateTime:50971,
        RawImageDigest:50972,
        OriginalRawFileDigest:50973,
        SubTileBlockSize:50974,
        RowInterleaveFactor:50975,
        ProfileLookTableDims:50981,
        ProfileLookTableData:50982,
        OpcodeList1:51008,
        OpcodeList2:51009,
        OpcodeList3:51022,
        NoiseProfile:51041,
    };

    
    that.ExifIFD = {
        ExposureTime:33434,
        FNumber:33437,
        ExposureProgram:34850,
        SpectralSensitivity:34852,
        ISOSpeedRatings:34855,
        OECF:34856,
        SensitivityType:34864,
        StandardOutputSensitivity:34865,
        RecommendedExposureIndex:34866,
        ISOSpeed:34867,
        ISOSpeedLatitudeyyy:34868,
        ISOSpeedLatitudezzz:34869,
        ExifVersion:36864,
        DateTimeOriginal:36867,
        DateTimeDigitized:36868,
        ComponentsConfiguration:37121,
        CompressedBitsPerPixel:37122,
        ShutterSpeedValue:37377,
        ApertureValue:37378,
        BrightnessValue:37379,
        ExposureBiasValue:37380,
        MaxApertureValue:37381,
        SubjectDistance:37382,
        MeteringMode:37383,
        LightSource:37384,
        Flash:37385,
        FocalLength:37386,
        SubjectArea:37396,
        MakerNote:37500,
        UserComment:37510,
        SubSecTime:37520,
        SubSecTimeOriginal:37521,
        SubSecTimeDigitized:37522,
        FlashpixVersion:40960,
        ColorSpace:40961,
        PixelXDimension:40962,
        PixelYDimension:40963,
        RelatedSoundFile:40964,
        InteroperabilityTag:40965,
        FlashEnergy:41483,
        SpatialFrequencyResponse:41484,
        FocalPlaneXResolution:41486,
        FocalPlaneYResolution:41487,
        FocalPlaneResolutionUnit:41488,
        SubjectLocation:41492,
        ExposureIndex:41493,
        SensingMethod:41495,
        FileSource:41728,
        SceneType:41729,
        CFAPattern:41730,
        CustomRendered:41985,
        ExposureMode:41986,
        WhiteBalance:41987,
        DigitalZoomRatio:41988,
        FocalLengthIn35mmFilm:41989,
        SceneCaptureType:41990,
        GainControl:41991,
        Contrast:41992,
        Saturation:41993,
        Sharpness:41994,
        DeviceSettingDescription:41995,
        SubjectDistanceRange:41996,
        ImageUniqueID:42016,
        CameraOwnerName:42032,
        BodySerialNumber:42033,
        LensSpecification:42034,
        LensMake:42035,
        LensModel:42036,
        LensSerialNumber:42037,
        Gamma:42240,
    };


    that.GPSIFD = {
        GPSVersionID:0,
        GPSLatitudeRef:1,
        GPSLatitude:2,
        GPSLongitudeRef:3,
        GPSLongitude:4,
        GPSAltitudeRef:5,
        GPSAltitude:6,
        GPSTimeStamp:7,
        GPSSatellites:8,
        GPSStatus:9,
        GPSMeasureMode:10,
        GPSDOP:11,
        GPSSpeedRef:12,
        GPSSpeed:13,
        GPSTrackRef:14,
        GPSTrack:15,
        GPSImgDirectionRef:16,
        GPSImgDirection:17,
        GPSMapDatum:18,
        GPSDestLatitudeRef:19,
        GPSDestLatitude:20,
        GPSDestLongitudeRef:21,
        GPSDestLongitude:22,
        GPSDestBearingRef:23,
        GPSDestBearing:24,
        GPSDestDistanceRef:25,
        GPSDestDistance:26,
        GPSProcessingMethod:27,
        GPSAreaInformation:28,
        GPSDateStamp:29,
        GPSDifferential:30,
        GPSHPositioningError:31,
    };


    that.InteropIFD = {
        InteroperabilityIndex:1,
    };

    that.GPSHelper = {
        degToDmsRational:function (degFloat) {
            var minFloat = degFloat % 1 * 60;
            var secFloat = minFloat % 1 * 60;
            var deg = Math.floor(degFloat);
            var min = Math.floor(minFloat);
            var sec = Math.round(secFloat * 100);

            return [[deg, 1], [min, 1], [sec, 100]];
        }
    };
    
    
    if (typeof exports !== 'undefined') {
        if (typeof module !== 'undefined' && module.exports) {
            exports = module.exports = that;
        }
        exports.piexif = that;
    } else {
        window.piexif = that;
    }

})();

/*!
 * bootstrap-fileinput v5.1.3
 * http://plugins.krajee.com/file-input
 *
 * Author: Kartik Visweswaran
 * Copyright: 2014 - 2020, Kartik Visweswaran, Krajee.com
 *
 * Licensed under the BSD-3-Clause
 * https://github.com/kartik-v/bootstrap-fileinput/blob/master/LICENSE.md
 */
(function (factory) {
  "use strict";
  if (typeof define === "function" && define.amd) {
    define(["jquery"], factory);
  } else {
    if (typeof module === "object" && module.exports) {
      //noinspection NpmUsedModulesInstalled
      module.exports = factory(require("jquery"));
    } else {
      factory(window.jQuery);
    }
  }
})(function ($) {
  "use strict";

  $.fn.fileinputLocales = {};
  $.fn.fileinputThemes = {};

  String.prototype.setTokens = function (replacePairs) {
    var str = this.toString(),
      key,
      re;
    for (key in replacePairs) {
      if (replacePairs.hasOwnProperty(key)) {
        re = new RegExp("{" + key + "}", "g");
        str = str.replace(re, replacePairs[key]);
      }
    }
    return str;
  };

  if (!Array.prototype.flatMap) {
    // polyfill flatMap
    Array.prototype.flatMap = function (lambda) {
      return [].concat(this.map(lambda));
    };
  }

  var $h, FileInput;

  // fileinput helper object for all global variables and internal helper methods
  $h = {
    FRAMES: ".kv-preview-thumb",
    SORT_CSS: "file-sortable",
    INIT_FLAG: "init-",
    OBJECT_PARAMS:
      '<param name="controller" value="true" />\n' +
      '<param name="allowFullScreen" value="true" />\n' +
      '<param name="allowScriptAccess" value="always" />\n' +
      '<param name="autoPlay" value="false" />\n' +
      '<param name="autoStart" value="false" />\n' +
      '<param name="quality" value="high" />\n',
    DEFAULT_PREVIEW:
      '<div class="file-preview-other">\n' +
      '<span class="{previewFileIconClass}">{previewFileIcon}</span>\n' +
      "</div>",
    MODAL_ID: "kvFileinputModal",
    MODAL_EVENTS: ["show", "shown", "hide", "hidden", "loaded"],
    logMessages: {
      ajaxError: "{status}: {error}. Error Details: {text}.",
      badDroppedFiles: "Error scanning dropped files!",
      badExifParser: "Error loading the piexif.js library. {details}",
      badInputType:
        'The input "type" must be set to "file" for initializing the "bootstrap-fileinput" plugin.',
      exifWarning:
        'To avoid this warning, either set "autoOrientImage" to "false" OR ensure you have loaded ' +
        'the "piexif.js" library correctly on your page before the "fileinput.js" script.',
      invalidChunkSize:
        'Invalid upload chunk size: "{chunkSize}". Resumable uploads are disabled.',
      invalidThumb: 'Invalid thumb frame with id: "{id}".',
      noResumableSupport:
        "The browser does not support resumable or chunk uploads.",
      noUploadUrl:
        'The "uploadUrl" is not set. Ajax uploads and resumable uploads have been disabled.',
      retryStatus:
        "Retrying upload for chunk # {chunk} for {filename}... retry # {retry}.",
      chunkQueueError:
        "Could not push task to ajax pool for chunk index # {index}.",
      resumableMaxRetriesReached:
        "Maximum resumable ajax retries ({n}) reached.",
      resumableRetryError:
        "Could not retry the resumable request (try # {n})... aborting.",
      resumableAborting: "Aborting / cancelling the resumable request.",
    },
    objUrl: window.URL || window.webkitURL,
    now: function () {
      return new Date().getTime();
    },
    round: function (num) {
      num = parseFloat(num);
      return isNaN(num) ? 0 : Math.floor(Math.round(num));
    },
    getArray: function (obj) {
      var i,
        arr = [],
        len = (obj && obj.length) || 0;
      for (i = 0; i < len; i++) {
        arr.push(obj[i]);
      }
      return arr;
    },
    getFileRelativePath: function (file) {
      /** @namespace file.relativePath */
      /** @namespace file.webkitRelativePath */
      return String(
        file.newPath ||
          file.relativePath ||
          file.webkitRelativePath ||
          $h.getFileName(file) ||
          null
      );
    },
    getFileId: function (file, generateFileId) {
      var relativePath = $h.getFileRelativePath(file);
      if (typeof generateFileId === "function") {
        return generateFileId(file);
      }
      if (!file) {
        return null;
      }
      if (!relativePath) {
        return null;
      }
      return (
        file.size + "_" + encodeURIComponent(relativePath).replace(/%/g, "_")
      );
    },
    getFrameSelector: function (id, selector) {
      selector = selector || "";
      return '[id="' + id + '"]' + selector;
    },
    getZoomSelector: function (id, selector) {
      return $h.getFrameSelector("zoom-" + id, selector);
    },
    getFrameElement: function ($element, id, selector) {
      return $element.find($h.getFrameSelector(id, selector));
    },
    getZoomElement: function ($element, id, selector) {
      return $element.find($h.getZoomSelector(id, selector));
    },
    getElapsed: function (seconds) {
      var delta = seconds,
        out = "",
        result = {},
        structure = {
          year: 31536000,
          month: 2592000,
          week: 604800, // uncomment row to ignore
          day: 86400, // feel free to add your own row
          hour: 3600,
          minute: 60,
          second: 1,
        };
      $h.getObjectKeys(structure).forEach(function (key) {
        result[key] = Math.floor(delta / structure[key]);
        delta -= result[key] * structure[key];
      });
      $.each(result, function (key, value) {
        if (value > 0) {
          out += (out ? " " : "") + value + key.substring(0, 1);
        }
      });
      return out;
    },
    debounce: function (func, delay) {
      var inDebounce;
      return function () {
        var args = arguments,
          context = this;
        clearTimeout(inDebounce);
        inDebounce = setTimeout(function () {
          func.apply(context, args);
        }, delay);
      };
    },
    stopEvent: function (e) {
      e.stopPropagation();
      e.preventDefault();
    },
    getFileName: function (file) {
      /** @namespace file.fileName */
      return file ? file.fileName || file.name || "" : ""; // some confusion in different versions of Firefox
    },
    createObjectURL: function (data) {
      if ($h.objUrl && $h.objUrl.createObjectURL && data) {
        return $h.objUrl.createObjectURL(data);
      }
      return "";
    },
    revokeObjectURL: function (data) {
      if ($h.objUrl && $h.objUrl.revokeObjectURL && data) {
        $h.objUrl.revokeObjectURL(data);
      }
    },
    compare: function (input, str, exact) {
      return input !== undefined && (exact ? input === str : input.match(str));
    },
    isIE: function (ver) {
      var div, status;
      // check for IE versions < 11
      if (navigator.appName !== "Microsoft Internet Explorer") {
        return false;
      }
      if (ver === 10) {
        return new RegExp("msie\\s" + ver, "i").test(navigator.userAgent);
      }
      div = document.createElement("div");
      div.innerHTML = "<!--[if IE " + ver + "]> <i></i> <![endif]-->";
      status = div.getElementsByTagName("i").length;
      document.body.appendChild(div);
      div.parentNode.removeChild(div);
      return status;
    },
    canOrientImage: function ($el) {
      var $img = $(document.createElement("img"))
          .css({ width: "1px", height: "1px" })
          .insertAfter($el),
        flag = $img.css("image-orientation");
      $img.remove();
      return !!flag;
    },
    canAssignFilesToInput: function () {
      var input = document.createElement("input");
      try {
        input.type = "file";
        input.files = null;
        return true;
      } catch (err) {
        return false;
      }
    },
    getDragDropFolders: function (items) {
      var i,
        item,
        len = items ? items.length : 0,
        folders = 0;
      if (len > 0 && items[0].webkitGetAsEntry()) {
        for (i = 0; i < len; i++) {
          item = items[i].webkitGetAsEntry();
          if (item && item.isDirectory) {
            folders++;
          }
        }
      }
      return folders;
    },
    initModal: function ($modal) {
      var $body = $("body");
      if ($body.length) {
        $modal.appendTo($body);
      }
    },
    isFunction: function (v) {
      return typeof v === "function";
    },
    isEmpty: function (value, trim) {
      return (
        value === undefined ||
        value === null ||
        (!$h.isFunction(value) &&
          (value.length === 0 || (trim && $.trim(value) === "")))
      );
    },
    isArray: function (a) {
      return (
        Array.isArray(a) ||
        Object.prototype.toString.call(a) === "[object Array]"
      );
    },
    ifSet: function (needle, haystack, def) {
      def = def || "";
      return haystack && typeof haystack === "object" && needle in haystack
        ? haystack[needle]
        : def;
    },
    cleanArray: function (arr) {
      if (!(arr instanceof Array)) {
        arr = [];
      }
      return arr.filter(function (e) {
        return e !== undefined && e !== null;
      });
    },
    spliceArray: function (arr, index, reverseOrder) {
      var i,
        j = 0,
        out = [],
        newArr;
      if (!(arr instanceof Array)) {
        return [];
      }
      newArr = $.extend(true, [], arr);
      if (reverseOrder) {
        newArr.reverse();
      }
      for (i = 0; i < newArr.length; i++) {
        if (i !== index) {
          out[j] = newArr[i];
          j++;
        }
      }
      if (reverseOrder) {
        out.reverse();
      }
      return out;
    },
    getNum: function (num, def) {
      def = def || 0;
      if (typeof num === "number") {
        return num;
      }
      if (typeof num === "string") {
        num = parseFloat(num);
      }
      return isNaN(num) ? def : num;
    },
    hasFileAPISupport: function () {
      return !!(window.File && window.FileReader);
    },
    hasDragDropSupport: function () {
      var div = document.createElement("div");
      /** @namespace div.draggable */
      /** @namespace div.ondragstart */
      /** @namespace div.ondrop */
      return (
        !$h.isIE(9) &&
        (div.draggable !== undefined ||
          (div.ondragstart !== undefined && div.ondrop !== undefined))
      );
    },
    hasFileUploadSupport: function () {
      return $h.hasFileAPISupport() && window.FormData;
    },
    hasBlobSupport: function () {
      try {
        return !!window.Blob && Boolean(new Blob());
      } catch (e) {
        return false;
      }
    },
    hasArrayBufferViewSupport: function () {
      try {
        return new Blob([new Uint8Array(100)]).size === 100;
      } catch (e) {
        return false;
      }
    },
    hasResumableUploadSupport: function () {
      /** @namespace Blob.prototype.webkitSlice */
      /** @namespace Blob.prototype.mozSlice */
      return (
        $h.hasFileUploadSupport() &&
        $h.hasBlobSupport() &&
        $h.hasArrayBufferViewSupport() &&
        (!!Blob.prototype.webkitSlice ||
          !!Blob.prototype.mozSlice ||
          !!Blob.prototype.slice ||
          false)
      );
    },
    dataURI2Blob: function (dataURI) {
      var BlobBuilder =
          window.BlobBuilder ||
          window.WebKitBlobBuilder ||
          window.MozBlobBuilder ||
          window.MSBlobBuilder,
        canBlob = $h.hasBlobSupport(),
        byteStr,
        arrayBuffer,
        intArray,
        i,
        mimeStr,
        bb,
        canProceed =
          (canBlob || BlobBuilder) &&
          window.atob &&
          window.ArrayBuffer &&
          window.Uint8Array;
      if (!canProceed) {
        return null;
      }
      if (dataURI.split(",")[0].indexOf("base64") >= 0) {
        byteStr = atob(dataURI.split(",")[1]);
      } else {
        byteStr = decodeURIComponent(dataURI.split(",")[1]);
      }
      arrayBuffer = new ArrayBuffer(byteStr.length);
      intArray = new Uint8Array(arrayBuffer);
      for (i = 0; i < byteStr.length; i += 1) {
        intArray[i] = byteStr.charCodeAt(i);
      }
      mimeStr = dataURI.split(",")[0].split(":")[1].split(";")[0];
      if (canBlob) {
        return new Blob(
          [$h.hasArrayBufferViewSupport() ? intArray : arrayBuffer],
          { type: mimeStr }
        );
      }
      bb = new BlobBuilder();
      bb.append(arrayBuffer);
      return bb.getBlob(mimeStr);
    },
    arrayBuffer2String: function (buffer) {
      if (window.TextDecoder) {
        return new TextDecoder("utf-8").decode(buffer);
      }
      var array = Array.prototype.slice.apply(new Uint8Array(buffer)),
        out = "",
        i = 0,
        len,
        c,
        char2,
        char3;
      len = array.length;
      while (i < len) {
        c = array[i++];
        switch (
          c >> 4 // jshint ignore:line
        ) {
          case 0:
          case 1:
          case 2:
          case 3:
          case 4:
          case 5:
          case 6:
          case 7:
            // 0xxxxxxx
            out += String.fromCharCode(c);
            break;
          case 12:
          case 13:
            // 110x xxxx   10xx xxxx
            char2 = array[i++];
            out += String.fromCharCode(((c & 0x1f) << 6) | (char2 & 0x3f)); // jshint ignore:line
            break;
          case 14:
            // 1110 xxxx  10xx xxxx  10xx xxxx
            char2 = array[i++];
            char3 = array[i++];
            out += String.fromCharCode(
              ((c & 0x0f) << 12) | // jshint ignore:line
                ((char2 & 0x3f) << 6) | // jshint ignore:line
                ((char3 & 0x3f) << 0)
            ); // jshint ignore:line
            break;
        }
      }
      return out;
    },
    isHtml: function (str) {
      var a = document.createElement("div");
      a.innerHTML = str;
      for (var c = a.childNodes, i = c.length; i--; ) {
        if (c[i].nodeType === 1) {
          return true;
        }
      }
      return false;
    },
    isSvg: function (str) {
      return (
        str.match(/^\s*<\?xml/i) &&
        (str.match(/<!DOCTYPE svg/i) || str.match(/<svg/i))
      );
    },
    getMimeType: function (signature, contents, type) {
      switch (signature) {
        case "ffd8ffe0":
        case "ffd8ffe1":
        case "ffd8ffe2":
          return "image/jpeg";
        case "89504e47":
          return "image/png";
        case "47494638":
          return "image/gif";
        case "49492a00":
          return "image/tiff";
        case "52494646":
          return "image/webp";
        case "66747970":
          return "video/3gp";
        case "4f676753":
          return "video/ogg";
        case "1a45dfa3":
          return "video/mkv";
        case "000001ba":
        case "000001b3":
          return "video/mpeg";
        case "3026b275":
          return "video/wmv";
        case "25504446":
          return "application/pdf";
        case "25215053":
          return "application/ps";
        case "504b0304":
        case "504b0506":
        case "504b0508":
          return "application/zip";
        case "377abcaf":
          return "application/7z";
        case "75737461":
          return "application/tar";
        case "7801730d":
          return "application/dmg";
        default:
          switch (signature.substring(0, 6)) {
            case "435753":
              return "application/x-shockwave-flash";
            case "494433":
              return "audio/mp3";
            case "425a68":
              return "application/bzip";
            default:
              switch (signature.substring(0, 4)) {
                case "424d":
                  return "image/bmp";
                case "fffb":
                  return "audio/mp3";
                case "4d5a":
                  return "application/exe";
                case "1f9d":
                case "1fa0":
                  return "application/zip";
                case "1f8b":
                  return "application/gzip";
                default:
                  return contents && !contents.match(/[^\u0000-\u007f]/)
                    ? "application/text-plain"
                    : type;
              }
          }
      }
    },
    addCss: function ($el, css) {
      $el.removeClass(css).addClass(css);
    },
    getElement: function (options, param, value) {
      return $h.isEmpty(options) || $h.isEmpty(options[param])
        ? value
        : $(options[param]);
    },
    createElement: function (str, tag) {
      tag = tag || "div";
      return $($.parseHTML("<" + tag + ">" + str + "</" + tag + ">"));
    },
    uniqId: function () {
      return (
        new Date().getTime() + Math.floor(Math.random() * Math.pow(10, 15))
      ).toString(36);
    },
    cspBuffer: {
      CSP_ATTRIB: "data-csp-01928735", // a randomly named temporary attribute to store the CSP elem id
      domElementsStyles: {},
      stash: function (htmlString) {
        var self = this,
          outerDom = $.parseHTML("<div>" + htmlString + "</div>"),
          $el = $(outerDom);
        $el.find("[style]").each(function (key, elem) {
          var $elem = $(elem),
            styleString = $elem.attr("style"),
            id = $h.uniqId(),
            styles = {};
          if (styleString && styleString.length) {
            if (styleString.indexOf(";") === -1) {
              styleString += ";";
            }
            styleString
              .slice(0, styleString.length - 1)
              .split(";")
              .map(function (str) {
                str = str.split(":");
                if (str[0]) {
                  styles[str[0]] = str[1] ? str[1] : "";
                }
              });
            self.domElementsStyles[id] = styles;
            $elem.removeAttr("style").attr(self.CSP_ATTRIB, id);
          }
        });
        $el.filter("*").removeAttr("style"); // make sure all style attr are removed
        var values = Object.values
          ? Object.values(outerDom)
          : Object.keys(outerDom).map(function (itm) {
              return outerDom[itm];
            });
        return values
          .flatMap(function (elem) {
            return elem.innerHTML;
          })
          .join("");
      },
      apply: function (domElement) {
        var self = this,
          $el = $(domElement);
        $el.find("[" + self.CSP_ATTRIB + "]").each(function (key, elem) {
          var $elem = $(elem),
            id = $elem.attr(self.CSP_ATTRIB),
            styles = self.domElementsStyles[id];
          if (styles) {
            $elem.css(styles);
          }
          $elem.removeAttr(self.CSP_ATTRIB);
        });
        self.domElementsStyles = {};
      },
    },
    setHtml: function ($elem, htmlString) {
      var buf = $h.cspBuffer;
      $elem.html(buf.stash(htmlString));
      buf.apply($elem);
      return $elem;
    },
    htmlEncode: function (str, undefVal) {
      if (str === undefined) {
        return undefVal || null;
      }
      return str
        .replace(/&/g, "&amp;")
        .replace(/</g, "&lt;")
        .replace(/>/g, "&gt;")
        .replace(/"/g, "&quot;")
        .replace(/'/g, "&apos;");
    },
    replaceTags: function (str, tags) {
      var out = str;
      if (!tags) {
        return out;
      }
      $.each(tags, function (key, value) {
        if (typeof value === "function") {
          value = value();
        }
        out = out.split(key).join(value);
      });
      return out;
    },
    cleanMemory: function ($thumb) {
      var data = $thumb.is("img")
        ? $thumb.attr("src")
        : $thumb.find("source").attr("src");
      $h.revokeObjectURL(data);
    },
    findFileName: function (filePath) {
      var sepIndex = filePath.lastIndexOf("/");
      if (sepIndex === -1) {
        sepIndex = filePath.lastIndexOf("\\");
      }
      return filePath.split(filePath.substring(sepIndex, sepIndex + 1)).pop();
    },
    checkFullScreen: function () {
      return (
        document.fullscreenElement ||
        document.mozFullScreenElement ||
        document.webkitFullscreenElement ||
        document.msFullscreenElement
      );
    },
    toggleFullScreen: function (maximize) {
      var doc = document,
        de = doc.documentElement,
        isFullScreen = $h.checkFullScreen();
      if (de && maximize && !isFullScreen) {
        if (de.requestFullscreen) {
          de.requestFullscreen();
        } else {
          if (de.msRequestFullscreen) {
            de.msRequestFullscreen();
          } else {
            if (de.mozRequestFullScreen) {
              de.mozRequestFullScreen();
            } else {
              if (de.webkitRequestFullscreen) {
                de.webkitRequestFullscreen(Element.ALLOW_KEYBOARD_INPUT);
              }
            }
          }
        }
      } else {
        if (isFullScreen) {
          if (doc.exitFullscreen) {
            doc.exitFullscreen();
          } else {
            if (doc.msExitFullscreen) {
              doc.msExitFullscreen();
            } else {
              if (doc.mozCancelFullScreen) {
                doc.mozCancelFullScreen();
              } else {
                if (doc.webkitExitFullscreen) {
                  doc.webkitExitFullscreen();
                }
              }
            }
          }
        }
      }
    },
    moveArray: function (arr, oldIndex, newIndex, reverseOrder) {
      var newArr = $.extend(true, [], arr);
      if (reverseOrder) {
        newArr.reverse();
      }
      if (newIndex >= newArr.length) {
        var k = newIndex - newArr.length;
        while (k-- + 1) {
          newArr.push(undefined);
        }
      }
      newArr.splice(newIndex, 0, newArr.splice(oldIndex, 1)[0]);
      if (reverseOrder) {
        newArr.reverse();
      }
      return newArr;
    },
    closeButton: function (css) {
      css = css ? "btn-close " + css : "btn-close";
      return (
        '<button type="button" class="' + css + '" aria-label="Close"></button>'
      );
    },
    getRotation: function (value) {
      switch (value) {
        case 2:
          return "rotateY(180deg)";
        case 3:
          return "rotate(180deg)";
        case 4:
          return "rotate(180deg) rotateY(180deg)";
        case 5:
          return "rotate(270deg) rotateY(180deg)";
        case 6:
          return "rotate(90deg)";
        case 7:
          return "rotate(90deg) rotateY(180deg)";
        case 8:
          return "rotate(270deg)";
        default:
          return "";
      }
    },
    setTransform: function (el, val) {
      if (!el) {
        return;
      }
      el.style.transform = val;
      el.style.webkitTransform = val;
      el.style["-moz-transform"] = val;
      el.style["-ms-transform"] = val;
      el.style["-o-transform"] = val;
    },
    getObjectKeys: function (obj) {
      var keys = [];
      if (obj) {
        $.each(obj, function (key) {
          keys.push(key);
        });
      }
      return keys;
    },
    getObjectSize: function (obj) {
      return $h.getObjectKeys(obj).length;
    },
    /**
     * Small dependency injection for the task manager
     * https://gist.github.com/fearphage/4341799
     */
    whenAll: function (array) {
      var s = [].slice,
        resolveValues =
          arguments.length === 1 && $h.isArray(array)
            ? array
            : s.call(arguments),
        deferred = $.Deferred(),
        i,
        failed = 0,
        value,
        length = resolveValues.length,
        remaining = length,
        rejectContexts,
        rejectValues,
        resolveContexts,
        updateFunc;
      rejectContexts = rejectValues = resolveContexts = Array(length);
      updateFunc = function (index, contexts, values) {
        return function () {
          if (values !== resolveValues) {
            failed++;
          }
          deferred.notifyWith(
            (contexts[index] = this),
            (values[index] = s.call(arguments))
          );
          if (!--remaining) {
            deferred[(!failed ? "resolve" : "reject") + "With"](
              contexts,
              values
            );
          }
        };
      };
      for (i = 0; i < length; i++) {
        if ((value = resolveValues[i]) && $.isFunction(value.promise)) {
          value
            .promise()
            .done(updateFunc(i, resolveContexts, resolveValues))
            .fail(updateFunc(i, rejectContexts, rejectValues));
        } else {
          deferred.notifyWith(this, value);
          --remaining;
        }
      }
      if (!remaining) {
        deferred.resolveWith(resolveContexts, resolveValues);
      }
      return deferred.promise();
    },
  };
  FileInput = function (element, options) {
    var self = this;
    self.$element = $(element);
    self.$parent = self.$element.parent();
    if (!self._validate()) {
      return;
    }
    self.isPreviewable = $h.hasFileAPISupport();
    self.isIE9 = $h.isIE(9);
    self.isIE10 = $h.isIE(10);
    if (self.isPreviewable || self.isIE9) {
      self._init(options);
      self._listen();
    }
    self.$element.removeClass("file-loading");
  };

  FileInput.prototype = {
    constructor: FileInput,
    _cleanup: function () {
      var self = this;
      self.reader = null;
      self.clearFileStack();
      self.fileBatchCompleted = true;
      self.isError = false;
      self.isDuplicateError = false;
      self.isPersistentError = false;
      self.cancelling = false;
      self.paused = false;
      self.lastProgress = 0;
      self._initAjax();
    },
    _isAborted: function () {
      var self = this;
      return self.cancelling || self.paused;
    },
    _initAjax: function () {
      var self = this,
        tm = (self.taskManager = {
          pool: {},
          addPool: function (id) {
            return (tm.pool[id] = new tm.TasksPool(id));
          },
          getPool: function (id) {
            return tm.pool[id];
          },
          addTask: function (id, logic) {
            // add standalone task directly from task manager
            return new tm.Task(id, logic);
          },
          TasksPool: function (id) {
            var tp = this;
            tp.id = id;
            tp.cancelled = false;
            tp.cancelledDeferrer = $.Deferred();
            tp.tasks = {};
            tp.addTask = function (id, logic) {
              return (tp.tasks[id] = new tm.Task(id, logic));
            };
            tp.size = function () {
              return $h.getObjectSize(tp.tasks);
            };
            tp.run = function (maxThreads) {
              var i = 0,
                failed = false,
                task,
                tasksList = $h.getObjectKeys(tp.tasks).map(function (key) {
                  return tp.tasks[key];
                }),
                tasksDone = [],
                deferred = $.Deferred(),
                enqueue,
                callback;

              if (tp.cancelled) {
                tp.cancelledDeferrer.resolve();
                return deferred.reject();
              }
              // if run all at once
              if (!maxThreads) {
                var tasksDeferredList = $h
                  .getObjectKeys(tp.tasks)
                  .map(function (key) {
                    return tp.tasks[key].deferred;
                  });
                // when all are done
                $h.whenAll(tasksDeferredList)
                  .done(function () {
                    var argv = $h.getArray(arguments);
                    if (!tp.cancelled) {
                      deferred.resolve.apply(null, argv);
                      tp.cancelledDeferrer.reject();
                    } else {
                      deferred.reject.apply(null, argv);
                      tp.cancelledDeferrer.resolve();
                    }
                  })
                  .fail(function () {
                    var argv = $h.getArray(arguments);
                    deferred.reject.apply(null, argv);
                    if (!tp.cancelled) {
                      tp.cancelledDeferrer.reject();
                    } else {
                      tp.cancelledDeferrer.resolve();
                    }
                  });
                // run all tasks
                $.each(tp.tasks, function (id) {
                  task = tp.tasks[id];
                  task.run();
                });
                return deferred;
              }
              enqueue = function (task) {
                $.when(task.deferred)
                  .fail(function () {
                    failed = true;
                    callback.apply(null, arguments);
                  })
                  .always(callback);
              };
              callback = function () {
                var argv = $h.getArray(arguments);
                // notify a task just ended
                deferred.notify(argv);
                tasksDone.push(argv);
                if (tp.cancelled) {
                  deferred.reject.apply(null, tasksDone);
                  tp.cancelledDeferrer.resolve();
                  return;
                }
                if (tasksDone.length === tp.size()) {
                  if (failed) {
                    deferred.reject.apply(null, tasksDone);
                  } else {
                    deferred.resolve.apply(null, tasksDone);
                  }
                }
                // if there are any tasks remaining
                if (tasksList.length) {
                  task = tasksList.shift();
                  enqueue(task);
                  task.run();
                }
              };
              // run the first "maxThreads" tasks
              while (tasksList.length && i++ < maxThreads) {
                task = tasksList.shift();
                enqueue(task);
                task.run();
              }
              return deferred;
            };
            tp.cancel = function () {
              tp.cancelled = true;
              return tp.cancelledDeferrer;
            };
          },
          Task: function (id, logic) {
            var tk = this;
            tk.id = id;
            tk.deferred = $.Deferred();
            tk.logic = logic;
            tk.context = null;
            tk.run = function () {
              var argv = $h.getArray(arguments);
              argv.unshift(tk.deferred); // add deferrer as first argument
              logic.apply(tk.context, argv); // run task
              return tk.deferred; // return deferrer
            };
            tk.runWithContext = function (context) {
              tk.context = context;
              return tk.run();
            };
          },
        });
      self.ajaxQueue = [];
      self.ajaxRequests = [];
      self.ajaxAborted = false;
    },
    _init: function (options, refreshMode) {
      var self = this,
        f,
        $el = self.$element,
        $cont,
        t,
        tmp;
      self.options = options;
      self.canOrientImage = $h.canOrientImage($el);
      $.each(options, function (key, value) {
        switch (key) {
          case "minFileCount":
          case "maxFileCount":
          case "maxTotalFileCount":
          case "minFileSize":
          case "maxFileSize":
          case "maxFilePreviewSize":
          case "resizeImageQuality":
          case "resizeIfSizeMoreThan":
          case "progressUploadThreshold":
          case "initialPreviewCount":
          case "zoomModalHeight":
          case "minImageHeight":
          case "maxImageHeight":
          case "minImageWidth":
          case "maxImageWidth":
            self[key] = $h.getNum(value);
            break;
          default:
            self[key] = value;
            break;
        }
      });
      if (
        self.maxTotalFileCount > 0 &&
        self.maxTotalFileCount < self.maxFileCount
      ) {
        self.maxTotalFileCount = self.maxFileCount;
      }
      if (self.rtl) {
        // swap buttons for rtl
        tmp = self.previewZoomButtonIcons.prev;
        self.previewZoomButtonIcons.prev = self.previewZoomButtonIcons.next;
        self.previewZoomButtonIcons.next = tmp;
      }
      // validate chunk threads to not exceed maxAjaxThreads
      if (
        !isNaN(self.maxAjaxThreads) &&
        self.maxAjaxThreads < self.resumableUploadOptions.maxThreads
      ) {
        self.resumableUploadOptions.maxThreads = self.maxAjaxThreads;
      }
      self._initFileManager();
      if (typeof self.autoOrientImage === "function") {
        self.autoOrientImage = self.autoOrientImage();
      }
      if (typeof self.autoOrientImageInitial === "function") {
        self.autoOrientImageInitial = self.autoOrientImageInitial();
      }
      if (!refreshMode) {
        self._cleanup();
      }
      self.duplicateErrors = [];
      self.$form = $el.closest("form");
      self._initTemplateDefaults();
      self.uploadFileAttr = !$h.isEmpty($el.attr("name"))
        ? $el.attr("name")
        : "file_data";
      t = self._getLayoutTemplate("progress");
      self.progressTemplate = t.replace("{class}", self.progressClass);
      self.progressInfoTemplate = t.replace("{class}", self.progressInfoClass);
      self.progressPauseTemplate = t.replace(
        "{class}",
        self.progressPauseClass
      );
      self.progressCompleteTemplate = t.replace(
        "{class}",
        self.progressCompleteClass
      );
      self.progressErrorTemplate = t.replace(
        "{class}",
        self.progressErrorClass
      );
      self.isDisabled = $el.attr("disabled") || $el.attr("readonly");
      if (self.isDisabled) {
        $el.attr("disabled", true);
      }
      self.isClickable =
        self.browseOnZoneClick &&
        self.showPreview &&
        (self.dropZoneEnabled || !$h.isEmpty(self.defaultPreviewContent));
      self.isAjaxUpload =
        $h.hasFileUploadSupport() && !$h.isEmpty(self.uploadUrl);
      self.dropZoneEnabled = $h.hasDragDropSupport() && self.dropZoneEnabled;
      if (!self.isAjaxUpload) {
        self.dropZoneEnabled =
          self.dropZoneEnabled && $h.canAssignFilesToInput();
      }
      self.slug =
        typeof options.slugCallback === "function"
          ? options.slugCallback
          : self._slugDefault;
      self.mainTemplate = self.showCaption
        ? self._getLayoutTemplate("main1")
        : self._getLayoutTemplate("main2");
      self.captionTemplate = self._getLayoutTemplate("caption");
      self.previewGenericTemplate = self._getPreviewTemplate("generic");
      if (
        !self.imageCanvas &&
        self.resizeImage &&
        (self.maxImageWidth || self.maxImageHeight)
      ) {
        self.imageCanvas = document.createElement("canvas");
        self.imageCanvasContext = self.imageCanvas.getContext("2d");
      }
      if ($h.isEmpty($el.attr("id"))) {
        $el.attr("id", $h.uniqId());
      }
      self.namespace = ".fileinput_" + $el.attr("id").replace(/-/g, "_");
      if (self.$container === undefined) {
        self.$container = self._createContainer();
      } else {
        self._refreshContainer();
      }
      $cont = self.$container;
      self.$dropZone = $cont.find(".file-drop-zone");
      self.$progress = $cont.find(".kv-upload-progress");
      self.$btnUpload = $cont.find(".fileinput-upload");
      self.$captionContainer = $h.getElement(
        options,
        "elCaptionContainer",
        $cont.find(".file-caption")
      );
      self.$caption = $h.getElement(
        options,
        "elCaptionText",
        $cont.find(".file-caption-name")
      );
      self.$captionLabel = $h.getElement(
        options,
        "elCaptionLabelText",
        $cont.find(".file-caption-label")
      );
      if (!$h.isEmpty(self.msgPlaceholder)) {
        f = $el.attr("multiple") ? self.filePlural : self.fileSingle;
        self.$caption.attr(
          "placeholder",
          self.msgPlaceholder.replace("{files}", f)
        );
      }
      self.$caption.attr("id", "fileinput-" + $el.attr("id"));
      var origLabel = document.querySelector(
        'label[for="' + $el.attr("id") + '"]'
      );
      if (origLabel !== null) {
        self.$captionLabel.html(origLabel.innerHTML);
      }
      self.$captionLabel.attr("for", "fileinput-" + $el.attr("id"));
      self.$captionIcon = self.$captionContainer.find(".file-caption-icon");
      self.$previewContainer = $h.getElement(
        options,
        "elPreviewContainer",
        $cont.find(".file-preview")
      );
      self.$preview = $h.getElement(
        options,
        "elPreviewImage",
        $cont.find(".file-preview-thumbnails")
      );
      self.$previewStatus = $h.getElement(
        options,
        "elPreviewStatus",
        $cont.find(".file-preview-status")
      );
      self.$errorContainer = $h.getElement(
        options,
        "elErrorContainer",
        self.$previewContainer.find(".kv-fileinput-error")
      );
      self._validateDisabled();
      if (!$h.isEmpty(self.msgErrorClass)) {
        $h.addCss(self.$errorContainer, self.msgErrorClass);
      }
      if (!refreshMode) {
        self._resetErrors();
        self.$errorContainer.hide();
        self.previewInitId = "thumb-" + $el.attr("id");
        self._initPreviewCache();
        self._initPreview(true);
        self._initPreviewActions();
        if (self.$parent.hasClass("file-loading")) {
          self.$container.insertBefore(self.$parent);
          self.$parent.remove();
        }
      } else {
        if (!self._errorsExist()) {
          self.$errorContainer.hide();
        }
      }
      self._setFileDropZoneTitle();
      if ($el.attr("disabled")) {
        self.disable();
      }
      self._initZoom();
      if (self.hideThumbnailContent) {
        $h.addCss(self.$preview, "hide-content");
      }
    },
    _initFileManager: function () {
      var self = this;
      self.uploadStartTime = $h.now();
      self.fileManager = {
        stack: {},
        filesProcessed: [],
        errors: [],
        loadedImages: {},
        totalImages: 0,
        totalFiles: null,
        totalSize: null,
        uploadedSize: 0,
        stats: {},
        initStats: function (id) {
          var data = { started: $h.now() };
          if (id) {
            self.fileManager.stats[id] = data;
          } else {
            self.fileManager.stats = data;
          }
        },
        getUploadStats: function (id, loaded, total) {
          var fm = self.fileManager,
            started = id
              ? (fm.stats[id] && fm.stats[id].started) || $h.now()
              : self.uploadStartTime;
          var elapsed = ($h.now() - started) / 1000,
            speeds = [
              "B/s",
              "KB/s",
              "MB/s",
              "GB/s",
              "TB/s",
              "PB/s",
              "EB/s",
              "ZB/s",
              "YB/s",
            ],
            bps = elapsed ? loaded / elapsed : 0,
            bitrate = self._getSize(bps, speeds),
            pendingBytes = total - loaded,
            out = {
              fileId: id,
              started: started,
              elapsed: elapsed,
              loaded: loaded,
              total: total,
              bps: bps,
              bitrate: bitrate,
              pendingBytes: pendingBytes,
            };
          if (id) {
            fm.stats[id] = out;
          } else {
            fm.stats = out;
          }
          return out;
        },
        exists: function (id) {
          return $.inArray(id, self.fileManager.getIdList()) !== -1;
        },
        count: function () {
          return self.fileManager.getIdList().length;
        },
        total: function () {
          var fm = self.fileManager;
          if (!fm.totalFiles) {
            fm.totalFiles = fm.count();
          }
          return fm.totalFiles;
        },
        getTotalSize: function () {
          var fm = self.fileManager;
          if (fm.totalSize) {
            return fm.totalSize;
          }
          fm.totalSize = 0;
          $.each(self.fileManager.stack, function (id, f) {
            var size = parseFloat(f.size);
            fm.totalSize += isNaN(size) ? 0 : size;
          });
          return fm.totalSize;
        },
        add: function (file, id) {
          if (!id) {
            id = self.fileManager.getId(file);
          }
          if (!id) {
            return;
          }
          self.fileManager.stack[id] = {
            file: file,
            name: $h.getFileName(file),
            relativePath: $h.getFileRelativePath(file),
            size: file.size,
            nameFmt: self._getFileName(file, ""),
            sizeFmt: self._getSize(file.size),
          };
        },
        remove: function ($thumb) {
          var id = $thumb.attr("data-fileid");
          if (id) {
            self.fileManager.removeFile(id);
          }
        },
        removeFile: function (id) {
          delete self.fileManager.stack[id];
          delete self.fileManager.loadedImages[id];
        },
        move: function (idFrom, idTo) {
          var result = {},
            stack = self.fileManager.stack;
          if ((!idFrom && !idTo) || idFrom === idTo) {
            return;
          }
          $.each(stack, function (k, v) {
            if (k !== idFrom) {
              result[k] = v;
            }
            if (k === idTo) {
              result[idFrom] = stack[idFrom];
            }
          });
          self.fileManager.stack = result;
        },
        list: function () {
          var files = [];
          $.each(self.fileManager.stack, function (k, v) {
            if (v && v.file) {
              files.push(v.file);
            }
          });
          return files;
        },
        isPending: function (id) {
          return (
            $.inArray(id, self.fileManager.filesProcessed) === -1 &&
            self.fileManager.exists(id)
          );
        },
        isProcessed: function () {
          var filesProcessed = true,
            fm = self.fileManager;
          $.each(fm.stack, function (id) {
            if (fm.isPending(id)) {
              filesProcessed = false;
            }
          });
          return filesProcessed;
        },
        clear: function () {
          var fm = self.fileManager;
          self.isDuplicateError = false;
          self.isPersistentError = false;
          fm.totalFiles = null;
          fm.totalSize = null;
          fm.uploadedSize = 0;
          fm.stack = {};
          fm.errors = [];
          fm.filesProcessed = [];
          fm.stats = {};
          fm.clearImages();
        },
        clearImages: function () {
          self.fileManager.loadedImages = {};
          self.fileManager.totalImages = 0;
        },
        addImage: function (id, config) {
          self.fileManager.loadedImages[id] = config;
        },
        removeImage: function (id) {
          delete self.fileManager.loadedImages[id];
        },
        getImageIdList: function () {
          return $h.getObjectKeys(self.fileManager.loadedImages);
        },
        getImageCount: function () {
          return self.fileManager.getImageIdList().length;
        },
        getId: function (file) {
          return self._getFileId(file);
        },
        getIndex: function (id) {
          return self.fileManager.getIdList().indexOf(id);
        },
        getThumb: function (id) {
          var $thumb = null;
          self._getThumbs().each(function () {
            var $t = $(this);
            if ($t.attr("data-fileid") === id) {
              $thumb = $t;
            }
          });
          return $thumb;
        },
        getThumbIndex: function ($thumb) {
          var id = $thumb.attr("data-fileid");
          return self.fileManager.getIndex(id);
        },
        getIdList: function () {
          return $h.getObjectKeys(self.fileManager.stack);
        },
        getFile: function (id) {
          return self.fileManager.stack[id] || null;
        },
        getFileName: function (id, fmt) {
          var file = self.fileManager.getFile(id);
          if (!file) {
            return "";
          }
          return fmt ? file.nameFmt || "" : file.name || "";
        },
        getFirstFile: function () {
          var ids = self.fileManager.getIdList(),
            id = ids && ids.length ? ids[0] : null;
          return self.fileManager.getFile(id);
        },
        setFile: function (id, file) {
          if (self.fileManager.getFile(id)) {
            self.fileManager.stack[id].file = file;
          } else {
            self.fileManager.add(file, id);
          }
        },
        setProcessed: function (id) {
          self.fileManager.filesProcessed.push(id);
        },
        getProgress: function () {
          var total = self.fileManager.total(),
            filesProcessed = self.fileManager.filesProcessed.length;
          if (!total) {
            return 0;
          }
          return Math.ceil((filesProcessed / total) * 100);
        },
        setProgress: function (id, pct) {
          var f = self.fileManager.getFile(id);
          if (!isNaN(pct) && f) {
            f.progress = pct;
          }
        },
      };
    },
    _setUploadData: function (fd, config) {
      var self = this;
      $.each(config, function (key, value) {
        var param = self.uploadParamNames[key] || key;
        if ($h.isArray(value)) {
          fd.append(param, value[0], value[1]);
        } else {
          fd.append(param, value);
        }
      });
    },
    _initResumableUpload: function () {
      var self = this,
        opts = self.resumableUploadOptions,
        logs = $h.logMessages,
        rm,
        fm = self.fileManager;
      if (!self.enableResumableUpload) {
        return;
      }
      if (opts.fallback !== false && typeof opts.fallback !== "function") {
        opts.fallback = function (s) {
          s._log(logs.noResumableSupport);
          s.enableResumableUpload = false;
        };
      }
      if (!$h.hasResumableUploadSupport() && opts.fallback !== false) {
        opts.fallback(self);
        return;
      }
      if (!self.uploadUrl && self.enableResumableUpload) {
        self._log(logs.noUploadUrl);
        self.enableResumableUpload = false;
        return;
      }
      opts.chunkSize = parseFloat(opts.chunkSize);
      if (opts.chunkSize <= 0 || isNaN(opts.chunkSize)) {
        self._log(logs.invalidChunkSize, { chunkSize: opts.chunkSize });
        self.enableResumableUpload = false;
        return;
      }
      rm = self.resumableManager = {
        init: function (id, f, index) {
          rm.logs = [];
          rm.stack = [];
          rm.error = "";
          rm.id = id;
          rm.file = f.file;
          rm.fileName = f.name;
          rm.fileIndex = index;
          rm.completed = false;
          rm.lastProgress = 0;
          if (self.showPreview) {
            rm.$thumb = fm.getThumb(id) || null;
            rm.$progress = rm.$btnDelete = null;
            if (rm.$thumb && rm.$thumb.length) {
              rm.$progress = rm.$thumb.find(".file-thumb-progress");
              rm.$btnDelete = rm.$thumb.find(".kv-file-remove");
            }
          }
          rm.chunkSize = opts.chunkSize * 1024;
          rm.chunkCount = rm.getTotalChunks();
        },
        setAjaxError: function (jqXHR, textStatus, errorThrown, isTest) {
          if (jqXHR.responseJSON && jqXHR.responseJSON.error) {
            errorThrown = jqXHR.responseJSON.error.toString();
          }
          if (!isTest) {
            rm.error = errorThrown;
          }
          if (opts.showErrorLog) {
            self._log(logs.ajaxError, {
              status: jqXHR.status,
              error: errorThrown,
              text: jqXHR.responseText || "",
            });
          }
        },
        reset: function () {
          rm.stack = [];
          rm.chunksProcessed = {};
        },
        setProcessed: function (status) {
          var id = rm.id,
            msg,
            $thumb = rm.$thumb,
            $prog = rm.$progress,
            hasThumb = $thumb && $thumb.length,
            params = {
              id: hasThumb ? $thumb.attr("id") : "",
              index: fm.getIndex(id),
              fileId: id,
            };
          rm.completed = true;
          rm.lastProgress = 0;
          if (hasThumb) {
            $thumb.removeClass("file-uploading");
          }
          if (status === "success") {
            fm.uploadedSize += rm.file.size;
            if (self.showPreview) {
              self._setProgress(101, $prog);
              self._setThumbStatus($thumb, "Success");
              self._initUploadSuccess(rm.chunksProcessed[id].data, $thumb);
            }
            fm.removeFile(id);
            delete rm.chunksProcessed[id];
            self._raise("fileuploaded", [
              params.id,
              params.index,
              params.fileId,
            ]);
            if (fm.isProcessed()) {
              self._setProgress(101);
            }
          } else {
            if (status !== "cancel") {
              if (self.showPreview) {
                self._setThumbStatus($thumb, "Error");
                self._setPreviewError($thumb, true);
                self._setProgress(101, $prog, self.msgProgressError);
                self._setProgress(101, self.$progress, self.msgProgressError);
                self.cancelling = true;
              }
              if (
                !self.$errorContainer.find(
                  'li[data-file-id="' + params.fileId + '"]'
                ).length
              ) {
                msg = self.msgResumableUploadRetriesExceeded.setTokens({
                  file: rm.fileName,
                  max: opts.maxRetries,
                  error: rm.error,
                });
                self._showFileError(msg, params);
              }
            }
          }
          if (fm.isProcessed()) {
            rm.reset();
          }
        },
        check: function () {
          var status = true;
          $.each(rm.logs, function (index, value) {
            if (!value) {
              status = false;
              return false;
            }
          });
        },
        processedResumables: function () {
          var logs = rm.logs,
            i,
            count = 0;
          if (!logs || !logs.length) {
            return 0;
          }
          for (i = 0; i < logs.length; i++) {
            if (logs[i] === true) {
              count++;
            }
          }
          return count;
        },
        getUploadedSize: function () {
          var size = rm.processedResumables() * rm.chunkSize;
          return size > rm.file.size ? rm.file.size : size;
        },
        getTotalChunks: function () {
          var chunkSize = parseFloat(rm.chunkSize);
          if (!isNaN(chunkSize) && chunkSize > 0) {
            return Math.ceil(rm.file.size / chunkSize);
          }
          return 0;
        },
        getProgress: function () {
          var chunksProcessed = rm.processedResumables(),
            total = rm.chunkCount;
          if (total === 0) {
            return 0;
          }
          return Math.ceil((chunksProcessed / total) * 100);
        },
        checkAborted: function (intervalId) {
          if (self._isAborted()) {
            clearInterval(intervalId);
            self.unlock();
          }
        },
        upload: function () {
          var ids = fm.getIdList(),
            flag = "new",
            intervalId;
          intervalId = setInterval(function () {
            var id;
            rm.checkAborted(intervalId);
            if (flag === "new") {
              self.lock();
              flag = "processing";
              id = ids.shift();
              fm.initStats(id);
              if (fm.stack[id]) {
                rm.init(id, fm.stack[id], fm.getIndex(id));
                rm.processUpload();
              }
            }
            if (!fm.isPending(id) && rm.completed) {
              flag = "new";
            }
            if (fm.isProcessed()) {
              var $initThumbs = self.$preview.find(".file-preview-initial");
              if ($initThumbs.length) {
                $h.addCss($initThumbs, $h.SORT_CSS);
                self._initSortable();
              }
              clearInterval(intervalId);
              self._clearFileInput();
              self.unlock();
              setTimeout(function () {
                var data = self.previewCache.data;
                if (data) {
                  self.initialPreview = data.content;
                  self.initialPreviewConfig = data.config;
                  self.initialPreviewThumbTags = data.tags;
                }
                self._raise("filebatchuploadcomplete", [
                  self.initialPreview,
                  self.initialPreviewConfig,
                  self.initialPreviewThumbTags,
                  self._getExtraData(),
                ]);
              }, self.processDelay);
            }
          }, self.processDelay);
        },
        uploadResumable: function () {
          var i,
            pool,
            tm = self.taskManager,
            total = rm.chunkCount;
          pool = tm.addPool(rm.id);
          for (i = 0; i < total; i++) {
            rm.logs[i] = !!(
              rm.chunksProcessed[rm.id] && rm.chunksProcessed[rm.id][i]
            );
            if (!rm.logs[i]) {
              rm.pushAjax(i, 0);
            }
          }
          pool
            .run(opts.maxThreads)
            .done(function () {
              rm.setProcessed("success");
            })
            .fail(function () {
              rm.setProcessed(pool.cancelled ? "cancel" : "error");
            });
        },
        processUpload: function () {
          var fd,
            f,
            id = rm.id,
            fnBefore,
            fnSuccess,
            fnError,
            fnComplete,
            outData;
          if (!opts.testUrl) {
            rm.uploadResumable();
            return;
          }
          fd = new FormData();
          f = fm.stack[id];
          self._setUploadData(fd, {
            fileId: id,
            fileName: f.fileName,
            fileSize: f.size,
            fileRelativePath: f.relativePath,
            chunkSize: rm.chunkSize,
            chunkCount: rm.chunkCount,
          });
          fnBefore = function (jqXHR) {
            outData = self._getOutData(fd, jqXHR);
            self._raise("filetestbeforesend", [id, fm, rm, outData]);
          };
          fnSuccess = function (data, textStatus, jqXHR) {
            outData = self._getOutData(fd, jqXHR, data);
            var pNames = self.uploadParamNames,
              chunksUploaded = pNames.chunksUploaded || "chunksUploaded",
              params = [id, fm, rm, outData];
            if (!data[chunksUploaded] || !$h.isArray(data[chunksUploaded])) {
              self._raise("filetesterror", params);
            } else {
              if (!rm.chunksProcessed[id]) {
                rm.chunksProcessed[id] = {};
              }
              $.each(data[chunksUploaded], function (key, index) {
                rm.logs[index] = true;
                rm.chunksProcessed[id][index] = true;
              });
              rm.chunksProcessed[id].data = data;
              self._raise("filetestsuccess", params);
            }
            rm.uploadResumable();
          };
          fnError = function (jqXHR, textStatus, errorThrown) {
            outData = self._getOutData(fd, jqXHR);
            self._raise("filetestajaxerror", [id, fm, rm, outData]);
            rm.setAjaxError(jqXHR, textStatus, errorThrown, true);
            rm.uploadResumable();
          };
          fnComplete = function () {
            self._raise("filetestcomplete", [id, fm, rm, self._getOutData(fd)]);
          };
          self._ajaxSubmit(
            fnBefore,
            fnSuccess,
            fnComplete,
            fnError,
            fd,
            id,
            rm.fileIndex,
            opts.testUrl
          );
        },
        pushAjax: function (index, retry) {
          var tm = self.taskManager,
            pool = tm.getPool(rm.id);
          pool.addTask(pool.size() + 1, function (deferrer) {
            // use fifo chunk stack
            var arr = rm.stack.shift(),
              index;
            index = arr[0];
            if (
              !rm.chunksProcessed[rm.id] ||
              !rm.chunksProcessed[rm.id][index]
            ) {
              rm.sendAjax(index, arr[1], deferrer);
            } else {
              self._log(logs.chunkQueueError, { index: index });
            }
          });
          rm.stack.push([index, retry]);
        },
        sendAjax: function (index, retry, deferrer) {
          var f,
            chunkSize = rm.chunkSize,
            id = rm.id,
            file = rm.file,
            $thumb = rm.$thumb,
            msgs = $h.logMessages,
            $btnDelete = rm.$btnDelete,
            logError = function (msg, tokens) {
              if (tokens) {
                msg = msg.setTokens(tokens);
              }
              msg = "Error processing resumable ajax request. " + msg;
              self._log(msg);
              deferrer.reject(msg);
            };
          if (rm.chunksProcessed[id] && rm.chunksProcessed[id][index]) {
            return;
          }
          if (retry > opts.maxRetries) {
            logError(msgs.resumableMaxRetriesReached, { n: opts.maxRetries });
            rm.setProcessed("error");
            return;
          }
          var fd,
            outData,
            fnBefore,
            fnSuccess,
            fnError,
            fnComplete,
            slice = file.slice
              ? "slice"
              : file.mozSlice
              ? "mozSlice"
              : file.webkitSlice
              ? "webkitSlice"
              : "slice",
            blob = file[slice](chunkSize * index, chunkSize * (index + 1));
          fd = new FormData();
          f = fm.stack[id];
          self._setUploadData(fd, {
            chunkCount: rm.chunkCount,
            chunkIndex: index,
            chunkSize: chunkSize,
            chunkSizeStart: chunkSize * index,
            fileBlob: [blob, rm.fileName],
            fileId: id,
            fileName: rm.fileName,
            fileRelativePath: f.relativePath,
            fileSize: file.size,
            retryCount: retry,
          });
          if (rm.$progress && rm.$progress.length) {
            rm.$progress.show();
          }
          fnBefore = function (jqXHR) {
            outData = self._getOutData(fd, jqXHR);
            if (self.showPreview) {
              if (!$thumb.hasClass("file-preview-success")) {
                self._setThumbStatus($thumb, "Loading");
                $h.addCss($thumb, "file-uploading");
              }
              $btnDelete.attr("disabled", true);
            }
            self._raise("filechunkbeforesend", [
              id,
              index,
              retry,
              fm,
              rm,
              outData,
            ]);
          };
          fnSuccess = function (data, textStatus, jqXHR) {
            if (self._isAborted()) {
              logError(msgs.resumableAborting);
              return;
            }
            outData = self._getOutData(fd, jqXHR, data);
            var paramNames = self.uploadParamNames,
              chunkIndex = paramNames.chunkIndex || "chunkIndex",
              params = [id, index, retry, fm, rm, outData];
            if (data.error) {
              if (opts.showErrorLog) {
                self._log(logs.retryStatus, {
                  retry: retry + 1,
                  filename: rm.fileName,
                  chunk: index,
                });
              }
              rm.pushAjax(index, retry + 1);
              rm.error = data.error;
              self._raise("filechunkerror", params);
            } else {
              rm.logs[data[chunkIndex]] = true;
              if (!rm.chunksProcessed[id]) {
                rm.chunksProcessed[id] = {};
              }
              rm.chunksProcessed[id][data[chunkIndex]] = true;
              rm.chunksProcessed[id].data = data;
              deferrer.resolve.call(null, data);
              self._raise("filechunksuccess", params);
              rm.check();
            }
          };
          fnError = function (jqXHR, textStatus, errorThrown) {
            if (self._isAborted()) {
              logError(msgs.resumableAborting);
              return;
            }
            outData = self._getOutData(fd, jqXHR);
            rm.setAjaxError(jqXHR, textStatus, errorThrown);
            self._raise("filechunkajaxerror", [
              id,
              index,
              retry,
              fm,
              rm,
              outData,
            ]);
            rm.pushAjax(index, retry + 1); // push another task
            logError(msgs.resumableRetryError, { n: retry - 1 }); // resolve the current task
          };
          fnComplete = function () {
            if (!self._isAborted()) {
              self._raise("filechunkcomplete", [
                id,
                index,
                retry,
                fm,
                rm,
                self._getOutData(fd),
              ]);
            }
          };
          self._ajaxSubmit(
            fnBefore,
            fnSuccess,
            fnComplete,
            fnError,
            fd,
            id,
            rm.fileIndex
          );
        },
      };
      rm.reset();
    },
    _initTemplateDefaults: function () {
      var self = this,
        tMain1,
        tMain2,
        tPreview,
        tFileIcon,
        tClose,
        tCaption,
        tBtnDefault,
        tBtnLink,
        tBtnBrowse,
        tModalMain,
        tModal,
        tProgress,
        tSize,
        tFooter,
        tActions,
        tActionDelete,
        tActionUpload,
        tActionDownload,
        tActionZoom,
        tActionDrag,
        tIndicator,
        tTagBef,
        tTagBef1,
        tTagBef2,
        tTagAft,
        tGeneric,
        tHtml,
        tImage,
        tText,
        tOffice,
        tGdocs,
        tVideo,
        tAudio,
        tFlash,
        tObject,
        tPdf,
        tOther,
        tStyle,
        tZoomCache,
        vDefaultDim,
        tStats,
        tModalLabel,
        renderObject = function (type, mime) {
          return (
            '<object class="kv-preview-data file-preview-' +
            type +
            '" title="{caption}" ' +
            'data="{data}" type="' +
            mime +
            '"' +
            tStyle +
            ">\n" +
            $h.DEFAULT_PREVIEW +
            "\n</object>\n"
          );
        };
      tMain1 =
        "{preview}\n" +
        '<div class="kv-upload-progress kv-hidden"></div><div class="clearfix"></div>\n' +
        '<div class="input-group {class}">\n' +
        "  {caption}\n" +
        "  {remove}\n" +
        "  {cancel}\n" +
        "  {pause}\n" +
        "  {upload}\n" +
        "  {browse}\n" +
        "</div>";
      tMain2 =
        '{preview}\n<div class="kv-upload-progress kv-hidden"></div>\n<div class="clearfix"></div>\n' +
        "{remove}\n{cancel}\n{upload}\n{browse}\n";
      tPreview =
        '<div class="file-preview {class}">\n' +
        "  {close}" +
        '  <div class="{dropClass} clearfix">\n' +
        '    <div class="file-preview-thumbnails clearfix">\n' +
        "    </div>\n" +
        '    <div class="file-preview-status text-center text-success"></div>\n' +
        '    <div class="kv-fileinput-error"></div>\n' +
        "  </div>\n" +
        "</div>";
      tClose = $h.closeButton("fileinput-remove");
      tFileIcon = '<i class="glyphicon glyphicon-file"></i>';
      // noinspection HtmlUnknownAttribute
      tCaption =
        '<div class="file-caption form-control {class}">\n' +
        '  <span class="file-caption-icon"></span>\n' +
        '  <label class="visually-hidden file-caption-label"></label>\n' +
        '  <input class="file-caption-name">\n' +
        "</div>";
      //noinspection HtmlUnknownAttribute
      tBtnDefault =
        '<button type="{type}" tabindex="0" title="{title}" class="{css}" ' +
        "{status}>{icon} {label}</button>";
      //noinspection HtmlUnknownTarget,HtmlUnknownAttribute
      tBtnLink =
        '<a href="{href}" tabindex="0" title="{title}" class="{css}" {status}>{icon} {label}</a>';
      //noinspection HtmlUnknownAttribute
      tBtnBrowse =
        '<div tabindex="0" class="{css}" {status}>{icon} {label}</div>';
      tModalLabel = $h.MODAL_ID + "Label";
      tModalMain =
        '<div id="' +
        $h.MODAL_ID +
        '" class="file-zoom-dialog modal fade" ' +
        'tabindex="-1" aria-labelledby="' +
        tModalLabel +
        '"></div>';
      tModal =
        '<div class="modal-dialog modal-lg{rtl}" role="document">\n' +
        '  <div class="modal-content">\n' +
        '    <div class="modal-header">\n' +
        '      <h5 class="modal-title" id="' +
        tModalLabel +
        '">{heading}</h5>\n' +
        '      <span class="kv-zoom-title"></span>\n' +
        '      <div class="kv-zoom-actions">{toggleheader}{fullscreen}{borderless}{close}</div>\n' +
        "    </div>\n" +
        '    <div class="modal-body">\n' +
        '      <div class="floating-buttons"></div>\n' +
        '      <div class="kv-zoom-body file-zoom-content {zoomFrameClass}"></div>\n' +
        "{prev} {next}\n" +
        "    </div>\n" +
        "  </div>\n" +
        "</div>\n";
      tProgress =
        '<div class="progress">\n' +
        '    <div class="{class}" role="progressbar"' +
        ' aria-valuenow="{percent}" aria-valuemin="0" aria-valuemax="100" style="width:{percent}%;">\n' +
        "        {status}\n" +
        "     </div>\n" +
        "</div>{stats}";
      tStats =
        '<div class="text-info file-upload-stats">' +
        '<span class="pending-time">{pendingTime}</span> ' +
        '<span class="upload-speed">{uploadSpeed}</span>' +
        "</div>";
      tSize = " <samp>({sizeText})</samp>";
      tFooter =
        '<div class="file-thumbnail-footer">\n' +
        '    <div class="file-footer-caption" title="{caption}">\n' +
        '        <div class="file-caption-info">{caption}</div>\n' +
        '        <div class="file-size-info">{size}</div>\n' +
        "    </div>\n" +
        "    {progress}\n{indicator}\n{actions}\n" +
        "</div>";
      tActions =
        '<div class="file-actions">\n' +
        '    <div class="file-footer-buttons">\n' +
        "        {download} {upload} {delete} {zoom} {other}" +
        "    </div>\n" +
        "</div>\n" +
        "{drag}\n" +
        '<div class="clearfix"></div>';
      //noinspection HtmlUnknownAttribute
      tActionDelete =
        '<button type="button" class="kv-file-remove {removeClass}" ' +
        'title="{removeTitle}" {dataUrl}{dataKey}>{removeIcon}</button>\n';
      tActionUpload =
        '<button type="button" class="kv-file-upload {uploadClass}" title="{uploadTitle}">' +
        "{uploadIcon}</button>";
      tActionDownload =
        '<a class="kv-file-download {downloadClass}" title="{downloadTitle}" ' +
        'href="{downloadUrl}" download="{caption}" target="_blank">{downloadIcon}</a>';
      tActionZoom =
        '<button type="button" class="kv-file-zoom {zoomClass}" ' +
        'title="{zoomTitle}">{zoomIcon}</button>';
      tActionDrag =
        '<span class="file-drag-handle {dragClass}" title="{dragTitle}">{dragIcon}</span>';
      tIndicator =
        '<div class="file-upload-indicator" title="{indicatorTitle}">{indicator}</div>';
      tTagBef =
        '<div class="file-preview-frame {frameClass}" id="{previewId}" data-fileindex="{fileindex}"' +
        ' data-fileid="{fileid}" data-template="{template}"';
      tTagBef1 = tTagBef + '><div class="kv-file-content">\n';
      tTagBef2 = tTagBef + ' title="{caption}"><div class="kv-file-content">\n';
      tTagAft = "</div>{footer}\n{zoomCache}</div>\n";
      tGeneric = "{content}\n";
      tStyle = " {style}";
      tHtml = renderObject("html", "text/html");
      tText = renderObject("text", "text/plain;charset=UTF-8");
      tPdf = renderObject("pdf", "application/pdf");
      tImage =
        '<img src="{data}" class="file-preview-image kv-preview-data" title="{title}" alt="{alt}"' +
        tStyle +
        ">\n";
      tOffice =
        '<iframe class="kv-preview-data file-preview-office" ' +
        'src="https://view.officeapps.live.com/op/embed.aspx?src={data}"' +
        tStyle +
        "></iframe>";
      tGdocs =
        '<iframe class="kv-preview-data file-preview-gdocs" ' +
        'src="https://docs.google.com/gview?url={data}&embedded=true"' +
        tStyle +
        "></iframe>";
      tVideo =
        '<video class="kv-preview-data file-preview-video" controls' +
        tStyle +
        ">\n" +
        '<source src="{data}" type="{type}">\n' +
        $h.DEFAULT_PREVIEW +
        "\n</video>\n";
      tAudio =
        '<!--suppress ALL --><audio class="kv-preview-data file-preview-audio" controls' +
        tStyle +
        '>\n<source src="{data}" ' +
        'type="{type}">\n' +
        $h.DEFAULT_PREVIEW +
        "\n</audio>\n";
      tFlash =
        '<embed class="kv-preview-data file-preview-flash" src="{data}" type="application/x-shockwave-flash"' +
        tStyle +
        ">\n";
      tObject =
        '<object class="kv-preview-data file-preview-object file-object {typeCss}" ' +
        'data="{data}" type="{type}"' +
        tStyle +
        ">\n" +
        '<param name="movie" value="{caption}" />\n' +
        $h.OBJECT_PARAMS +
        " " +
        $h.DEFAULT_PREVIEW +
        "\n</object>\n";
      tOther =
        '<div class="kv-preview-data file-preview-other-frame"' +
        tStyle +
        ">\n" +
        $h.DEFAULT_PREVIEW +
        "\n</div>\n";
      tZoomCache = '<div class="kv-zoom-cache">{zoomContent}</div>';
      vDefaultDim = { width: "100%", height: "100%", "min-height": "480px" };
      if (self._isPdfRendered()) {
        tPdf = self.pdfRendererTemplate.replace(
          "{renderer}",
          self._encodeURI(self.pdfRendererUrl)
        );
      }
      self.defaults = {
        layoutTemplates: {
          main1: tMain1,
          main2: tMain2,
          preview: tPreview,
          close: tClose,
          fileIcon: tFileIcon,
          caption: tCaption,
          modalMain: tModalMain,
          modal: tModal,
          progress: tProgress,
          stats: tStats,
          size: tSize,
          footer: tFooter,
          indicator: tIndicator,
          actions: tActions,
          actionDelete: tActionDelete,
          actionUpload: tActionUpload,
          actionDownload: tActionDownload,
          actionZoom: tActionZoom,
          actionDrag: tActionDrag,
          btnDefault: tBtnDefault,
          btnLink: tBtnLink,
          btnBrowse: tBtnBrowse,
          zoomCache: tZoomCache,
        },
        previewMarkupTags: {
          tagBefore1: tTagBef1,
          tagBefore2: tTagBef2,
          tagAfter: tTagAft,
        },
        previewContentTemplates: {
          generic: tGeneric,
          html: tHtml,
          image: tImage,
          text: tText,
          office: tOffice,
          gdocs: tGdocs,
          video: tVideo,
          audio: tAudio,
          flash: tFlash,
          object: tObject,
          pdf: tPdf,
          other: tOther,
        },
        allowedPreviewTypes: [
          "image",
          "html",
          "text",
          "video",
          "audio",
          "flash",
          "pdf",
          "object",
        ],
        previewTemplates: {},
        previewSettings: {
          image: {
            width: "auto",
            height: "auto",
            "max-width": "100%",
            "max-height": "100%",
          },
          html: { width: "213px", height: "160px" },
          text: { width: "213px", height: "160px" },
          office: { width: "213px", height: "160px" },
          gdocs: { width: "213px", height: "160px" },
          video: { width: "213px", height: "160px" },
          audio: { width: "100%", height: "30px" },
          flash: { width: "213px", height: "160px" },
          object: { width: "213px", height: "160px" },
          pdf: { width: "100%", height: "160px", position: "relative" },
          other: { width: "213px", height: "160px" },
        },
        previewSettingsSmall: {
          image: {
            width: "auto",
            height: "auto",
            "max-width": "100%",
            "max-height": "100%",
          },
          html: { width: "100%", height: "160px" },
          text: { width: "100%", height: "160px" },
          office: { width: "100%", height: "160px" },
          gdocs: { width: "100%", height: "160px" },
          video: { width: "100%", height: "auto" },
          audio: { width: "100%", height: "30px" },
          flash: { width: "100%", height: "auto" },
          object: { width: "100%", height: "auto" },
          pdf: { width: "100%", height: "160px" },
          other: { width: "100%", height: "160px" },
        },
        previewZoomSettings: {
          image: {
            width: "auto",
            height: "auto",
            "max-width": "100%",
            "max-height": "100%",
          },
          html: vDefaultDim,
          text: vDefaultDim,
          office: {
            width: "100%",
            height: "100%",
            "max-width": "100%",
            "min-height": "480px",
          },
          gdocs: {
            width: "100%",
            height: "100%",
            "max-width": "100%",
            "min-height": "480px",
          },
          video: { width: "auto", height: "100%", "max-width": "100%" },
          audio: { width: "100%", height: "30px" },
          flash: { width: "auto", height: "480px" },
          object: {
            width: "auto",
            height: "100%",
            "max-width": "100%",
            "min-height": "480px",
          },
          pdf: vDefaultDim,
          other: { width: "auto", height: "100%", "min-height": "480px" },
        },
        mimeTypeAliases: {
          "video/quicktime": "video/mp4",
        },
        fileTypeSettings: {
          image: function (vType, vName) {
            return (
              ($h.compare(vType, "image.*") &&
                !$h.compare(vType, /(tiff?|wmf)$/i)) ||
              $h.compare(vName, /\.(gif|png|jpe?g)$/i)
            );
          },
          html: function (vType, vName) {
            return (
              $h.compare(vType, "text/html") ||
              $h.compare(vName, /\.(htm|html)$/i)
            );
          },
          office: function (vType, vName) {
            return (
              $h.compare(vType, /(word|excel|powerpoint|office)$/i) ||
              $h.compare(vName, /\.(docx?|xlsx?|pptx?|pps|potx?)$/i)
            );
          },
          gdocs: function (vType, vName) {
            return (
              $h.compare(
                vType,
                /(word|excel|powerpoint|office|iwork-pages|tiff?)$/i
              ) ||
              $h.compare(
                vName,
                /\.(docx?|xlsx?|pptx?|pps|potx?|rtf|ods|odt|pages|ai|dxf|ttf|tiff?|wmf|e?ps)$/i
              )
            );
          },
          text: function (vType, vName) {
            return (
              $h.compare(vType, "text.*") ||
              $h.compare(vName, /\.(xml|javascript)$/i) ||
              $h.compare(vName, /\.(txt|md|nfo|ini|json|php|js|css)$/i)
            );
          },
          video: function (vType, vName) {
            return (
              $h.compare(vType, "video.*") &&
              ($h.compare(vType, /(ogg|mp4|mp?g|mov|webm|3gp)$/i) ||
                $h.compare(vName, /\.(og?|mp4|webm|mp?g|mov|3gp)$/i))
            );
          },
          audio: function (vType, vName) {
            return (
              $h.compare(vType, "audio.*") &&
              ($h.compare(vName, /(ogg|mp3|mp?g|wav)$/i) ||
                $h.compare(vName, /\.(og?|mp3|mp?g|wav)$/i))
            );
          },
          flash: function (vType, vName) {
            return (
              $h.compare(vType, "application/x-shockwave-flash", true) ||
              $h.compare(vName, /\.(swf)$/i)
            );
          },
          pdf: function (vType, vName) {
            return (
              $h.compare(vType, "application/pdf", true) ||
              $h.compare(vName, /\.(pdf)$/i)
            );
          },
          object: function () {
            return true;
          },
          other: function () {
            return true;
          },
        },
        fileActionSettings: {
          showRemove: true,
          showUpload: true,
          showDownload: true,
          showZoom: true,
          showDrag: true,
          removeIcon: '<i class="glyphicon glyphicon-trash"></i>',
          removeClass: "btn btn-sm btn-kv btn-default btn-outline-secondary",
          removeErrorClass: "btn btn-sm btn-kv btn-danger",
          removeTitle: "Remove file",
          uploadIcon: '<i class="glyphicon glyphicon-upload"></i>',
          uploadClass: "btn btn-sm btn-kv btn-default btn-outline-secondary",
          uploadTitle: "Upload file",
          uploadRetryIcon: '<i class="glyphicon glyphicon-repeat"></i>',
          uploadRetryTitle: "Retry upload",
          downloadIcon: '<i class="glyphicon glyphicon-download"></i>',
          downloadClass: "btn btn-sm btn-kv btn-default btn-outline-secondary",
          downloadTitle: "Download file",
          zoomIcon: '<i class="glyphicon glyphicon-zoom-in"></i>',
          zoomClass: "btn btn-sm btn-kv btn-default btn-outline-secondary",
          zoomTitle: "View Details",
          dragIcon: '<i class="glyphicon glyphicon-move"></i>',
          dragClass: "text-info",
          dragTitle: "Move / Rearrange",
          dragSettings: {},
          indicatorNew:
            '<i class="glyphicon glyphicon-plus-sign text-warning"></i>',
          indicatorSuccess:
            '<i class="glyphicon glyphicon-ok-sign text-success"></i>',
          indicatorError:
            '<i class="glyphicon glyphicon-exclamation-sign text-danger"></i>',
          indicatorLoading:
            '<i class="glyphicon glyphicon-hourglass text-body-secondary"></i>',
          indicatorPaused:
            '<i class="glyphicon glyphicon-pause text-primary"></i>',
          indicatorNewTitle: "Not uploaded yet",
          indicatorSuccessTitle: "Uploaded",
          indicatorErrorTitle: "Upload Error",
          indicatorLoadingTitle: "Uploading &hellip;",
          indicatorPausedTitle: "Upload Paused",
        },
      };
      $.each(self.defaults, function (key, setting) {
        if (key === "allowedPreviewTypes") {
          if (self.allowedPreviewTypes === undefined) {
            self.allowedPreviewTypes = setting;
          }
          return;
        }
        self[key] = $.extend(true, {}, setting, self[key]);
      });
      self._initPreviewTemplates();
    },
    _initPreviewTemplates: function () {
      var self = this,
        tags = self.previewMarkupTags,
        tagBef,
        tagAft = tags.tagAfter;
      $.each(self.previewContentTemplates, function (key, value) {
        if ($h.isEmpty(self.previewTemplates[key])) {
          tagBef = tags.tagBefore2;
          if (key === "generic" || key === "image") {
            tagBef = tags.tagBefore1;
          }
          if (self._isPdfRendered() && key === "pdf") {
            tagBef = tagBef.replace(
              "kv-file-content",
              "kv-file-content kv-pdf-rendered"
            );
          }
          self.previewTemplates[key] = tagBef + value + tagAft;
        }
      });
    },
    _initPreviewCache: function () {
      var self = this;
      self.previewCache = {
        data: {},
        init: function () {
          var content = self.initialPreview;
          if (content.length > 0 && !$h.isArray(content)) {
            content = content.split(self.initialPreviewDelimiter);
          }
          self.previewCache.data = {
            content: content,
            config: self.initialPreviewConfig,
            tags: self.initialPreviewThumbTags,
          };
        },
        count: function (skipNull) {
          if (!self.previewCache.data || !self.previewCache.data.content) {
            return 0;
          }
          if (skipNull) {
            var chk = self.previewCache.data.content.filter(function (n) {
              return n !== null;
            });
            return chk.length;
          }
          return self.previewCache.data.content.length;
        },
        get: function (i, isDisabled) {
          var ind = $h.INIT_FLAG + i,
            data = self.previewCache.data,
            config = data.config[i],
            content = data.content[i],
            out,
            $tmp,
            cat,
            ftr,
            fname,
            ftype,
            frameClass,
            asData = $h.ifSet(
              "previewAsData",
              config,
              self.initialPreviewAsData
            ),
            a = config
              ? { title: config.title || null, alt: config.alt || null }
              : { title: null, alt: null },
            parseTemplate = function (
              cat,
              dat,
              fname,
              ftype,
              ftr,
              ind,
              fclass,
              t
            ) {
              var fc =
                  " file-preview-initial " +
                  $h.SORT_CSS +
                  (fclass ? " " + fclass : ""),
                id = self.previewInitId + "-" + ind,
                fileId = (config && config.fileId) || id;
              /** @namespace config.zoomData */
              return self._generatePreviewTemplate(
                cat,
                dat,
                fname,
                ftype,
                id,
                fileId,
                false,
                null,
                fc,
                ftr,
                ind,
                t,
                a,
                (config && config.zoomData) || dat
              );
            };
          if (!content || !content.length) {
            return "";
          }
          isDisabled = isDisabled === undefined ? true : isDisabled;
          cat = $h.ifSet(
            "type",
            config,
            self.initialPreviewFileType || "generic"
          );
          fname = $h.ifSet("filename", config, $h.ifSet("caption", config));
          ftype = $h.ifSet("filetype", config, cat);
          ftr = self.previewCache.footer(
            i,
            isDisabled,
            (config && config.size) || null
          );
          frameClass = $h.ifSet("frameClass", config);
          if (asData) {
            out = parseTemplate(
              cat,
              content,
              fname,
              ftype,
              ftr,
              ind,
              frameClass
            );
          } else {
            out = parseTemplate(
              "generic",
              content,
              fname,
              ftype,
              ftr,
              ind,
              frameClass,
              cat
            ).setTokens({ content: data.content[i] });
          }
          if (data.tags.length && data.tags[i]) {
            out = $h.replaceTags(out, data.tags[i]);
          }
          /** @namespace config.frameAttr */
          if (!$h.isEmpty(config) && !$h.isEmpty(config.frameAttr)) {
            $tmp = $h.createElement(out);
            $tmp.find(".file-preview-initial").attr(config.frameAttr);
            out = $tmp.html();
            $tmp.remove();
          }
          return out;
        },
        clean: function (data) {
          data.content = $h.cleanArray(data.content);
          data.config = $h.cleanArray(data.config);
          data.tags = $h.cleanArray(data.tags);
          self.previewCache.data = data;
        },
        add: function (content, config, tags, append) {
          var data = self.previewCache.data,
            index;
          if (!content || !content.length) {
            return 0;
          }
          index = content.length - 1;
          if (!$h.isArray(content)) {
            content = content.split(self.initialPreviewDelimiter);
          }
          if (append && data.content) {
            index = data.content.push(content[0]) - 1;
            data.config[index] = config;
            data.tags[index] = tags;
          } else {
            data.content = content;
            data.config = config;
            data.tags = tags;
          }
          self.previewCache.clean(data);
          return index;
        },
        set: function (content, config, tags, append) {
          var data = self.previewCache.data,
            i,
            chk;
          if (!content || !content.length) {
            return;
          }
          if (!$h.isArray(content)) {
            content = content.split(self.initialPreviewDelimiter);
          }
          chk = content.filter(function (n) {
            return n !== null;
          });
          if (!chk.length) {
            return;
          }
          if (data.content === undefined) {
            data.content = [];
          }
          if (data.config === undefined) {
            data.config = [];
          }
          if (data.tags === undefined) {
            data.tags = [];
          }
          if (append) {
            for (i = 0; i < content.length; i++) {
              if (content[i]) {
                data.content.push(content[i]);
              }
            }
            for (i = 0; i < config.length; i++) {
              if (config[i]) {
                data.config.push(config[i]);
              }
            }
            for (i = 0; i < tags.length; i++) {
              if (tags[i]) {
                data.tags.push(tags[i]);
              }
            }
          } else {
            data.content = content;
            data.config = config;
            data.tags = tags;
          }
          self.previewCache.clean(data);
        },
        unset: function (index) {
          var chk = self.previewCache.count(),
            rev = self.reversePreviewOrder;
          if (!chk) {
            return;
          }
          if (chk === 1) {
            self.previewCache.data.content = [];
            self.previewCache.data.config = [];
            self.previewCache.data.tags = [];
            self.initialPreview = [];
            self.initialPreviewConfig = [];
            self.initialPreviewThumbTags = [];
            return;
          }
          self.previewCache.data.content = $h.spliceArray(
            self.previewCache.data.content,
            index,
            rev
          );
          self.previewCache.data.config = $h.spliceArray(
            self.previewCache.data.config,
            index,
            rev
          );
          self.previewCache.data.tags = $h.spliceArray(
            self.previewCache.data.tags,
            index,
            rev
          );
          var data = $.extend(true, {}, self.previewCache.data);
          self.previewCache.clean(data);
        },
        out: function () {
          var html = "",
            caption,
            len = self.previewCache.count(),
            i,
            content;
          if (len === 0) {
            return { content: "", caption: "" };
          }
          for (i = 0; i < len; i++) {
            content = self.previewCache.get(i);
            html = self.reversePreviewOrder ? content + html : html + content;
          }
          caption = self._getMsgSelected(len);
          return { content: html, caption: caption };
        },
        footer: function (i, isDisabled, size) {
          var data = self.previewCache.data || {};
          if ($h.isEmpty(data.content)) {
            return "";
          }
          if ($h.isEmpty(data.config) || $h.isEmpty(data.config[i])) {
            data.config[i] = {};
          }
          isDisabled = isDisabled === undefined ? true : isDisabled;
          var config = data.config[i],
            caption = $h.ifSet("caption", config),
            a,
            width = $h.ifSet("width", config, "auto"),
            url = $h.ifSet("url", config, false),
            key = $h.ifSet("key", config, null),
            fileId = $h.ifSet("fileId", config, null),
            fs = self.fileActionSettings,
            initPreviewShowDel = self.initialPreviewShowDelete || false,
            downloadInitialUrl = !self.initialPreviewDownloadUrl
              ? ""
              : self.initialPreviewDownloadUrl +
                "?key=" +
                key +
                (fileId ? "&fileId=" + fileId : ""),
            dUrl = config.downloadUrl || downloadInitialUrl,
            dFil = config.filename || config.caption || "",
            initPreviewShowDwl = !!dUrl,
            sDel = $h.ifSet("showRemove", config, initPreviewShowDel),
            sDwl = $h.ifSet(
              "showDownload",
              config,
              $h.ifSet("showDownload", fs, initPreviewShowDwl)
            ),
            sZm = $h.ifSet("showZoom", config, $h.ifSet("showZoom", fs, true)),
            sDrg = $h.ifSet("showDrag", config, $h.ifSet("showDrag", fs, true)),
            dis = url === false && isDisabled;
          sDwl = sDwl && config.downloadUrl !== false && !!dUrl;
          a = self._renderFileActions(
            config,
            false,
            sDwl,
            sDel,
            sZm,
            sDrg,
            dis,
            url,
            key,
            true,
            dUrl,
            dFil
          );
          return self._getLayoutTemplate("footer").setTokens({
            progress: self._renderThumbProgress(),
            actions: a,
            caption: caption,
            size: self._getSize(size),
            width: width,
            indicator: "",
          });
        },
      };
      self.previewCache.init();
    },
    _isPdfRendered: function () {
      var self = this,
        useLib = self.usePdfRenderer,
        flag = typeof useLib === "function" ? useLib() : !!useLib;
      return flag && self.pdfRendererUrl;
    },
    _handler: function ($el, event, callback) {
      var self = this,
        ns = self.namespace,
        ev = event.split(" ").join(ns + " ") + ns;
      if (!$el || !$el.length) {
        return;
      }
      $el.off(ev).on(ev, callback);
    },
    _encodeURI: function (vUrl) {
      var self = this;
      return self.encodeUrl ? encodeURI(vUrl) : vUrl;
    },
    _log: function (msg, tokens) {
      var self = this,
        id = self.$element.attr("id");
      if (!self.showConsoleLogs) {
        return;
      }
      if (id) {
        msg = '"' + id + '": ' + msg;
      }
      msg = "bootstrap-fileinput: " + msg;
      if (typeof tokens === "object") {
        msg = msg.setTokens(tokens);
      }
      if (window.console && typeof window.console.log !== "undefined") {
        window.console.log(msg);
      } else {
        window.alert(msg);
      }
    },
    _validate: function () {
      var self = this,
        status = self.$element.attr("type") === "file";
      if (!status) {
        self._log($h.logMessages.badInputType);
      }
      return status;
    },
    _errorsExist: function () {
      var self = this,
        $err,
        $errList = self.$errorContainer.find("li");
      if ($errList.length) {
        return true;
      }
      $err = $h.createElement(self.$errorContainer.html());
      $err.find(".kv-error-close").remove();
      $err.find("ul").remove();
      return !!$.trim($err.text()).length;
    },
    _errorHandler: function (evt, caption) {
      var self = this,
        err = evt.target.error,
        showError = function (msg) {
          self._showError(msg.replace("{name}", caption));
        };
      /** @namespace err.NOT_FOUND_ERR */
      /** @namespace err.SECURITY_ERR */
      /** @namespace err.NOT_READABLE_ERR */
      if (err.code === err.NOT_FOUND_ERR) {
        showError(self.msgFileNotFound);
      } else {
        if (err.code === err.SECURITY_ERR) {
          showError(self.msgFileSecured);
        } else {
          if (err.code === err.NOT_READABLE_ERR) {
            showError(self.msgFileNotReadable);
          } else {
            if (err.code === err.ABORT_ERR) {
              showError(self.msgFilePreviewAborted);
            } else {
              showError(self.msgFilePreviewError);
            }
          }
        }
      }
    },
    _addError: function (msg) {
      var self = this,
        $error = self.$errorContainer;
      if (msg && $error.length) {
        $h.setHtml($error, self.errorCloseButton + msg);
        self._handler($error.find(".kv-error-close"), "click", function () {
          setTimeout(function () {
            if (self.showPreview && !self.getFrames().length) {
              self.clear();
            }
            $error.fadeOut("slow");
          }, self.processDelay);
        });
      }
    },
    _setValidationError: function (css) {
      var self = this;
      css = (css ? css + " " : "") + "has-error";
      self.$container.removeClass(css).addClass("has-error");
      $h.addCss(self.$captionContainer, "is-invalid");
    },
    _resetErrors: function (fade) {
      var self = this,
        $error = self.$errorContainer;
      if (self.isPersistentError) {
        return;
      }
      self.isError = false;
      self.$container.removeClass("has-error");
      self.$captionContainer.removeClass("is-invalid");
      $error.html("");
      if (fade) {
        $error.fadeOut("slow");
      } else {
        $error.hide();
      }
    },
    _showFolderError: function (folders) {
      var self = this,
        $error = self.$errorContainer,
        msg;
      if (!folders) {
        return;
      }
      if (!self.isAjaxUpload) {
        self._clearFileInput();
      }
      msg = self.msgFoldersNotAllowed.replace("{n}", folders);
      self._addError(msg);
      self._setValidationError();
      $error.fadeIn(self.fadeDelay);
      self._raise("filefoldererror", [folders, msg]);
    },
    _showFileError: function (msg, params, event) {
      var self = this,
        $error = self.$errorContainer,
        ev = event || "fileuploaderror",
        fId = (params && params.fileId) || "",
        e =
          params && params.id
            ? '<li data-thumb-id="' +
              params.id +
              '" data-file-id="' +
              fId +
              '">' +
              msg +
              "</li>"
            : "<li>" + msg + "</li>";

      if ($error.find("ul").length === 0) {
        self._addError("<ul>" + e + "</ul>");
      } else {
        $error.find("ul").append(e);
      }
      $error.fadeIn(self.fadeDelay);
      self._raise(ev, [params, msg]);
      self._setValidationError("file-input-new");
      return true;
    },
    _showError: function (msg, params, event) {
      var self = this,
        $error = self.$errorContainer,
        ev = event || "fileerror";
      params = params || {};
      params.reader = self.reader;
      self._addError(msg);
      $error.fadeIn(self.fadeDelay);
      self._raise(ev, [params, msg]);
      if (!self.isAjaxUpload) {
        self._clearFileInput();
      }
      self._setValidationError("file-input-new");
      self.$btnUpload.attr("disabled", true);
      return true;
    },
    _noFilesError: function (params) {
      var self = this,
        label = self.minFileCount > 1 ? self.filePlural : self.fileSingle,
        msg = self.msgFilesTooLess
          .replace("{n}", self.minFileCount)
          .replace("{files}", label),
        $error = self.$errorContainer;
      msg = "<li>" + msg + "</li>";
      if ($error.find("ul").length === 0) {
        self._addError("<ul>" + msg + "</ul>");
      } else {
        $error.find("ul").append(msg);
      }
      self.isError = true;
      self._updateFileDetails(0);
      $error.fadeIn(self.fadeDelay);
      self._raise("fileerror", [params, msg]);
      self._clearFileInput();
      self._setValidationError();
    },
    _parseError: function (operation, jqXHR, errorThrown, fileName) {
      /** @namespace jqXHR.responseJSON */
      var self = this,
        errMsg = $.trim(errorThrown + ""),
        textPre,
        errText,
        text;
      errText =
        jqXHR.responseJSON && jqXHR.responseJSON.error
          ? jqXHR.responseJSON.error.toString()
          : "";
      text = errText ? errText : jqXHR.responseText;
      if (self.cancelling && self.msgUploadAborted) {
        errMsg = self.msgUploadAborted;
      }
      if (self.showAjaxErrorDetails && text) {
        if (errText) {
          errMsg = $.trim(errText + "");
        } else {
          text = $.trim(text.replace(/\n\s*\n/g, "\n"));
          textPre = text.length ? "<pre>" + text + "</pre>" : "";
          errMsg += errMsg ? textPre : text;
        }
      }
      if (!errMsg) {
        errMsg = self.msgAjaxError.replace("{operation}", operation);
      }
      self.cancelling = false;
      return fileName ? "<b>" + fileName + ": </b>" + errMsg : errMsg;
    },
    _parseFileType: function (type, name) {
      var self = this,
        isValid,
        vType,
        cat,
        i,
        types = self.allowedPreviewTypes || [];
      if (type === "application/text-plain") {
        return "text";
      }
      for (i = 0; i < types.length; i++) {
        cat = types[i];
        isValid = self.fileTypeSettings[cat];
        vType = isValid(type, name) ? cat : "";
        if (!$h.isEmpty(vType)) {
          return vType;
        }
      }
      return "other";
    },
    _getPreviewIcon: function (fname) {
      var self = this,
        ext,
        out = null;
      if (fname && fname.indexOf(".") > -1) {
        ext = fname.split(".").pop();
        if (self.previewFileIconSettings) {
          out =
            self.previewFileIconSettings[ext] ||
            self.previewFileIconSettings[ext.toLowerCase()] ||
            null;
        }
        if (self.previewFileExtSettings) {
          $.each(self.previewFileExtSettings, function (key, func) {
            if (self.previewFileIconSettings[key] && func(ext)) {
              out = self.previewFileIconSettings[key];
              //noinspection UnnecessaryReturnStatementJS
              return;
            }
          });
        }
      }
      return out || self.previewFileIcon;
    },
    _parseFilePreviewIcon: function (content, fname) {
      var self = this,
        icn = self._getPreviewIcon(fname),
        out = content;
      if (out.indexOf("{previewFileIcon}") > -1) {
        out = out.setTokens({
          previewFileIconClass: self.previewFileIconClass,
          previewFileIcon: icn,
        });
      }
      return out;
    },
    _raise: function (event, params) {
      var self = this,
        e = $.Event(event);
      if (params !== undefined) {
        self.$element.trigger(e, params);
      } else {
        self.$element.trigger(e);
      }
      if (e.isDefaultPrevented() || e.result === false) {
        return false;
      }
      switch (event) {
        // ignore these events
        case "filebatchuploadcomplete":
        case "filebatchuploadsuccess":
        case "fileuploaded":
        case "fileclear":
        case "filecleared":
        case "filereset":
        case "fileerror":
        case "filefoldererror":
        case "fileuploaderror":
        case "filebatchuploaderror":
        case "filedeleteerror":
        case "filecustomerror":
        case "filesuccessremove":
          break;
        // receive data response via `filecustomerror` event`
        default:
          if (!self.ajaxAborted) {
            self.ajaxAborted = e.result;
          }
          break;
      }
      return true;
    },
    _listenFullScreen: function (isFullScreen) {
      var self = this,
        $modal = self.$modal,
        $btnFull,
        $btnBord;
      if (!$modal || !$modal.length) {
        return;
      }
      $btnFull = $modal && $modal.find(".btn-fullscreen");
      $btnBord = $modal && $modal.find(".btn-borderless");
      if (!$btnFull.length || !$btnBord.length) {
        return;
      }
      $btnFull.removeClass("active").attr("aria-pressed", "false");
      $btnBord.removeClass("active").attr("aria-pressed", "false");
      if (isFullScreen) {
        $btnFull.addClass("active").attr("aria-pressed", "true");
      } else {
        $btnBord.addClass("active").attr("aria-pressed", "true");
      }
      if ($modal.hasClass("file-zoom-fullscreen")) {
        self._maximizeZoomDialog();
      } else {
        if (isFullScreen) {
          self._maximizeZoomDialog();
        } else {
          $btnBord.removeClass("active").attr("aria-pressed", "false");
        }
      }
    },
    _listen: function () {
      var self = this,
        $el = self.$element,
        $form = self.$form,
        $cont = self.$container,
        fullScreenEv,
        $cap,
        fn,
        pastefn;
      self._handler($el, "click", function (e) {
        if ($el.hasClass("file-no-browse")) {
          if ($el.data("zoneClicked")) {
            $el.data("zoneClicked", false);
          } else {
            e.preventDefault();
          }
        }
      });
      self._handler($el, "change", $.proxy(self._change, self));
      if (self.showBrowse) {
        self._handler(self.$btnFile, "click", $.proxy(self._browse, self));
      }
      $cap = $cont.find(".file-caption-name");
      fn = function (event) {
        return daIgnoreAllButTab(event);
      };
      pastefn = function () {
        return false;
      };
      self._handler(
        $cont.find(".fileinput-remove:not([disabled])"),
        "click",
        $.proxy(self.clear, self)
      );
      self._handler(
        $cont.find(".fileinput-cancel"),
        "click",
        $.proxy(self.cancel, self)
      );
      self._handler(
        $cont.find(".fileinput-pause"),
        "click",
        $.proxy(self.pause, self)
      );
      self._handler($cap, "keydown", fn);
      self._handler($cap, "paste", pastefn);
      self._initDragDrop();
      self._handler($form, "reset", $.proxy(self.clear, self));
      if (!self.isAjaxUpload) {
        self._handler($form, "submit", $.proxy(self._submitForm, self));
      }
      self._handler(
        self.$container.find(".fileinput-upload"),
        "click",
        $.proxy(self._uploadClick, self)
      );
      self._handler($(window), "resize", function () {
        self._listenFullScreen(
          screen.width === window.innerWidth &&
            screen.height === window.innerHeight
        );
      });
      fullScreenEv =
        "webkitfullscreenchange mozfullscreenchange fullscreenchange MSFullscreenChange";
      self._handler($(document), fullScreenEv, function () {
        self._listenFullScreen($h.checkFullScreen());
      });
      self._autoFitContent();
      self._initClickable();
      self._refreshPreview();
    },
    _autoFitContent: function () {
      var width =
          window.innerWidth ||
          document.documentElement.clientWidth ||
          document.body.clientWidth,
        self = this,
        config =
          width < 400
            ? self.previewSettingsSmall || self.defaults.previewSettingsSmall
            : self.previewSettings || self.defaults.previewSettings,
        sel;
      $.each(config, function (cat, settings) {
        sel = ".file-preview-frame .file-preview-" + cat;
        self.$preview
          .find(sel + ".kv-preview-data," + sel + " .kv-preview-data")
          .css(settings);
      });
    },
    _scanDroppedItems: function (item, files, path) {
      path = path || "";
      var self = this,
        i,
        dirReader,
        readDir,
        errorHandler = function (e) {
          self._log($h.logMessages.badDroppedFiles);
          self._log(e);
        };
      if (item.isFile) {
        item.file(function (file) {
          if (path) {
            file.newPath = path + file.name;
          }
          files.push(file);
        }, errorHandler);
      } else {
        if (item.isDirectory) {
          dirReader = item.createReader();
          readDir = function () {
            dirReader.readEntries(function (entries) {
              if (entries && entries.length > 0) {
                for (i = 0; i < entries.length; i++) {
                  self._scanDroppedItems(
                    entries[i],
                    files,
                    path + item.name + "/"
                  );
                }
                // recursively call readDir() again, since browser can only handle first 100 entries.
                readDir();
              }
              return null;
            }, errorHandler);
          };
          readDir();
        }
      }
    },
    _initDragDrop: function () {
      var self = this,
        $zone = self.$dropZone;
      if (self.dropZoneEnabled && self.showPreview) {
        self._handler(
          $zone,
          "dragenter dragover",
          $.proxy(self._zoneDragEnter, self)
        );
        self._handler($zone, "dragleave", $.proxy(self._zoneDragLeave, self));
        self._handler($zone, "drop", $.proxy(self._zoneDrop, self));
        self._handler(
          $(document),
          "dragenter dragover drop",
          self._zoneDragDropInit
        );
      }
    },
    _zoneDragDropInit: function (e) {
      e.stopPropagation();
      e.preventDefault();
    },
    _zoneDragEnter: function (e) {
      var self = this,
        dt = e.originalEvent.dataTransfer,
        hasFiles = $.inArray("Files", dt.types) > -1;
      self._zoneDragDropInit(e);
      if (self.isDisabled || !hasFiles) {
        dt.effectAllowed = "none";
        dt.dropEffect = "none";
        return;
      }
      dt.dropEffect = "copy";
      if (
        self._raise("fileDragEnter", { sourceEvent: e, files: dt.types.Files })
      ) {
        $h.addCss(self.$dropZone, "file-highlighted");
      }
    },
    _zoneDragLeave: function (e) {
      var self = this;
      self._zoneDragDropInit(e);
      if (self.isDisabled) {
        return;
      }
      if (self._raise("fileDragLeave", { sourceEvent: e })) {
        self.$dropZone.removeClass("file-highlighted");
      }
    },
    _zoneDrop: function (e) {
      /** @namespace e.originalEvent.dataTransfer */
      var self = this,
        i,
        $el = self.$element,
        dt = e.originalEvent.dataTransfer,
        files = dt.files,
        items = dt.items,
        folders = $h.getDragDropFolders(items),
        processFiles = function () {
          if (!self.isAjaxUpload) {
            self.changeTriggered = true;
            $el.get(0).files = files;
            setTimeout(function () {
              self.changeTriggered = false;
              $el.trigger("change" + self.namespace);
            }, self.processDelay);
          } else {
            self._change(e, files);
          }
          self.$dropZone.removeClass("file-highlighted");
        };
      e.preventDefault();
      if (self.isDisabled || $h.isEmpty(files)) {
        return;
      }
      if (!self._raise("fileDragDrop", { sourceEvent: e, files: files })) {
        return;
      }
      if (folders > 0) {
        if (!self.isAjaxUpload) {
          self._showFolderError(folders);
          return;
        }
        files = [];
        for (i = 0; i < items.length; i++) {
          var item = items[i].webkitGetAsEntry();
          if (item) {
            self._scanDroppedItems(item, files);
          }
        }
        setTimeout(function () {
          processFiles();
        }, 500);
      } else {
        processFiles();
      }
    },
    _uploadClick: function (e) {
      var self = this,
        $btn = self.$container.find(".fileinput-upload"),
        $form,
        isEnabled =
          !$btn.hasClass("disabled") && $h.isEmpty($btn.attr("disabled"));
      if (e && e.isDefaultPrevented()) {
        return;
      }
      if (!self.isAjaxUpload) {
        if (isEnabled && $btn.attr("type") !== "submit") {
          $form = $btn.closest("form");
          // downgrade to normal form submit if possible
          if ($form.length) {
            $form.trigger("submit");
          }
          e.preventDefault();
        }
        return;
      }
      e.preventDefault();
      if (isEnabled) {
        self.upload();
      }
    },
    _submitForm: function () {
      var self = this;
      return self._isFileSelectionValid() && !self._abort({});
    },
    _clearPreview: function () {
      var self = this,
        $thumbs = self.showUploadedThumbs
          ? self.getFrames(":not(.file-preview-success)")
          : self.getFrames();
      $thumbs.each(function () {
        var $thumb = $(this);
        $thumb.remove();
      });
      if (!self.getFrames().length || !self.showPreview) {
        self._resetUpload();
      }
      self._validateDefaultPreview();
    },
    _initSortable: function () {
      var self = this,
        $el = self.$preview,
        settings,
        selector = "." + $h.SORT_CSS,
        $cont,
        $body = $("body"),
        $html = $("html"),
        rev = self.reversePreviewOrder,
        Sortable = window.Sortable,
        beginGrab,
        endGrab;
      if (!Sortable || $el.find(selector).length === 0) {
        return;
      }
      $cont = $body.length ? $body : $html.length ? $html : self.$container;
      beginGrab = function () {
        $cont.addClass("file-grabbing");
      };
      endGrab = function () {
        $cont.removeClass("file-grabbing");
      };
      settings = {
        handle: ".drag-handle-init",
        dataIdAttr: "data-fileid",
        animation: 600,
        draggable: selector,
        scroll: false,
        forceFallback: true,
        onChoose: beginGrab,
        onStart: beginGrab,
        onUnchoose: endGrab,
        onEnd: endGrab,
        onSort: function (e) {
          var oldIndex = e.oldIndex,
            newIndex = e.newIndex,
            i = 0,
            len = self.initialPreviewConfig.length,
            exceedsLast = len > 0 && newIndex >= len,
            $item = $(e.item),
            $first;
          if (exceedsLast) {
            newIndex = len - 1;
          }
          self.initialPreview = $h.moveArray(
            self.initialPreview,
            oldIndex,
            newIndex,
            rev
          );
          self.initialPreviewConfig = $h.moveArray(
            self.initialPreviewConfig,
            oldIndex,
            newIndex,
            rev
          );
          self.previewCache.init();
          self.getFrames(".file-preview-initial").each(function () {
            $(this).attr("data-fileindex", $h.INIT_FLAG + i);
            i++;
          });
          if (exceedsLast) {
            $first = self.getFrames(":not(.file-preview-initial):first");
            if ($first.length) {
              $item.slideUp(function () {
                $item.insertBefore($first).slideDown();
              });
            }
          }
          self._raise("filesorted", {
            previewId: $item.attr("id"),
            oldIndex: oldIndex,
            newIndex: newIndex,
            stack: self.initialPreviewConfig,
          });
        },
      };
      $.extend(true, settings, self.fileActionSettings.dragSettings);
      if (self.sortable) {
        self.sortable.destroy();
      }
      self.sortable = Sortable.create($el[0], settings);
    },
    _setPreviewContent: function (content) {
      var self = this;
      $h.setHtml(self.$preview, content);
      self._autoFitContent();
    },
    _initPreviewImageOrientations: function () {
      var self = this,
        i = 0,
        canOrientImage = self.canOrientImage;
      if (!self.autoOrientImageInitial && !canOrientImage) {
        return;
      }
      self.getFrames(".file-preview-initial").each(function () {
        var $thumb = $(this),
          $img,
          $zoomImg,
          id,
          config = self.initialPreviewConfig[i];
        /** @namespace config.exif */
        if (config && config.exif && config.exif.Orientation) {
          id = $thumb.attr("id");
          $img = $thumb.find(">.kv-file-content img");
          $zoomImg = self._getZoom(id, " >.kv-file-content img");
          if (canOrientImage) {
            $img.css(
              "image-orientation",
              self.autoOrientImageInitial ? "from-image" : "none"
            );
          } else {
            self.setImageOrientation(
              $img,
              $zoomImg,
              config.exif.Orientation,
              $thumb
            );
          }
        }
        i++;
      });
    },
    _initPreview: function (isInit) {
      var self = this,
        cap = self.initialCaption || "",
        out;
      if (!self.previewCache.count(true)) {
        self._clearPreview();
        if (isInit) {
          self._setCaption(cap);
        } else {
          self._initCaption();
        }
        return;
      }
      out = self.previewCache.out();
      cap = isInit && self.initialCaption ? self.initialCaption : out.caption;
      self._setPreviewContent(out.content);
      self._setInitThumbAttr();
      self._setCaption(cap);
      self._initSortable();
      if (!$h.isEmpty(out.content)) {
        self.$container.removeClass("file-input-new");
      }
      self._initPreviewImageOrientations();
    },
    _getZoomButton: function (type) {
      var self = this,
        label = self.previewZoomButtonIcons[type],
        css = self.previewZoomButtonClasses[type],
        title = ' title="' + (self.previewZoomButtonTitles[type] || "") + '" ',
        params =
          title +
          (type === "close" ? ' data-dismiss="modal" aria-hidden="true"' : "");
      if (
        type === "fullscreen" ||
        type === "borderless" ||
        type === "toggleheader"
      ) {
        params +=
          ' data-toggle="button" aria-pressed="false" autocomplete="off"';
      }
      return (
        '<button type="button" class="' +
        css +
        " btn-" +
        type +
        '"' +
        params +
        ">" +
        label +
        "</button>"
      );
    },
    _getModalContent: function () {
      var self = this;
      return self._getLayoutTemplate("modal").setTokens({
        rtl: self.rtl ? " kv-rtl" : "",
        zoomFrameClass: self.frameClass,
        heading: self.msgZoomModalHeading,
        prev: self._getZoomButton("prev"),
        next: self._getZoomButton("next"),
        toggleheader: self._getZoomButton("toggleheader"),
        fullscreen: self._getZoomButton("fullscreen"),
        borderless: self._getZoomButton("borderless"),
        close: self._getZoomButton("close"),
      });
    },
    _listenModalEvent: function (event) {
      var self = this,
        $modal = self.$modal,
        getParams = function (e) {
          return {
            sourceEvent: e,
            previewId: $modal.data("previewId"),
            modal: $modal,
          };
        };
      $modal.on(event + ".bs.modal", function (e) {
        var $btnFull = $modal.find(".btn-fullscreen"),
          $btnBord = $modal.find(".btn-borderless");
        if ($modal.data("fileinputPluginId") === self.$element.attr("id")) {
          self._raise("filezoom" + event, getParams(e));
        }
        if (event === "shown") {
          $btnBord.removeClass("active").attr("aria-pressed", "false");
          $btnFull.removeClass("active").attr("aria-pressed", "false");
          if ($modal.hasClass("file-zoom-fullscreen")) {
            self._maximizeZoomDialog();
            if ($h.checkFullScreen()) {
              $btnFull.addClass("active").attr("aria-pressed", "true");
            } else {
              $btnBord.addClass("active").attr("aria-pressed", "true");
            }
          }
        }
      });
    },
    _initZoom: function () {
      var self = this,
        $dialog,
        modalMain = self._getLayoutTemplate("modalMain"),
        modalId = "#" + $h.MODAL_ID;
      if (!self.showPreview) {
        return;
      }
      self.$modal = $(modalId);
      if (!self.$modal || !self.$modal.length) {
        $dialog = $h
          .createElement($h.cspBuffer.stash(modalMain))
          .insertAfter(self.$container);
        self.$modal = $(modalId).insertBefore($dialog);
        $h.cspBuffer.apply(self.$modal);
        $dialog.remove();
      }
      $h.initModal(self.$modal);
      self.$modal.html($h.cspBuffer.stash(self._getModalContent()));
      $h.cspBuffer.apply(self.$modal);
      $.each($h.MODAL_EVENTS, function (key, event) {
        self._listenModalEvent(event);
      });
    },
    _initZoomButtons: function () {
      var self = this,
        previewId = self.$modal.data("previewId") || "",
        $first,
        $last,
        thumbs = self.getFrames().toArray(),
        len = thumbs.length,
        $prev = self.$modal.find(".btn-prev"),
        $next = self.$modal.find(".btn-next");
      if (thumbs.length < 2) {
        $prev.hide();
        $next.hide();
        return;
      } else {
        $prev.show();
        $next.show();
      }
      if (!len) {
        return;
      }
      $first = $(thumbs[0]);
      $last = $(thumbs[len - 1]);
      $prev.removeAttr("disabled");
      $next.removeAttr("disabled");
      if ($first.length && $first.attr("id") === previewId) {
        $prev.attr("disabled", true);
      }
      if ($last.length && $last.attr("id") === previewId) {
        $next.attr("disabled", true);
      }
    },
    _maximizeZoomDialog: function () {
      var self = this,
        $modal = self.$modal,
        $head = $modal.find(".modal-header:visible"),
        $foot = $modal.find(".modal-footer:visible"),
        $body = $modal.find(".modal-body"),
        h = $(window).height(),
        diff = 0;
      $modal.addClass("file-zoom-fullscreen");
      if ($head && $head.length) {
        h -= $head.outerHeight(true);
      }
      if ($foot && $foot.length) {
        h -= $foot.outerHeight(true);
      }
      if ($body && $body.length) {
        diff = $body.outerHeight(true) - $body.height();
        h -= diff;
      }
      $modal.find(".kv-zoom-body").height(h);
    },
    _resizeZoomDialog: function (fullScreen) {
      var self = this,
        $modal = self.$modal,
        $btnFull = $modal.find(".btn-fullscreen"),
        $btnBord = $modal.find(".btn-borderless");
      if ($modal.hasClass("file-zoom-fullscreen")) {
        $h.toggleFullScreen(false);
        if (!fullScreen) {
          if (!$btnFull.hasClass("active")) {
            $modal.removeClass("file-zoom-fullscreen");
            self.$modal
              .find(".kv-zoom-body")
              .css("height", self.zoomModalHeight);
          } else {
            $btnFull.removeClass("active").attr("aria-pressed", "false");
          }
        } else {
          if (!$btnFull.hasClass("active")) {
            $modal.removeClass("file-zoom-fullscreen");
            self._resizeZoomDialog(true);
            if ($btnBord.hasClass("active")) {
              $btnBord.removeClass("active").attr("aria-pressed", "false");
            }
          }
        }
      } else {
        if (!fullScreen) {
          self._maximizeZoomDialog();
          return;
        }
        $h.toggleFullScreen(true);
      }
      $modal.focus();
    },
    _setZoomContent: function ($frame, animate) {
      var self = this,
        $content,
        tmplt,
        body,
        title,
        $body,
        $dataEl,
        config,
        previewId = $frame.attr("id"),
        $zoomPreview = self._getZoom(previewId),
        $modal = self.$modal,
        $tmp,
        $btnFull = $modal.find(".btn-fullscreen"),
        $btnBord = $modal.find(".btn-borderless"),
        cap,
        size,
        $btnTogh = $modal.find(".btn-toggleheader");
      tmplt = $zoomPreview.attr("data-template") || "generic";
      $content = $zoomPreview.find(".kv-file-content");
      body = $content.length ? $content.html() : "";
      cap = $frame.data("caption") || "";
      size = $frame.data("size") || "";
      title = cap + " " + size;
      $modal
        .find(".kv-zoom-title")
        .attr("title", $("<div/>").html(title).text())
        .html(title);
      $body = $modal.find(".kv-zoom-body");
      $modal.removeClass("kv-single-content");
      if (animate) {
        $tmp = $body.addClass("file-thumb-loading").clone().insertAfter($body);
        $h.setHtml($body, body).hide();
        $tmp.fadeOut("fast", function () {
          $body.fadeIn("fast", function () {
            $body.removeClass("file-thumb-loading");
          });
          $tmp.remove();
        });
      } else {
        $h.setHtml($body, body);
      }
      config = self.previewZoomSettings[tmplt];
      if (config) {
        $dataEl = $body.find(".kv-preview-data");
        $h.addCss($dataEl, "file-zoom-detail");
        $.each(config, function (key, value) {
          $dataEl.css(key, value);
          if (
            ($dataEl.attr("width") && key === "width") ||
            ($dataEl.attr("height") && key === "height")
          ) {
            $dataEl.removeAttr(key);
          }
        });
      }
      $modal.data("previewId", previewId);
      self._handler($modal.find(".btn-prev"), "click", function () {
        self._zoomSlideShow("prev", previewId);
      });
      self._handler($modal.find(".btn-next"), "click", function () {
        self._zoomSlideShow("next", previewId);
      });
      self._handler($btnFull, "click", function () {
        self._resizeZoomDialog(true);
      });
      self._handler($btnBord, "click", function () {
        self._resizeZoomDialog(false);
      });
      self._handler($btnTogh, "click", function () {
        var $header = $modal.find(".modal-header"),
          $floatBar = $modal.find(".modal-body .floating-buttons"),
          ht,
          $actions = $header.find(".kv-zoom-actions"),
          resize = function (height) {
            var $body = self.$modal.find(".kv-zoom-body"),
              h = self.zoomModalHeight;
            if ($modal.hasClass("file-zoom-fullscreen")) {
              h = $body.outerHeight(true);
              if (!height) {
                h = h - $header.outerHeight(true);
              }
            }
            $body.css("height", height ? h + height : h);
          };
        if ($header.is(":visible")) {
          ht = $header.outerHeight(true);
          $header.slideUp("slow", function () {
            $actions.find(".btn").appendTo($floatBar);
            resize(ht);
          });
        } else {
          $floatBar.find(".btn").appendTo($actions);
          $header.slideDown("slow", function () {
            resize();
          });
        }
        $modal.focus();
      });
      self._handler($modal, "keydown", function (e) {
        var key = e.which || e.keyCode,
          $prev = $(this).find(".btn-prev"),
          $next = $(this).find(".btn-next"),
          vId = $(this).data("previewId"),
          vPrevKey = self.rtl ? 39 : 37,
          vNextKey = self.rtl ? 37 : 39;
        if (key === vPrevKey && $prev.length && !$prev.attr("disabled")) {
          self._zoomSlideShow("prev", vId);
        }
        if (key === vNextKey && $next.length && !$next.attr("disabled")) {
          self._zoomSlideShow("next", vId);
        }
      });
    },
    _showModal: function ($frame) {
      var self = this,
        $modal = self.$modal;
      if (!$frame || !$frame.length) {
        return;
      }
      $h.initModal($modal);
      $h.setHtml($modal, self._getModalContent());
      self._setZoomContent($frame);
      $modal.data("fileinputPluginId", self.$element.attr("id"));
      $modal.modal("show");
      self._initZoomButtons();
    },
    _zoomPreview: function ($btn) {
      var self = this,
        $frame;
      if (!$btn.length) {
        throw "Cannot zoom to detailed preview!";
      }
      $frame = $btn.closest($h.FRAMES);
      self._showModal($frame);
    },
    _zoomSlideShow: function (dir, previewId) {
      var self = this,
        $btn = self.$modal.find(".kv-zoom-actions .btn-" + dir),
        $targFrame,
        i,
        $thumb,
        thumbsData = self.getFrames().toArray(),
        thumbs = [],
        len = thumbsData.length,
        out;
      if ($btn.attr("disabled")) {
        return;
      }
      for (i = 0; i < len; i++) {
        $thumb = $(thumbsData[i]);
        if (
          $thumb &&
          $thumb.length &&
          $thumb.find(".kv-file-zoom:visible").length
        ) {
          thumbs.push(thumbsData[i]);
        }
      }
      len = thumbs.length;
      for (i = 0; i < len; i++) {
        if ($(thumbs[i]).attr("id") === previewId) {
          out = dir === "prev" ? i - 1 : i + 1;
          break;
        }
      }
      if (out < 0 || out >= len || !thumbs[out]) {
        return;
      }
      $targFrame = $(thumbs[out]);
      if ($targFrame.length) {
        self._setZoomContent($targFrame, true);
      }
      self._initZoomButtons();
      self._raise("filezoom" + dir, {
        previewId: previewId,
        modal: self.$modal,
      });
    },
    _initZoomButton: function () {
      var self = this;
      self.$preview.find(".kv-file-zoom").each(function () {
        var $el = $(this);
        self._handler($el, "click", function () {
          self._zoomPreview($el);
        });
      });
    },
    _inputFileCount: function () {
      return this.$element[0].files.length;
    },
    _refreshPreview: function () {
      var self = this,
        files;
      if (
        (!self._inputFileCount() && !self.isAjaxUpload) ||
        !self.showPreview ||
        !self.isPreviewable
      ) {
        return;
      }
      if (self.isAjaxUpload) {
        if (self.fileManager.count() > 0) {
          files = $.extend(true, {}, self.fileManager.stack);
          self.fileManager.clear();
          self._clearFileInput();
        } else {
          files = self.$element[0].files;
        }
      } else {
        files = self.$element[0].files;
      }
      if (files && files.length) {
        self.readFiles(files);
        self._setFileDropZoneTitle();
      }
    },
    _clearObjects: function ($el) {
      $el.find("video audio").each(function () {
        this.pause();
        $(this).remove();
      });
      $el.find("img object div").each(function () {
        $(this).remove();
      });
    },
    _clearFileInput: function () {
      var self = this,
        $el = self.$element,
        $srcFrm,
        $tmpFrm,
        $tmpEl;
      if (!self._inputFileCount()) {
        return;
      }
      $srcFrm = $el.closest("form");
      $tmpFrm = $(document.createElement("form"));
      $tmpEl = $(document.createElement("div"));
      $el.before($tmpEl);
      if ($srcFrm.length) {
        $srcFrm.after($tmpFrm);
      } else {
        $tmpEl.after($tmpFrm);
      }
      $tmpFrm.append($el).trigger("reset");
      $tmpEl.before($el).remove();
      $tmpFrm.remove();
    },
    _resetUpload: function () {
      var self = this;
      self.uploadStartTime = $h.now();
      self.uploadCache = [];
      self.$btnUpload.removeAttr("disabled");
      self._setProgress(0);
      self._hideProgress();
      self._resetErrors(false);
      self._initAjax();
      self.fileManager.clearImages();
      self._resetCanvas();
      if (self.overwriteInitial) {
        self.initialPreview = [];
        self.initialPreviewConfig = [];
        self.initialPreviewThumbTags = [];
        self.previewCache.data = {
          content: [],
          config: [],
          tags: [],
        };
      }
    },
    _resetCanvas: function () {
      var self = this;
      if (self.canvas && self.imageCanvasContext) {
        self.imageCanvasContext.clearRect(
          0,
          0,
          self.canvas.width,
          self.canvas.height
        );
      }
    },
    _hasInitialPreview: function () {
      var self = this;
      return !self.overwriteInitial && self.previewCache.count(true);
    },
    _resetPreview: function () {
      var self = this,
        out,
        cap,
        $div,
        hasSuc = self.showUploadedThumbs,
        hasErr = !self.removeFromPreviewOnError,
        includeProcessed = (hasSuc || hasErr) && self.isDuplicateError;
      if (self.previewCache.count(true)) {
        out = self.previewCache.out();
        if (includeProcessed) {
          $div = $h.createElement("").insertAfter(self.$container);
          self.getFrames().each(function () {
            var $thumb = $(this);
            if (
              (hasSuc && $thumb.hasClass("file-preview-success")) ||
              (hasErr && $thumb.hasClass("file-preview-error"))
            ) {
              $div.append($thumb);
            }
          });
        }
        self._setPreviewContent(out.content);
        self._setInitThumbAttr();
        cap = self.initialCaption ? self.initialCaption : out.caption;
        self._setCaption(cap);
        if (includeProcessed) {
          $div.contents().appendTo(self.$preview);
          $div.remove();
        }
      } else {
        self._clearPreview();
        self._initCaption();
      }
      if (self.showPreview) {
        self._initZoom();
        self._initSortable();
      }
      self.isDuplicateError = false;
    },
    _clearDefaultPreview: function () {
      var self = this;
      self.$preview.find(".file-default-preview").remove();
    },
    _validateDefaultPreview: function () {
      var self = this;
      if (!self.showPreview || $h.isEmpty(self.defaultPreviewContent)) {
        return;
      }
      self._setPreviewContent(
        '<div class="file-default-preview">' +
          self.defaultPreviewContent +
          "</div>"
      );
      self.$container.removeClass("file-input-new");
      self._initClickable();
    },
    _resetPreviewThumbs: function (isAjax) {
      var self = this,
        out;
      if (isAjax) {
        self._clearPreview();
        self.clearFileStack();
        return;
      }
      if (self._hasInitialPreview()) {
        out = self.previewCache.out();
        self._setPreviewContent(out.content);
        self._setInitThumbAttr();
        self._setCaption(out.caption);
        self._initPreviewActions();
      } else {
        self._clearPreview();
      }
    },
    _getLayoutTemplate: function (t) {
      var self = this,
        template = self.layoutTemplates[t];
      if ($h.isEmpty(self.customLayoutTags)) {
        return template;
      }
      return $h.replaceTags(template, self.customLayoutTags);
    },
    _getPreviewTemplate: function (t) {
      var self = this,
        templates = self.previewTemplates,
        template = templates[t] || templates.other;
      if ($h.isEmpty(self.customPreviewTags)) {
        return template;
      }
      return $h.replaceTags(template, self.customPreviewTags);
    },
    _getOutData: function (formdata, jqXHR, responseData, filesData) {
      var self = this;
      jqXHR = jqXHR || {};
      responseData = responseData || {};
      filesData = filesData || self.fileManager.list();
      return {
        formdata: formdata,
        files: filesData,
        filenames: self.filenames,
        filescount: self.getFilesCount(),
        extra: self._getExtraData(),
        response: responseData,
        reader: self.reader,
        jqXHR: jqXHR,
      };
    },
    _getMsgSelected: function (n) {
      var self = this,
        strFiles = n === 1 ? self.fileSingle : self.filePlural;
      return n > 0
        ? self.msgSelected.replace("{n}", n).replace("{files}", strFiles)
        : self.msgNoFilesSelected;
    },
    _getFrame: function (id, skipWarning) {
      var self = this,
        $frame = $h.getFrameElement(self.$preview, id);
      if (self.showPreview && !skipWarning && !$frame.length) {
        self._log($h.logMessages.invalidThumb, { id: id });
      }
      return $frame;
    },
    _getZoom: function (id, selector) {
      var self = this,
        $frame = $h.getZoomElement(self.$preview, id, selector);
      if (self.showPreview && !$frame.length) {
        self._log($h.logMessages.invalidThumb, { id: id });
      }
      return $frame;
    },
    _getThumbs: function (css) {
      css = css || "";
      return this.getFrames(":not(.file-preview-initial)" + css);
    },
    _getThumbId: function (fileId) {
      var self = this;
      return self.previewInitId + "-" + fileId;
    },
    _getExtraData: function (fileId, index) {
      var self = this,
        data = self.uploadExtraData;
      if (typeof self.uploadExtraData === "function") {
        data = self.uploadExtraData(fileId, index);
      }
      return data;
    },
    _initXhr: function (xhrobj, fileId) {
      var self = this,
        fm = self.fileManager,
        func = function (event) {
          var pct = 0,
            total = event.total,
            loaded = event.loaded || event.position,
            stats = fm.getUploadStats(fileId, loaded, total);
          /** @namespace event.lengthComputable */
          if (event.lengthComputable && !self.enableResumableUpload) {
            pct = $h.round((loaded / total) * 100);
          }
          if (fileId) {
            self._setFileUploadStats(fileId, pct, stats);
          } else {
            self._setProgress(pct, null, null, self._getStats(stats));
          }
          self._raise("fileajaxprogress", [stats]);
        };
      if (xhrobj.upload) {
        if (self.progressDelay) {
          func = $h.debounce(func, self.progressDelay);
        }
        xhrobj.upload.addEventListener("progress", func, false);
      }
      return xhrobj;
    },
    _initAjaxSettings: function () {
      var self = this;
      self._ajaxSettings = $.extend(true, {}, self.ajaxSettings);
      self._ajaxDeleteSettings = $.extend(true, {}, self.ajaxDeleteSettings);
    },
    _mergeAjaxCallback: function (funcName, srcFunc, type) {
      var self = this,
        settings = self._ajaxSettings,
        flag = self.mergeAjaxCallbacks,
        targFunc;
      if (type === "delete") {
        settings = self._ajaxDeleteSettings;
        flag = self.mergeAjaxDeleteCallbacks;
      }
      targFunc = settings[funcName];
      if (flag && typeof targFunc === "function") {
        if (flag === "before") {
          settings[funcName] = function () {
            targFunc.apply(this, arguments);
            srcFunc.apply(this, arguments);
          };
        } else {
          settings[funcName] = function () {
            srcFunc.apply(this, arguments);
            targFunc.apply(this, arguments);
          };
        }
      } else {
        settings[funcName] = srcFunc;
      }
    },
    _ajaxSubmit: function (
      fnBefore,
      fnSuccess,
      fnComplete,
      fnError,
      formdata,
      fileId,
      index,
      vUrl
    ) {
      var self = this,
        settings,
        defaults,
        data,
        ajaxTask;
      if (!self._raise("filepreajax", [formdata, fileId, index])) {
        return;
      }
      formdata.append("initialPreview", JSON.stringify(self.initialPreview));
      formdata.append(
        "initialPreviewConfig",
        JSON.stringify(self.initialPreviewConfig)
      );
      formdata.append(
        "initialPreviewThumbTags",
        JSON.stringify(self.initialPreviewThumbTags)
      );
      self._initAjaxSettings();
      self._mergeAjaxCallback("beforeSend", fnBefore);
      self._mergeAjaxCallback("success", fnSuccess);
      self._mergeAjaxCallback("complete", fnComplete);
      self._mergeAjaxCallback("error", fnError);
      vUrl = vUrl || self.uploadUrlThumb || self.uploadUrl;
      if (typeof vUrl === "function") {
        vUrl = vUrl();
      }
      data = self._getExtraData(fileId, index) || {};
      if (typeof data === "object") {
        $.each(data, function (key, value) {
          formdata.append(key, value);
        });
      }
      defaults = {
        xhr: function () {
          var xhrobj = $.ajaxSettings.xhr();
          return self._initXhr(xhrobj, fileId);
        },
        url: self._encodeURI(vUrl),
        type: "POST",
        dataType: "json",
        data: formdata,
        cache: false,
        processData: false,
        contentType: false,
      };
      settings = $.extend(true, {}, defaults, self._ajaxSettings);
      ajaxTask = self.taskManager.addTask(fileId + "-" + index, function () {
        var self = this.self,
          config,
          xhr;
        config = self.ajaxQueue.shift();
        xhr = $.ajax(config);
        self.ajaxRequests.push(xhr);
      });
      self.ajaxQueue.push(settings);
      ajaxTask.runWithContext({ self: self });
    },
    _mergeArray: function (prop, content) {
      var self = this,
        arr1 = $h.cleanArray(self[prop]),
        arr2 = $h.cleanArray(content);
      self[prop] = arr1.concat(arr2);
    },
    _initUploadSuccess: function (out, $thumb, allFiles) {
      var self = this,
        append,
        data,
        index,
        $div,
        $newCache,
        content,
        config,
        tags,
        id,
        i;
      if (
        !self.showPreview ||
        typeof out !== "object" ||
        $.isEmptyObject(out)
      ) {
        self._resetCaption();
        return;
      }
      if (out.initialPreview !== undefined && out.initialPreview.length > 0) {
        self.hasInitData = true;
        content = out.initialPreview || [];
        config = out.initialPreviewConfig || [];
        tags = out.initialPreviewThumbTags || [];
        append = out.append === undefined || out.append;
        if (content.length > 0 && !$h.isArray(content)) {
          content = content.split(self.initialPreviewDelimiter);
        }
        if (content.length) {
          self._mergeArray("initialPreview", content);
          self._mergeArray("initialPreviewConfig", config);
          self._mergeArray("initialPreviewThumbTags", tags);
        }
        if ($thumb !== undefined) {
          if (!allFiles) {
            index = self.previewCache.add(
              content[0],
              config[0],
              tags[0],
              append
            );
            data = self.previewCache.get(index, false);
            $div = $h.createElement(data).hide().appendTo($thumb);
            $newCache = $div.find(".kv-zoom-cache");
            if ($newCache && $newCache.length) {
              $newCache.appendTo($thumb);
            }
            $thumb.fadeOut("slow", function () {
              var $newThumb = $div.find(".file-preview-frame");
              if ($newThumb && $newThumb.length) {
                $newThumb
                  .insertBefore($thumb)
                  .fadeIn("slow")
                  .css("display:inline-block");
              }
              self._initPreviewActions();
              self._clearFileInput();
              $thumb.remove();
              $div.remove();
              self._initSortable();
            });
          } else {
            id = $thumb.attr("id");
            i = self._getUploadCacheIndex(id);
            if (i !== null) {
              self.uploadCache[i] = {
                id: id,
                content: content[0],
                config: config[0] || [],
                tags: tags[0] || [],
                append: append,
              };
            }
          }
        } else {
          self.previewCache.set(content, config, tags, append);
          self._initPreview();
          self._initPreviewActions();
        }
      }
      self._resetCaption();
    },
    _getUploadCacheIndex: function (id) {
      var self = this,
        i,
        len = self.uploadCache.length,
        config;
      for (i = 0; i < len; i++) {
        config = self.uploadCache[i];
        if (config.id === id) {
          return i;
        }
      }
      return null;
    },
    _initSuccessThumbs: function () {
      var self = this;
      if (!self.showPreview) {
        return;
      }
      self._getThumbs($h.FRAMES + ".file-preview-success").each(function () {
        var $thumb = $(this),
          $remove = $thumb.find(".kv-file-remove");
        $remove.removeAttr("disabled");
        self._handler($remove, "click", function () {
          var id = $thumb.attr("id"),
            out = self._raise("filesuccessremove", [
              id,
              $thumb.attr("data-fileindex"),
            ]);
          $h.cleanMemory($thumb);
          if (out === false) {
            return;
          }
          $thumb.fadeOut("slow", function () {
            $thumb.remove();
            if (!self.getFrames().length) {
              self.reset();
            }
          });
        });
      });
    },
    _updateInitialPreview: function () {
      var self = this,
        u = self.uploadCache;
      if (self.showPreview) {
        $.each(u, function (key, setting) {
          self.previewCache.add(
            setting.content,
            setting.config,
            setting.tags,
            setting.append
          );
        });
        if (self.hasInitData) {
          self._initPreview();
          self._initPreviewActions();
        }
      }
    },
    _uploadSingle: function (i, id, isBatch) {
      var self = this,
        fm = self.fileManager,
        count = fm.count(),
        formdata = new FormData(),
        outData,
        previewId = self._getThumbId(id),
        $thumb,
        chkComplete,
        $btnUpload,
        $btnDelete,
        hasPostData = count > 0 || !$.isEmptyObject(self.uploadExtraData),
        uploadFailed,
        $prog,
        fnBefore,
        errMsg,
        fnSuccess,
        fnComplete,
        fnError,
        updateUploadLog,
        op = self.ajaxOperations.uploadThumb,
        fileObj = fm.getFile(id),
        params = { id: previewId, index: i, fileId: id },
        fileName = self.fileManager.getFileName(id, true);
      if (self.enableResumableUpload) {
        // not enabled for resumable uploads
        return;
      }
      if (self.showPreview) {
        $thumb = self.fileManager.getThumb(id);
        $prog = $thumb.find(".file-thumb-progress");
        $btnUpload = $thumb.find(".kv-file-upload");
        $btnDelete = $thumb.find(".kv-file-remove");
        $prog.show();
      }
      if (
        count === 0 ||
        !hasPostData ||
        (self.showPreview && $btnUpload && $btnUpload.hasClass("disabled")) ||
        self._abort(params)
      ) {
        return;
      }
      updateUploadLog = function () {
        if (!uploadFailed) {
          fm.removeFile(id);
        } else {
          fm.errors.push(id);
        }
        fm.setProcessed(id);
        if (fm.isProcessed()) {
          self.fileBatchCompleted = true;
          chkComplete();
        }
      };
      chkComplete = function () {
        var $initThumbs;
        if (!self.fileBatchCompleted) {
          return;
        }
        setTimeout(function () {
          var triggerReset = fm.count() === 0,
            errCount = fm.errors.length;
          self._updateInitialPreview();
          self.unlock(triggerReset);
          if (triggerReset) {
            self._clearFileInput();
          }
          $initThumbs = self.$preview.find(".file-preview-initial");
          if (self.uploadAsync && $initThumbs.length) {
            $h.addCss($initThumbs, $h.SORT_CSS);
            self._initSortable();
          }
          self._raise("filebatchuploadcomplete", [
            fm.stack,
            self._getExtraData(),
          ]);
          if (!self.retryErrorUploads || errCount === 0) {
            fm.clear();
          }
          self._setProgress(101);
          self.ajaxAborted = false;
        }, self.processDelay);
      };
      fnBefore = function (jqXHR) {
        outData = self._getOutData(formdata, jqXHR);
        fm.initStats(id);
        self.fileBatchCompleted = false;
        if (!isBatch) {
          self.ajaxAborted = false;
        }
        if (self.showPreview) {
          if (!$thumb.hasClass("file-preview-success")) {
            self._setThumbStatus($thumb, "Loading");
            $h.addCss($thumb, "file-uploading");
          }
          $btnUpload.attr("disabled", true);
          $btnDelete.attr("disabled", true);
        }
        if (!isBatch) {
          self.lock();
        }
        if (fm.errors.indexOf(id) !== -1) {
          delete fm.errors[id];
        }
        self._raise("filepreupload", [outData, previewId, i]);
        $.extend(true, params, outData);
        if (self._abort(params)) {
          jqXHR.abort();
          if (!isBatch) {
            self._setThumbStatus($thumb, "New");
            $thumb.removeClass("file-uploading");
            $btnUpload.removeAttr("disabled");
            $btnDelete.removeAttr("disabled");
            self.unlock();
          }
          self._setProgressCancelled();
        }
      };
      fnSuccess = function (data, textStatus, jqXHR) {
        var pid =
          self.showPreview && $thumb.attr("id") ? $thumb.attr("id") : previewId;
        outData = self._getOutData(formdata, jqXHR, data);
        $.extend(true, params, outData);
        setTimeout(function () {
          if ($h.isEmpty(data) || $h.isEmpty(data.error)) {
            if (self.showPreview) {
              self._setThumbStatus($thumb, "Success");
              $btnUpload.hide();
              self._initUploadSuccess(data, $thumb, isBatch);
              self._setProgress(101, $prog);
            }
            self._raise("fileuploaded", [outData, pid, i]);
            if (!isBatch) {
              self.fileManager.remove($thumb);
            } else {
              updateUploadLog();
            }
          } else {
            uploadFailed = true;
            errMsg = self._parseError(
              op,
              jqXHR,
              self.msgUploadError,
              self.fileManager.getFileName(id)
            );
            self._showFileError(errMsg, params);
            self._setPreviewError($thumb, true);
            if (!self.retryErrorUploads) {
              $btnUpload.hide();
            }
            if (isBatch) {
              updateUploadLog();
            }
            self._setProgress(
              101,
              self._getFrame(pid).find(".file-thumb-progress"),
              self.msgUploadError
            );
          }
        }, self.processDelay);
      };
      fnComplete = function () {
        if (self.showPreview) {
          $btnUpload.removeAttr("disabled");
          $btnDelete.removeAttr("disabled");
          $thumb.removeClass("file-uploading");
        }
        if (!isBatch) {
          self.unlock(false);
          self._clearFileInput();
        } else {
          chkComplete();
        }
        self._initSuccessThumbs();
      };
      fnError = function (jqXHR, textStatus, errorThrown) {
        errMsg = self._parseError(
          op,
          jqXHR,
          errorThrown,
          self.fileManager.getFileName(id)
        );
        uploadFailed = true;
        setTimeout(function () {
          var $prog;
          if (isBatch) {
            updateUploadLog();
          }
          self.fileManager.setProgress(id, 100);
          self._setPreviewError($thumb, true);
          if (!self.retryErrorUploads) {
            $btnUpload.hide();
          }
          $.extend(true, params, self._getOutData(formdata, jqXHR));
          self._setProgress(
            101,
            self.$progress,
            self.msgAjaxProgressError.replace("{operation}", op)
          );
          $prog =
            self.showPreview && $thumb
              ? $thumb.find(".file-thumb-progress")
              : "";
          self._setProgress(101, $prog, self.msgUploadError);
          self._showFileError(errMsg, params);
        }, self.processDelay);
      };
      self._setFileData(formdata, fileObj.file, fileName, id);
      self._setUploadData(formdata, { fileId: id });
      self._ajaxSubmit(
        fnBefore,
        fnSuccess,
        fnComplete,
        fnError,
        formdata,
        id,
        i
      );
    },
    _setFileData: function (formdata, file, fileName, fileId) {
      var self = this,
        preProcess = self.preProcessUpload;
      if (preProcess && typeof preProcess === "function") {
        formdata.append(self.uploadFileAttr, preProcess(fileId, file));
      } else {
        formdata.append(self.uploadFileAttr, file, fileName);
      }
    },
    _uploadBatch: function () {
      var self = this,
        fm = self.fileManager,
        total = fm.total(),
        params = {},
        fnBefore,
        fnSuccess,
        fnError,
        fnComplete,
        hasPostData = total > 0 || !$.isEmptyObject(self.uploadExtraData),
        errMsg,
        setAllUploaded,
        formdata = new FormData(),
        op = self.ajaxOperations.uploadBatch;
      if (total === 0 || !hasPostData || self._abort(params)) {
        return;
      }
      setAllUploaded = function () {
        self.fileManager.clear();
        self._clearFileInput();
      };
      fnBefore = function (jqXHR) {
        self.lock();
        fm.initStats();
        var outData = self._getOutData(formdata, jqXHR);
        self.ajaxAborted = false;
        if (self.showPreview) {
          self._getThumbs().each(function () {
            var $thumb = $(this),
              $btnUpload = $thumb.find(".kv-file-upload"),
              $btnDelete = $thumb.find(".kv-file-remove");
            if (!$thumb.hasClass("file-preview-success")) {
              self._setThumbStatus($thumb, "Loading");
              $h.addCss($thumb, "file-uploading");
            }
            $btnUpload.attr("disabled", true);
            $btnDelete.attr("disabled", true);
          });
        }
        self._raise("filebatchpreupload", [outData]);
        if (self._abort(outData)) {
          jqXHR.abort();
          self._getThumbs().each(function () {
            var $thumb = $(this),
              $btnUpload = $thumb.find(".kv-file-upload"),
              $btnDelete = $thumb.find(".kv-file-remove");
            if ($thumb.hasClass("file-preview-loading")) {
              self._setThumbStatus($thumb, "New");
              $thumb.removeClass("file-uploading");
            }
            $btnUpload.removeAttr("disabled");
            $btnDelete.removeAttr("disabled");
          });
          self._setProgressCancelled();
        }
      };
      fnSuccess = function (data, textStatus, jqXHR) {
        /** @namespace data.errorkeys */
        var outData = self._getOutData(formdata, jqXHR, data),
          key = 0,
          $thumbs = self._getThumbs(":not(.file-preview-success)"),
          keys =
            $h.isEmpty(data) || $h.isEmpty(data.errorkeys)
              ? []
              : data.errorkeys;

        if ($h.isEmpty(data) || $h.isEmpty(data.error)) {
          self._raise("filebatchuploadsuccess", [outData]);
          setAllUploaded();
          if (self.showPreview) {
            $thumbs.each(function () {
              var $thumb = $(this);
              self._setThumbStatus($thumb, "Success");
              $thumb.removeClass("file-uploading");
              $thumb.find(".kv-file-upload").hide().removeAttr("disabled");
            });
            self._initUploadSuccess(data);
          } else {
            self.reset();
          }
          self._setProgress(101);
        } else {
          if (self.showPreview) {
            $thumbs.each(function () {
              var $thumb = $(this);
              $thumb.removeClass("file-uploading");
              $thumb.find(".kv-file-upload").removeAttr("disabled");
              $thumb.find(".kv-file-remove").removeAttr("disabled");
              if (keys.length === 0 || $.inArray(key, keys) !== -1) {
                self._setPreviewError($thumb, true);
                if (!self.retryErrorUploads) {
                  $thumb.find(".kv-file-upload").hide();
                  self.fileManager.remove($thumb);
                }
              } else {
                $thumb.find(".kv-file-upload").hide();
                self._setThumbStatus($thumb, "Success");
                self.fileManager.remove($thumb);
              }
              if (
                !$thumb.hasClass("file-preview-error") ||
                self.retryErrorUploads
              ) {
                key++;
              }
            });
            self._initUploadSuccess(data);
          }
          errMsg = self._parseError(op, jqXHR, self.msgUploadError);
          self._showFileError(errMsg, outData, "filebatchuploaderror");
          self._setProgress(101, self.$progress, self.msgUploadError);
        }
      };
      fnComplete = function () {
        self.unlock();
        self._initSuccessThumbs();
        self._clearFileInput();
        self._raise("filebatchuploadcomplete", [
          self.fileManager.stack,
          self._getExtraData(),
        ]);
      };
      fnError = function (jqXHR, textStatus, errorThrown) {
        var outData = self._getOutData(formdata, jqXHR);
        errMsg = self._parseError(op, jqXHR, errorThrown);
        self._showFileError(errMsg, outData, "filebatchuploaderror");
        self.uploadFileCount = total - 1;
        if (!self.showPreview) {
          return;
        }
        self._getThumbs().each(function () {
          var $thumb = $(this);
          $thumb.removeClass("file-uploading");
          if (self.fileManager.getFile($thumb.attr("data-fileid"))) {
            self._setPreviewError($thumb);
          }
        });
        self._getThumbs().removeClass("file-uploading");
        self._getThumbs(" .kv-file-upload").removeAttr("disabled");
        self._getThumbs(" .kv-file-delete").removeAttr("disabled");
        self._setProgress(
          101,
          self.$progress,
          self.msgAjaxProgressError.replace("{operation}", op)
        );
      };
      var ctr = 0;
      $.each(self.fileManager.stack, function (key, data) {
        if (!$h.isEmpty(data.file)) {
          self._setFileData(
            formdata,
            data.file,
            data.nameFmt || "untitled_" + ctr,
            key
          );
        }
        ctr++;
      });
      self._ajaxSubmit(fnBefore, fnSuccess, fnComplete, fnError, formdata);
    },
    _uploadExtraOnly: function () {
      var self = this,
        params = {},
        fnBefore,
        fnSuccess,
        fnComplete,
        fnError,
        formdata = new FormData(),
        errMsg,
        op = self.ajaxOperations.uploadExtra;
      if (self._abort(params)) {
        return;
      }
      fnBefore = function (jqXHR) {
        self.lock();
        var outData = self._getOutData(formdata, jqXHR);
        self._raise("filebatchpreupload", [outData]);
        self._setProgress(50);
        params.data = outData;
        params.xhr = jqXHR;
        if (self._abort(params)) {
          jqXHR.abort();
          self._setProgressCancelled();
        }
      };
      fnSuccess = function (data, textStatus, jqXHR) {
        var outData = self._getOutData(formdata, jqXHR, data);
        if ($h.isEmpty(data) || $h.isEmpty(data.error)) {
          self._raise("filebatchuploadsuccess", [outData]);
          self._clearFileInput();
          self._initUploadSuccess(data);
          self._setProgress(101);
        } else {
          errMsg = self._parseError(op, jqXHR, self.msgUploadError);
          self._showFileError(errMsg, outData, "filebatchuploaderror");
        }
      };
      fnComplete = function () {
        self.unlock();
        self._clearFileInput();
        self._raise("filebatchuploadcomplete", [
          self.fileManager.stack,
          self._getExtraData(),
        ]);
      };
      fnError = function (jqXHR, textStatus, errorThrown) {
        var outData = self._getOutData(formdata, jqXHR);
        errMsg = self._parseError(op, jqXHR, errorThrown);
        params.data = outData;
        self._showFileError(errMsg, outData, "filebatchuploaderror");
        self._setProgress(
          101,
          self.$progress,
          self.msgAjaxProgressError.replace("{operation}", op)
        );
      };
      self._ajaxSubmit(fnBefore, fnSuccess, fnComplete, fnError, formdata);
    },
    _deleteFileIndex: function ($frame) {
      var self = this,
        ind = $frame.attr("data-fileindex"),
        rev = self.reversePreviewOrder;
      if (ind.substring(0, 5) === $h.INIT_FLAG) {
        ind = parseInt(ind.replace($h.INIT_FLAG, ""));
        self.initialPreview = $h.spliceArray(self.initialPreview, ind, rev);
        self.initialPreviewConfig = $h.spliceArray(
          self.initialPreviewConfig,
          ind,
          rev
        );
        self.initialPreviewThumbTags = $h.spliceArray(
          self.initialPreviewThumbTags,
          ind,
          rev
        );
        self.getFrames().each(function () {
          var $nFrame = $(this),
            nInd = $nFrame.attr("data-fileindex");
          if (nInd.substring(0, 5) === $h.INIT_FLAG) {
            nInd = parseInt(nInd.replace($h.INIT_FLAG, ""));
            if (nInd > ind) {
              nInd--;
              $nFrame.attr("data-fileindex", $h.INIT_FLAG + nInd);
            }
          }
        });
      }
    },
    _resetCaption: function () {
      var self = this;
      setTimeout(function () {
        var cap,
          n,
          chk = self.previewCache.count(true),
          len = self.fileManager.count(),
          file,
          incomplete = ":not(.file-preview-success):not(.file-preview-error)",
          hasThumb = self.showPreview && self.getFrames(incomplete).length;
        if (len === 0 && chk === 0 && !hasThumb) {
          self.reset();
        } else {
          n = chk + len;
          if (n > 1) {
            cap = self._getMsgSelected(n);
          } else {
            file = self.fileManager.getFirstFile();
            cap = file ? file.nameFmt : "_";
          }
          self._setCaption(cap);
        }
      }, self.processDelay);
    },
    _initFileActions: function () {
      var self = this;
      if (!self.showPreview) {
        return;
      }
      self._initZoomButton();
      self.getFrames(" .kv-file-remove").each(function () {
        var $el = $(this),
          $frame = $el.closest($h.FRAMES),
          hasError,
          id = $frame.attr("id"),
          ind = $frame.attr("data-fileindex"),
          status;
        self._handler($el, "click", function () {
          status = self._raise("filepreremove", [id, ind]);
          if (status === false || !self._validateMinCount()) {
            return false;
          }
          hasError = $frame.hasClass("file-preview-error");
          $h.cleanMemory($frame);
          $frame.fadeOut("slow", function () {
            self.fileManager.remove($frame);
            self._clearObjects($frame);
            $frame.remove();
            if (id && hasError) {
              self.$errorContainer
                .find('li[data-thumb-id="' + id + '"]')
                .fadeOut("fast", function () {
                  $(this).remove();
                  if (!self._errorsExist()) {
                    self._resetErrors();
                  }
                });
            }
            self._clearFileInput();
            self._resetCaption();
            self._raise("fileremoved", [id, ind]);
          });
        });
      });
      self.getFrames(" .kv-file-upload").each(function () {
        var $el = $(this);
        self._handler($el, "click", function () {
          var $frame = $el.closest($h.FRAMES),
            fileId = $frame.attr("data-fileid");
          self._hideProgress();
          if (
            $frame.hasClass("file-preview-error") &&
            !self.retryErrorUploads
          ) {
            return;
          }
          self._uploadSingle(self.fileManager.getIndex(fileId), fileId, false);
        });
      });
    },
    _initPreviewActions: function () {
      var self = this,
        $preview = self.$preview,
        deleteExtraData = self.deleteExtraData || {},
        btnRemove = $h.FRAMES + " .kv-file-remove",
        settings = self.fileActionSettings,
        origClass = settings.removeClass,
        errClass = settings.removeErrorClass,
        resetProgress = function () {
          var hasFiles = self.isAjaxUpload
            ? self.previewCache.count(true)
            : self._inputFileCount();
          if (!self.getFrames().length && !hasFiles) {
            self._setCaption("");
            self.reset();
            self.initialCaption = "";
          }
        };
      self._initZoomButton();
      $preview.find(btnRemove).each(function () {
        var $el = $(this),
          vUrl = $el.data("url") || self.deleteUrl,
          vKey = $el.data("key"),
          errMsg,
          fnBefore,
          fnSuccess,
          fnError,
          op = self.ajaxOperations.deleteThumb;
        if ($h.isEmpty(vUrl) || vKey === undefined) {
          return;
        }
        if (typeof vUrl === "function") {
          vUrl = vUrl();
        }
        var $frame = $el.closest($h.FRAMES),
          cache = self.previewCache.data,
          settings,
          params,
          config,
          fileName,
          extraData,
          index = $frame.attr("data-fileindex");
        index = parseInt(index.replace($h.INIT_FLAG, ""));
        config =
          $h.isEmpty(cache.config) && $h.isEmpty(cache.config[index])
            ? null
            : cache.config[index];
        extraData =
          $h.isEmpty(config) || $h.isEmpty(config.extra)
            ? deleteExtraData
            : config.extra;
        fileName = (config && (config.filename || config.caption)) || "";
        if (typeof extraData === "function") {
          extraData = extraData();
        }
        params = { id: $el.attr("id"), key: vKey, extra: extraData };
        fnBefore = function (jqXHR) {
          self.ajaxAborted = false;
          self._raise("filepredelete", [vKey, jqXHR, extraData]);
          if (self._abort()) {
            jqXHR.abort();
          } else {
            $el.removeClass(errClass);
            $h.addCss($frame, "file-uploading");
            $h.addCss($el, "disabled " + origClass);
          }
        };
        fnSuccess = function (data, textStatus, jqXHR) {
          var n, cap;
          if (!$h.isEmpty(data) && !$h.isEmpty(data.error)) {
            params.jqXHR = jqXHR;
            params.response = data;
            errMsg = self._parseError(op, jqXHR, self.msgDeleteError, fileName);
            self._showFileError(errMsg, params, "filedeleteerror");
            $frame.removeClass("file-uploading");
            $el.removeClass("disabled " + origClass).addClass(errClass);
            resetProgress();
            return;
          }
          $frame.removeClass("file-uploading").addClass("file-deleted");
          $frame.fadeOut("slow", function () {
            index = parseInt(
              $frame.attr("data-fileindex").replace($h.INIT_FLAG, "")
            );
            self.previewCache.unset(index);
            self._deleteFileIndex($frame);
            n = self.previewCache.count(true);
            cap = n > 0 ? self._getMsgSelected(n) : "";
            self._setCaption(cap);
            self._raise("filedeleted", [vKey, jqXHR, extraData]);
            self._clearObjects($frame);
            $frame.remove();
            resetProgress();
          });
        };
        fnError = function (jqXHR, textStatus, errorThrown) {
          var errMsg = self._parseError(op, jqXHR, errorThrown, fileName);
          params.jqXHR = jqXHR;
          params.response = {};
          self._showFileError(errMsg, params, "filedeleteerror");
          $frame.removeClass("file-uploading");
          $el.removeClass("disabled " + origClass).addClass(errClass);
          resetProgress();
        };
        self._initAjaxSettings();
        self._mergeAjaxCallback("beforeSend", fnBefore, "delete");
        self._mergeAjaxCallback("success", fnSuccess, "delete");
        self._mergeAjaxCallback("error", fnError, "delete");
        settings = $.extend(
          true,
          {},
          {
            url: self._encodeURI(vUrl),
            type: "POST",
            dataType: "json",
            data: $.extend(true, {}, { key: vKey }, extraData),
          },
          self._ajaxDeleteSettings
        );
        self._handler($el, "click", function () {
          if (!self._validateMinCount()) {
            return false;
          }
          self.ajaxAborted = false;
          self._raise("filebeforedelete", [vKey, extraData]);
          if (self.ajaxAborted instanceof Promise) {
            self.ajaxAborted.then(function (result) {
              if (!result) {
                $.ajax(settings);
              }
            });
          } else {
            if (!self.ajaxAborted) {
              $.ajax(settings);
            }
          }
        });
      });
    },
    _hideFileIcon: function () {
      var self = this;
      if (self.overwriteInitial) {
        self.$captionContainer.removeClass("icon-visible");
      }
    },
    _showFileIcon: function () {
      var self = this;
      $h.addCss(self.$captionContainer, "icon-visible");
    },
    _getSize: function (bytes, sizes) {
      var self = this,
        size = parseFloat(bytes),
        i,
        func = self.fileSizeGetter,
        out;
      if (!$.isNumeric(bytes) || !$.isNumeric(size)) {
        return "";
      }
      if (typeof func === "function") {
        out = func(size);
      } else {
        if (size === 0) {
          out = "0.00 B";
        } else {
          i = Math.floor(Math.log(size) / Math.log(1024));
          if (!sizes) {
            sizes = ["B", "KB", "MB", "GB", "TB", "PB", "EB", "ZB", "YB"];
          }
          out = (size / Math.pow(1024, i)).toFixed(2) * 1 + " " + sizes[i];
        }
      }
      return self._getLayoutTemplate("size").replace("{sizeText}", out);
    },
    _getFileType: function (ftype) {
      var self = this;
      return self.mimeTypeAliases[ftype] || ftype;
    },
    _generatePreviewTemplate: function (
      cat,
      data,
      fname,
      ftype,
      previewId,
      fileId,
      isError,
      size,
      frameClass,
      foot,
      ind,
      templ,
      attrs,
      zoomData
    ) {
      var self = this,
        caption = self.slug(fname),
        prevContent,
        zoomContent = "",
        styleAttribs = "",
        screenW =
          window.innerWidth ||
          document.documentElement.clientWidth ||
          document.body.clientWidth,
        config,
        title = caption,
        alt = caption,
        typeCss = "type-default",
        getContent,
        footer =
          foot || self._renderFileFooter(cat, caption, size, "auto", isError),
        forcePrevIcon = self.preferIconicPreview,
        forceZoomIcon = self.preferIconicZoomPreview,
        newCat = forcePrevIcon ? "other" : cat;
      config =
        screenW < 400
          ? self.previewSettingsSmall[newCat] ||
            self.defaults.previewSettingsSmall[newCat]
          : self.previewSettings[newCat] ||
            self.defaults.previewSettings[newCat];
      if (config) {
        $.each(config, function (key, val) {
          styleAttribs += key + ":" + val + ";";
        });
      }
      getContent = function (c, d, zoom, frameCss) {
        var id = zoom ? "zoom-" + previewId : previewId,
          tmplt = self._getPreviewTemplate(c),
          css = (frameClass || "") + " " + frameCss;
        if (self.frameClass) {
          css = self.frameClass + " " + css;
        }
        if (zoom) {
          css = css.replace(" " + $h.SORT_CSS, "");
        }
        tmplt = self._parseFilePreviewIcon(tmplt, fname);
        if (cat === "object" && !ftype) {
          $.each(self.defaults.fileTypeSettings, function (key, func) {
            if (key === "object" || key === "other") {
              return;
            }
            if (func(fname, ftype)) {
              typeCss = "type-" + key;
            }
          });
        }
        if (!$h.isEmpty(attrs)) {
          if (attrs.title !== undefined && attrs.title !== null) {
            title = attrs.title;
          }
          if (attrs.alt !== undefined && attrs.alt !== null) {
            title = attrs.alt;
          }
        }
        return tmplt.setTokens({
          previewId: id,
          caption: caption,
          title: title,
          alt: alt,
          frameClass: css,
          type: self._getFileType(ftype),
          fileindex: ind,
          fileid: fileId || "",
          typeCss: typeCss,
          footer: footer,
          data: d,
          template: templ || cat,
          style: styleAttribs ? 'style="' + styleAttribs + '"' : "",
        });
      };
      ind = ind || previewId.slice(previewId.lastIndexOf("-") + 1);
      if (self.fileActionSettings.showZoom) {
        zoomContent = getContent(
          forceZoomIcon ? "other" : cat,
          zoomData ? zoomData : data,
          true,
          "kv-zoom-thumb"
        );
      }
      zoomContent =
        "\n" +
        self
          ._getLayoutTemplate("zoomCache")
          .replace("{zoomContent}", zoomContent);
      if (typeof self.sanitizeZoomCache === "function") {
        zoomContent = self.sanitizeZoomCache(zoomContent);
      }
      prevContent = getContent(
        forcePrevIcon ? "other" : cat,
        data,
        false,
        "kv-preview-thumb"
      );
      return prevContent.setTokens({ zoomCache: zoomContent });
    },
    _addToPreview: function ($preview, content) {
      var self = this,
        $el;
      content = $h.cspBuffer.stash(content);
      $el = self.reversePreviewOrder
        ? $preview.prepend(content)
        : $preview.append(content);
      $h.cspBuffer.apply($preview);
      return $el;
    },
    _previewDefault: function (file, isDisabled) {
      var self = this,
        $preview = self.$preview;
      if (!self.showPreview) {
        return;
      }
      var fname = $h.getFileName(file),
        ftype = file ? file.type : "",
        content,
        size = file.size || 0,
        caption = self._getFileName(file, ""),
        isError = isDisabled === true && !self.isAjaxUpload,
        data = $h.createObjectURL(file),
        fileId = self.fileManager.getId(file),
        previewId = self._getThumbId(fileId);
      self._clearDefaultPreview();
      content = self._generatePreviewTemplate(
        "other",
        data,
        fname,
        ftype,
        previewId,
        fileId,
        isError,
        size
      );
      self._addToPreview($preview, content);
      self._setThumbAttr(previewId, caption, size);
      if (isDisabled === true && self.isAjaxUpload) {
        self._setThumbStatus(self._getFrame(previewId), "Error");
      }
    },
    _previewFile: function (i, file, theFile, data, fileInfo) {
      if (!this.showPreview) {
        return;
      }
      var self = this,
        fname = $h.getFileName(file),
        ftype = fileInfo.type,
        caption = fileInfo.name,
        cat = self._parseFileType(ftype, fname),
        content,
        $preview = self.$preview,
        fsize = file.size || 0,
        iData = cat === "image" ? theFile.target.result : data,
        fileId = self.fileManager.getId(file),
        previewId = self._getThumbId(fileId);
      /** @namespace window.DOMPurify */
      content = self._generatePreviewTemplate(
        cat,
        iData,
        fname,
        ftype,
        previewId,
        fileId,
        false,
        fsize
      );
      self._clearDefaultPreview();
      self._addToPreview($preview, content);
      var $thumb = self._getFrame(previewId);
      self._validateImageOrientation(
        $thumb.find("img"),
        file,
        previewId,
        fileId,
        caption,
        ftype,
        fsize,
        iData
      );
      self._setThumbAttr(previewId, caption, fsize);
      self._initSortable();
    },
    _setThumbAttr: function (id, caption, size) {
      var self = this,
        $frame = self._getFrame(id);
      if ($frame.length) {
        size = size && size > 0 ? self._getSize(size) : "";
        $frame.data({ caption: caption, size: size });
      }
    },
    _setInitThumbAttr: function () {
      var self = this,
        data = self.previewCache.data,
        len = self.previewCache.count(true),
        config,
        caption,
        size,
        previewId;
      if (len === 0) {
        return;
      }
      for (var i = 0; i < len; i++) {
        config = data.config[i];
        previewId = self.previewInitId + "-" + $h.INIT_FLAG + i;
        caption = $h.ifSet("caption", config, $h.ifSet("filename", config));
        size = $h.ifSet("size", config);
        self._setThumbAttr(previewId, caption, size);
      }
    },
    _slugDefault: function (text) {
      // noinspection RegExpRedundantEscape
      return $h.isEmpty(text, true)
        ? ""
        : String(text).replace(/[\[\]\/\{}:;#%=\(\)\*\+\?\\\^\$\|<>&"']/g, "_");
    },
    _updateFileDetails: function (numFiles, skipRaiseEvent) {
      var self = this,
        $el = self.$element,
        label,
        n,
        log,
        nFiles,
        file,
        name =
          ($h.isIE(9) && $h.findFileName($el.val())) ||
          ($el[0].files[0] && $el[0].files[0].name);
      if (!name && self.fileManager.count() > 0) {
        file = self.fileManager.getFirstFile();
        label = file.nameFmt;
      } else {
        label = name ? self.slug(name) : "_";
      }
      n = self.isAjaxUpload ? self.fileManager.count() : numFiles;
      nFiles = self.previewCache.count(true) + n;
      log = n === 1 ? label : self._getMsgSelected(nFiles);
      if (self.isError) {
        self.$previewContainer.removeClass("file-thumb-loading");
        self.$previewStatus.html("");
        self.$captionContainer.removeClass("icon-visible");
      } else {
        self._showFileIcon();
      }
      self._setCaption(log, self.isError);
      self.$container.removeClass("file-input-new file-input-ajax-new");
      if (!skipRaiseEvent) {
        self._raise("fileselect", [numFiles, label]);
      }
      if (self.previewCache.count(true)) {
        self._initPreviewActions();
      }
    },
    _setThumbStatus: function ($thumb, status) {
      var self = this;
      if (!self.showPreview) {
        return;
      }
      var icon = "indicator" + status,
        msg = icon + "Title",
        css = "file-preview-" + status.toLowerCase(),
        $indicator = $thumb.find(".file-upload-indicator"),
        config = self.fileActionSettings;
      $thumb.removeClass(
        "file-preview-success file-preview-error file-preview-paused file-preview-loading"
      );
      if (status === "Success") {
        $thumb.find(".file-drag-handle").remove();
      }
      $h.setHtml($indicator, config[icon]);
      $indicator.attr("title", config[msg]);
      $thumb.addClass(css);
      if (status === "Error" && !self.retryErrorUploads) {
        $thumb.find(".kv-file-upload").attr("disabled", true);
      }
    },
    _setProgressCancelled: function () {
      var self = this;
      self._setProgress(101, self.$progress, self.msgCancelled);
    },
    _setProgress: function (p, $el, error, stats) {
      var self = this;
      $el = $el || self.$progress;
      if (!$el.length) {
        return;
      }
      var pct = Math.min(p, 100),
        out,
        pctLimit = self.progressUploadThreshold,
        t = p <= 100 ? self.progressTemplate : self.progressCompleteTemplate,
        template =
          pct < 100
            ? self.progressTemplate
            : error
            ? self.paused
              ? self.progressPauseTemplate
              : self.progressErrorTemplate
            : t;
      if (p >= 100) {
        stats = "";
      }
      if (!$h.isEmpty(template)) {
        if (pctLimit && pct > pctLimit && p <= 100) {
          out = template.setTokens({
            percent: pctLimit,
            status: self.msgUploadThreshold,
          });
        } else {
          out = template.setTokens({
            percent: pct,
            status: p > 100 ? self.msgUploadEnd : pct + "%",
          });
        }
        stats = stats || "";
        out = out.setTokens({ stats: stats });
        $h.setHtml($el, out);
        if (error) {
          $h.setHtml($el.find('[role="progressbar"]'), error);
        }
      }
    },
    _hasFiles: function () {
      var el = this.$element[0];
      return !!(el && el.files && el.files.length);
    },
    _setFileDropZoneTitle: function () {
      var self = this,
        $zone = self.$container.find(".file-drop-zone"),
        title = self.dropZoneTitle,
        strFiles;
      if (self.isClickable) {
        strFiles = $h.isEmpty(self.$element.attr("multiple"))
          ? self.fileSingle
          : self.filePlural;
        title += self.dropZoneClickTitle.replace("{files}", strFiles);
      }
      $zone.find("." + self.dropZoneTitleClass).remove();
      if (
        !self.showPreview ||
        $zone.length === 0 ||
        self.fileManager.count() > 0 ||
        !self.dropZoneEnabled ||
        self.previewCache.count() > 0 ||
        (!self.isAjaxUpload && self._hasFiles())
      ) {
        return;
      }
      if (
        $zone.find($h.FRAMES).length === 0 &&
        $h.isEmpty(self.defaultPreviewContent)
      ) {
        $zone.prepend(
          '<div class="' +
            self.dropZoneTitleClass +
            ' text-body-secondary">' +
            title +
            "</div>"
        );
      }
      self.$container.removeClass("file-input-new");
      $h.addCss(self.$container, "file-input-ajax-new");
    },
    _getStats: function (stats) {
      var self = this,
        pendingTime,
        t;
      if (!self.showUploadStats || !stats || !stats.bitrate) {
        return "";
      }
      t = self._getLayoutTemplate("stats");
      pendingTime =
        !stats.elapsed || !stats.bps
          ? self.msgCalculatingTime
          : self.msgPendingTime.setTokens({
              time: $h.getElapsed(Math.ceil(stats.pendingBytes / stats.bps)),
            });

      return t.setTokens({
        uploadSpeed: stats.bitrate,
        pendingTime: pendingTime,
      });
    },
    _setResumableProgress: function (pct, stats, $thumb) {
      var self = this,
        rm = self.resumableManager,
        obj = $thumb ? rm : self,
        $prog = $thumb ? $thumb.find(".file-thumb-progress") : null;
      if (obj.lastProgress === 0) {
        obj.lastProgress = pct;
      }
      if (pct < obj.lastProgress) {
        pct = obj.lastProgress;
      }
      self._setProgress(pct, $prog, null, self._getStats(stats));
      obj.lastProgress = pct;
    },
    _toggleResumableProgress: function (template, message) {
      var self = this,
        $progress = self.$progress;
      if ($progress && $progress.length) {
        $h.setHtml(
          $progress,
          template.setTokens({
            percent: 101,
            status: message,
            stats: "",
          })
        );
      }
    },
    _setFileUploadStats: function (id, pct, stats) {
      var self = this,
        $prog = self.$progress;
      if (!self.showPreview && (!$prog || !$prog.length)) {
        return;
      }
      var fm = self.fileManager,
        rm = self.resumableManager,
        $thumb = fm.getThumb(id),
        pctTot,
        totUpSize = 0,
        totSize = fm.getTotalSize(),
        totStats = $.extend(true, {}, stats);
      if (self.enableResumableUpload) {
        var loaded = stats.loaded,
          currUplSize = rm.getUploadedSize(),
          currTotSize = rm.file.size,
          totLoaded;
        loaded += currUplSize;
        totLoaded = fm.uploadedSize + loaded;
        pct = $h.round((100 * loaded) / currTotSize);
        stats.pendingBytes = currTotSize - currUplSize;
        self._setResumableProgress(pct, stats, $thumb);
        pctTot = Math.floor((100 * totLoaded) / totSize);
        totStats.pendingBytes = totSize - totLoaded;
        self._setResumableProgress(pctTot, totStats);
      } else {
        fm.setProgress(id, pct);
        $prog =
          $thumb && $thumb.length ? $thumb.find(".file-thumb-progress") : null;
        self._setProgress(pct, $prog, null, self._getStats(stats));
        $.each(fm.stats, function (id, cfg) {
          totUpSize += cfg.loaded;
        });
        totStats.pendingBytes = totSize - totUpSize;
        pctTot = $h.round((totUpSize / totSize) * 100);
        self._setProgress(pctTot, null, null, self._getStats(totStats));
      }
    },
    _validateMinCount: function () {
      var self = this,
        len = self.isAjaxUpload
          ? self.fileManager.count()
          : self._inputFileCount();
      if (
        self.validateInitialCount &&
        self.minFileCount > 0 &&
        self._getFileCount(len - 1) < self.minFileCount
      ) {
        self._noFilesError({});
        return false;
      }
      return true;
    },
    _getFileCount: function (fileCount, includeInitial) {
      var self = this,
        addCount = 0;
      if (includeInitial === undefined) {
        includeInitial = self.validateInitialCount && !self.overwriteInitial;
      }
      if (includeInitial) {
        addCount = self.previewCache.count(true);
        fileCount += addCount;
      }
      return fileCount;
    },
    _getFileId: function (file) {
      return $h.getFileId(file, this.generateFileId);
    },
    _getFileName: function (file, defaultValue) {
      var self = this,
        fileName = $h.getFileName(file);
      return fileName ? self.slug(fileName) : defaultValue;
    },
    _getFileNames: function (skipNull) {
      var self = this;
      return self.filenames.filter(function (n) {
        return skipNull ? n !== undefined : n !== undefined && n !== null;
      });
    },
    _setPreviewError: function ($thumb, keepFile) {
      var self = this,
        removeFrame = self.removeFromPreviewOnError && !self.retryErrorUploads;
      if (!keepFile || removeFrame) {
        self.fileManager.remove($thumb);
      }
      if (!self.showPreview) {
        return;
      }
      if (removeFrame) {
        $thumb.remove();
        return;
      } else {
        self._setThumbStatus($thumb, "Error");
      }
      self._refreshUploadButton($thumb);
    },
    _refreshUploadButton: function ($thumb) {
      var self = this,
        $btn = $thumb.find(".kv-file-upload"),
        cfg = self.fileActionSettings,
        icon = cfg.uploadIcon,
        title = cfg.uploadTitle;
      if (!$btn.length) {
        return;
      }
      if (self.retryErrorUploads) {
        icon = cfg.uploadRetryIcon;
        title = cfg.uploadRetryTitle;
      }
      $btn.attr("title", title);
      $h.setHtml($btn, icon);
    },
    _checkDimensions: function (i, chk, $img, $thumb, fname, type, params) {
      var self = this,
        msg,
        dim,
        tag = chk === "Small" ? "min" : "max",
        limit = self[tag + "Image" + type],
        $imgEl,
        isValid;
      if ($h.isEmpty(limit) || !$img.length) {
        return;
      }
      $imgEl = $img[0];
      dim =
        type === "Width"
          ? $imgEl.naturalWidth || $imgEl.width
          : $imgEl.naturalHeight || $imgEl.height;
      isValid = chk === "Small" ? dim >= limit : dim <= limit;
      if (isValid) {
        return;
      }
      msg = self["msgImage" + type + chk].setTokens({
        name: fname,
        size: limit,
      });
      self._showFileError(msg, params);
      self._setPreviewError($thumb);
    },
    _getExifObj: function (data) {
      var self = this,
        exifObj,
        error = $h.logMessages.exifWarning;
      if (
        data.slice(0, 23) !== "data:image/jpeg;base64," &&
        data.slice(0, 22) !== "data:image/jpg;base64,"
      ) {
        exifObj = null;
        return;
      }
      try {
        exifObj = window.piexif ? window.piexif.load(data) : null;
      } catch (err) {
        exifObj = null;
        error = (err && err.message) || "";
      }
      if (!exifObj) {
        self._log($h.logMessages.badExifParser, { details: error });
      }
      return exifObj;
    },
    setImageOrientation: function ($img, $zoomImg, value, $thumb) {
      var self = this,
        invalidImg = !$img || !$img.length,
        invalidZoomImg = !$zoomImg || !$zoomImg.length,
        $mark,
        isHidden = false,
        $div,
        zoomOnly =
          invalidImg && $thumb && $thumb.attr("data-template") === "image",
        ev;
      if (invalidImg && invalidZoomImg) {
        return;
      }
      ev = "load.fileinputimageorient";
      if (zoomOnly) {
        $img = $zoomImg;
        $zoomImg = null;
        $img.css(self.previewSettings.image);
        $div = $(document.createElement("div")).appendTo(
          $thumb.find(".kv-file-content")
        );
        $mark = $(document.createElement("span")).insertBefore($img);
        $img
          .css("visibility", "hidden")
          .removeClass("file-zoom-detail")
          .appendTo($div);
      } else {
        isHidden = !$img.is(":visible");
      }
      $img.off(ev).on(ev, function () {
        if (isHidden) {
          self.$preview.removeClass("hide-content");
          $thumb.find(".kv-file-content").css("visibility", "hidden");
        }
        var img = $img[0],
          zoomImg = $zoomImg && $zoomImg.length ? $zoomImg[0] : null,
          h = img.offsetHeight,
          w = img.offsetWidth,
          r = $h.getRotation(value);
        if (isHidden) {
          $thumb.find(".kv-file-content").css("visibility", "visible");
          self.$preview.addClass("hide-content");
        }
        $img.data("orientation", value);
        if (zoomImg) {
          $zoomImg.data("orientation", value);
        }
        if (value < 5) {
          $h.setTransform(img, r);
          $h.setTransform(zoomImg, r);
          return;
        }
        var offsetAngle = Math.atan(w / h),
          origFactor = Math.sqrt(Math.pow(h, 2) + Math.pow(w, 2)),
          scale = !origFactor
            ? 1
            : h / Math.cos(Math.PI / 2 + offsetAngle) / origFactor,
          s = " scale(" + Math.abs(scale) + ")";
        $h.setTransform(img, r + s);
        $h.setTransform(zoomImg, r + s);
        if (zoomOnly) {
          $img
            .css("visibility", "visible")
            .insertAfter($mark)
            .addClass("file-zoom-detail");
          $mark.remove();
          $div.remove();
        }
      });
    },
    _validateImageOrientation: function (
      $img,
      file,
      previewId,
      fileId,
      caption,
      ftype,
      fsize,
      iData
    ) {
      var self = this,
        exifObj,
        value,
        autoOrientImage = self.autoOrientImage,
        selector;
      if (self.canOrientImage) {
        $img.css("image-orientation", autoOrientImage ? "from-image" : "none");
        return;
      }
      selector = $h.getZoomSelector(previewId, " img");
      exifObj = autoOrientImage ? self._getExifObj(iData) : null;
      value = exifObj ? exifObj["0th"][piexif.ImageIFD.Orientation] : null; // jshint ignore:line
      if (!value) {
        self._validateImage(
          previewId,
          fileId,
          caption,
          ftype,
          fsize,
          iData,
          exifObj
        );
        return;
      }
      self.setImageOrientation(
        $img,
        $(selector),
        value,
        self._getFrame(previewId)
      );
      self._raise("fileimageoriented", { $img: $img, file: file });
      self._validateImage(
        previewId,
        fileId,
        caption,
        ftype,
        fsize,
        iData,
        exifObj
      );
    },
    _validateImage: function (
      previewId,
      fileId,
      fname,
      ftype,
      fsize,
      iData,
      exifObj
    ) {
      var self = this,
        $preview = self.$preview,
        params,
        w1,
        w2,
        $thumb = self._getFrame(previewId),
        i = $thumb.attr("data-fileindex"),
        $img = $thumb.find("img");
      fname = fname || "Untitled";
      $img
        .one("load", function () {
          w1 = $thumb.width();
          w2 = $preview.width();
          if (w1 > w2) {
            $img.css("width", "100%");
          }
          params = { ind: i, id: previewId, fileId: fileId };
          self._checkDimensions(
            i,
            "Small",
            $img,
            $thumb,
            fname,
            "Width",
            params
          );
          self._checkDimensions(
            i,
            "Small",
            $img,
            $thumb,
            fname,
            "Height",
            params
          );
          if (!self.resizeImage) {
            self._checkDimensions(
              i,
              "Large",
              $img,
              $thumb,
              fname,
              "Width",
              params
            );
            self._checkDimensions(
              i,
              "Large",
              $img,
              $thumb,
              fname,
              "Height",
              params
            );
          }
          self._raise("fileimageloaded", [previewId]);
          self.fileManager.addImage(fileId, {
            ind: i,
            img: $img,
            thumb: $thumb,
            pid: previewId,
            typ: ftype,
            siz: fsize,
            validated: false,
            imgData: iData,
            exifObj: exifObj,
          });
          $thumb.data("exif", exifObj);
          self._validateAllImages();
        })
        .one("error", function () {
          self._raise("fileimageloaderror", [previewId]);
        })
        .each(function () {
          if (this.complete) {
            $(this).trigger("load");
          } else {
            if (this.error) {
              $(this).trigger("error");
            }
          }
        });
    },
    _validateAllImages: function () {
      var self = this,
        counter = { val: 0 },
        numImgs = self.fileManager.getImageCount(),
        fsize,
        minSize = self.resizeIfSizeMoreThan;
      if (numImgs !== self.fileManager.totalImages) {
        return;
      }
      self._raise("fileimagesloaded");
      if (!self.resizeImage) {
        return;
      }
      $.each(self.fileManager.loadedImages, function (id, config) {
        if (!config.validated) {
          fsize = config.siz;
          if (fsize && fsize > minSize * 1000) {
            self._getResizedImage(id, config, counter, numImgs);
          }
          config.validated = true;
        }
      });
    },
    _getResizedImage: function (id, config, counter, numImgs) {
      var self = this,
        img = $(config.img)[0],
        width = img.naturalWidth,
        height = img.naturalHeight,
        blob,
        ratio = 1,
        maxWidth = self.maxImageWidth || width,
        maxHeight = self.maxImageHeight || height,
        isValidImage = !!(width && height),
        chkWidth,
        chkHeight,
        canvas = self.imageCanvas,
        dataURI,
        context = self.imageCanvasContext,
        type = config.typ,
        pid = config.pid,
        ind = config.ind,
        $thumb = config.thumb,
        throwError,
        msg,
        exifObj = config.exifObj,
        exifStr,
        file,
        params,
        evParams;
      throwError = function (msg, params, ev) {
        if (self.isAjaxUpload) {
          self._showFileError(msg, params, ev);
        } else {
          self._showError(msg, params, ev);
        }
        self._setPreviewError($thumb);
      };
      file = self.fileManager.getFile(id);
      params = { id: pid, index: ind, fileId: id };
      evParams = [id, pid, ind];
      if (
        !file ||
        !isValidImage ||
        (width <= maxWidth && height <= maxHeight)
      ) {
        if (isValidImage && file) {
          self._raise("fileimageresized", evParams);
        }
        counter.val++;
        if (counter.val === numImgs) {
          self._raise("fileimagesresized");
        }
        if (!isValidImage) {
          throwError(self.msgImageResizeError, params, "fileimageresizeerror");
          return;
        }
      }
      type = type || self.resizeDefaultImageType;
      chkWidth = width > maxWidth;
      chkHeight = height > maxHeight;
      if (self.resizePreference === "width") {
        ratio = chkWidth
          ? maxWidth / width
          : chkHeight
          ? maxHeight / height
          : 1;
      } else {
        ratio = chkHeight
          ? maxHeight / height
          : chkWidth
          ? maxWidth / width
          : 1;
      }
      self._resetCanvas();
      width *= ratio;
      height *= ratio;
      canvas.width = width;
      canvas.height = height;
      try {
        context.drawImage(img, 0, 0, width, height);
        dataURI = canvas.toDataURL(type, self.resizeQuality);
        if (exifObj) {
          exifStr = window.piexif.dump(exifObj);
          dataURI = window.piexif.insert(exifStr, dataURI);
        }
        blob = $h.dataURI2Blob(dataURI);
        self.fileManager.setFile(id, blob);
        self._raise("fileimageresized", evParams);
        counter.val++;
        if (counter.val === numImgs) {
          self._raise("fileimagesresized", [undefined, undefined]);
        }
        if (!(blob instanceof Blob)) {
          throwError(self.msgImageResizeError, params, "fileimageresizeerror");
        }
      } catch (err) {
        counter.val++;
        if (counter.val === numImgs) {
          self._raise("fileimagesresized", [undefined, undefined]);
        }
        msg = self.msgImageResizeException.replace("{errors}", err.message);
        throwError(msg, params, "fileimageresizeexception");
      }
    },
    _showProgress: function () {
      var self = this;
      if (self.$progress && self.$progress.length) {
        self.$progress.show();
      }
    },
    _hideProgress: function () {
      var self = this;
      if (self.$progress && self.$progress.length) {
        self.$progress.hide();
      }
    },
    _initBrowse: function ($container) {
      var self = this,
        $el = self.$element;
      if (self.showBrowse) {
        self.$btnFile = $container.find(".btn-file").append($el);
      } else {
        $el.appendTo($container).attr("tabindex", -1);
        $h.addCss($el, "file-no-browse");
      }
    },
    _initClickable: function () {
      var self = this,
        $zone,
        $tmpZone;
      if (!self.isClickable) {
        return;
      }
      $zone = self.$dropZone;
      if (!self.isAjaxUpload) {
        $tmpZone = self.$preview.find(".file-default-preview");
        if ($tmpZone.length) {
          $zone = $tmpZone;
        }
      }

      $h.addCss($zone, "clickable");
      $zone.attr("tabindex", -1);
      self._handler($zone, "click", function (e) {
        var $tar = $(e.target);
        if (
          !$(self.elErrorContainer + ":visible").length &&
          (!$tar.parents(".file-preview-thumbnails").length ||
            $tar.parents(".file-default-preview").length)
        ) {
          self.$element.data("zoneClicked", true).trigger("click");
          $zone.blur();
        }
      });
    },
    _initCaption: function () {
      var self = this,
        cap = self.initialCaption || "";
      if (self.overwriteInitial || $h.isEmpty(cap)) {
        self.$caption.val("");
        return false;
      }
      self._setCaption(cap);
      return true;
    },
    _setCaption: function (content, isError) {
      var self = this,
        title,
        out,
        icon,
        n,
        cap,
        file;
      if (!self.$caption.length) {
        return;
      }
      self.$captionContainer.removeClass("icon-visible");
      if (isError) {
        title = $("<div>" + self.msgValidationError + "</div>").text();
        n = self.fileManager.count();
        if (n) {
          file = self.fileManager.getFirstFile();
          cap = n === 1 && file ? file.nameFmt : self._getMsgSelected(n);
        } else {
          cap = self._getMsgSelected(self.msgNo);
        }
        out = $h.isEmpty(content) ? cap : content;
        icon =
          '<span class="' +
          self.msgValidationErrorClass +
          '">' +
          self.msgValidationErrorIcon +
          "</span>";
      } else {
        if ($h.isEmpty(content)) {
          return;
        }
        title = $("<div>" + content + "</div>").text();
        out = title;
        icon = self._getLayoutTemplate("fileIcon");
      }
      self.$captionContainer.addClass("icon-visible");
      self.$caption.attr("title", title).val(out);
      $h.setHtml(self.$captionIcon, icon);
    },
    _createContainer: function () {
      var self = this,
        attribs = {
          class: "file-input file-input-new" + (self.rtl ? " kv-rtl" : ""),
        },
        $container = $h.createElement($h.cspBuffer.stash(self._renderMain()));
      $h.cspBuffer.apply($container);
      $container.insertBefore(self.$element).attr(attribs);
      self._initBrowse($container);
      if (self.theme) {
        $container.addClass("theme-" + self.theme);
      }
      return $container;
    },
    _refreshContainer: function () {
      var self = this,
        $container = self.$container,
        $el = self.$element;
      $el.insertAfter($container);
      $h.setHtml($container, self._renderMain());
      self._initBrowse($container);
      self._validateDisabled();
    },
    _validateDisabled: function () {
      var self = this;
      self.$caption.attr({ readonly: self.isDisabled });
    },
    _renderMain: function () {
      var self = this,
        dropCss = self.dropZoneEnabled
          ? " file-drop-zone"
          : "file-drop-disabled",
        close = !self.showClose ? "" : self._getLayoutTemplate("close"),
        preview = !self.showPreview
          ? ""
          : self
              ._getLayoutTemplate("preview")
              .setTokens({ class: self.previewClass, dropClass: dropCss }),
        css = self.isDisabled
          ? self.captionClass + " file-caption-disabled"
          : self.captionClass,
        caption = self.captionTemplate.setTokens({
          class: css + " kv-fileinput-caption",
        });
      return self.mainTemplate.setTokens({
        class:
          self.mainClass +
          (!self.showBrowse && self.showCaption ? " no-browse" : ""),
        preview: preview,
        close: close,
        caption: caption,
        upload: self._renderButton("upload"),
        remove: self._renderButton("remove"),
        cancel: self._renderButton("cancel"),
        pause: self._renderButton("pause"),
        browse: self._renderButton("browse"),
      });
    },
    _renderButton: function (type) {
      var self = this,
        tmplt = self._getLayoutTemplate("btnDefault"),
        css = self[type + "Class"],
        title = self[type + "Title"],
        icon = self[type + "Icon"],
        label = self[type + "Label"],
        status = self.isDisabled ? " disabled" : "",
        btnType = "button";
      switch (type) {
        case "remove":
          if (!self.showRemove) {
            return "";
          }
          break;
        case "cancel":
          if (!self.showCancel) {
            return "";
          }
          css += " kv-hidden";
          break;
        case "pause":
          if (!self.showPause) {
            return "";
          }
          css += " kv-hidden";
          break;
        case "upload":
          if (!self.showUpload) {
            return "";
          }
          if (self.isAjaxUpload && !self.isDisabled) {
            tmplt = self
              ._getLayoutTemplate("btnLink")
              .replace("{href}", self.uploadUrl);
          } else {
            btnType = "submit";
          }
          break;
        case "browse":
          if (!self.showBrowse) {
            return "";
          }
          tmplt = self._getLayoutTemplate("btnBrowse");
          break;
        default:
          return "";
      }

      css +=
        type === "browse"
          ? " btn-file"
          : " fileinput-" + type + " fileinput-" + type + "-button";
      if (!$h.isEmpty(label)) {
        label =
          ' <span class="' + self.buttonLabelClass + '">' + label + "</span>";
      }
      return tmplt.setTokens({
        type: btnType,
        css: css,
        title: title,
        status: status,
        icon: icon,
        label: label,
      });
    },
    _renderThumbProgress: function () {
      var self = this;
      return (
        '<div class="file-thumb-progress kv-hidden">' +
        self.progressInfoTemplate.setTokens({
          percent: 101,
          status: self.msgUploadBegin,
          stats: "",
        }) +
        "</div>"
      );
    },
    _renderFileFooter: function (cat, caption, size, width, isError) {
      var self = this,
        config = self.fileActionSettings,
        rem = config.showRemove,
        drg = config.showDrag,
        upl = config.showUpload,
        zoom = config.showZoom,
        out,
        params,
        template = self._getLayoutTemplate("footer"),
        tInd = self._getLayoutTemplate("indicator"),
        ind = isError ? config.indicatorError : config.indicatorNew,
        title = isError ? config.indicatorErrorTitle : config.indicatorNewTitle,
        indicator = tInd.setTokens({ indicator: ind, indicatorTitle: title });
      size = self._getSize(size);
      params = {
        type: cat,
        caption: caption,
        size: size,
        width: width,
        progress: "",
        indicator: indicator,
      };
      if (self.isAjaxUpload) {
        params.progress = self._renderThumbProgress();
        params.actions = self._renderFileActions(
          params,
          upl,
          false,
          rem,
          zoom,
          drg,
          false,
          false,
          false
        );
      } else {
        params.actions = self._renderFileActions(
          params,
          false,
          false,
          false,
          zoom,
          drg,
          false,
          false,
          false
        );
      }
      out = template.setTokens(params);
      out = $h.replaceTags(out, self.previewThumbTags);
      return out;
    },
    _renderFileActions: function (
      cfg,
      showUpl,
      showDwn,
      showDel,
      showZoom,
      showDrag,
      disabled,
      url,
      key,
      isInit,
      dUrl,
      dFile
    ) {
      var self = this;
      if (!cfg.type && isInit) {
        cfg.type = "image";
      }
      if (self.enableResumableUpload) {
        showUpl = false;
      } else {
        if (typeof showUpl === "function") {
          showUpl = showUpl(cfg);
        }
      }
      if (typeof showDwn === "function") {
        showDwn = showDwn(cfg);
      }
      if (typeof showDel === "function") {
        showDel = showDel(cfg);
      }
      if (typeof showZoom === "function") {
        showZoom = showZoom(cfg);
      }
      if (typeof showDrag === "function") {
        showDrag = showDrag(cfg);
      }
      if (!showUpl && !showDwn && !showDel && !showZoom && !showDrag) {
        return "";
      }
      var vUrl = url === false ? "" : ' data-url="' + url + '"',
        btnZoom = "",
        btnDrag = "",
        css,
        vKey = key === false ? "" : ' data-key="' + key + '"',
        btnDelete = "",
        btnUpload = "",
        btnDownload = "",
        template = self._getLayoutTemplate("actions"),
        config = self.fileActionSettings,
        otherButtons = self.otherActionButtons.setTokens({
          dataKey: vKey,
          key: key,
        }),
        removeClass = disabled
          ? config.removeClass + " disabled"
          : config.removeClass;
      if (showDel) {
        btnDelete = self._getLayoutTemplate("actionDelete").setTokens({
          removeClass: removeClass,
          removeIcon: config.removeIcon,
          removeTitle: config.removeTitle,
          dataUrl: vUrl,
          dataKey: vKey,
          key: key,
        });
      }
      if (showUpl) {
        btnUpload = self._getLayoutTemplate("actionUpload").setTokens({
          uploadClass: config.uploadClass,
          uploadIcon: config.uploadIcon,
          uploadTitle: config.uploadTitle,
        });
      }
      if (showDwn) {
        btnDownload = self._getLayoutTemplate("actionDownload").setTokens({
          downloadClass: config.downloadClass,
          downloadIcon: config.downloadIcon,
          downloadTitle: config.downloadTitle,
          downloadUrl: dUrl || self.initialPreviewDownloadUrl,
        });
        btnDownload = btnDownload.setTokens({ filename: dFile, key: key });
      }
      if (showZoom) {
        btnZoom = self._getLayoutTemplate("actionZoom").setTokens({
          zoomClass: config.zoomClass,
          zoomIcon: config.zoomIcon,
          zoomTitle: config.zoomTitle,
        });
      }
      if (showDrag && isInit) {
        css = "drag-handle-init " + config.dragClass;
        btnDrag = self._getLayoutTemplate("actionDrag").setTokens({
          dragClass: css,
          dragTitle: config.dragTitle,
          dragIcon: config.dragIcon,
        });
      }
      return template.setTokens({
        delete: btnDelete,
        upload: btnUpload,
        download: btnDownload,
        zoom: btnZoom,
        drag: btnDrag,
        other: otherButtons,
      });
    },
    _browse: function (e) {
      var self = this;
      if ((e && e.isDefaultPrevented()) || !self._raise("filebrowse")) {
        return;
      }
      if (self.isError && !self.isAjaxUpload) {
        self.clear();
      }
      if (self.focusCaptionOnBrowse) {
        self.$captionContainer.focus();
      }
    },
    _change: function (e) {
      var self = this;
      if (self.changeTriggered) {
        return;
      }
      var $el = self.$element,
        isDragDrop = arguments.length > 1,
        isAjaxUpload = self.isAjaxUpload,
        tfiles,
        files = isDragDrop ? arguments[1] : $el[0].files,
        ctr = self.fileManager.count(),
        total,
        initCount,
        len,
        isSingleUpl = $h.isEmpty($el.attr("multiple")),
        maxCount = !isAjaxUpload && isSingleUpl ? 1 : self.maxFileCount,
        maxTotCount = self.maxTotalFileCount,
        inclAll = maxTotCount > 0 && maxTotCount > maxCount,
        flagSingle = isSingleUpl && ctr > 0,
        throwError = function (mesg, file, previewId, index) {
          var p1 = $.extend(true, {}, self._getOutData(null, {}, {}, files), {
              id: previewId,
              index: index,
            }),
            p2 = { id: previewId, index: index, file: file, files: files };
          self.isPersistentError = true;
          return isAjaxUpload
            ? self._showFileError(mesg, p1)
            : self._showError(mesg, p2);
        },
        maxCountCheck = function (n, m, all) {
          var msg = all ? self.msgTotalFilesTooMany : self.msgFilesTooMany;
          msg = msg.replace("{m}", m).replace("{n}", n);
          self.isError = throwError(msg, null, null, null);
          self.$captionContainer.removeClass("icon-visible");
          self._setCaption("", true);
          self.$container.removeClass("file-input-new file-input-ajax-new");
        };
      self.reader = null;
      self._resetUpload();
      self._hideFileIcon();
      if (self.dropZoneEnabled) {
        self.$container
          .find(".file-drop-zone ." + self.dropZoneTitleClass)
          .remove();
      }
      if (!isAjaxUpload) {
        if (e.target && e.target.files === undefined) {
          files = e.target.value
            ? [{ name: e.target.value.replace(/^.+\\/, "") }]
            : [];
        } else {
          files = e.target.files || {};
        }
      }
      tfiles = files;
      if ($h.isEmpty(tfiles) || tfiles.length === 0) {
        if (!isAjaxUpload) {
          self.clear();
        }
        self._raise("fileselectnone");
        return;
      }
      self._resetErrors();
      len = tfiles.length;
      initCount = isAjaxUpload ? self.fileManager.count() + len : len;
      total = self._getFileCount(initCount, inclAll ? false : undefined);
      if (maxCount > 0 && total > maxCount) {
        if (!self.autoReplace || len > maxCount) {
          maxCountCheck(
            self.autoReplace && len > maxCount ? len : total,
            maxCount
          );
          return;
        }
        if (total > maxCount) {
          self._resetPreviewThumbs(isAjaxUpload);
        }
      } else {
        if (inclAll) {
          total = self._getFileCount(initCount, true);
          if (maxTotCount > 0 && total > maxTotCount) {
            if (!self.autoReplace || len > maxCount) {
              maxCountCheck(
                self.autoReplace && len > maxTotCount ? len : total,
                maxTotCount,
                true
              );
              return;
            }
            if (total > maxCount) {
              self._resetPreviewThumbs(isAjaxUpload);
            }
          }
        }
        if (!isAjaxUpload || flagSingle) {
          self._resetPreviewThumbs(false);
          if (flagSingle) {
            self.clearFileStack();
          }
        } else {
          if (
            isAjaxUpload &&
            ctr === 0 &&
            (!self.previewCache.count(true) || self.overwriteInitial)
          ) {
            self._resetPreviewThumbs(true);
          }
        }
      }
      self.readFiles(tfiles);
    },
    _abort: function (params) {
      var self = this,
        data;
      if (
        self.ajaxAborted &&
        typeof self.ajaxAborted === "object" &&
        self.ajaxAborted.message !== undefined
      ) {
        data = $.extend(true, {}, self._getOutData(null), params);
        data.abortData = self.ajaxAborted.data || {};
        data.abortMessage = self.ajaxAborted.message;
        self._setProgress(101, self.$progress, self.msgCancelled);
        self._showFileError(self.ajaxAborted.message, data, "filecustomerror");
        self.cancel();
        return true;
      }
      return !!self.ajaxAborted;
    },
    _resetFileStack: function () {
      var self = this,
        i = 0;
      self._getThumbs().each(function () {
        var $thumb = $(this),
          ind = $thumb.attr("data-fileindex"),
          pid = $thumb.attr("id");
        if (ind === "-1" || ind === -1) {
          return;
        }
        if (!self.fileManager.getFile($thumb.attr("data-fileid"))) {
          $thumb.attr({ "data-fileindex": i });
          i++;
        } else {
          $thumb.attr({ "data-fileindex": "-1" });
        }
        self._getZoom(pid).attr({
          "data-fileindex": $thumb.attr("data-fileindex"),
        });
      });
    },
    _isFileSelectionValid: function (cnt) {
      var self = this;
      cnt = cnt || 0;
      if (self.required && !self.getFilesCount()) {
        self.$errorContainer.html("");
        self._showFileError(self.msgFileRequired);
        return false;
      }
      if (
        self.minFileCount > 0 &&
        self._getFileCount(cnt) < self.minFileCount
      ) {
        self._noFilesError({});
        return false;
      }
      return true;
    },
    _canPreview: function (file) {
      var self = this;
      if (
        !file ||
        !self.showPreview ||
        !self.$preview ||
        !self.$preview.length
      ) {
        return false;
      }
      var name = file.name || "",
        type = file.type || "",
        size = (file.size || 0) / 1000,
        cat = self._parseFileType(type, name),
        allowedTypes,
        allowedMimes,
        allowedExts,
        skipPreview,
        types = self.allowedPreviewTypes,
        mimes = self.allowedPreviewMimeTypes,
        exts = self.allowedPreviewExtensions || [],
        dTypes = self.disabledPreviewTypes,
        dMimes = self.disabledPreviewMimeTypes,
        dExts = self.disabledPreviewExtensions || [],
        maxSize =
          (self.maxFilePreviewSize && parseFloat(self.maxFilePreviewSize)) || 0,
        expAllExt = new RegExp("\\.(" + exts.join("|") + ")$", "i"),
        expDisExt = new RegExp("\\.(" + dExts.join("|") + ")$", "i");
      allowedTypes = !types || types.indexOf(cat) !== -1;
      allowedMimes = !mimes || mimes.indexOf(type) !== -1;
      allowedExts = !exts.length || $h.compare(name, expAllExt);
      skipPreview =
        (dTypes && dTypes.indexOf(cat) !== -1) ||
        (dMimes && dMimes.indexOf(type) !== -1) ||
        (dExts.length && $h.compare(name, expDisExt)) ||
        (maxSize && !isNaN(maxSize) && size > maxSize);
      return !skipPreview && (allowedTypes || allowedMimes || allowedExts);
    },
    addToStack: function (file, id) {
      this.fileManager.add(file, id);
    },
    clearFileStack: function () {
      var self = this;
      self.fileManager.clear();
      self._initResumableUpload();
      if (self.enableResumableUpload) {
        if (self.showPause === null) {
          self.showPause = true;
        }
        if (self.showCancel === null) {
          self.showCancel = false;
        }
      } else {
        self.showPause = false;
        if (self.showCancel === null) {
          self.showCancel = true;
        }
      }
      return self.$element;
    },
    getFileStack: function () {
      return this.fileManager.stack;
    },
    getFileList: function () {
      return this.fileManager.list();
    },
    getFilesCount: function (includeInitial) {
      var self = this,
        len = self.isAjaxUpload
          ? self.fileManager.count()
          : self._inputFileCount();
      if (includeInitial) {
        len += self.previewCache.count(true);
      }
      return self._getFileCount(len);
    },
    readFiles: function (files) {
      this.reader = new FileReader();
      var self = this,
        reader = self.reader,
        $container = self.$previewContainer,
        $status = self.$previewStatus,
        msgLoading = self.msgLoading,
        msgProgress = self.msgProgress,
        previewInitId = self.previewInitId,
        numFiles = files.length,
        settings = self.fileTypeSettings,
        readFile,
        fileTypes = self.allowedFileTypes,
        typLen = fileTypes ? fileTypes.length : 0,
        fileExt = self.allowedFileExtensions,
        strExt = $h.isEmpty(fileExt) ? "" : fileExt.join(", "),
        throwError = function (msg, file, previewId, index, fileId) {
          var $thumb,
            p1 = $.extend(true, {}, self._getOutData(null, {}, {}, files), {
              id: previewId,
              index: index,
              fileId: fileId,
            }),
            p2 = {
              id: previewId,
              index: index,
              fileId: fileId,
              file: file,
              files: files,
            };
          self._previewDefault(file, true);
          $thumb = self._getFrame(previewId, true);
          if (self.isAjaxUpload) {
            setTimeout(function () {
              readFile(index + 1);
            }, self.processDelay);
          } else {
            self.unlock();
            numFiles = 0;
          }
          if (self.removeFromPreviewOnError && $thumb.length) {
            $thumb.remove();
          } else {
            self._initFileActions();
            $thumb.find(".kv-file-upload").remove();
          }
          self.isPersistentError = true;
          self.isError = self.isAjaxUpload
            ? self._showFileError(msg, p1)
            : self._showError(msg, p2);
          self._updateFileDetails(numFiles);
        };
      self.fileManager.clearImages();
      $.each(files, function (key, file) {
        var func = self.fileTypeSettings.image;
        if (func && func(file.type)) {
          self.fileManager.totalImages++;
        }
      });
      readFile = function (i) {
        var $error = self.$errorContainer,
          errors,
          fm = self.fileManager;
        if (i >= numFiles) {
          self.unlock();
          if (self.duplicateErrors.length) {
            errors = "<li>" + self.duplicateErrors.join("</li><li>") + "</li>";
            if ($error.find("ul").length === 0) {
              $h.setHtml(
                $error,
                self.errorCloseButton + "<ul>" + errors + "</ul>"
              );
            } else {
              $error.find("ul").append(errors);
            }
            $error.fadeIn(self.fadeDelay);
            self._handler($error.find(".kv-error-close"), "click", function () {
              $error.fadeOut(self.fadeDelay);
            });
            self.duplicateErrors = [];
          }
          if (self.isAjaxUpload) {
            self._raise("filebatchselected", [fm.stack]);
            if (fm.count() === 0 && !self.isError) {
              self.reset();
            }
          } else {
            self._raise("filebatchselected", [files]);
          }
          $container.removeClass("file-thumb-loading");
          $status.html("");
          return;
        }
        self.lock(true);
        var file = files[i],
          id = self._getFileId(file),
          previewId = previewInitId + "-" + id,
          fSizeKB,
          j,
          msg,
          fnText = settings.text,
          fnImage = settings.image,
          fnHtml = settings.html,
          typ,
          chk,
          typ1,
          typ2,
          caption = self._getFileName(file, ""),
          fileSize = ((file && file.size) || 0) / 1000,
          fileExtExpr = "",
          previewData = $h.createObjectURL(file),
          fileCount = 0,
          strTypes = "",
          fileId,
          canLoad,
          fileReaderAborted = false,
          func,
          knownTypes = 0,
          isImage,
          txtFlag,
          processFileLoaded = function () {
            var msg = msgProgress.setTokens({
              index: i + 1,
              files: numFiles,
              percent: 50,
              name: caption,
            });
            setTimeout(function () {
              $status.html(msg);
              self._updateFileDetails(numFiles);
              readFile(i + 1);
            }, self.processDelay);
            if (
              self._raise("fileloaded", [file, previewId, id, i, reader]) &&
              self.isAjaxUpload
            ) {
              fm.add(file);
            }
          };
        if (!file) {
          return;
        }
        fileId = fm.getId(file);
        if (typLen > 0) {
          for (j = 0; j < typLen; j++) {
            typ1 = fileTypes[j];
            typ2 = self.msgFileTypes[typ1] || typ1;
            strTypes += j === 0 ? typ2 : ", " + typ2;
          }
        }
        if (caption === false) {
          readFile(i + 1);
          return;
        }
        if (caption.length === 0) {
          msg = self.msgInvalidFileName.replace(
            "{name}",
            $h.htmlEncode($h.getFileName(file), "[unknown]")
          );
          throwError(msg, file, previewId, i, fileId);
          return;
        }
        if (!$h.isEmpty(fileExt)) {
          fileExtExpr = new RegExp("\\.(" + fileExt.join("|") + ")$", "i");
        }
        fSizeKB = fileSize.toFixed(2);
        if (
          (self.isAjaxUpload && fm.exists(fileId)) ||
          self._getFrame(previewId, true).length
        ) {
          var p2 = {
            id: previewId,
            index: i,
            fileId: fileId,
            file: file,
            files: files,
          };
          msg = self.msgDuplicateFile.setTokens({
            name: caption,
            size: fSizeKB,
          });
          if (self.isAjaxUpload) {
            self.duplicateErrors.push(msg);
            self.isDuplicateError = true;
            self._raise("fileduplicateerror", [
              file,
              fileId,
              caption,
              fSizeKB,
              previewId,
              i,
            ]);
            readFile(i + 1);
            self._updateFileDetails(numFiles);
          } else {
            self._showError(msg, p2);
            self.unlock();
            numFiles = 0;
            self._clearFileInput();
            self.reset();
            self._updateFileDetails(numFiles);
          }
          return;
        }
        if (self.maxFileSize > 0 && fileSize > self.maxFileSize) {
          msg = self.msgSizeTooLarge.setTokens({
            name: caption,
            size: fSizeKB,
            maxSize: self.maxFileSize,
          });
          throwError(msg, file, previewId, i, fileId);
          return;
        }
        if (
          self.minFileSize !== null &&
          fileSize <= $h.getNum(self.minFileSize)
        ) {
          msg = self.msgSizeTooSmall.setTokens({
            name: caption,
            size: fSizeKB,
            minSize: self.minFileSize,
          });
          throwError(msg, file, previewId, i, fileId);
          return;
        }
        if (!$h.isEmpty(fileTypes) && $h.isArray(fileTypes)) {
          for (j = 0; j < fileTypes.length; j += 1) {
            typ = fileTypes[j];
            func = settings[typ];
            fileCount +=
              !func || typeof func !== "function"
                ? 0
                : func(file.type, $h.getFileName(file))
                ? 1
                : 0;
          }
          if (fileCount === 0) {
            msg = self.msgInvalidFileType.setTokens({
              name: caption,
              types: strTypes,
            });
            throwError(msg, file, previewId, i, fileId);
            return;
          }
        }
        if (
          fileCount === 0 &&
          !$h.isEmpty(fileExt) &&
          $h.isArray(fileExt) &&
          !$h.isEmpty(fileExtExpr)
        ) {
          chk = $h.compare(caption, fileExtExpr);
          fileCount += $h.isEmpty(chk) ? 0 : chk.length;
          if (fileCount === 0) {
            msg = self.msgInvalidFileExtension.setTokens({
              name: caption,
              extensions: strExt,
            });
            throwError(msg, file, previewId, i, fileId);
            return;
          }
        }
        if (!self._canPreview(file)) {
          canLoad =
            self.isAjaxUpload &&
            self._raise("filebeforeload", [file, i, reader]);
          if (self.isAjaxUpload && canLoad) {
            fm.add(file);
          }
          if (self.showPreview && canLoad) {
            $container.addClass("file-thumb-loading");
            self._previewDefault(file);
            self._initFileActions();
          }
          setTimeout(function () {
            if (canLoad) {
              self._updateFileDetails(numFiles);
            }
            readFile(i + 1);
            self._raise("fileloaded", [file, previewId, id, i]);
          }, 10);
          return;
        }
        isImage = fnImage(file.type, caption);
        $status.html(
          msgLoading.replace("{index}", i + 1).replace("{files}", numFiles)
        );
        $container.addClass("file-thumb-loading");
        reader.onerror = function (evt) {
          self._errorHandler(evt, caption);
        };
        reader.onload = function (theFile) {
          var hex,
            fileInfo,
            uint,
            byte,
            bytes = [],
            contents,
            mime,
            readImage = function () {
              var newReader = new FileReader();
              newReader.onerror = function (theFileNew) {
                self._errorHandler(theFileNew, caption);
              };
              newReader.onload = function (theFileNew) {
                if (
                  self.isAjaxUpload &&
                  !self._raise("filebeforeload", [file, i, reader])
                ) {
                  fileReaderAborted = true;
                  self._resetCaption();
                  reader.abort();
                  $status.html("");
                  $container.removeClass("file-thumb-loading");
                  self.enable();
                  return;
                }
                self._previewFile(i, file, theFileNew, previewData, fileInfo);
                self._initFileActions();
                processFileLoaded();
              };
              newReader.readAsDataURL(file);
            };
          fileInfo = { name: caption, type: file.type };
          $.each(settings, function (k, f) {
            if (
              k !== "object" &&
              k !== "other" &&
              typeof f === "function" &&
              f(file.type, caption)
            ) {
              knownTypes++;
            }
          });
          if (knownTypes === 0) {
            // auto detect mime types from content if no known file types detected
            uint = new Uint8Array(theFile.target.result);
            for (j = 0; j < uint.length; j++) {
              byte = uint[j].toString(16);
              bytes.push(byte);
            }
            hex = bytes.join("").toLowerCase().substring(0, 8);
            mime = $h.getMimeType(hex, "", "");
            if ($h.isEmpty(mime)) {
              // look for ascii text content
              contents = $h.arrayBuffer2String(reader.result);
              mime = $h.isSvg(contents)
                ? "image/svg+xml"
                : $h.getMimeType(hex, contents, file.type);
            }
            fileInfo = { name: caption, type: mime };
            isImage = fnImage(mime, "");
            if (isImage) {
              readImage(txtFlag);
              return;
            }
          }
          if (
            self.isAjaxUpload &&
            !self._raise("filebeforeload", [file, i, reader])
          ) {
            fileReaderAborted = true;
            self._resetCaption();
            reader.abort();
            $status.html("");
            $container.removeClass("file-thumb-loading");
            self.enable();
            return;
          }
          self._previewFile(i, file, theFile, previewData, fileInfo);
          self._initFileActions();
          processFileLoaded();
        };
        reader.onprogress = function (data) {
          if (data.lengthComputable) {
            var fact = (data.loaded / data.total) * 100,
              progress = Math.ceil(fact);
            msg = msgProgress.setTokens({
              index: i + 1,
              files: numFiles,
              percent: progress,
              name: caption,
            });
            setTimeout(function () {
              if (!fileReaderAborted) {
                $status.html(msg);
              }
            }, self.processDelay);
          }
        };
        if (isImage) {
          reader.readAsDataURL(file);
        } else {
          reader.readAsArrayBuffer(file);
        }
      };

      readFile(0);
      self._updateFileDetails(numFiles, true);
    },
    lock: function (selectMode) {
      var self = this,
        $container = self.$container;
      self._resetErrors();
      self.disable();
      if (!selectMode && self.showCancel) {
        $container.find(".fileinput-cancel").show();
      }
      if (!selectMode && self.showPause) {
        $container.find(".fileinput-pause").show();
      }
      self._raise("filelock", [self.fileManager.stack, self._getExtraData()]);
      return self.$element;
    },
    unlock: function (reset) {
      var self = this,
        $container = self.$container;
      if (reset === undefined) {
        reset = true;
      }
      self.enable();
      $container.removeClass("is-locked");
      if (self.showCancel) {
        $container.find(".fileinput-cancel").hide();
      }
      if (self.showPause) {
        $container.find(".fileinput-pause").hide();
      }
      if (reset) {
        self._resetFileStack();
      }
      self._raise("fileunlock", [self.fileManager.stack, self._getExtraData()]);
      return self.$element;
    },
    resume: function () {
      var self = this,
        flag = false,
        rm = self.resumableManager;
      if (!self.enableResumableUpload) {
        return self.$element;
      }
      if (self.paused) {
        self._toggleResumableProgress(
          self.progressPauseTemplate,
          self.msgUploadResume
        );
      } else {
        flag = true;
      }
      self.paused = false;
      if (flag) {
        self._toggleResumableProgress(
          self.progressInfoTemplate,
          self.msgUploadBegin
        );
      }
      setTimeout(function () {
        rm.upload();
      }, self.processDelay);
      return self.$element;
    },
    pause: function () {
      var self = this,
        rm = self.resumableManager,
        xhr = self.ajaxRequests,
        len = xhr.length,
        i,
        pct = rm.getProgress(),
        actions = self.fileActionSettings,
        tm = self.taskManager,
        pool = tm.getPool(rm.id);
      if (!self.enableResumableUpload) {
        return self.$element;
      } else {
        if (pool) {
          pool.cancel();
        }
      }
      self._raise("fileuploadpaused", [self.fileManager, rm]);
      if (len > 0) {
        for (i = 0; i < len; i += 1) {
          self.paused = true;
          xhr[i].abort();
        }
      }
      if (self.showPreview) {
        self._getThumbs().each(function () {
          var $thumb = $(this),
            fileId = $thumb.attr("data-fileid"),
            t = self._getLayoutTemplate("stats"),
            stats,
            $indicator = $thumb.find(".file-upload-indicator");
          $thumb.removeClass("file-uploading");
          if ($indicator.attr("title") === actions.indicatorLoadingTitle) {
            self._setThumbStatus($thumb, "Paused");
            stats = t.setTokens({
              pendingTime: self.msgPaused,
              uploadSpeed: "",
            });
            self.paused = true;
            self._setProgress(
              pct,
              $thumb.find(".file-thumb-progress"),
              pct + "%",
              stats
            );
          }
          if (!self.fileManager.getFile(fileId)) {
            $thumb
              .find(".kv-file-remove")
              .removeClass("disabled")
              .removeAttr("disabled");
          }
        });
      }
      self._setProgress(101, self.$progress, self.msgPaused);
      return self.$element;
    },
    cancel: function () {
      var self = this,
        xhr = self.ajaxRequests,
        rm = self.resumableManager,
        tm = self.taskManager,
        pool = rm ? tm.getPool(rm.id) : undefined,
        len = xhr.length,
        i;

      if (self.enableResumableUpload && pool) {
        pool.cancel().done(function () {
          self._setProgressCancelled();
        });
        rm.reset();
        self._raise("fileuploadcancelled", [self.fileManager, rm]);
      } else {
        self._raise("fileuploadcancelled", [self.fileManager]);
      }
      self._initAjax();
      if (len > 0) {
        for (i = 0; i < len; i += 1) {
          self.cancelling = true;
          xhr[i].abort();
        }
      }
      self._getThumbs().each(function () {
        var $thumb = $(this),
          fileId = $thumb.attr("data-fileid"),
          $prog = $thumb.find(".file-thumb-progress");
        $thumb.removeClass("file-uploading");
        self._setProgress(0, $prog);
        $prog.hide();
        if (!self.fileManager.getFile(fileId)) {
          $thumb
            .find(".kv-file-upload")
            .removeClass("disabled")
            .removeAttr("disabled");
          $thumb
            .find(".kv-file-remove")
            .removeClass("disabled")
            .removeAttr("disabled");
        }
        self.unlock();
      });
      setTimeout(function () {
        self._setProgressCancelled();
      }, self.processDelay);
      return self.$element;
    },
    clear: function () {
      var self = this,
        cap;
      if (!self._raise("fileclear")) {
        return;
      }
      self.$btnUpload.removeAttr("disabled");
      self
        ._getThumbs()
        .find("video,audio,img")
        .each(function () {
          $h.cleanMemory($(this));
        });
      self._clearFileInput();
      self._resetUpload();
      self.clearFileStack();
      self.isDuplicateError = false;
      self.isPersistentError = false;
      self._resetErrors(true);
      if (self._hasInitialPreview()) {
        self._showFileIcon();
        self._resetPreview();
        self._initPreviewActions();
        self.$container.removeClass("file-input-new");
      } else {
        self._getThumbs().each(function () {
          self._clearObjects($(this));
        });
        if (self.isAjaxUpload) {
          self.previewCache.data = {};
        }
        self.$preview.html("");
        cap =
          !self.overwriteInitial && self.initialCaption.length > 0
            ? self.initialCaption
            : "";
        self.$caption.attr("title", "").val(cap);
        $h.addCss(self.$container, "file-input-new");
        self._validateDefaultPreview();
      }
      if (self.$container.find($h.FRAMES).length === 0) {
        if (!self._initCaption()) {
          self.$captionContainer.removeClass("icon-visible");
        }
      }
      self._hideFileIcon();
      if (self.focusCaptionOnClear) {
        self.$captionContainer.focus();
      }
      self._setFileDropZoneTitle();
      self._raise("filecleared");
      return self.$element;
    },
    reset: function () {
      var self = this;
      if (!self._raise("filereset")) {
        return;
      }
      self.lastProgress = 0;
      self._resetPreview();
      self.$container.find(".fileinput-filename").text("");
      $h.addCss(self.$container, "file-input-new");
      if (self.getFrames().length) {
        self.$container.removeClass("file-input-new");
      }
      self.clearFileStack();
      self._setFileDropZoneTitle();
      return self.$element;
    },
    disable: function () {
      var self = this,
        $container = self.$container;
      self.isDisabled = true;
      self._raise("filedisabled");
      self.$element.attr("disabled", "disabled");
      $container.addClass("is-locked");
      $h.addCss($container.find(".btn-file"), "disabled");
      $container
        .find(".kv-fileinput-caption")
        .addClass("file-caption-disabled");
      $container
        .find(
          ".fileinput-remove, .fileinput-upload, .file-preview-frame button"
        )
        .attr("disabled", true);
      self._initDragDrop();
      return self.$element;
    },
    enable: function () {
      var self = this,
        $container = self.$container;
      self.isDisabled = false;
      self._raise("fileenabled");
      self.$element.removeAttr("disabled");
      $container.removeClass("is-locked");
      $container
        .find(".kv-fileinput-caption")
        .removeClass("file-caption-disabled");
      $container
        .find(
          ".fileinput-remove, .fileinput-upload, .file-preview-frame button"
        )
        .removeAttr("disabled");
      $container.find(".btn-file").removeClass("disabled");
      self._initDragDrop();
      return self.$element;
    },
    upload: function () {
      var self = this,
        fm = self.fileManager,
        totLen = fm.count(),
        i,
        outData,
        hasExtraData = !$.isEmptyObject(self._getExtraData());
      if (
        !self.isAjaxUpload ||
        self.isDisabled ||
        !self._isFileSelectionValid(totLen)
      ) {
        return;
      }
      self.lastProgress = 0;
      self._resetUpload();
      if (totLen === 0 && !hasExtraData) {
        self._showFileError(self.msgUploadEmpty);
        return;
      }
      self.cancelling = false;
      self._showProgress();
      self.lock();
      if (totLen === 0 && hasExtraData) {
        self._setProgress(2);
        self._uploadExtraOnly();
        return;
      }
      if (self.enableResumableUpload) {
        return self.resume();
      }
      if (self.uploadAsync || self.enableResumableUpload) {
        outData = self._getOutData(null);
        self._raise("filebatchpreupload", [outData]);
        self.fileBatchCompleted = false;
        self.uploadCache = [];
        $.each(self.getFileStack(), function (id) {
          var previewId = self._getThumbId(id);
          self.uploadCache.push({
            id: previewId,
            content: null,
            config: null,
            tags: null,
            append: true,
          });
        });
        self.$preview.find(".file-preview-initial").removeClass($h.SORT_CSS);
        self._initSortable();
      }
      self._setProgress(2);
      self.hasInitData = false;
      if (self.uploadAsync) {
        i = 0;
        $.each(fm.stack, function (id) {
          self._uploadSingle(i, id, true);
          i++;
        });
        return;
      }
      self._uploadBatch();
      return self.$element;
    },
    destroy: function () {
      var self = this,
        $form = self.$form,
        $cont = self.$container,
        $el = self.$element,
        ns = self.namespace;
      $(document).off(ns);
      $(window).off(ns);
      if ($form && $form.length) {
        $form.off(ns);
      }
      if (self.isAjaxUpload) {
        self._clearFileInput();
      }
      self._cleanup();
      self._initPreviewCache();
      $el.insertBefore($cont).off(ns).removeData();
      $cont.off().remove();
      return $el;
    },
    refresh: function (options) {
      var self = this,
        $el = self.$element;
      if (typeof options !== "object" || $h.isEmpty(options)) {
        options = self.options;
      } else {
        options = $.extend(true, {}, self.options, options);
      }
      self._init(options, true);
      self._listen();
      return $el;
    },
    zoom: function (frameId) {
      var self = this,
        $frame = self._getFrame(frameId);
      self._showModal($frame);
    },
    getExif: function (frameId) {
      var self = this,
        $frame = self._getFrame(frameId);
      return ($frame && $frame.data("exif")) || null;
    },
    getFrames: function (cssFilter) {
      var self = this,
        $frames;
      cssFilter = cssFilter || "";
      $frames = self.$preview.find($h.FRAMES + cssFilter);
      if (self.reversePreviewOrder) {
        $frames = $($frames.get().reverse());
      }
      return $frames;
    },
    getPreview: function () {
      var self = this;
      return {
        content: self.initialPreview,
        config: self.initialPreviewConfig,
        tags: self.initialPreviewThumbTags,
      };
    },
  };

  $.fn.fileinput = function (option) {
    if (!$h.hasFileAPISupport() && !$h.isIE(9)) {
      return;
    }
    var args = Array.apply(null, arguments),
      retvals = [];
    args.shift();
    this.each(function () {
      var self = $(this),
        data = self.data("fileinput"),
        options = typeof option === "object" && option,
        theme = options.theme || self.data("theme"),
        l = {},
        t = {},
        lang =
          options.language ||
          self.data("language") ||
          $.fn.fileinput.defaults.language ||
          "en",
        opt;
      if (!data) {
        if (theme) {
          t = $.fn.fileinputThemes[theme] || {};
        }
        if (lang !== "en" && !$h.isEmpty($.fn.fileinputLocales[lang])) {
          l = $.fn.fileinputLocales[lang] || {};
        }
        opt = $.extend(
          true,
          {},
          $.fn.fileinput.defaults,
          t,
          $.fn.fileinputLocales.en,
          l,
          options,
          self.data()
        );
        data = new FileInput(this, opt);
        self.data("fileinput", data);
      }

      if (typeof option === "string") {
        retvals.push(data[option].apply(data, args));
      }
    });
    switch (retvals.length) {
      case 0:
        return this;
      case 1:
        return retvals[0];
      default:
        return retvals;
    }
  };

  var IFRAME_ATTRIBS =
    'class="kv-preview-data file-preview-pdf" src="{renderer}?file={data}" {style}';

  $.fn.fileinput.defaults = {
    language: "en",
    showCaption: true,
    showBrowse: true,
    showPreview: true,
    showRemove: true,
    showUpload: true,
    showUploadStats: true,
    showCancel: null,
    showPause: null,
    showClose: true,
    showUploadedThumbs: true,
    showConsoleLogs: false,
    browseOnZoneClick: false,
    autoReplace: false,
    autoOrientImage: function () {
      // applicable for JPEG images only and non ios safari
      var ua = window.navigator.userAgent,
        webkit = !!ua.match(/WebKit/i),
        iOS = !!ua.match(/iP(od|ad|hone)/i),
        iOSSafari = iOS && webkit && !ua.match(/CriOS/i);
      return !iOSSafari;
    },
    autoOrientImageInitial: true,
    required: false,
    rtl: false,
    hideThumbnailContent: false,
    encodeUrl: true,
    focusCaptionOnBrowse: true,
    focusCaptionOnClear: true,
    generateFileId: null,
    previewClass: "",
    captionClass: "",
    frameClass: "krajee-default",
    mainClass: "file-caption-main",
    mainTemplate: null,
    fileSizeGetter: null,
    initialCaption: "",
    initialPreview: [],
    initialPreviewDelimiter: "*$$*",
    initialPreviewAsData: false,
    initialPreviewFileType: "image",
    initialPreviewConfig: [],
    initialPreviewThumbTags: [],
    previewThumbTags: {},
    initialPreviewShowDelete: true,
    initialPreviewDownloadUrl: "",
    removeFromPreviewOnError: false,
    deleteUrl: "",
    deleteExtraData: {},
    overwriteInitial: true,
    sanitizeZoomCache: function (content) {
      var $container = $h.createElement(content);
      $container
        .find("input,textarea,select,datalist,form,.file-thumbnail-footer")
        .remove();
      return $container.html();
    },
    previewZoomButtonIcons: {
      prev: '<i class="glyphicon glyphicon-triangle-left"></i>',
      next: '<i class="glyphicon glyphicon-triangle-right"></i>',
      toggleheader: '<i class="glyphicon glyphicon-resize-vertical"></i>',
      fullscreen: '<i class="glyphicon glyphicon-fullscreen"></i>',
      borderless: '<i class="glyphicon glyphicon-resize-full"></i>',
      close: '<i class="glyphicon glyphicon-remove"></i>',
    },
    previewZoomButtonClasses: {
      prev: "btn btn-navigate",
      next: "btn btn-navigate",
      toggleheader: "btn btn-sm btn-kv btn-default btn-outline-secondary",
      fullscreen: "btn btn-sm btn-kv btn-default btn-outline-secondary",
      borderless: "btn btn-sm btn-kv btn-default btn-outline-secondary",
      close: "btn btn-sm btn-kv btn-default btn-outline-secondary",
    },
    previewTemplates: {},
    previewContentTemplates: {},
    preferIconicPreview: false,
    preferIconicZoomPreview: false,
    allowedFileTypes: null,
    allowedFileExtensions: null,
    allowedPreviewTypes: undefined,
    allowedPreviewMimeTypes: null,
    allowedPreviewExtensions: null,
    disabledPreviewTypes: undefined,
    disabledPreviewExtensions: [
      "msi",
      "exe",
      "com",
      "zip",
      "rar",
      "app",
      "vb",
      "scr",
    ],
    disabledPreviewMimeTypes: null,
    defaultPreviewContent: null,
    customLayoutTags: {},
    customPreviewTags: {},
    previewFileIcon: '<i class="glyphicon glyphicon-file"></i>',
    previewFileIconClass: "file-other-icon",
    previewFileIconSettings: {},
    previewFileExtSettings: {},
    buttonLabelClass: "hidden-xs",
    browseIcon: '<i class="glyphicon glyphicon-folder-open"></i>&nbsp;',
    browseClass: "btn btn-primary",
    removeIcon: '<i class="glyphicon glyphicon-trash"></i>',
    removeClass: "btn btn-default btn-secondary",
    cancelIcon: '<i class="glyphicon glyphicon-ban-circle"></i>',
    cancelClass: "btn btn-default btn-secondary",
    pauseIcon: '<i class="glyphicon glyphicon-pause"></i>',
    pauseClass: "btn btn-default btn-secondary",
    uploadIcon: '<i class="glyphicon glyphicon-upload"></i>',
    uploadClass: "btn btn-default btn-secondary",
    uploadUrl: null,
    uploadUrlThumb: null,
    uploadAsync: true,
    uploadParamNames: {
      chunkCount: "chunkCount",
      chunkIndex: "chunkIndex",
      chunkSize: "chunkSize",
      chunkSizeStart: "chunkSizeStart",
      chunksUploaded: "chunksUploaded",
      fileBlob: "fileBlob",
      fileId: "fileId",
      fileName: "fileName",
      fileRelativePath: "fileRelativePath",
      fileSize: "fileSize",
      retryCount: "retryCount",
    },
    maxAjaxThreads: 5,
    fadeDelay: 800,
    processDelay: 100,
    queueDelay: 10, // must be lesser than process delay
    progressDelay: 0, // must be lesser than process delay
    enableResumableUpload: false,
    resumableUploadOptions: {
      fallback: null,
      testUrl: null, // used for checking status of chunks/ files previously / partially uploaded
      chunkSize: 2 * 1024, // in KB
      maxThreads: 4,
      maxRetries: 3,
      showErrorLog: true,
    },
    uploadExtraData: {},
    zoomModalHeight: 480,
    minImageWidth: null,
    minImageHeight: null,
    maxImageWidth: null,
    maxImageHeight: null,
    resizeImage: false,
    resizePreference: "width",
    resizeQuality: 0.92,
    resizeDefaultImageType: "image/jpeg",
    resizeIfSizeMoreThan: 0, // in KB
    minFileSize: -1,
    maxFileSize: 0,
    maxFilePreviewSize: 25600, // 25 MB
    minFileCount: 0,
    maxFileCount: 0,
    maxTotalFileCount: 0,
    validateInitialCount: false,
    msgValidationErrorClass: "text-danger",
    msgValidationErrorIcon:
      '<i class="glyphicon glyphicon-exclamation-sign"></i> ',
    msgErrorClass: "file-error-message",
    progressThumbClass:
      "progress-bar progress-bar-striped active progress-bar-animated",
    progressClass:
      "progress-bar bg-success progress-bar-success progress-bar-striped active progress-bar-animated",
    progressInfoClass:
      "progress-bar bg-info progress-bar-info progress-bar-striped active progress-bar-animated",
    progressCompleteClass: "progress-bar bg-success progress-bar-success",
    progressPauseClass:
      "progress-bar bg-primary progress-bar-primary progress-bar-striped active progress-bar-animated",
    progressErrorClass: "progress-bar bg-danger progress-bar-danger",
    progressUploadThreshold: 99,
    previewFileType: "image",
    elCaptionContainer: null,
    elCaptionText: null,
    elCaptionLabelText: null,
    elPreviewContainer: null,
    elPreviewImage: null,
    elPreviewStatus: null,
    elErrorContainer: null,
    errorCloseButton: $h.closeButton("kv-error-close"),
    slugCallback: null,
    dropZoneEnabled: true,
    dropZoneTitleClass: "file-drop-zone-title",
    fileActionSettings: {},
    otherActionButtons: "",
    textEncoding: "UTF-8",
    preProcessUpload: null,
    ajaxSettings: {},
    ajaxDeleteSettings: {},
    showAjaxErrorDetails: true,
    mergeAjaxCallbacks: false,
    mergeAjaxDeleteCallbacks: false,
    retryErrorUploads: true,
    reversePreviewOrder: false,
    usePdfRenderer: function () {
      var isIE11 = !!window.MSInputMethodContext && !!document.documentMode;
      return (
        !!navigator.userAgent.match(/(iPod|iPhone|iPad|Android)/i) || isIE11
      );
    },
    pdfRendererUrl: "",
    pdfRendererTemplate: "<iframe " + IFRAME_ATTRIBS + "></iframe>",
  };

  // noinspection HtmlUnknownAttribute
  $.fn.fileinputLocales.en = {
    fileSingle: "file",
    filePlural: "files",
    browseLabel: "Browse &hellip;",
    removeLabel: "Remove",
    removeTitle: "Clear all unprocessed files",
    cancelLabel: "Cancel",
    cancelTitle: "Abort ongoing upload",
    pauseLabel: "Pause",
    pauseTitle: "Pause ongoing upload",
    uploadLabel: "Upload",
    uploadTitle: "Upload selected files",
    msgNo: "No",
    msgNoFilesSelected: "No files selected",
    msgCancelled: "Cancelled",
    msgPaused: "Paused",
    msgPlaceholder: "Select {files} ...",
    msgZoomModalHeading: "Detailed Preview",
    msgFileRequired: "You must select a file to upload.",
    msgSizeTooSmall:
      'File "{name}" (<b>{size} KB</b>) is too small and must be larger than <b>{minSize} KB</b>.',
    msgSizeTooLarge:
      'File "{name}" (<b>{size} KB</b>) exceeds maximum allowed upload size of <b>{maxSize} KB</b>.',
    msgFilesTooLess: "You must select at least <b>{n}</b> {files} to upload.",
    msgFilesTooMany:
      "Number of files selected for upload <b>({n})</b> exceeds maximum allowed limit of <b>{m}</b>.",
    msgTotalFilesTooMany:
      "You can upload a maximum of <b>{m}</b> files (<b>{n}</b> files detected).",
    msgFileNotFound: 'File "{name}" not found!',
    msgFileSecured: 'Security restrictions prevent reading the file "{name}".',
    msgFileNotReadable: 'File "{name}" is not readable.',
    msgFilePreviewAborted: 'File preview aborted for "{name}".',
    msgFilePreviewError: 'An error occurred while reading the file "{name}".',
    msgInvalidFileName:
      'Invalid or unsupported characters in file name "{name}".',
    msgInvalidFileType:
      'Invalid type for file "{name}". Only "{types}" files are supported.',
    msgInvalidFileExtension:
      'Invalid extension for file "{name}". Only "{extensions}" files are supported.',
    msgFileTypes: {
      image: "image",
      html: "HTML",
      text: "text",
      video: "video",
      audio: "audio",
      flash: "flash",
      pdf: "PDF",
      object: "object",
    },
    msgUploadAborted: "The file upload was aborted",
    msgUploadThreshold: "Processing &hellip;",
    msgUploadBegin: "Initializing &hellip;",
    msgUploadEnd: "Done",
    msgUploadResume: "Resuming upload &hellip;",
    msgUploadEmpty: "No valid data available for upload.",
    msgUploadError: "Upload Error",
    msgDeleteError: "Delete Error",
    msgProgressError: "Error",
    msgValidationError: "Validation Error",
    msgLoading: "Loading file {index} of {files} &hellip;",
    msgProgress:
      "Loading file {index} of {files} - {name} - {percent}% completed.",
    msgSelected: "{n} {files} selected",
    msgFoldersNotAllowed:
      "Drag & drop files only! {n} folder(s) dropped were skipped.",
    msgImageWidthSmall:
      'Width of image file "{name}" must be at least {size} px.',
    msgImageHeightSmall:
      'Height of image file "{name}" must be at least {size} px.',
    msgImageWidthLarge: 'Width of image file "{name}" cannot exceed {size} px.',
    msgImageHeightLarge:
      'Height of image file "{name}" cannot exceed {size} px.',
    msgImageResizeError: "Could not get the image dimensions to resize.",
    msgImageResizeException:
      "Error while resizing the image.<pre>{errors}</pre>",
    msgAjaxError:
      "Something went wrong with the {operation} operation. Please try again later!",
    msgAjaxProgressError: "{operation} failed",
    msgDuplicateFile:
      'File "{name}" of same size "{size} KB" has already been selected earlier. Skipping duplicate selection.',
    msgResumableUploadRetriesExceeded:
      "Upload aborted beyond <b>{max}</b> retries for file <b>{file}</b>! Error Details: <pre>{error}</pre>",
    msgPendingTime: "{time} remaining",
    msgCalculatingTime: "calculating time remaining",
    ajaxOperations: {
      deleteThumb: "file delete",
      uploadThumb: "file upload",
      uploadBatch: "batch file upload",
      uploadExtra: "form data upload",
    },
    dropZoneTitle: "Drag & drop files here &hellip;",
    dropZoneClickTitle: "<br>(or click to select {files})",
    previewZoomButtonTitles: {
      prev: "View previous file",
      next: "View next file",
      toggleheader: "Toggle header",
      fullscreen: "Toggle full screen",
      borderless: "Toggle borderless mode",
      close: "Close detailed preview",
    },
  };

  $.fn.fileinput.Constructor = FileInput;

  /**
   * Convert automatically file inputs with class 'file' into a bootstrap fileinput control.
   */
  $(document).ready(function () {
    var $input = $("input.file[type=file]");
    if ($input.length) {
      $input.fileinput();
    }
  });
});

/*!
 * bootstrap-fileinput v5.1.3
 * http://plugins.krajee.com/file-input
 *
 * Font Awesome 5 icon theme configuration for bootstrap-fileinput. Requires font awesome 5 assets to be loaded.
 *
 * Author: Kartik Visweswaran
 * Copyright: 2014 - 2020, Kartik Visweswaran, Krajee.com
 *
 * Licensed under the BSD-3-Clause
 * https://github.com/kartik-v/bootstrap-fileinput/blob/master/LICENSE.md
 */
(function ($) {
  "use strict";

  $.fn.fileinputThemes.fas = {
    fileActionSettings: {
      removeIcon: '<i class="fa-solid fa-trash-alt"></i>',
      uploadIcon: '<i class="fa-solid fa-upload"></i>',
      uploadRetryIcon: '<i class="fa-solid fa-redo-alt"></i>',
      downloadIcon: '<i class="fa-solid fa-download"></i>',
      zoomIcon: '<i class="fa-solid fa-search-plus"></i>',
      dragIcon: '<i class="fa-solid fa-arrows-alt"></i>',
      indicatorNew: '<i class="fa-solid fa-plus-circle text-warning"></i>',
      indicatorSuccess: '<i class="fa-solid fa-check-circle text-success"></i>',
      indicatorError:
        '<i class="fa-solid fa-exclamation-circle text-danger"></i>',
      indicatorLoading:
        '<i class="fa-solid fa-hourglass text-body-secondary"></i>',
      indicatorPaused: '<i class="fa fa-pause text-info"></i>',
    },
    layoutTemplates: {
      fileIcon: '<i class="fa-solid fa-file kv-caption-icon"></i> ',
    },
    previewZoomButtonIcons: {
      prev: '<i class="fa-solid fa-caret-left fa-lg"></i>',
      next: '<i class="fa-solid fa-caret-right fa-lg"></i>',
      toggleheader: '<i class="fa-solid fa-fw fa-arrows-alt-v"></i>',
      fullscreen: '<i class="fa-solid fa-fw fa-arrows-alt"></i>',
      borderless: '<i class="fa-solid fa-fw fa-external-link-alt"></i>',
      close: '<i class="fa-solid fa-fw fa-xmark"></i>',
    },
    previewFileIcon: '<i class="fa-solid fa-file"></i>',
    browseIcon: '<i class="fa-solid fa-folder-open"></i>',
    removeIcon: '<i class="fa-solid fa-trash-alt"></i>',
    cancelIcon: '<i class="fa-solid fa-ban"></i>',
    pauseIcon: '<i class="fa-solid fa-pause"></i>',
    uploadIcon: '<i class="fa-solid fa-upload"></i>',
    msgValidationErrorIcon: '<i class="fa-solid fa-exclamation-circle"></i> ',
  };
})(window.jQuery);

var $;

document.addEventListener("DOMContentLoaded", function () {
  if (typeof $ == "undefined") {
    $ = jQuery.noConflict();
  }
  if (daJsEmbed) {
    daTargetDiv = "#" + daJsEmbed;
  } else {
    daTargetDiv = "#dabody";
  }
  daPreloadImage(daImageToPreLoad);
  if (daAutoColorScheme) {
    if (window.matchMedia("(prefers-color-scheme: dark)").matches) {
      daDesiredColorScheme = 1;
    } else {
      daDesiredColorScheme = 0;
    }
    if (daCurrentColorScheme != daDesiredColorScheme) {
      document.documentElement.setAttribute(
        "data-bs-theme",
        daDesiredColorScheme ? "dark" : "light",
      );
      $.ajax({
        type: "PATCH",
        url: daUrlChangeColorScheme,
        xhrFields: {
          withCredentials: true,
        },
        data: "scheme=" + daDesiredColorScheme,
        success: function (data) {
          daCurrentColorScheme = data.scheme;
        },
        error: function (xhr, status, error) {
          console.log("Unable to change desired color scheme.");
        },
        dataType: "json",
      });
    }
  }
  $(document).ready(daReadyFunction);
  if (!daObserverMode) {
    $(window).ready(daUpdateHeight);
    $(window).resize(daUpdateHeight);
  }
  daConfigureJqueryFuncs();
  for (var i = 0; i < daInitialExtraScripts.length; i++) {
    daEvalExtraScript(daInitialExtraScripts[i]);
  }
  for (var i = 0; i < daCustomItems.length; i++) {
    try {
      daGlobalEval(daCustomItems[i].js);
    } catch {
      console.log(
        "Error with JavaScript code of CustomDataType " +
          daCustomItems[i].datatype,
      );
    }
  }
});

var daColor = "#000";
var daWindowWidth;
var daTheWidth;
var daAspectRatio;
var daTheBorders;
var daSignaturePad;
var daWaitPage = false;

function daInitializeSignature(penColor, defaultImage) {
  daColor = penColor;
  daAspectRatio = 0.4;
  daTheBorders = 30;
  daNewCanvas(defaultImage);

  $(window).on("resize", function () {
    daResizeCanvas();
  });
  $(window).on("orientationchange", function () {
    daResizeCanvas();
  });
  $(".dasigclear").click(function (e) {
    e.preventDefault();
    daNewCanvas();
    return false;
  });
  $(".dasigsave").click(function (e) {
    e.preventDefault();
    if (
      daSignaturePad.isEmpty() &&
      document.getElementById("da_sig_required").value == "1"
    ) {
      $("#daerrormess").removeClass("dasignotshowing");
      setTimeout(function () {
        $("#daerrormess").addClass("dasignotshowing");
      }, 3000);
    } else {
      $(".dasigclear").attr("disabled", true);
      $(".dasigsave").attr("disabled", true);
      daSaveCanvas();
    }
    return false;
  });
}

// function to setup a new canvas for drawing

function daResizeCanvas() {
  if ($(window).width() != daWindowWidth) {
    daWindowWidth = $(window).width();
    setTimeout(function () {
      daNewCanvas();
    }, 200);
  }
  return;
}

function daSaveCanvas() {
  var dataURL = daSignaturePad.toDataURL();
  //console.log(dataURL)
  daSpinnerTimeout = setTimeout(daShowSpinner, 1000);
  daPost({ da_success: 1, da_the_image: dataURL, da_ajax: 1 });
}

function daNewCanvas(defaultImage = null) {
  //console.log("running daNewCanvas");
  daWindowWidth = $(window).width();
  var cwidth = $(window).width() - daTheBorders;
  var contentwidth = $("#dasigpage").outerWidth(true);
  if (cwidth > contentwidth) {
    cwidth = contentwidth;
  }
  var cheight = cwidth * daAspectRatio;
  var otherHeights =
    $("#dasigheader").outerHeight(true) +
    $("#dasigtoppart").outerHeight(true) +
    $("#dasigmidpart").outerHeight(true) +
    $("#dasigbottompart").outerHeight(true);
  if (cheight > $(window).height() - otherHeights) {
    cheight = $(window).height() - otherHeights;
  }
  if (cheight > 275 || cheight < 30) {
    cheight = 275;
  }
  $("#dasigcontent").height(cheight);
  var canvas =
    '<canvas class="form-control" id="dasigcanvas" width="' +
    cwidth +
    'px" height="' +
    cheight +
    'px"></canvas>';
  $("#dasigcontent").html(canvas);
  daTheWidth = (daThicknessScalingFactor * cwidth) / 100.0;
  if (daTheWidth < 1) {
    daTheWidth = 1;
  }
  daSignaturePad = new SignaturePad(document.querySelector("#dasigcanvas"));
  if (defaultImage != null) {
    daSignaturePad.fromDataURL(defaultImage, {
      ratio: 1,
      width: cwidth,
      height: cheight,
      xOffset: 0,
      yOffset: 0,
    });
  }
  daSignaturePad.minWidth = 0.5 * daThicknessScalingFactor;
  daSignaturePad.maxWidth = 2.5 * daThicknessScalingFactor;
  daSignaturePad.penColor = daColor;
  setTimeout(function () {
    if (daJsEmbed) {
      $(daTargetDiv)[0].scrollTo(0, 1);
      if (daSteps > 1) {
        $(daTargetDiv)[0].scrollIntoView();
      }
    } else {
      window.scrollTo(0, 1);
    }
  }, 10);
}

function daPost(params) {
  for (var key in params) {
    if (params.hasOwnProperty(key)) {
      var hiddenField = document.getElementById(key);
      if (hiddenField != null) {
        hiddenField.setAttribute("value", params[key]);
      } else {
        console.log("Key does not exist: " + key);
        return;
      }
    }
  }
  $("#dasigform").submit();
  return;
}

function isCanvasSupported() {
  var elem = document.createElement("canvas");
  return !!(elem.getContext && elem.getContext("2d"));
}

var daAutocomplete = Object();

function daWaitForGoogle(waitForPlaces) {
  return new Promise((resolve) => {
    let attempts = 0;
    const maxAttempts = 50;
    const interval = setInterval(() => {
      var found = false;
      try {
        if (google.maps === undefined) {
          throw new Error("google maps not defined");
        }
        if (waitForPlaces) {
          if (google.maps.places === undefined) {
            throw new Error("places not defined");
          }
        }
        found = true;
      } catch (e) {}
      if (found || attempts >= maxAttempts) {
        clearInterval(interval);
        resolve(found);
      }
      attempts++;
    }, 100);
  });
}

function daInitAutocomplete(info) {
  daAutocomplete = Object();
  for (var i = 0; i < info.length; ++i) {
    daAutocomplete[info[i][0]] = {
      id: info[i][0],
      opts: info[i][1],
      suggestions: {},
    };
  }
}

async function daInitAutocompleteOld(info) {
  await daWaitForGoogle(true);
  for (var i = 0; i < info.length; ++i) {
    var id = info[i][0];
    var opts = info[i][1];
    daAutocomplete[id] = new google.maps.places.Autocomplete(
      document.getElementById(id),
      opts,
    );
    google.maps.event.addListener(
      daAutocomplete[id],
      "place_changed",
      daFillInAddressFor(id),
    );
  }
}

function daFillInAddressFor(id) {
  return function () {
    daFillInAddressOld(id);
  };
}

async function daInitMap(daMapInfo) {
  var googleLoaded = await daWaitForGoogle(false);
  if (!googleLoaded) {
    console.log("Could not load Google Maps library");
    return;
  }
  await google.maps.importLibrary("core");
  var timePeriod = 0;
  maps = [];
  var map_info_length = daMapInfo.length;
  for (var i = 0; i < map_info_length; i++) {
    the_map = daMapInfo[i];
    var bounds = new google.maps.LatLngBounds();
    maps[i] = daAddMap(i, the_map.center.latitude, the_map.center.longitude);
    marker_length = the_map.markers.length;
    if (marker_length == 1) {
      show_marker = true;
    } else {
      show_marker = false;
    }
    for (var j = 0; j < marker_length; j++) {
      var new_marker = await daAddMarker(
        maps[i],
        the_map.markers[j],
        show_marker,
      );
      bounds.extend(
        new google.maps.LatLng(
          new_marker.position.lat,
          new_marker.position.lng,
        ),
      );
    }
    if (marker_length > 1) {
      maps[i].map.fitBounds(bounds);
    }
  }
}

function daAddMap(map_num, center_lat, center_lon) {
  var map = new google.maps.Map(document.getElementById("map" + map_num), {
    zoom: 11,
    center: new google.maps.LatLng(center_lat, center_lon),
    mapTypeId: google.maps.MapTypeId.ROADMAP,
    mapId: "map" + map_num + "element",
  });
  var infowindow = new google.maps.InfoWindow();
  return { map: map, infowindow: infowindow };
}

async function daAddMarker(map, marker_info, show_marker) {
  const { AdvancedMarkerElement, PinElement } =
    await google.maps.importLibrary("marker");
  var marker;
  var content;
  if (marker_info.icon) {
    content = new PinElement(marker_info.icon);
  } else {
    content = new PinElement();
  }
  marker = new AdvancedMarkerElement({
    position: {
      lat: marker_info.latitude,
      lng: marker_info.longitude,
    },
    map: map.map,
    content: content.element,
  });
  if (marker_info.info) {
    google.maps.event.addListener(
      marker,
      "click",
      (function (marker, info) {
        return function () {
          map.infowindow.setContent(info);
          map.infowindow.open(map.map, marker);
        };
      })(marker, marker_info.info),
    );
  }
  if (show_marker) {
    map.infowindow.setContent(marker_info.info);
    map.infowindow.open(map.map, marker);
  }
  return marker;
}

function daFillInAddress(origId, place) {
  var id;
  if (daVarLookupRev[origId]) {
    id = daVarLookupRev[origId];
  } else {
    id = origId;
  }
  var baseVarname = atob(id).replace(/.[a-zA-Z0-9_]+$/, "");
  baseVarname = baseVarname.replace(/[\[\]]/g, ".");
  var re = new RegExp("^" + baseVarname + ".(.*)");
  var componentTrans = {
    administrative_area_level_1: ["state", "shortText"],
    administrative_area_level_2: ["county", "longText"],
  };
  var alternatives = [
    [
      "city",
      [
        "locality",
        "sublocality_level_1",
        "neighborhood",
        "administrative_area_level_3",
        "colloquial_area",
      ],
    ],
    [
      "sublocality",
      [
        "sublocality_level_1",
        "sublocality_level_2",
        "sublocality_level_3",
        "sublocality_level_4",
        "sublocality_level_5",
      ],
    ],
  ];
  var fieldsToClear = [
    "address",
    "administrative_area_level_1",
    "administrative_area_level_2",
    "administrative_area_level_3",
    "administrative_area_level_4",
    "administrative_area_level_5",
    "administrative_area_level_6",
    "administrative_area_level_7",
    "adr_format_address",
    "airport",
    "bus_station",
    "business_status",
    "city",
    "colloquial_area",
    "compound_code",
    "country",
    "county",
    "directions_uri",
    "display_name",
    "display_name_language_code",
    "establishment",
    "floor",
    "formatted_address",
    "global_code",
    "has_wheelchair_accessible_entrance",
    "has_wheelchair_accessible_parking",
    "has_wheelchair_accessible_restroom",
    "has_wheelchair_accessible_seating",
    "id",
    "international_phone_number",
    "intersection",
    "landmark",
    "latitude",
    "locality",
    "location",
    "longitude",
    "national_phone_number",
    "natural_feature",
    "neighborhood",
    "park",
    "parking",
    "photos_uri",
    "place_uri ",
    "plus_code",
    "point_of_interest",
    "political",
    "post_box",
    "postal_code",
    "postal_town",
    "premise",
    "price_level",
    "primary_type",
    "primary_type_display_name",
    "primary_type_display_name_language_code",
    "rating",
    "reviews_uri",
    "room",
    "route",
    "state",
    "street_number",
    "sublocality",
    "subpremise",
    "train_station",
    "transit_station",
    "types",
    "utc_offset_minutes",
    "write_a_review_uri",
    "zip",
  ];
  var idForPart = {};
  $("input, select").each(function () {
    var the_id = $(this).attr("id");
    if (typeof the_id !== typeof undefined && the_id !== false) {
      try {
        var field_name = atob($(this).attr("id"));
        if (field_name.indexOf("_field_") == 0) {
          field_name = atob(daVarLookupRev[$(this).attr("id")]);
        }
        var m = re.exec(field_name);
        if (m.length > 0) {
          idForPart[m[1]] = $(this).attr("id");
        }
      } catch (e) {}
    }
  });
  for (var component in fieldsToClear) {
    if (
      typeof idForPart[component] != "undefined" &&
      document.getElementById(idForPart[component]) != null
    ) {
      document.getElementById(idForPart[component]).value = "";
    }
  }
  var savedValues = {};
  var toChange = [];
  for (var i = 0; i < place.addressComponents.length; i++) {
    var addressType = place.addressComponents[i].types[0];
    if (addressType == "street_number" || addressType == "country") {
      savedValues[addressType] = place.addressComponents[i]["shortText"];
    } else {
      savedValues[addressType] = place.addressComponents[i]["longText"];
    }
    if (
      componentTrans[addressType] &&
      idForPart[componentTrans[addressType][0]] &&
      typeof idForPart[componentTrans[addressType][0]] != "undefined" &&
      document.getElementById(idForPart[componentTrans[addressType][0]]) != null
    ) {
      var val = place.addressComponents[i][componentTrans[addressType][1]];
      if (typeof val != "undefined") {
        document.getElementById(
          idForPart[componentTrans[addressType][0]],
        ).value = val;
        toChange.push("#" + idForPart[componentTrans[addressType][0]]);
      }
    }
    if (
      idForPart[addressType] &&
      typeof idForPart[addressType] != "undefined" &&
      document.getElementById(idForPart[addressType]) != null
    ) {
      var val = savedValues[addressType];
      if (typeof val != "undefined") {
        document.getElementById(idForPart[addressType]).value = val;
        toChange.push("#" + idForPart[addressType]);
      }
    }
  }
  if (
    typeof idForPart["address"] != "undefined" &&
    document.getElementById(idForPart["address"]) != null
  ) {
    var the_address = "";
    if (typeof savedValues["street_number"] != "undefined") {
      the_address += savedValues["street_number"] + " ";
    }
    if (typeof savedValues["route"] != "undefined") {
      the_address += savedValues["route"];
    }
    document.getElementById(idForPart["address"]).value = the_address;
    toChange.push("#" + idForPart["address"]);
  }
  if (
    typeof idForPart["zip"] != "undefined" &&
    document.getElementById(idForPart["zip"]) != null &&
    typeof savedValues["postal_code"] != "undefined" &&
    savedValues["postal_code"] != ""
  ) {
    var theZipCode = savedValues["postal_code"];
    if (
      typeof savedValues["postal_code_suffix"] != "undefined" &&
      savedValues["postal_code_suffix"] != ""
    ) {
      theZipCode += "-" + savedValues["postal_code_suffix"];
    }
    document.getElementById(idForPart["zip"]).value = theZipCode;
    toChange.push("#" + idForPart["zip"]);
  }
  if (place.location) {
    if (
      typeof idForPart["latitude"] != "undefined" &&
      document.getElementById(idForPart["latitude"]) != null
    ) {
      document.getElementById(idForPart["latitude"]).value =
        place.location.lat();
      toChange.push("#" + idForPart["latitude"]);
    }
    if (
      typeof idForPart["longitude"] != "undefined" &&
      document.getElementById(idForPart["longitude"]) != null
    ) {
      document.getElementById(idForPart["longitude"]).value =
        place.location.lng();
      toChange.push("#" + idForPart["longitude"]);
    }
  }
  for (var i = 0; i < alternatives.length; i++) {
    const [fieldName, altList] = alternatives[i];
    if (
      typeof idForPart[fieldName] != "undefined" &&
      document.getElementById(idForPart[fieldName]) != null &&
      document.getElementById(idForPart[fieldName]).value == ""
    ) {
    }
    for (var j = 0; j < altList.length; j++) {
      if (typeof savedValues[altList[j]] != "undefined") {
        document.getElementById(idForPart[fieldName]).value =
          savedValues[altList[j]];
        toChange.push("#" + idForPart[fieldName]);
        break;
      }
    }
  }
  var fieldsToGet = daAutocomplete[origId].opts.fields || [];
  for (var i = 0; i < fieldsToGet.length; i++) {
    var pythonVar = fieldsToGet[i];
    if (pythonVar == "address_components" || pythonVar == "location") {
      continue;
    }
    var jsVar = underscoreToCamel(pythonVar);
    if (
      place[jsVar] != null &&
      typeof place[jsVar] === "object" &&
      !Array.isArray(place[jsVar])
    ) {
      var transformedObject = JSON.parse(JSON.stringify(place[jsVar]));
      Object.entries(transformedObject).forEach(([jsSubVar, value]) => {
        var pythonSubVar = camelToUnderscore(jsSubVar);
        if (
          value != null &&
          typeof idForPart[pythonSubVar] != "undefined" &&
          document.getElementById(idForPart[pythonSubVar]) != null
        ) {
          document.getElementById(idForPart[pythonSubVar]).value =
            jsonIfObject(value);
          toChange.push("#" + idForPart[pythonSubVar]);
        }
      });
    } else if (
      place[jsVar] &&
      typeof idForPart[pythonVar] != "undefined" &&
      document.getElementById(idForPart[pythonVar]) != null
    ) {
      document.getElementById(idForPart[pythonVar]).value = jsonIfObject(
        place[jsVar],
      );
      toChange.push("#" + idForPart[pythonVar]);
    }
  }
  for (var i = 0; i < toChange.length; i++) {
    $(toChange[i]).trigger("change");
  }
}

function daFillInAddressOld(origId) {
  var id;
  if (daVarLookupRev[origId]) {
    id = daVarLookupRev[origId];
  } else {
    id = origId;
  }
  var base_varname = atob(id).replace(/.[a-zA-Z0-9_]+$/, "");
  base_varname = base_varname.replace(/[\[\]]/g, ".");
  var re = new RegExp("^" + base_varname + ".(.*)");
  var componentForm = {
    locality: "long_name",
    sublocality: "long_name",
    administrative_area_level_3: "long_name",
    administrative_area_level_2: "long_name",
    administrative_area_level_1: "short_name",
    country: "short_name",
    postal_code: "short_name",
  };
  var componentTrans = {
    locality: "city",
    administrative_area_level_2: "county",
    administrative_area_level_1: "state",
    country: "country",
    postal_code: "zip",
  };

  var fields_to_fill = [
    "address",
    "city",
    "county",
    "state",
    "zip",
    "neighborhood",
    "sublocality",
    "administrative_area_level_3",
    "postal_code",
  ];
  var id_for_part = {};
  $("input, select").each(function () {
    var the_id = $(this).attr("id");
    if (typeof the_id !== typeof undefined && the_id !== false) {
      try {
        var field_name = atob($(this).attr("id"));
        if (field_name.indexOf("_field_") == 0) {
          field_name = atob(daVarLookupRev[$(this).attr("id")]);
        }
        var m = re.exec(field_name);
        if (m.length > 0) {
          id_for_part[m[1]] = $(this).attr("id");
        }
      } catch (e) {}
    }
  });
  place = daAutocomplete[origId].getPlace();
  if (
    typeof id_for_part["address"] != "undefined" &&
    document.getElementById(id_for_part["address"]) != null
  ) {
    document.getElementById(id_for_part["address"]).value = "";
  }

  for (var component in fields_to_fill) {
    if (
      typeof id_for_part[component] != "undefined" &&
      document.getElementById(id_for_part[component]) != null
    ) {
      document.getElementById(id_for_part[component]).value = "";
    }
  }

  var street_number;
  var route;
  var savedValues = {};
  var toChange = [];
  for (var i = 0; i < place.address_components.length; i++) {
    var addressType = place.address_components[i].types[0];
    savedValues[addressType] = place.address_components[i]["long_name"];
    if (addressType == "street_number") {
      street_number = place.address_components[i]["short_name"];
    }
    if (addressType == "route") {
      route = place.address_components[i]["long_name"];
    }
    if (
      componentForm[addressType] &&
      id_for_part[componentTrans[addressType]] &&
      typeof id_for_part[componentTrans[addressType]] != "undefined" &&
      document.getElementById(id_for_part[componentTrans[addressType]]) != null
    ) {
      var val = place.address_components[i][componentForm[addressType]];
      if (typeof val != "undefined") {
        document.getElementById(
          id_for_part[componentTrans[addressType]],
        ).value = val;
        toChange.push("#" + id_for_part[componentTrans[addressType]]);
      }
      if (componentTrans[addressType] != addressType) {
        val = place.address_components[i]["long_name"];
        if (
          typeof val != "undefined" &&
          typeof id_for_part[addressType] != "undefined" &&
          document.getElementById(id_for_part[addressType]) != null
        ) {
          document.getElementById(id_for_part[addressType]).value = val;
          toChange.push("#" + id_for_part[addressType]);
        }
      }
    } else if (
      id_for_part[addressType] &&
      typeof id_for_part[addressType] != "undefined" &&
      document.getElementById(id_for_part[addressType]) != null
    ) {
      var val = place.address_components[i]["long_name"];
      if (typeof val != "undefined") {
        document.getElementById(id_for_part[addressType]).value = val;
        toChange.push("#" + id_for_part[addressType]);
      }
    }
  }
  if (
    typeof id_for_part["address"] != "undefined" &&
    document.getElementById(id_for_part["address"]) != null
  ) {
    var the_address = "";
    if (typeof street_number != "undefined") {
      the_address += street_number + " ";
    }
    if (typeof route != "undefined") {
      the_address += route;
    }
    document.getElementById(id_for_part["address"]).value = the_address;
    toChange.push("#" + id_for_part["address"]);
  }
  if (
    typeof id_for_part["city"] != "undefined" &&
    document.getElementById(id_for_part["city"]) != null
  ) {
    if (
      document.getElementById(id_for_part["city"]).value == "" &&
      typeof savedValues["sublocality_level_1"] != "undefined"
    ) {
      document.getElementById(id_for_part["city"]).value =
        savedValues["sublocality_level_1"];
    }
    if (
      document.getElementById(id_for_part["city"]).value == "" &&
      typeof savedValues["neighborhood"] != "undefined"
    ) {
      document.getElementById(id_for_part["city"]).value =
        savedValues["neighborhood"];
    }
    if (
      document.getElementById(id_for_part["city"]).value == "" &&
      typeof savedValues["administrative_area_level_3"] != "undefined"
    ) {
      document.getElementById(id_for_part["city"]).value =
        savedValues["administrative_area_level_3"];
    }
  }
  if (
    typeof id_for_part["sublocality"] != "undefined" &&
    document.getElementById(id_for_part["sublocality"]) != null
  ) {
    if (
      document.getElementById(id_for_part["sublocality"]).value == "" &&
      typeof savedValues["sublocality_level_1"] != "undefined"
    ) {
      document.getElementById(id_for_part["sublocality"]).value =
        savedValues["sublocality_level_1"];
    }
    if (
      document.getElementById(id_for_part["sublocality"]).value == "" &&
      typeof savedValues["sublocality_level_2"] != "undefined"
    ) {
      document.getElementById(id_for_part["sublocality"]).value =
        savedValues["sublocality_level_2"];
    }
    if (
      document.getElementById(id_for_part["sublocality"]).value == "" &&
      typeof savedValues["sublocality_level_3"] != "undefined"
    ) {
      document.getElementById(id_for_part["sublocality"]).value =
        savedValues["sublocality_level_3"];
    }
    if (
      document.getElementById(id_for_part["sublocality"]).value == "" &&
      typeof savedValues["sublocality_level_4"] != "undefined"
    ) {
      document.getElementById(id_for_part["sublocality"]).value =
        savedValues["sublocality_level_4"];
    }
    if (
      document.getElementById(id_for_part["sublocality"]).value == "" &&
      typeof savedValues["sublocality_level_5"] != "undefined"
    ) {
      document.getElementById(id_for_part["sublocality"]).value =
        savedValues["sublocality_level_5"];
    }
  }
  if (
    place.adr_address &&
    typeof id_for_part["adr_address"] != "undefined" &&
    document.getElementById(id_for_part["adr_address"]) != null
  ) {
    document.getElementById(id_for_part["adr_address"]).value =
      place.adr_address;
  }
  if (
    place.business_status &&
    typeof id_for_part["business_status"] != "undefined" &&
    document.getElementById(id_for_part["business_status"]) != null
  ) {
    document.getElementById(id_for_part["business_status"]).value =
      place.business_status;
  }
  if (
    place.formatted_address &&
    typeof id_for_part["formatted_address"] != "undefined" &&
    document.getElementById(id_for_part["formatted_address"]) != null
  ) {
    document.getElementById(id_for_part["formatted_address"]).value =
      place.formatted_address;
  }
  if (
    place.formatted_phone_number &&
    typeof id_for_part["formatted_phone_number"] != "undefined" &&
    document.getElementById(id_for_part["formatted_phone_number"]) != null
  ) {
    document.getElementById(id_for_part["formatted_phone_number"]).value =
      place.formatted_phone_number;
  }
  if (place.geometry && place.geometry.location) {
    if (
      typeof id_for_part["latitude"] != "undefined" &&
      document.getElementById(id_for_part["latitude"]) != null
    ) {
      document.getElementById(id_for_part["latitude"]).value =
        place.geometry.location.lat();
    }
    if (
      typeof id_for_part["longitude"] != "undefined" &&
      document.getElementById(id_for_part["longitude"]) != null
    ) {
      document.getElementById(id_for_part["longitude"]).value =
        place.geometry.location.lng();
    }
  }
  if (
    place.icon &&
    typeof id_for_part["icon"] != "undefined" &&
    document.getElementById(id_for_part["icon"]) != null
  ) {
    document.getElementById(id_for_part["icon"]).value = place.icon;
  }
  if (
    place.international_phone_number &&
    typeof id_for_part["international_phone_number"] != "undefined" &&
    document.getElementById(id_for_part["international_phone_number"]) != null
  ) {
    document.getElementById(id_for_part["international_phone_number"]).value =
      place.international_phone_number;
  }
  if (
    place.name &&
    typeof id_for_part["name"] != "undefined" &&
    document.getElementById(id_for_part["name"]) != null
  ) {
    document.getElementById(id_for_part["name"]).value = place.name;
  }
  if (
    place.place_id &&
    typeof id_for_part["place_id"] != "undefined" &&
    document.getElementById(id_for_part["place_id"]) != null
  ) {
    document.getElementById(id_for_part["place_id"]).value = place.place_id;
  }
  if (
    place.price_level &&
    typeof id_for_part["price_level"] != "undefined" &&
    document.getElementById(id_for_part["price_level"]) != null
  ) {
    document.getElementById(id_for_part["price_level"]).value =
      place.price_level;
  }
  if (
    place.rating &&
    typeof id_for_part["rating"] != "undefined" &&
    document.getElementById(id_for_part["rating"]) != null
  ) {
    document.getElementById(id_for_part["rating"]).value = place.rating;
  }
  if (
    place.url &&
    typeof id_for_part["url"] != "undefined" &&
    document.getElementById(id_for_part["url"]) != null
  ) {
    document.getElementById(id_for_part["url"]).value = place.url;
  }
  if (
    place.utc_offset_minutes &&
    typeof id_for_part["utc_offset_minutes"] != "undefined" &&
    document.getElementById(id_for_part["utc_offset_minutes"]) != null
  ) {
    document.getElementById(id_for_part["utc_offset_minutes"]).value =
      place.utc_offset_minutes;
  }
  if (
    place.vicinity &&
    typeof id_for_part["vicinity"] != "undefined" &&
    document.getElementById(id_for_part["vicinity"]) != null
  ) {
    document.getElementById(id_for_part["vicinity"]).value = place.vicinity;
  }
  if (
    place.website &&
    typeof id_for_part["website"] != "undefined" &&
    document.getElementById(id_for_part["website"]) != null
  ) {
    document.getElementById(id_for_part["website"]).value = place.website;
  }
  for (var i = 0; i < toChange.length; i++) {
    $(toChange[i]).trigger("change");
  }
}

function daGeolocate() {
  if (navigator.geolocation) {
    navigator.geolocation.getCurrentPosition(function (position) {
      var geolocation = {
        lat: position.coords.latitude,
        lng: position.coords.longitude,
      };
      var circle = new google.maps.Circle({
        center: geolocation,
        radius: position.coords.accuracy,
      });
      for (var id in daAutocomplete) {
        if (daAutocomplete.hasOwnProperty(id)) {
          daAutocomplete[id].setBounds(circle.getBounds());
        }
      }
    });
  }
}
var daRequestPending = false;
var isAndroid = /android/i.test(navigator.userAgent.toLowerCase());
var daWhichButton = null;
var daSocket = null;
var daChatHistory = [];
var daCheckinCode = null;
var daCheckingIn = 0;
var daShowingHelp = 0;
var daIframeEmbed;
if (window.location !== window.parent.location) {
  daIframeEmbed = true;
} else {
  daIframeEmbed = false;
}
var daChatPartnersAvailable = 0;
var daPhoneAvailable = false;
var daInitialized = false;
var daNotYetScrolled = true;
var daInformedChanged = false;
var daShowingSpinner = false;
var daSpinnerTimeout = null;
var daSubmitter = null;
var daGAConfigured = false;
var daShowIfInProcess = false;
var daFieldsToSkip = [
  "_checkboxes",
  "_empties",
  "_ml_info",
  "_back_one",
  "_files",
  "_files_inline",
  "_question_name",
  "_the_image",
  "_save_as",
  "_success",
  "_datatypes",
  "_event",
  "_visible",
  "_tracker",
  "_track_location",
  "_varnames",
  "_next_action",
  "_next_action_to_set",
  "ajax",
  "json",
  "informed",
  "csrf_token",
  "_action",
  "_order_changes",
  "_collect",
  "_list_collect_list",
  "_null_question",
];
var daVarLookup = Object();
var daVarLookupRev = Object();
var daVarLookupMulti = Object();
var daVarLookupRevMulti = Object();
var daVarLookupSelect = Object();
var daVarLookupCheckbox = Object();
var daVarLookupOption = Object();
var daTargetDiv;
var daComboBoxes = Object();
var daGlobalEval = eval;
var daFetchAcceptIncoming = false;
var daFetchAjaxTimeout = null;
var daFetchAjaxTimeoutRunning = null;
var daFetchAjaxTimeoutFetchAfter = null;
var daAddressAcceptIncoming = false;
var daAddressAjaxTimeout = null;
var daAddressAjaxTimeoutRunning = null;
var daAddressAjaxTimeoutCallAfter = null;
var daShowHideHappened = false;
var daCheckinInterval = null;
var daInitialCheckinTimeout = null;
var daReloader = null;
var daDisable = null;
var daAutoColorScheme = true;
var daCurrentColorScheme;
var daUrlChangeColorScheme;
var daDesiredColorScheme;
var daAutoColorScheme = true;
var daThicknessScalingFactor;
var daJsEmbed;
var daAllowGoingBack;
var daSteps;
var daIsUser;
var daUserId;
var daChatStatus;
var daChatAvailable;
var daChatMode;
var daSendChanges;
var daBeingControlled;
var daInformed;
var daUsingGA;
var daUsingSegment;
var daDoAction;
var daQuestionID;
var daCsrf;
var daComboboxButtonLabel;
var daInterviewUrl;
var daLocationBar;
var daPostURL;
var daYamlFilename;
var daNotificationContainer;
var daNotificationMessage;
var daMessageLog;
var daImageToPreLoad;
var daGetVariablesUrl;
var daLiveHelpMessage;
var daLiveHelpMessagePhone;
var daNewChatMessage;
var daLiveHelpAvailableMessage;
var daScreenBeingControlled;
var daScreenNoLongerBeingControlled;
var daPathRoot;
var daCheckinSeconds;
var daChatRoles;
var daChatPartnerRoles;
var daAllButtonClasses;
var daButtonStyle;
var daShouldForceFullScreen;
var daPageSep;
var daAreYouSure;
var daOtherUser;
var daOtherUsers;
var daOperator;
var daOperators;
var daCheckinUrl;
var daCheckoutUrl;
var daCurrencyDecimalPlaces;
var daShouldDebugReadabilityHelp;
var daShouldDebugReadabilityQuestion;
var daEmailAddressRequired;
var daNeedCompleteEmail;
var daDefaultPopoverTrigger;
var daToggleWord;
var daCheckinUrlWithInterview;
var daReloadAfterSeconds;
var daCustomItems;
var daTrackingEnabled;

function dagoogleapicallback() {}
function daForceFullScreen(data) {
  if (data.steps > 1 && window != top) {
    top.location.href = location.href;
  }
}
Object.defineProperty(String.prototype, "daSprintf", {
  value: function () {
    var args = Array.from(arguments),
      i = 0;
    function defaultNumber(iValue) {
      return iValue != undefined && !isNaN(iValue) ? iValue : "0";
    }
    function defaultString(iValue) {
      return iValue == undefined ? "" : "" + iValue;
    }
    return this.replace(
      /%%|%([+\-])?([^1-9])?(\d+)?(\.\d+)?([deEfhHioQqs])/g,
      function (match, sign, filler, scale, precision, type) {
        var strOut, space, value;
        var asNumber = false;
        if (match == "%%") return "%";
        if (i >= args.length) return match;
        value = args[i];
        while (Array.isArray(value)) {
          args.splice(i, 1);
          for (var j = i; value.length > 0; j++)
            args.splice(j, 0, value.shift());
          value = args[i];
        }
        i++;
        if (filler == undefined) filler = " "; // default
        if (scale == undefined && !isNaN(filler)) {
          scale = filler;
          filler = " ";
        }
        if (sign == undefined) sign = "sqQ".indexOf(type) >= 0 ? "+" : "-"; // default
        if (scale == undefined) scale = 0; // default
        if (precision == undefined) precision = ".0"; // default
        scale = parseInt(scale);
        precision = parseInt(precision.substr(1));
        switch (type) {
          case "d":
          case "i":
            // decimal integer
            asNumber = true;
            strOut = parseInt(defaultNumber(value));
            if (precision > 0) strOut += "." + "0".repeat(precision);
            break;
          case "e":
          case "E":
            // float in exponential notation
            asNumber = true;
            strOut = parseFloat(defaultNumber(value));
            if (precision == 0) strOut = strOut.toExponential();
            else strOut = strOut.toExponential(precision);
            if (type == "E") strOut = strOut.replace("e", "E");
            break;
          case "f":
            // decimal float
            asNumber = true;
            strOut = parseFloat(defaultNumber(value));
            if (precision != 0) strOut = strOut.toFixed(precision);
            break;
          case "o":
          case "h":
          case "H":
            // Octal or Hexagesimal integer notation
            strOut =
              "\\" +
              (type == "o" ? "0" : type) +
              parseInt(defaultNumber(value)).toString(type == "o" ? 8 : 16);
            break;
          case "q":
            // single quoted string
            strOut = "'" + defaultString(value) + "'";
            break;
          case "Q":
            // double quoted string
            strOut = '"' + defaultString(value) + '"';
            break;
          default:
            // string
            strOut = defaultString(value);
            break;
        }
        if (typeof strOut != "string") strOut = "" + strOut;
        if ((space = strOut.length) < scale) {
          if (asNumber) {
            if (sign == "-") {
              if (strOut.indexOf("-") < 0)
                strOut = filler.repeat(scale - space) + strOut;
              else
                strOut =
                  "-" + filler.repeat(scale - space) + strOut.replace("-", "");
            } else {
              if (strOut.indexOf("-") < 0)
                strOut = "+" + filler.repeat(scale - space - 1) + strOut;
              else
                strOut =
                  "-" + filler.repeat(scale - space) + strOut.replace("-", "");
            }
          } else {
            if (sign == "-") strOut = filler.repeat(scale - space) + strOut;
            else strOut = strOut + filler.repeat(scale - space);
          }
        } else if (asNumber && sign == "+" && strOut.indexOf("-") < 0)
          strOut = "+" + strOut;
        return strOut;
      },
    );
  },
});
Object.defineProperty(window, "daSprintf", {
  value: function (str, ...rest) {
    if (typeof str == "string")
      return String.prototype.daSprintf.apply(str, rest);
    return "";
  },
});
function daGoToAnchor(target) {
  if (daJsEmbed) {
    scrollTarget = $(target).first().position().top - 60;
  } else {
    scrollTarget = $(target).first().offset().top - 60;
  }
  if (scrollTarget != null) {
    if (daJsEmbed) {
      $(daTargetDiv).animate(
        {
          scrollTop: scrollTarget,
        },
        500,
      );
    } else {
      $("html, body").animate(
        {
          scrollTop: scrollTarget,
        },
        500,
      );
    }
  }
}
function atou(b64) {
  return decodeURIComponent(escape(atob(b64)));
}
function utoa(data) {
  return btoa(unescape(encodeURIComponent(data)));
}
function dabtoa(str) {
  return window.utoa(str).replace(/[\n=]/g, "");
}
function daatob(str) {
  return atou(str);
}
function hideTablist() {
  var anyTabs =
    $("#daChatAvailable").is(":visible") ||
    $("daPhoneAvailable").is(":visible") ||
    $("#dahelptoggle").is(":visible");
  if (anyTabs) {
    $("#nav-bar-tab-list").removeClass("dainvisible");
    $("#daquestionlabel").parent().removeClass("dainvisible");
  } else {
    $("#nav-bar-tab-list").addClass("dainvisible");
    $("#daquestionlabel").parent().addClass("dainvisible");
  }
}
function getFields() {
  var allFields = [];
  for (var rawFieldName in daVarLookup) {
    if (daVarLookup.hasOwnProperty(rawFieldName)) {
      var fieldName = atou(rawFieldName);
      if (allFields.indexOf(fieldName) == -1) {
        allFields.push(fieldName);
      }
    }
  }
  return allFields;
}
var daGetFields = getFields;
function daAppendIfExists(fieldName, theArray) {
  var elem = $("[name='" + fieldName + "']");
  if (elem.length > 0) {
    for (var i = 0; i < theArray.length; ++i) {
      if (theArray[i] == elem[0]) {
        return;
      }
    }
    theArray.push(elem[0]);
  }
}
function getField(fieldName, notInDiv) {
  if (daVarLookupCheckbox[fieldName]) {
    var n = daVarLookupCheckbox[fieldName].length;
    for (var i = 0; i < n; ++i) {
      var elem = daVarLookupCheckbox[fieldName][i].checkboxes[0].elem;
      if (!$(elem).prop("disabled")) {
        var showifParents = $(elem).parents(".dajsshowif,.dashowif");
        if (
          showifParents.length == 0 ||
          $(showifParents[0]).data("isVisible") == "1"
        ) {
          if (notInDiv && $.contains(notInDiv, elem)) {
            continue;
          }
          return daVarLookupCheckbox[fieldName][i].elem;
        }
      }
    }
  }
  if (daVarLookupSelect[fieldName]) {
    var n = daVarLookupSelect[fieldName].length;
    for (var i = 0; i < n; ++i) {
      var elem = daVarLookupSelect[fieldName][i].select;
      if (!$(elem).prop("disabled")) {
        var showifParents = $(elem).parents(".dajsshowif,.dashowif");
        if (
          showifParents.length == 0 ||
          $(showifParents[0]).data("isVisible") == "1"
        ) {
          if (notInDiv && $.contains(notInDiv, elem)) {
            continue;
          }
          return elem;
        }
      }
    }
  }
  var fieldNameEscaped = dabtoa(fieldName);
  var possibleElements = [];
  daAppendIfExists(fieldNameEscaped, possibleElements);
  if (daVarLookupMulti.hasOwnProperty(fieldNameEscaped)) {
    for (var i = 0; i < daVarLookupMulti[fieldNameEscaped].length; ++i) {
      daAppendIfExists(daVarLookupMulti[fieldNameEscaped][i], possibleElements);
    }
  }
  var returnVal = null;
  for (var i = 0; i < possibleElements.length; ++i) {
    if (
      !$(possibleElements[i]).prop("disabled") ||
      $(possibleElements[i]).parents(".file-input.is-locked").length > 0
    ) {
      var showifParents = $(possibleElements[i]).parents(
        ".dajsshowif,.dashowif",
      );
      if (
        showifParents.length == 0 ||
        $(showifParents[0]).data("isVisible") == "1"
      ) {
        if (notInDiv && $.contains(notInDiv, possibleElements[i])) {
          continue;
        }
        returnVal = possibleElements[i];
      }
    }
  }
  if (
    $(returnVal).hasClass("da-to-labelauty") &&
    $(returnVal).parents("div.da-field-group").length > 0
  ) {
    var fieldSet = $(returnVal).parents("div.da-field-group")[0];
    if (
      !$(fieldSet).hasClass("da-field-checkbox") &&
      !$(fieldSet).hasClass("da-field-checkboxes")
    ) {
      return fieldSet;
    }
  }
  return returnVal;
}
var daGetField = getField;
function setChoices(fieldName, choices) {
  var elem = daGetField(fieldName);
  if (elem == null) {
    console.log("setChoices: reference to non-existent field " + fieldName);
    return;
  }
  var isCombobox =
    $(elem).attr("type") == "hidden" &&
    $(elem).parents(".combobox-container").length > 0;
  if (isCombobox) {
    var comboInput = $(elem)
      .parents(".combobox-container")
      .first()
      .find("input.combobox")
      .first();
    var comboObject = daComboBoxes[$(comboInput).attr("id")];
    var oldComboVal = comboObject.$target.val();
    elem = comboObject.$source;
  }
  if ($(elem).prop("tagName") != "SELECT") {
    console.log("setField: field " + fieldName + " is not a dropdown field");
    return;
  }
  var oldVal = $(elem).val();
  $(elem)
    .find("option[value!='']")
    .each(function () {
      $(this).remove();
    });
  var n = choices.length;
  for (var i = 0; i < n; i++) {
    var opt = $("<option>");
    opt.val(choices[i][0]);
    opt.text(choices[i][1]);
    if (oldVal == choices[i][0]) {
      opt.attr("selected", "selected");
    }
    $(elem).append(opt);
  }
  if (isCombobox) {
    comboObject.refresh();
    comboObject.clearTarget();
    if (oldComboVal != "") {
      daSetField(fieldName, oldComboVal);
    }
  }
}
var daSetChoices = setChoices;
function setField(fieldName, theValue) {
  var elem = daGetField(fieldName);
  if (elem == null) {
    console.log("setField: reference to non-existent field " + fieldName);
    return;
  }
  if (
    $(elem).prop("tagName") == "DIV" &&
    $(elem).hasClass("da-field-group") &&
    $(elem).hasClass("da-field-radio")
  ) {
    elem = $(elem).find("input")[0];
  }
  if ($(elem).attr("type") == "checkbox") {
    if (theValue) {
      if ($(elem).prop("checked") != true) {
        $(elem).click();
      }
    } else {
      if ($(elem).prop("checked") != false) {
        $(elem).click();
      }
    }
  } else if ($(elem).attr("type") == "radio") {
    var fieldNameEscaped = $(elem)
      .attr("name")
      .replace(/(:|\.|\[|\]|,|=)/g, "\\$1");
    var wasSet = false;
    if (theValue === true) {
      theValue = "True";
    }
    if (theValue === false) {
      theValue = "False";
    }
    $("input[name='" + fieldNameEscaped + "']").each(function () {
      if ($(this).val() == theValue) {
        if ($(this).prop("checked") != true) {
          $(this).prop("checked", true);
          $(this).trigger("change");
        }
        wasSet = true;
        return false;
      }
    });
    if (!wasSet) {
      console.log(
        "setField: could not set radio button " + fieldName + " to " + theValue,
      );
    }
  } else if ($(elem).attr("type") == "hidden") {
    if ($(elem).val() != theValue) {
      if ($(elem).parents(".combobox-container").length > 0) {
        var comboInput = $(elem)
          .parents(".combobox-container")
          .first()
          .find("input.combobox")
          .first();
        daComboBoxes[$(comboInput).attr("id")].manualSelect(theValue);
      } else {
        $(elem).val(theValue);
        $(elem).trigger("change");
      }
    }
  } else if (
    $(elem).prop("tagName") == "DIV" &&
    $(elem).hasClass("da-field-group") &&
    $(elem).hasClass("da-field-checkboxes")
  ) {
    if (!Array.isArray(theValue)) {
      throw new Error("setField: value must be an array");
    }
    var n = theValue.length;
    $(elem)
      .find("input")
      .each(function () {
        if ($(this).hasClass("danota-checkbox")) {
          $(this).prop("checked", n == 0);
          $(this).trigger("change");
          return;
        }
        if ($(this).hasClass("daaota-checkbox")) {
          $(this).prop("checked", false);
          $(this).trigger("change");
          return;
        }
        if ($(this).attr("name").substr(0, 7) === "_ignore") {
          return;
        }
        var theVal = atou($(this).data("cbvalue"));
        if ($(elem).hasClass("daobject")) {
          theVal = atou(theVal);
        }
        var oldVal = $(this).prop("checked") == true;
        var newVal = false;
        for (var i = 0; i < n; ++i) {
          if (theValue[i] == theVal) {
            newVal = true;
          }
        }
        if (oldVal != newVal) {
          $(this).click();
        }
      });
  } else if (
    $(elem).prop("tagName") == "SELECT" &&
    $(elem).hasClass("damultiselect")
  ) {
    if (daVarLookupSelect[fieldName]) {
      var n = daVarLookupSelect[fieldName].length;
      for (var i = 0; i < n; ++i) {
        if (daVarLookupSelect[fieldName][i].select === elem) {
          var oldValue =
            $(daVarLookupSelect[fieldName][i].option).prop("selected") == true;
          if (oldValue != theValue) {
            $(daVarLookupSelect[fieldName][i].option).prop(
              "selected",
              theValue,
            );
            $(elem).trigger("change");
          }
        }
      }
    } else {
      if (!Array.isArray(theValue)) {
        throw new Error("setField: value must be an array");
      }
      var n = theValue.length;
      var changed = false;
      $(elem)
        .find("option")
        .each(function () {
          var thisVal = daVarLookupOption[$(this).val()];
          var oldVal = $(this).prop("selected") == true;
          var newVal = false;
          for (var i = 0; i < n; ++i) {
            if (thisVal == theValue[i]) {
              newVal = true;
            }
          }
          if (newVal !== oldVal) {
            changed = true;
            $(this).prop("selected", newVal);
          }
        });
      if (changed) {
        $(elem).trigger("change");
      }
    }
  } else {
    if ($(elem).val() != theValue) {
      $(elem).val(theValue);
      $(elem).trigger("change");
    }
  }
}
var daSetField = setField;
function val(fieldName) {
  var elem = daGetField(fieldName);
  if (elem == null) {
    return null;
  }
  if (
    $(elem).prop("tagName") == "DIV" &&
    $(elem).hasClass("da-field-group") &&
    $(elem).hasClass("da-field-radio")
  ) {
    elem = $(elem).find("input")[0];
  }
  if ($(elem).attr("type") == "checkbox") {
    if ($(elem).prop("checked")) {
      theVal = true;
    } else {
      theVal = false;
    }
  } else if ($(elem).attr("type") == "radio") {
    var fieldNameEscaped = $(elem)
      .attr("name")
      .replace(/(:|\.|\[|\]|,|=)/g, "\\$1");
    theVal = $("input[name='" + fieldNameEscaped + "']:checked").val();
    if (typeof theVal == "undefined") {
      theVal = null;
    } else {
      if ($(elem).hasClass("daobject")) {
        theVal = atou(theVal);
      } else if (theVal == "True") {
        theVal = true;
      } else if (theVal == "False") {
        theVal = false;
      }
    }
  } else if (
    $(elem).prop("tagName") == "DIV" &&
    $(elem).hasClass("da-field-group") &&
    $(elem).hasClass("da-field-checkboxes")
  ) {
    var cbSelected = [];
    $(elem)
      .find("input")
      .each(function () {
        if ($(this).attr("name").substr(0, 7) === "_ignore") {
          return;
        }
        var theVal = atou($(this).data("cbvalue"));
        if ($(elem).hasClass("daobject")) {
          theVal = atou(theVal);
        }
        if ($(this).prop("checked")) {
          cbSelected.push(theVal);
        }
      });
    return cbSelected;
  } else if (
    $(elem).prop("tagName") == "SELECT" &&
    $(elem).hasClass("damultiselect")
  ) {
    if (daVarLookupSelect[fieldName]) {
      var n = daVarLookupSelect[fieldName].length;
      for (var i = 0; i < n; ++i) {
        if (daVarLookupSelect[fieldName][i].select === elem) {
          return $(daVarLookupSelect[fieldName][i].option).prop("selected");
        }
      }
    } else {
      var selectedVals = [];
      $(elem)
        .find("option")
        .each(function () {
          if ($(this).prop("selected")) {
            if (daVarLookupOption[$(this).val()]) {
              selectedVals.push(daVarLookupOption[$(this).val()]);
            }
          }
        });
      return selectedVals;
    }
  } else if (
    $(elem).prop("tagName") == "SELECT" &&
    $(elem).hasClass("daobject")
  ) {
    theVal = atou($(elem).val());
  } else {
    theVal = $(elem).val();
  }
  return theVal;
}
var da_val = val;
function daFormAsJSON(elem) {
  var isInitial = false;
  var formData = $("#daform").serializeArray();
  var data = Object();
  if (elem == "initial") {
    elem = null;
    data["_initial"] = true;
  } else {
    data["_initial"] = false;
  }
  if (elem !== null && $(elem).hasClass("combobox")) {
    elem = $(elem).parent().find('input[type="hidden"]');
  }
  data["_changed"] = null;
  var n = formData.length;
  for (var i = 0; i < n; ++i) {
    var key = formData[i]["name"];
    var val = formData[i]["value"];
    if ($.inArray(key, daFieldsToSkip) != -1 || key.indexOf("_ignore") == 0) {
      continue;
    }
    var isChangedElem = false;
    if (elem !== null && key == $(elem).attr("name")) {
      isChangedElem = true;
    }
    if (typeof daVarLookupRev[key] != "undefined") {
      data[atou(daVarLookupRev[key])] = val;
      if (isChangedElem) {
        data["_changed"] = atou(daVarLookupRev[key]);
      }
    } else {
      data[atou(key)] = val;
      if (isChangedElem) {
        data["_changed"] = atou(key);
      }
    }
  }
  return JSON.stringify(data);
}
function daPreloadImage(url) {
  var img = new Image();
  img.src = url;
}
function daShowHelpTab() {
  $("#dahelptoggle").tab("show");
}
function addCsrfHeader(xhr, settings) {
  if (daJsEmbed && !/^(GET|HEAD|OPTIONS|TRACE)$/i.test(settings.type)) {
    xhr.setRequestHeader("X-CSRFToken", daCsrf);
  }
}
function flash(message, priority, clear) {
  if (priority == null) {
    priority = "info";
  }
  if (!$("#daflash").length) {
    $(daTargetDiv).append(daSprintf(daNotificationContainer, ""));
  }
  if (clear) {
    $("#daflash").empty();
  }
  if (message != null) {
    var newElement = $(daSprintf(daNotificationMessage, priority, message));
    $("#daflash").append(newElement);
    if (priority == "success") {
      setTimeout(function () {
        newElement.hide(300, function () {
          $(this).remove();
        });
      }, 3000);
    }
  }
}
var da_flash = flash;
function url_action(action, args) {
  if (args == null) {
    args = {};
  }
  data = { action: action, arguments: args };
  var url;
  if (daJsEmbed) {
    url =
      daPostURL + "&action=" + encodeURIComponent(utoa(JSON_stringify(data)));
  } else {
    if (daLocationBar.indexOf("?") !== -1) {
      url =
        daLocationBar +
        "&action=" +
        encodeURIComponent(utoa(JSON_stringify(data)));
    } else {
      url =
        daLocationBar +
        "?action=" +
        encodeURIComponent(utoa(JSON_stringify(data)));
    }
  }
  return url;
}
var da_url_action = url_action;
function action_call(
  action,
  args,
  callback,
  forgetPrior = false,
  readOnly = false,
) {
  if (args == null) {
    args = {};
  }
  if (forgetPrior) {
    args = { _action: action, _arguments: args };
    action = "_da_priority_action";
  }
  if (callback == null) {
    callback = function () {};
  }
  var data = { action: action, arguments: args };
  var url;
  if (daJsEmbed) {
    url = daPostURL;
  } else {
    url = daInterviewUrl;
  }
  return $.ajax({
    type: "POST",
    url: url,
    beforeSend: addCsrfHeader,
    xhrFields: {
      withCredentials: true,
    },
    data: $.param({
      _action: utoa(JSON_stringify(data)),
      _readonly: readOnly ? "1" : "0",
      csrf_token: daCsrf,
    }),
    success: callback,
    error: function (xhr, status, error) {
      setTimeout(function () {
        daProcessAjaxError(xhr, status, error);
      }, 0);
    },
  });
}
var da_action_call = action_call;
var url_action_call = action_call;
function action_perform(action, args, forgetPrior = false) {
  if (args == null) {
    args = {};
  }
  if (forgetPrior) {
    args = { _action: action, _arguments: args };
    action = "_da_priority_action";
  }
  var data = { action: action, arguments: args };
  daSpinnerTimeout = setTimeout(daShowSpinner, 1000);
  daRequestPending = true;
  return $.ajax({
    type: "POST",
    url: daInterviewUrl,
    beforeSend: addCsrfHeader,
    xhrFields: {
      withCredentials: true,
    },
    data: $.param({
      _action: utoa(JSON_stringify(data)),
      csrf_token: daCsrf,
      ajax: 1,
    }),
    success: function (data) {
      setTimeout(function () {
        daProcessAjax(data, $("#daform"), 1);
      }, 0);
    },
    error: function (xhr, status, error) {
      setTimeout(function () {
        daProcessAjaxError(xhr, status, error);
      }, 0);
    },
    dataType: "json",
  });
}
var da_action_perform = action_perform;
var url_action_perform = action_perform;
function action_perform_with_next(
  action,
  args,
  next_data,
  forgetPrior = false,
) {
  //console.log("action_perform_with_next: " + action + " | " + next_data)
  if (args == null) {
    args = {};
  }
  if (forgetPrior) {
    args = { _action: action, _arguments: args };
    action = "_da_priority_action";
  }
  var data = { action: action, arguments: args };
  daSpinnerTimeout = setTimeout(daShowSpinner, 1000);
  daRequestPending = true;
  return $.ajax({
    type: "POST",
    url: daInterviewUrl,
    beforeSend: addCsrfHeader,
    xhrFields: {
      withCredentials: true,
    },
    data: $.param({
      _action: utoa(JSON_stringify(data)),
      _next_action_to_set: utoa(JSON_stringify(next_data)),
      csrf_token: daCsrf,
      ajax: 1,
    }),
    success: function (data) {
      setTimeout(function () {
        daProcessAjax(data, $("#daform"), 1);
      }, 0);
    },
    error: function (xhr, status, error) {
      setTimeout(function () {
        daProcessAjaxError(xhr, status, error);
      }, 0);
    },
    dataType: "json",
  });
}
var da_action_perform_with_next = action_perform_with_next;
var url_action_perform_with_next = action_perform_with_next;
function get_interview_variables(callback) {
  if (callback == null) {
    callback = function () {};
  }
  return $.ajax({
    type: "GET",
    url: daGetVariablesUrl,
    success: callback,
    beforeSend: addCsrfHeader,
    xhrFields: {
      withCredentials: true,
    },
    error: function (xhr, status, error) {
      setTimeout(function () {
        daProcessAjaxError(xhr, status, error);
      }, 0);
    },
  });
}
var da_get_interview_variables = get_interview_variables;
function daInformAbout(subject, chatMessage) {
  if (subject in daInformed || (subject != "chatmessage" && !daIsUser)) {
    return;
  }
  if (daShowingHelp && subject != "chatmessage") {
    daInformed[subject] = 1;
    daInformedChanged = true;
    return;
  }
  if (daShowingHelp && subject == "chatmessage") {
    return;
  }
  var target;
  var message;
  var waitPeriod = 3000;
  if (subject == "chat") {
    target = "#daChatAvailable a";
    message = daLiveHelpMessage;
  } else if (subject == "chatmessage") {
    target = "#daChatAvailable a";
    message = chatMessage;
  } else if (subject == "phone") {
    target = "#daPhoneAvailable a";
    message = daLiveHelpMessagePhone;
  } else {
    return;
  }
  if (subject != "chatmessage") {
    daInformed[subject] = 1;
    daInformedChanged = true;
  }
  if (subject == "chatmessage") {
    $(target).popover({
      content: message,
      placement: "bottom",
      trigger: "manual",
      container: "body",
      title: daNewChatMessage,
    });
  } else {
    $(target).popover({
      content: message,
      placement: "bottom",
      trigger: "manual",
      container: "body",
      title: daLiveHelpAvailableMessage,
    });
  }
  $(target).popover("show");
  setTimeout(function () {
    $(target).popover("dispose");
    $(target).removeAttr("title");
  }, waitPeriod);
}
// function daCloseSocket(){
//   if (typeof daSocket !== 'undefined' && daSocket.connected){
//     //daSocket.emit('terminate');
//     //io.unwatch();
//   }
// }
function daPublishMessage(data) {
  var newDiv = document.createElement("li");
  $(newDiv).addClass("list-group-item");
  if (data.is_self) {
    $(newDiv).addClass("list-group-item-primary dalistright");
  } else {
    $(newDiv).addClass("list-group-item-secondary dalistleft");
  }
  //var newSpan = document.createElement('span');
  //$(newSpan).html(data.message);
  //$(newSpan).appendTo($(newDiv));
  //var newName = document.createElement('span');
  //$(newName).html(userNameString(data));
  //$(newName).appendTo($(newDiv));
  $(newDiv).html(data.message);
  $("#daCorrespondence").append(newDiv);
}
function daScrollChat() {
  var chatScroller = $("#daCorrespondence");
  if (chatScroller.length) {
    var height = chatScroller[0].scrollHeight;
    //console.log("Slow scrolling to " + height);
    if (height == 0) {
      daNotYetScrolled = true;
      return;
    }
    chatScroller.animate({ scrollTop: height }, 800);
  } else {
    console.log("daScrollChat: error");
  }
}
function daScrollChatFast() {
  var chatScroller = $("#daCorrespondence");
  if (chatScroller.length) {
    var height = chatScroller[0].scrollHeight;
    if (height == 0) {
      daNotYetScrolled = true;
      return;
    }
    //console.log("Scrolling to " + height + " where there are " + chatScroller[0].childElementCount + " children");
    chatScroller.scrollTop(height);
  } else {
    console.log("daScrollChatFast: error");
  }
}
function daSender() {
  //console.log("daSender");
  if ($("#daMessage").val().length) {
    daSocket.emit("chatmessage", {
      data: $("#daMessage").val(),
      i: daYamlFilename,
    });
    $("#daMessage").val("");
    $("#daMessage").focus();
  }
  return false;
}
function daShowControl(mode) {
  //console.log("You are now being controlled");
  if ($("body").hasClass("dacontrolled")) {
    return;
  }
  $('input[type="submit"], button[type="submit"]').prop("disabled", true);
  $("body").addClass("dacontrolled");
  var newDiv = document.createElement("div");
  $(newDiv).addClass(
    "datop-alert col-xs-10 col-sm-7 col-md-6 col-lg-5 dacol-centered",
  );
  $(newDiv).html(daScreenBeingControlled);
  $(newDiv).attr("id", "dacontrolAlert");
  $(newDiv).css("display", "none");
  $(newDiv).appendTo($(daTargetDiv));
  if (mode == "animated") {
    $(newDiv).slideDown();
  } else {
    $(newDiv).show();
  }
}
function daHideControl() {
  //console.log("You are no longer being controlled");
  if (!$("body").hasClass("dacontrolled")) {
    return;
  }
  $('input[type="submit"], button[type="submit"]').prop("disabled", false);
  $("body").removeClass("dacontrolled");
  $("#dacontrolAlert").html(daScreenNoLongerBeingControlled);
  setTimeout(function () {
    $("#dacontrolAlert").slideUp(300, function () {
      $("#dacontrolAlert").remove();
    });
  }, 2000);
}
function daInitializeSocket() {
  if (daSocket != null) {
    if (daSocket.connected) {
      //console.log("Calling connectagain");
      if (daChatStatus == "ready") {
        daSocket.emit("connectagain", { i: daYamlFilename });
      }
      if (daBeingControlled) {
        daShowControl("animated");
        daSocket.emit("start_being_controlled", { i: daYamlFilename });
      }
    } else {
      //console.log('daInitializeSocket: daSocket.connect()');
      daSocket.connect();
    }
    return;
  }
  if (location.protocol === "http:" || document.location.protocol === "http:") {
    daSocket = io.connect("http://" + document.domain + "/wsinterview", {
      path: daPathRoot + "ws/socket.io",
      query: "i=" + daYamlFilename,
    });
  }
  if (
    location.protocol === "https:" ||
    document.location.protocol === "https:"
  ) {
    daSocket = io.connect("https://" + document.domain + "/wsinterview", {
      path: daPathRoot + "ws/socket.io",
      query: "i=" + daYamlFilename,
    });
  }
  //console.log("daInitializeSocket: socket is " + daSocket);
  if (daSocket != null) {
    daSocket.on("connect", function () {
      if (daSocket == null) {
        console.log("Error: socket is null");
        return;
      }
      //console.log("Connected socket with sid " + daSocket.id);
      if (daChatStatus == "ready") {
        daChatStatus = "on";
        daDisplayChat();
        daPushChanges();
        //daTurnOnChat();
        //console.log("Emitting chat_log from on connect");
        daSocket.emit("chat_log", { i: daYamlFilename });
      }
      if (daBeingControlled) {
        daShowControl("animated");
        daSocket.emit("start_being_controlled", { i: daYamlFilename });
      }
    });
    daSocket.on("chat_log", function (arg) {
      //console.log("Got chat_log");
      $("#daCorrespondence").html("");
      daChatHistory = [];
      var messages = arg.data;
      for (var i = 0; i < messages.length; ++i) {
        daChatHistory.push(messages[i]);
        daPublishMessage(messages[i]);
      }
      daScrollChatFast();
    });
    daSocket.on("chatready", function (data) {
      //var key = 'da:session:uid:' + data.uid + ':i:' + data.i + ':userid:' + data.userid
      //console.log('chatready');
    });
    daSocket.on("terminate", function () {
      //console.log("interview: terminating socket");
      daSocket.disconnect();
    });
    daSocket.on("controllerstart", function () {
      daBeingControlled = true;
      daShowControl("animated");
    });
    daSocket.on("controllerexit", function () {
      daBeingControlled = false;
      //console.log("Hiding control 2");
      daHideControl();
      if (daChatStatus != "on") {
        if (daSocket != null && daSocket.connected) {
          //console.log('Terminating interview socket because control over');
          daSocket.emit("terminate");
        }
      }
    });
    daSocket.on("disconnect", function () {
      //console.log("Manual disconnect");
      //daSocket.emit('manual_disconnect', {i: daYamlFilename});
      //console.log("Disconnected socket");
      //daSocket = null;
    });
    daSocket.on("reconnected", function () {
      //console.log("Reconnected");
      daChatStatus = "on";
      daDisplayChat();
      daPushChanges();
      daTurnOnChat();
      //console.log("Emitting chat_log from reconnected");
      daSocket.emit("chat_log", { i: daYamlFilename });
    });
    daSocket.on("mymessage", function (arg) {
      //console.log("Received " + arg.data);
      $("#daPushResult").html(arg.data);
    });
    daSocket.on("departure", function (arg) {
      //console.log("Departure " + arg.numpartners);
      if (arg.numpartners == 0) {
        daCloseChat();
      }
    });
    daSocket.on("chatmessage", function (arg) {
      //console.log("Received chat message " + arg.data);
      daChatHistory.push(arg.data);
      daPublishMessage(arg.data);
      daScrollChat();
      daInformAbout("chatmessage", arg.data.message);
    });
    daSocket.on("newpage", function (incoming) {
      //console.log("newpage received");
      var data = incoming.obj;
      daProcessAjax(data, $("#daform"), 1);
    });
    daSocket.on("controllerchanges", function (data) {
      //console.log("controllerchanges: " + data.parameters);
      var valArray = Object();
      var values = JSON.parse(data.parameters);
      for (var i = 0; i < values.length; i++) {
        valArray[values[i].name] = values[i].value;
      }
      //console.log("valArray is " + JSON.stringify(valArray));
      $("#daform").each(function () {
        $(this)
          .find(":input")
          .each(function () {
            var type = $(this).attr("type");
            var id = $(this).attr("id");
            var name = $(this).attr("name");
            if (type == "checkbox") {
              if (name in valArray) {
                if (valArray[name] == "True") {
                  if ($(this).prop("checked") != true) {
                    $(this).prop("checked", true);
                    $(this).trigger("change");
                  }
                } else {
                  if ($(this).prop("checked") != false) {
                    $(this).prop("checked", false);
                    $(this).trigger("change");
                  }
                }
              } else {
                if ($(this).prop("checked") != false) {
                  $(this).prop("checked", false);
                  $(this).trigger("change");
                }
              }
            } else if (type == "radio") {
              if (name in valArray) {
                if (valArray[name] == $(this).val()) {
                  if ($(this).prop("checked") != true) {
                    $(this).prop("checked", true);
                    $(this).trigger("change");
                  }
                } else {
                  if ($(this).prop("checked") != false) {
                    $(this).prop("checked", false);
                    $(this).trigger("change");
                  }
                }
              }
            } else if ($(this).data().hasOwnProperty("sliderMax")) {
              $(this).slider("setValue", parseInt(valArray[name]));
            } else {
              if (name in valArray) {
                $(this).val(valArray[name]);
              }
            }
          });
      });
      if (data.clicked) {
        //console.log("Need to click " + data.clicked);
        $(data.clicked).prop("disabled", false);
        $(data.clicked).addClass("da-click-selected");
        if (
          $(data.clicked).prop("tagName") == "A" &&
          typeof $(data.clicked).attr("href") != "undefined" &&
          ($(data.clicked).attr("href").indexOf("javascript") == 0 ||
            $(data.clicked).attr("href").indexOf("#") == 0)
        ) {
          setTimeout(function () {
            $(data.clicked).removeClass("da-click-selected");
          }, 2200);
        }
        setTimeout(function () {
          //console.log("Clicking it now");
          $(data.clicked).click();
          //console.log("Clicked it.");
        }, 200);
      }
    });
  }
}
function daUnfakeHtmlResponse(text) {
  text = text.substr(text.indexOf("ABCDABOUNDARYSTARTABC") + 21);
  text = text.substr(0, text.indexOf("ABCDABOUNDARYENDABC")).replace(/\s/g, "");
  text = atou(text);
  return text;
}
function daInjectTrim(handler) {
  return function (element, event) {
    if (
      element.tagName === "TEXTAREA" ||
      (element.tagName === "INPUT" &&
        element.type !== "password" &&
        element.type !== "date" &&
        element.type !== "datetime" &&
        element.type !== "file")
    ) {
      setTimeout(function () {
        element.value = $.trim(element.value);
      }, 10);
    }
    return handler.call(this, element, event);
  };
}
function daInvalidHandler(form, validator) {
  var errors = validator.numberOfInvalids();
  var scrollTarget = null;
  if (
    errors &&
    $(validator.errorList[0].element).parents(".da-form-group").length > 0
  ) {
    if (daJsEmbed) {
      scrollTarget =
        $(validator.errorList[0].element)
          .parents(".da-form-group")
          .first()
          .position().top - 60;
    } else {
      scrollTarget =
        $(validator.errorList[0].element)
          .parents(".da-form-group")
          .first()
          .offset().top - 60;
    }
  }
  if (scrollTarget != null) {
    if (daJsEmbed) {
      $(daTargetDiv).animate(
        {
          scrollTop: scrollTarget,
        },
        1000,
      );
    } else {
      $("html, body").animate(
        {
          scrollTop: scrollTarget,
        },
        1000,
      );
    }
  }
}
var daValidator;
var daValidationRules = {};
function daValidationHandler(form) {
  if (daObserverMode) {
    return;
  }
  //form.submit();
  //console.log("daValidationHandler");
  var visibleElements = [];
  var seen = Object();
  $(form)
    .find("input, select, textarea")
    .filter(":not(:disabled)")
    .each(function () {
      //console.log("Considering an element");
      if (
        $(this).attr("name") &&
        $(this).attr("type") != "hidden" &&
        (($(this).hasClass("da-active-invisible") &&
          $(this).parent().is(":visible")) ||
          $(this).is(":visible"))
      ) {
        var theName = $(this).attr("name");
        //console.log("Including an element " + theName);
        if (!seen.hasOwnProperty(theName)) {
          visibleElements.push(theName);
          seen[theName] = 1;
        }
      }
    });
  $(form)
    .find("input[name='_visible']")
    .val(utoa(JSON_stringify(visibleElements)));
  $(form).each(function () {
    $(this).find(":input").off("change", daOnChange);
  });
  $("meta[name=viewport]").attr(
    "content",
    "width=device-width, minimum-scale=1.0, maximum-scale=1.0, initial-scale=1.0",
  );
  if (daCheckinInterval != null) {
    clearInterval(daCheckinInterval);
  }
  daDisable = setTimeout(function () {
    $(form).find('input[type="submit"]').prop("disabled", true);
    $(form).find('button[type="submit"]').prop("disabled", true);
  }, 1);
  if (daWhichButton != null) {
    $(".da-field-buttons .btn-da").each(function () {
      if (this != daWhichButton) {
        $(this).removeClass(daAllButtonClasses);
        $(this).addClass(daButtonStyle + "light");
      }
    });
    if ($(daWhichButton).hasClass(daButtonStyle + "success")) {
      $(daWhichButton).removeClass(daButtonStyle + "success");
      $(daWhichButton).addClass(daButtonStyle + "primary");
    } else {
      $(daWhichButton).removeClass(
        daButtonStyle +
          "primary " +
          daButtonStyle +
          "info " +
          daButtonStyle +
          "warning " +
          daButtonStyle +
          "danger " +
          daButtonStyle +
          "success " +
          daButtonStyle +
          "light",
      );
      $(daWhichButton).addClass(daButtonStyle + "secondary");
    }
  }
  var tableOrder = {};
  var tableOrderChanges = {};
  $("a.datableup").each(function () {
    var tableName = $(this).data("tablename");
    if (!tableOrder.hasOwnProperty(tableName)) {
      tableOrder[tableName] = [];
    }
    tableOrder[tableName].push(parseInt($(this).data("tableitem")));
  });
  var tableChanged = false;
  for (var tableName in tableOrder) {
    if (tableOrder.hasOwnProperty(tableName)) {
      var n = tableOrder[tableName].length;
      for (var i = 0; i < n; ++i) {
        if (i != tableOrder[tableName][i]) {
          tableChanged = true;
          if (!tableOrderChanges.hasOwnProperty(tableName)) {
            tableOrderChanges[tableName] = [];
          }
          tableOrderChanges[tableName].push([tableOrder[tableName][i], i]);
        }
      }
    }
  }
  if (tableChanged) {
    $("<input>")
      .attr({
        type: "hidden",
        name: "_order_changes",
        value: JSON.stringify(tableOrderChanges),
      })
      .appendTo($(form));
  }
  var collectToDelete = [];
  $(".dacollectunremove:visible").each(function () {
    collectToDelete.push(
      parseInt($(this).parent().parent().data("collectnum")),
    );
  });
  var lastOk = parseInt(
    $(".dacollectremove:visible, .dacollectremoveexisting:visible")
      .last()
      .parent()
      .parent()
      .data("collectnum"),
  );
  $(".dacollectremove, .dacollectremoveexisting").each(function () {
    if (parseInt($(this).parent().parent().data("collectnum")) > lastOk) {
      collectToDelete.push(
        parseInt($(this).parent().parent().data("collectnum")),
      );
    }
  });
  if (collectToDelete.length > 0) {
    $("<input>")
      .attr({
        type: "hidden",
        name: "_collect_delete",
        value: JSON.stringify(collectToDelete),
      })
      .appendTo($(form));
  }
  $("select.damultiselect:not(:disabled)").each(function () {
    var showifParents = $(this).parents(".dajsshowif,.dashowif");
    if (
      showifParents.length == 0 ||
      $(showifParents[0]).data("isVisible") == "1"
    ) {
      $(this)
        .find("option")
        .each(function () {
          $("<input>")
            .attr({
              type: "hidden",
              name: $(this).val(),
              value: $(this).prop("selected") ? "True" : "False",
            })
            .appendTo($(form));
        });
    }
    $(this).prop("disabled", true);
  });
  daWhichButton = null;
  if (
    daSubmitter != null &&
    daSubmitter.name &&
    $('input[name="' + daSubmitter.name + '"]').length == 0
  ) {
    $("<input>")
      .attr({
        type: "hidden",
        name: daSubmitter.name,
        value: daSubmitter.value,
      })
      .appendTo($(form));
  }
  if (daInformedChanged) {
    $("<input>")
      .attr({
        type: "hidden",
        name: "informed",
        value: Object.keys(daInformed).join(","),
      })
      .appendTo($(form));
  }
  $("<input>")
    .attr({
      type: "hidden",
      name: "ajax",
      value: "1",
    })
    .appendTo($(form));
  daSpinnerTimeout = setTimeout(daShowSpinner, 1000);
  var do_iframe_upload = false;
  inline_succeeded = false;
  if ($('input[name="_files"]').length) {
    var filesToRead = 0;
    var filesRead = 0;
    var newFileList = Array();
    var nullFileList = Array();
    var fileArray = { keys: Array(), values: Object() };
    var file_list = JSON.parse(atou($('input[name="_files"]').val()));
    var inline_file_list = Array();
    var namesWithImages = Object();
    for (var i = 0; i < file_list.length; i++) {
      var the_file_input = $(
        "#" + file_list[i].replace(/(:|\.|\[|\]|,|=|\/|\")/g, "\\$1"),
      )[0];
      var the_max_size = $(the_file_input).data("maximagesize");
      var the_image_type = $(the_file_input).data("imagetype");
      var hasImages = false;
      if (
        typeof the_max_size != "undefined" ||
        typeof the_image_type != "undefined"
      ) {
        for (var j = 0; j < the_file_input.files.length; j++) {
          var the_file = the_file_input.files[j];
          if (the_file.type.match(/image.*/)) {
            hasImages = true;
          }
        }
      }
      if (hasImages || (daJsEmbed && the_file_input.files.length > 0)) {
        for (var j = 0; j < the_file_input.files.length; j++) {
          var the_file = the_file_input.files[j];
          filesToRead++;
        }
        inline_file_list.push(file_list[i]);
      } else if (the_file_input.files.length > 0) {
        newFileList.push(file_list[i]);
      } else {
        nullFileList.push(file_list[i]);
      }
      namesWithImages[file_list[i]] = hasImages;
    }
    if (inline_file_list.length > 0) {
      var originalFileList = atou($('input[name="_files"]').val());
      if (newFileList.length == 0 && nullFileList.length == 0) {
        $('input[name="_files"]').remove();
      } else {
        $('input[name="_files"]').val(
          utoa(JSON_stringify(newFileList.concat(nullFileList))),
        );
      }
      for (var i = 0; i < inline_file_list.length; i++) {
        fileArray.keys.push(inline_file_list[i]);
        fileArray.values[inline_file_list[i]] = Array();
        var fileInfoList = fileArray.values[inline_file_list[i]];
        var file_input = $(
          "#" + inline_file_list[i].replace(/(:|\.|\[|\]|,|=|\/|\")/g, "\\$1"),
        )[0];
        var max_size;
        var image_type;
        var image_mime_type;
        var this_has_images = false;
        if (namesWithImages[inline_file_list[i]]) {
          this_has_images = true;
          max_size = parseInt($(file_input).data("maximagesize"));
          image_type = $(file_input).data("imagetype");
          image_mime_type = null;
          if (image_type) {
            if (image_type == "png") {
              image_mime_type = "image/png";
            } else if (image_type == "bmp") {
              image_mime_type = "image/bmp";
            } else {
              image_mime_type = "image/jpeg";
              image_type = "jpg";
            }
          }
        }
        for (var j = 0; j < file_input.files.length; j++) {
          var a_file = file_input.files[j];
          var tempFunc = function (the_file, max_size, has_images) {
            var reader = new FileReader();
            var thisFileInfo = {
              name: the_file.name,
              size: the_file.size,
              type: the_file.type,
            };
            fileInfoList.push(thisFileInfo);
            reader.onload = function (readerEvent) {
              if (
                has_images &&
                the_file.type.match(/image.*/) &&
                !(the_file.type.indexOf("image/svg") == 0)
              ) {
                var convertedName = the_file.name;
                var convertedType = the_file.type;
                if (image_type) {
                  var pos = the_file.name.lastIndexOf(".");
                  convertedName =
                    the_file.name.substr(
                      0,
                      pos < 0 ? the_file.name.length : pos,
                    ) +
                    "." +
                    image_type;
                  convertedType = image_mime_type;
                  thisFileInfo.name = convertedName;
                  thisFileInfo.type = convertedType;
                }
                var image = new Image();
                image.onload = function (imageEvent) {
                  var canvas = document.createElement("canvas"),
                    width = image.width,
                    height = image.height;
                  if (width > height) {
                    if (width > max_size) {
                      height *= max_size / width;
                      width = max_size;
                    }
                  } else {
                    if (height > max_size) {
                      width *= max_size / height;
                      height = max_size;
                    }
                  }
                  canvas.width = width;
                  canvas.height = height;
                  canvas.getContext("2d").drawImage(image, 0, 0, width, height);
                  thisFileInfo["content"] = canvas.toDataURL(convertedType);
                  filesRead++;
                  if (filesRead >= filesToRead) {
                    daResumeUploadSubmission(
                      form,
                      fileArray,
                      inline_file_list,
                      newFileList,
                    );
                  }
                };
                image.src = reader.result;
              } else {
                thisFileInfo["content"] = reader.result;
                filesRead++;
                if (filesRead >= filesToRead) {
                  daResumeUploadSubmission(
                    form,
                    fileArray,
                    inline_file_list,
                    newFileList,
                  );
                }
              }
            };
            reader.readAsDataURL(the_file);
          };
          tempFunc(a_file, max_size, this_has_images);
          inline_succeeded = true;
        }
      }
    }
    if (newFileList.length == 0) {
      //$('input[name="_files"]').remove();
    } else {
      do_iframe_upload = true;
    }
  }
  if (inline_succeeded) {
    return false;
  }
  if (do_iframe_upload) {
    $("#dauploadiframe").remove();
    var iframe = $(
      '<iframe name="dauploadiframe" id="dauploadiframe" style="display: none"></iframe>',
    );
    $(daTargetDiv).append(iframe);
    $(form).attr("target", "dauploadiframe");
    iframe.bind("load", function () {
      setTimeout(function () {
        try {
          daProcessAjax(
            $.parseJSON(
              daUnfakeHtmlResponse($("#dauploadiframe").contents().text()),
            ),
            form,
            1,
          );
        } catch (e) {
          try {
            daProcessAjax(
              $.parseJSON($("#dauploadiframe").contents().text()),
              form,
              1,
            );
          } catch (f) {
            daShowErrorScreen(
              document.getElementById("dauploadiframe").contentWindow.document
                .body.innerHTML,
              f,
            );
          }
        }
      }, 0);
    });
    form.submit();
  } else {
    daRequestPending = true;
    $.ajax({
      type: "POST",
      url: daInterviewUrl,
      data: $(form).serialize(),
      beforeSend: addCsrfHeader,
      xhrFields: {
        withCredentials: true,
      },
      success: function (data) {
        setTimeout(function () {
          daProcessAjax(data, form, 1);
        }, 0);
      },
      error: function (xhr, status, error) {
        setTimeout(function () {
          daProcessAjaxError(xhr, status, error);
        }, 0);
      },
    });
  }
  return false;
}
function daSetupValidation(rules, messages) {
  daValidationRules = rules;
  daValidationRules.submitHandler = daValidationHandler;
  daValidationRules.invalidHandler = daInvalidHandler;
  daValidationRules.onfocusout = daInjectTrim($.validator.defaults.onfocusout);
  if ($("#daform").length > 0) {
    daValidator = $("#daform").validate(daValidationRules);
    if (Object.keys(messages).length > 0) {
      daValidator.showErrors(messages);
    }
  }
}
function daRecordLocation() {
  if (document.getElementById("da_track_location") == null) {
    return;
  }
  if (navigator.geolocation) {
    document.getElementById("da_track_location").value = JSON.stringify({
      error: "getCurrentPosition was still running",
    });
    navigator.geolocation.getCurrentPosition(daSetPosition, daShowError, {
      timeout: 1000,
      maximumAge: 3600000,
    });
  } else {
    document.getElementById("da_track_location").value = JSON.stringify({
      error: "navigator.geolocation not available in browser",
    });
  }
}
function daSignatureSubmit(event) {
  $(this).find("input[name='ajax']").val(1);
  daRequestPending = true;
  $.ajax({
    type: "POST",
    url: daInterviewUrl,
    data: $(this).serialize(),
    beforeSend: addCsrfHeader,
    xhrFields: {
      withCredentials: true,
    },
    success: function (data) {
      setTimeout(function () {
        daProcessAjax(data, $(this), 1);
      }, 0);
    },
    error: function (xhr, status, error) {
      setTimeout(function () {
        daProcessAjaxError(xhr, status, error);
      }, 0);
    },
  });
  event.preventDefault();
  event.stopPropagation();
  return false;
}
function JSON_stringify(s) {
  var json = JSON.stringify(s);
  return json.replace(/[\u007f-\uffff]/g, function (c) {
    return "\\u" + ("0000" + c.charCodeAt(0).toString(16)).slice(-4);
  });
}
function daResumeUploadSubmission(
  form,
  fileArray,
  inline_file_list,
  newFileList,
) {
  $("<input>")
    .attr({
      type: "hidden",
      name: "_files_inline",
      value: utoa(JSON_stringify(fileArray)),
    })
    .appendTo($(form));
  for (var i = 0; i < inline_file_list.length; ++i) {
    document.getElementById(inline_file_list[i]).disabled = true;
  }
  if (newFileList.length > 0) {
    $("#dauploadiframe").remove();
    var iframe = $(
      '<iframe name="dauploadiframe" id="dauploadiframe" style="display: none"></iframe>',
    );
    $(daTargetDiv).append(iframe);
    $(form).attr("target", "dauploadiframe");
    iframe.bind("load", function () {
      setTimeout(function () {
        daProcessAjax(
          $.parseJSON($("#dauploadiframe").contents().text()),
          form,
          1,
        );
      }, 0);
    });
    form.submit();
  } else {
    daRequestPending = true;
    $.ajax({
      type: "POST",
      url: daInterviewUrl,
      data: $(form).serialize(),
      beforeSend: addCsrfHeader,
      xhrFields: {
        withCredentials: true,
      },
      success: function (data) {
        setTimeout(function () {
          daProcessAjax(data, form, 1);
        }, 0);
      },
      error: function (xhr, status, error) {
        setTimeout(function () {
          daProcessAjaxError(xhr, status, error);
        }, 0);
      },
    });
  }
}
function daOnChange() {
  if (daObserverMode) {
    return;
  }
  if (daCheckinSeconds == 0 || daShowIfInProcess) {
    return true;
  }
  if (daCheckinInterval != null) {
    clearInterval(daCheckinInterval);
  }
  var oThis = this;
  daCheckin(oThis);
  daCheckinInterval = setInterval(daCheckin, daCheckinSeconds);
  return true;
}
function daPushChanges() {
  //console.log("daPushChanges");
  if (daObserverMode) {
    if (daObserverChangesInterval != null) {
      clearInterval(daObserverChangesInterval);
    }
    if (!daSendChanges || !daConnected) {
      return;
    }
    daObserverChangesInterval = setInterval(daPushChanges, daCheckinSeconds);
    daSocket.emit("observerChanges", {
      uid: daUid,
      i: daYamlFilename,
      userid: daUserObserved,
      parameters: JSON.stringify($("#daform").serializeArray()),
    });
    return;
  }
  if (daCheckinSeconds == 0 || daShowIfInProcess) {
    return true;
  }
  if (daCheckinInterval != null) {
    clearInterval(daCheckinInterval);
  }
  daCheckin(null);
  daCheckinInterval = setInterval(daCheckin, daCheckinSeconds);
  return true;
}
function daProcessAjaxError(xhr, status, error) {
  daRequestPending = false;
  if (
    xhr.responseType == undefined ||
    xhr.responseType == "" ||
    xhr.responseType == "text"
  ) {
    var theHtml = xhr.responseText;
    if (theHtml == undefined) {
      $(daTargetDiv).html("error");
    } else {
      var newDiv = document.createElement("div");
      $(newDiv).html(theHtml);
      var daDivs = $(newDiv).children("div");
      if (daDivs.length > 0) {
        $(daTargetDiv).empty();
        for (var i = 0; i < daDivs.length; i++) {
          $(daTargetDiv).append(daDivs[i]);
        }
        var otherScripts = $(newDiv).children("script");
        if (otherScripts.length > 0) {
          for (var i = 0; i < otherScripts.length; i++) {
            var theHtml = $(otherScripts[i]).html();
            if (theHtml.startsWith("Object.assign")) {
              eval(theHtml);
            }
          }
        }
        if (daErrorScript) {
          var errorScriptDiv = document.createElement("div");
          $(errorScriptDiv).html(daErrorScript);
          var daScripts = $(errorScriptDiv).find("script");
          if (daScripts.length > 0) {
            for (var i = 0; i < daScripts.length; i++) {
              var theHtml = $(daScripts[i]).html();
              if (theHtml) {
                eval(theHtml);
              } else {
                var scriptElement = document.createElement("script");
                scriptElement.src = $(daScripts[i]).attr("src");
                document.body.appendChild(scriptElement);
              }
            }
          }
          delete errorScriptDiv;
        }
        $("#da-retry").on("click", function (e) {
          location.reload();
          e.preventDefault();
          return false;
        });
        daShowNotifications();
        $(document).trigger("daPageError");
      } else {
        $(daTargetDiv).html(theHtml);
      }
      delete newDiv;
    }
    if (daJsEmbed) {
      $(daTargetDiv)[0].scrollTo(0, 1);
    } else {
      window.scrollTo(0, 1);
    }
  } else {
    console.log("daProcessAjaxError: response was not text");
  }
}
function daAddScriptToHead(src) {
  var head = document.getElementsByTagName("head")[0];
  var script = document.createElement("script");
  script.src = src;
  script.async = true;
  script.defer = true;
  head.appendChild(script);
}
$(document).on("keydown", function (e) {
  if (e.which == 13) {
    if (daShowingHelp == 0) {
      var tag = $(document.activeElement).prop("tagName");
      if (
        tag != "INPUT" &&
        tag != "TEXTAREA" &&
        tag != "A" &&
        tag != "LABEL" &&
        tag != "BUTTON"
      ) {
        e.preventDefault();
        e.stopPropagation();
        if (
          $("#daform .da-field-buttons button").not(".danonsubmit").length == 1
        ) {
          $("#daform .da-field-buttons button").not(".danonsubmit").click();
        }
        return false;
      }
    }
    if ($(document.activeElement).hasClass("btn-file")) {
      e.preventDefault();
      e.stopPropagation();
      $(document.activeElement).find("input").click();
      return false;
    }
  }
});
function daShowErrorScreen(data, error) {
  console.log("daShowErrorScreen: " + error);
  if ("activeElement" in document) {
    document.activeElement.blur();
  }
  $(daTargetDiv).html(data);
}
function daEvalExtraScript(info) {
  switch (info.type) {
    case "custom":
      daGlobalEval(info.script);
      break;
    case "listeners":
      daAddListenersFor(info.element);
      break;
    case "enable_tracking":
      daTrackingEnabled = true;
      break;
    case "autocomplete":
      daInitAutocomplete(info.info);
      break;
    case "autocomplete_old":
      daInitAutocompleteOld(info.info);
      break;
    case "map":
      daInitMap(info.maps);
      break;
    case "validation":
      daSetupValidation(info.rules, info.messages);
      break;
    case "slider":
      $("#" + info.id).slider({ tooltip: "always", enabled: info.enabled });
      break;
    case "signature":
      daInitializeSignature(info.color, info.default);
      break;
    case "wait":
      daWaitPage = true;
      if (daInitialCheckinTimeout != null) {
        clearTimeout(daInitialCheckinTimeout);
      }
      if (daCheckinInterval != null) {
        clearInterval(daCheckinInterval);
      }
      if (daSpinnerTimeout == null && !daShowingSpinner) {
        daShowSpinner();
      }
      setTimeout(daRefreshSubmit, (info.sleep || 4) * 1000);
      break;
  }
}
function daProcessAjax(data, form, doScroll, actionURL) {
  daRequestPending = false;
  daInformedChanged = false;
  if (daDisable != null) {
    clearTimeout(daDisable);
  }
  daCsrf = data.csrf_token;
  if (data.question_data) {
    daQuestionData = data.question_data;
  }
  if (data.action == "body") {
    daWaitPage = false;
    if (daShouldForceFullScreen) {
      daForceFullScreen(data);
    }
    if ("activeElement" in document) {
      document.activeElement.blur();
    }
    $(daTargetDiv).html("");
    if (daJsEmbed) {
      $(daTargetDiv)[0].scrollTo(0, 1);
    } else {
      window.scrollTo(0, 1);
    }
    $(daTargetDiv).html(data.body);
    $(daTargetDiv).parent().removeClass();
    $(daTargetDiv).parent().addClass(data.bodyclass);
    $("meta[name=viewport]").attr(
      "content",
      "width=device-width, initial-scale=1",
    );
    daDoAction = data.do_action;
    //daNextAction = data.next_action;
    daChatAvailable = data.livehelp.availability;
    daChatMode = data.livehelp.mode;
    daChatRoles = data.livehelp.roles;
    daChatPartnerRoles = data.livehelp.partner_roles;
    daSteps = data.steps;
    //console.log("daProcessAjax: pushing " + daSteps);
    if (!daJsEmbed && !daIframeEmbed) {
      if (history.state != null && daSteps > history.state.steps) {
        history.pushState(
          { steps: daSteps },
          data.browser_title + " - page " + daSteps,
          daLocationBar + daPageSep + daSteps,
        );
      } else {
        history.replaceState(
          { steps: daSteps },
          "",
          daLocationBar + daPageSep + daSteps,
        );
      }
    }
    daAllowGoingBack = data.allow_going_back;
    daQuestionID = data.id_dict;
    daMessageLog = data.message_log;
    daInitialize(doScroll);
    //var tempDiv = document.createElement("div");
    //tempDiv.innerHTML = data.extra_scripts;
    //var scripts = tempDiv.getElementsByTagName("script");
    //for (var i = 0; i < scripts.length; i++) {
    for (var i = 0; i < data.extra_scripts.length; i++) {
      //console.log("Found one script");
      //if (script[i].src != "") {
      //console.log("Added script to head");
      //daAddScriptToHead(scripts[i].src);
      //} else {
      //daGlobalEval(scripts[i].innerHTML);
      //}
      daEvalExtraScript(data.extra_scripts[i]);
    }
    $(".da-group-has-error").each(function () {
      if ($(this).is(":visible")) {
        if (daJsEmbed) {
          var scrollToTarget = $(this).position().top - 60;
          setTimeout(function () {
            $(daTargetDiv).animate({ scrollTop: scrollToTarget }, 1000);
          }, 100);
        } else {
          var scrollToTarget = $(this).offset().top - 60;
          setTimeout(function () {
            $(daTargetDiv)
              .parent()
              .parent()
              .animate({ scrollTop: scrollToTarget }, 1000);
          }, 100);
        }
        return false;
      }
    });
    for (var i = 0; i < data.extra_css.length; i++) {
      $("head").append(data.extra_css[i]);
    }
    document.title = data.browser_title;
    if ($("html").attr("lang") != data.lang) {
      $("html").attr("lang", data.lang);
    }
    if (daTrackingEnabled) {
      daRecordLocation();
    }
    $(document).trigger("daPageLoad");
    if (daReloader != null) {
      clearTimeout(daReloader);
    }
    if (data.reload_after != null && data.reload_after > 0) {
      //daReloader = setTimeout(function(){location.reload();}, data.reload_after);
      daReloader = setTimeout(function () {
        daRefreshSubmit();
      }, data.reload_after);
    }
    daUpdateHeight();
  } else if (data.action == "redirect") {
    if (daSpinnerTimeout != null) {
      clearTimeout(daSpinnerTimeout);
      daSpinnerTimeout = null;
    }
    if (daShowingSpinner) {
      daHideSpinner();
    }
    window.location = data.url;
  } else if (data.action == "refresh") {
    daRefreshSubmit();
  } else if (data.action == "reload") {
    location.reload(true);
  } else if (data.action == "resubmit") {
    if (form == null) {
      window.location = actionURL;
    }
    $("input[name='ajax']").remove();
    if (
      daSubmitter != null &&
      daSubmitter.name &&
      $('input[name="' + daSubmitter.name + '"]').length == 0
    ) {
      var input = $("<input>")
        .attr("type", "hidden")
        .attr("name", daSubmitter.name)
        .val(daSubmitter.value);
      $(form).append($(input));
    }
    form.submit();
  } else if (data.action == "wait") {
    if (daSpinnerTimeout == null && !daShowingSpinner) {
      daShowSpinner();
    }
    setTimeout(daRefreshSubmit, (data.sleep || 4) * 1000);
  }
}
function daEmbeddedJs(e) {
  //console.log("using embedded js");
  var data = decodeURIComponent($(this).data("js"));
  daGlobalEval(data);
  e.preventDefault();
  return false;
}
function daEmbeddedAction(e) {
  if (daRequestPending) {
    e.preventDefault();
    $(this).blur();
    return false;
  }
  if ($(this).hasClass("daremovebutton")) {
    if (confirm(daAreYouSure)) {
      return true;
    }
    e.preventDefault();
    $(this).blur();
    return false;
  }
  var actionData = decodeURIComponent($(this).data("embaction"));
  var theURL = $(this).attr("href");
  daRequestPending = true;
  $.ajax({
    type: "POST",
    url: daInterviewUrl,
    data: $.param({ _action: actionData, csrf_token: daCsrf, ajax: 1 }),
    beforeSend: addCsrfHeader,
    xhrFields: {
      withCredentials: true,
    },
    success: function (data) {
      setTimeout(function () {
        daProcessAjax(data, null, 1, theURL);
      }, 0);
    },
    error: function (xhr, status, error) {
      setTimeout(function () {
        daProcessAjaxError(xhr, status, error);
      }, 0);
    },
    dataType: "json",
  });
  daSpinnerTimeout = setTimeout(daShowSpinner, 1000);
  e.preventDefault();
  return false;
}
function daReviewAction(e) {
  if (daRequestPending) {
    e.preventDefault();
    $(this).blur();
    return false;
  }
  //action_perform_with_next($(this).data('action'), null, daNextAction);
  var info = $.parseJSON(atou($(this).data("action")));
  da_action_perform(info["action"], info["arguments"]);
  e.preventDefault();
  return false;
}
function daRingChat() {
  daChatStatus = "ringing";
  daPushChanges();
}
function daTurnOnChat() {
  //console.log("Publishing from daTurnOnChat");
  $("#daChatOnButton").addClass("dainvisible");
  $("#daChatBox").removeClass("dainvisible");
  $("#daCorrespondence").html("");
  for (var i = 0; i < daChatHistory.length; i++) {
    daPublishMessage(daChatHistory[i]);
  }
  daScrollChatFast();
  $("#daMessage").prop("disabled", false);
  if (daShowingHelp) {
    $("#daMessage").focus();
  }
}
function daCloseChat() {
  //console.log('daCloseChat');
  daChatStatus = "hangup";
  daPushChanges();
  if (daSocket != null && daSocket.connected) {
    daSocket.disconnect();
  }
}
// function daTurnOffChat(){
//   $("#daChatOnButton").removeClass("dainvisible");
//   $("#daChatBox").addClass("dainvisible");
//   //daCloseSocket();
//   $("#daMessage").prop('disabled', true);
//   $("#daSend").unbind();
//   //daStartCheckingIn();
// }
function daDisplayChat() {
  if (daChatStatus == "off" || daChatStatus == "observeonly") {
    $("#daChatBox").addClass("dainvisible");
    $("#daChatAvailable").addClass("dainvisible");
    $("#daChatOnButton").addClass("dainvisible");
  } else {
    if (daChatStatus == "waiting") {
      if (daChatPartnersAvailable > 0) {
        $("#daChatBox").removeClass("dainvisible");
      }
    } else {
      $("#daChatBox").removeClass("dainvisible");
    }
  }
  if (daChatStatus == "waiting") {
    //console.log("I see waiting")
    if (daChatHistory.length > 0) {
      $("#daChatAvailable a i").removeClass("da-chat-active");
      $("#daChatAvailable a i").addClass("da-chat-inactive");
      $("#daChatAvailable").removeClass("dainvisible");
    } else {
      $("#daChatAvailable a i").removeClass("da-chat-active");
      $("#daChatAvailable a i").removeClass("da-chat-inactive");
      $("#daChatAvailable").addClass("dainvisible");
    }
    $("#daChatOnButton").addClass("dainvisible");
    $("#daChatOffButton").addClass("dainvisible");
    $("#daMessage").prop("disabled", true);
    $("#daSend").prop("disabled", true);
  }
  if (daChatStatus == "standby" || daChatStatus == "ready") {
    //console.log("I see standby")
    $("#daChatAvailable").removeClass("dainvisible");
    $("#daChatAvailable a i").removeClass("da-chat-inactive");
    $("#daChatAvailable a i").addClass("da-chat-active");
    $("#daChatOnButton").removeClass("dainvisible");
    $("#daChatOffButton").addClass("dainvisible");
    $("#daMessage").prop("disabled", true);
    $("#daSend").prop("disabled", true);
    daInformAbout("chat");
  }
  if (daChatStatus == "on") {
    $("#daChatAvailable").removeClass("dainvisible");
    $("#daChatAvailable a i").removeClass("da-chat-inactive");
    $("#daChatAvailable a i").addClass("da-chat-active");
    $("#daChatOnButton").addClass("dainvisible");
    $("#daChatOffButton").removeClass("dainvisible");
    $("#daMessage").prop("disabled", false);
    if (daShowingHelp) {
      $("#daMessage").focus();
    }
    $("#daSend").prop("disabled", false);
    daInformAbout("chat");
  }
  hideTablist();
}
function daChatLogCallback(data) {
  if (data.action && data.action == "reload") {
    location.reload(true);
  }
  //console.log("daChatLogCallback: success is " + data.success);
  if (data.success) {
    $("#daCorrespondence").html("");
    daChatHistory = [];
    var messages = data.messages;
    for (var i = 0; i < messages.length; ++i) {
      daChatHistory.push(messages[i]);
      daPublishMessage(messages[i]);
    }
    daDisplayChat();
    daScrollChatFast();
  }
}
function daRefreshSubmit() {
  daRequestPending = true;
  $.ajax({
    type: "POST",
    url: daInterviewUrl,
    data: "csrf_token=" + daCsrf + "&ajax=1",
    beforeSend: addCsrfHeader,
    xhrFields: {
      withCredentials: true,
    },
    success: function (data) {
      setTimeout(function () {
        daProcessAjax(data, $("#daform"), 0);
      }, 0);
    },
    error: function (xhr, status, error) {
      setTimeout(function () {
        daProcessAjaxError(xhr, status, error);
      }, 0);
    },
  });
}
function daResetCheckinCode() {
  daCheckinCode = Math.random();
}
function daCheckinCallback(data) {
  if (data.action && data.action == "reload") {
    location.reload(true);
  }
  daCheckingIn = 0;
  //console.log("daCheckinCallback: success is " + data.success);
  if (data.checkin_code != daCheckinCode) {
    console.log("Ignoring checkincallback because code is wrong");
    return;
  }
  if (data.success) {
    if (data.commands.length > 0) {
      for (var i = 0; i < data.commands.length; ++i) {
        var command = data.commands[i];
        if (command.extra == "flash") {
          if (!$("#daflash").length) {
            $(daTargetDiv).append(daSprintf(daNotificationContainer, ""));
          }
          $("#daflash").append(
            daSprintf(daNotificationMessage, "info", command.value),
          );
          //console.log("command is " + command.value);
        } else if (command.extra == "refresh") {
          daRefreshSubmit();
        } else if (command.extra == "javascript") {
          //console.log("I should eval" + command.value);
          daGlobalEval(command.value);
        } else if (command.extra == "fields") {
          for (var key in command.value) {
            if (command.value.hasOwnProperty(key)) {
              if (
                typeof command.value[key] === "object" &&
                command.value[key] !== null
              ) {
                if (command.value[key].hasOwnProperty("choices")) {
                  daSetChoices(key, command.value[key]["choices"]);
                }
                if (command.value[key].hasOwnProperty("value")) {
                  daSetField(key, command.value[key]["value"]);
                }
              } else {
                daSetField(key, command.value[key]);
              }
            }
          }
        } else if (command.extra == "backgroundresponse") {
          var assignments = Array();
          if (
            command.value.hasOwnProperty("target") &&
            command.value.hasOwnProperty("content")
          ) {
            assignments.push({
              target: command.value.target,
              content: command.value.content,
            });
          }
          if (Array.isArray(command.value)) {
            for (i = 0; i < command.value.length; ++i) {
              var possible_assignment = command.value[i];
              if (
                possible_assignment.hasOwnProperty("target") &&
                possible_assignment.hasOwnProperty("content")
              ) {
                assignments.push({
                  target: possible_assignment.target,
                  content: possible_assignment.content,
                });
              }
            }
          }
          for (i = 0; i < assignments.length; ++i) {
            var assignment = assignments[i];
            $(".datarget" + assignment.target.replace(/[^A-Za-z0-9\_]/g)).prop(
              "innerHTML",
              assignment.content,
            );
          }
          //console.log("Triggering daCheckIn");
          $(document).trigger("daCheckIn", [command.action, command.value]);
        }
      }
      // setTimeout(function(){
      //   $("#daflash .daalert-interlocutory").hide(300, function(){
      //     $(self).remove();
      //   });
      // }, 5000);
    }
    oldDaChatStatus = daChatStatus;
    //console.log("daCheckinCallback: from " + daChatStatus + " to " + data.chat_status);
    if (data.phone == null) {
      $("#daPhoneMessage").addClass("dainvisible");
      $("#daPhoneMessage p").html("");
      $("#daPhoneAvailable").addClass("dainvisible");
      daPhoneAvailable = false;
    } else {
      $("#daPhoneMessage").removeClass("dainvisible");
      $("#daPhoneMessage p").html(data.phone);
      $("#daPhoneAvailable").removeClass("dainvisible");
      daPhoneAvailable = true;
      daInformAbout("phone");
    }
    var statusChanged;
    if (daChatStatus == data.chat_status) {
      statusChanged = false;
    } else {
      statusChanged = true;
    }
    if (statusChanged) {
      daChatStatus = data.chat_status;
      daDisplayChat();
      if (daChatStatus == "ready") {
        // console.log("calling initialize socket because ready");
        daInitializeSocket();
      }
    }
    daChatPartnersAvailable = 0;
    if (daChatMode == "peer" || daChatMode == "peerhelp") {
      daChatPartnersAvailable += data.num_peers;
      if (data.num_peers == 1) {
        $("#dapeerMessage").html(
          '<span class="badge bg-info">' +
            data.num_peers +
            " " +
            daOtherUser +
            "</span>",
        );
      } else {
        $("#dapeerMessage").html(
          '<span class="badge bg-info">' +
            data.num_peers +
            " " +
            daOtherUsers +
            "</span>",
        );
      }
      $("#dapeerMessage").removeClass("dainvisible");
    } else {
      $("#dapeerMessage").addClass("dainvisible");
    }
    if (daChatMode == "peerhelp" || daChatMode == "help") {
      if (data.help_available == 1) {
        $("#dapeerHelpMessage").html(
          '<span class="badge bg-primary">' +
            data.help_available +
            " " +
            daOperator +
            "</span>",
        );
      } else {
        $("#dapeerHelpMessage").html(
          '<span class="badge bg-primary">' +
            data.help_available +
            " " +
            daOperators +
            "</span>",
        );
      }
      $("#dapeerHelpMessage").removeClass("dainvisible");
    } else {
      $("#dapeerHelpMessage").addClass("dainvisible");
    }
    if (daBeingControlled) {
      if (!data.observerControl) {
        daBeingControlled = false;
        //console.log("Hiding control 1");
        daHideControl();
        if (daChatStatus != "on") {
          if (daSocket != null && daSocket.connected) {
            //console.log('Terminating interview socket because control is over');
            daSocket.emit("terminate");
          }
        }
      }
    } else {
      if (data.observerControl) {
        daBeingControlled = true;
        daInitializeSocket();
      }
    }
  }
  hideTablist();
}
function daCheckoutCallback(data) {}
function daInitialCheckin() {
  daCheckin("initial");
}
function daCheckin(elem) {
  //console.log("daCheckin");
  var elem = typeof elem === "undefined" ? null : elem;
  daCheckingIn += 1;
  //if (daCheckingIn > 1 && !(daCheckingIn % 3)){
  if (elem === null && daCheckingIn > 1) {
    //console.log("daCheckin: request already pending, not re-sending");
    return;
  }
  var datastring;
  if (daChatStatus != "off" && $("#daform").length > 0 && !daBeingControlled) {
    if (daDoAction != null) {
      datastring = $.param({
        action: "checkin",
        chatstatus: daChatStatus,
        chatmode: daChatMode,
        csrf_token: daCsrf,
        checkinCode: daCheckinCode,
        parameters: daFormAsJSON(elem),
        raw_parameters: JSON.stringify($("#daform").serializeArray()),
        do_action: daDoAction,
        ajax: "1",
      });
    } else {
      datastring = $.param({
        action: "checkin",
        chatstatus: daChatStatus,
        chatmode: daChatMode,
        csrf_token: daCsrf,
        checkinCode: daCheckinCode,
        parameters: daFormAsJSON(elem),
        raw_parameters: JSON.stringify($("#daform").serializeArray()),
        ajax: "1",
      });
    }
  } else {
    if (daDoAction != null) {
      datastring = $.param({
        action: "checkin",
        chatstatus: daChatStatus,
        chatmode: daChatMode,
        csrf_token: daCsrf,
        checkinCode: daCheckinCode,
        do_action: daDoAction,
        parameters: daFormAsJSON(elem),
        ajax: "1",
      });
    } else {
      datastring = $.param({
        action: "checkin",
        chatstatus: daChatStatus,
        chatmode: daChatMode,
        csrf_token: daCsrf,
        checkinCode: daCheckinCode,
        ajax: "1",
      });
    }
  }
  //console.log("Doing checkin with " + daChatStatus);
  $.ajax({
    type: "POST",
    url: daCheckinUrl,
    beforeSend: addCsrfHeader,
    xhrFields: {
      withCredentials: true,
    },
    data: datastring,
    success: daCheckinCallback,
    dataType: "json",
  });
  return true;
}
function daCheckout() {
  $.ajax({
    type: "POST",
    url: daCheckoutUrl,
    beforeSend: addCsrfHeader,
    xhrFields: {
      withCredentials: true,
    },
    data: "csrf_token=" + daCsrf + "&ajax=1&action=checkout",
    success: daCheckoutCallback,
    dataType: "json",
  });
  return true;
}
function daStopCheckingIn() {
  daCheckout();
  if (daCheckinInterval != null) {
    clearInterval(daCheckinInterval);
  }
}
function daShowSpinner() {
  if ($("#daquestion").length > 0) {
    $(
      '<div id="daSpinner" class="da-spinner-container da-top-for-navbar"><div class="container"><div class="row"><div class="col text-center"><span class="da-spinner"><i class="fa-solid fa-spinner fa-spin"></i></span></div></div></div></div>',
    ).appendTo(daTargetDiv);
  } else {
    var newSpan = document.createElement("span");
    var newI = document.createElement("i");
    $(newI).addClass("fa-solid fa-spinner fa-spin");
    $(newI).appendTo(newSpan);
    $(newSpan).attr("id", "daSpinner");
    $(newSpan).addClass("da-sig-spinner da-top-for-navbar");
    $(newSpan).appendTo("#dasigtoppart");
  }
  daShowingSpinner = true;
}
function daHideSpinner() {
  $("#daSpinner").remove();
  daShowingSpinner = false;
  daSpinnerTimeout = null;
}
function daObserverSubmitter(event) {
  if (!daSendChanges || !daConnected) {
    event.preventDefault();
    return false;
  }
  var theAction = null;
  if ($(this).hasClass("da-review-action")) {
    theAction = $(this).data("action");
  }
  var embeddedJs = $(this).data("js");
  var embeddedAction = $(this).data("embaction");
  var linkNum = $(this).data("linknum");
  var theId = $(this).attr("id");
  if (theId == "dapagetitle") {
    theId = "daquestionlabel";
  }
  var theName = $(this).attr("name");
  var theValue = $(this).val();
  var skey;
  if (linkNum) {
    skey = 'a[data-linknum="' + linkNum + '"]';
  } else if (embeddedAction) {
    skey =
      'a[data-embaction="' +
      embeddedAction.replace(/(:|\.|\[|\]|,|=|\/|\")/g, "\\$1") +
      '"]';
  } else if (theAction) {
    skey =
      'a[data-action="' +
      theAction.replace(/(:|\.|\[|\]|,|=|\/|\")/g, "\\$1") +
      '"]';
  } else if (theId) {
    skey = "#" + theId.replace(/(:|\.|\[|\]|,|=|\/|\")/g, "\\$1");
  } else if (theName) {
    skey =
      "#" +
      $(this).parents("form").attr("id") +
      " " +
      $(this).prop("tagName").toLowerCase() +
      '[name="' +
      theName.replace(/(:|\.|\[|\]|,|=|\/)/g, "\\$1") +
      '"]';
    if (typeof theValue !== "undefined") {
      skey += '[value="' + theValue + '"]';
    }
  } else {
    skey =
      "#" +
      $(this).parents("form").attr("id") +
      " " +
      $(this).prop("tagName").toLowerCase() +
      '[type="submit"]';
  }
  //console.log("Need to click on " + skey);
  if (
    daObserverChangesInterval != null &&
    embeddedJs == null &&
    theId != "dabackToQuestion" &&
    theId != "dahelptoggle" &&
    theId != "daquestionlabel"
  ) {
    clearInterval(daObserverChangesInterval);
  }
  daSocket.emit("observerChanges", {
    uid: daUid,
    i: daYamlFilename,
    userid: daUserObserved,
    clicked: skey,
    parameters: JSON.stringify($("#daform").serializeArray()),
  });
  if (embeddedJs != null) {
    //console.log("Running the embedded js");
    daGlobalEval(decodeURIComponent(embeddedJs));
  }
  if (
    theId != "dabackToQuestion" &&
    theId != "dahelptoggle" &&
    theId != "daquestionlabel"
  ) {
    event.preventDefault();
    return false;
  }
}
function daAdjustInputWidth(e) {
  var contents = $(this).val();
  var leftBracket = new RegExp("<", "g");
  var rightBracket = new RegExp(">", "g");
  contents = contents
    .replace(/&/g, "&amp;")
    .replace(leftBracket, "&lt;")
    .replace(rightBracket, "&gt;")
    .replace(/ /g, "&nbsp;");
  $('<span class="dainput-embedded" id="dawidth">')
    .html(contents)
    .appendTo("#daquestion");
  $("#dawidth").css("min-width", $(this).css("min-width"));
  $("#dawidth").css("background-color", $(daTargetDiv).css("background-color"));
  $("#dawidth").css("color", $(daTargetDiv).css("background-color"));
  $(this).width($("#dawidth").width() + 16);
  setTimeout(function () {
    $("#dawidth").remove();
  }, 0);
}
function daShowNotifications() {
  var n = daMessageLog.length;
  for (var i = 0; i < n; i++) {
    var message = daMessageLog[i];
    if (message.priority == "console") {
      console.log(message.message);
    } else if (message.priority == "javascript") {
      daGlobalEval(message.message);
    } else if (
      message.priority == "success" ||
      message.priority == "warning" ||
      message.priority == "danger" ||
      message.priority == "secondary" ||
      message.priority == "tertiary" ||
      message.priority == "info" ||
      message.priority == "dark" ||
      message.priority == "light" ||
      message.priority == "primary"
    ) {
      da_flash(message.message, message.priority);
    } else {
      da_flash(message.message, "info");
    }
  }
}
function daIgnoreAllButTab(event) {
  event = event || window.event;
  var code = event.keyCode;
  if (code != 9) {
    if (code == 13) {
      $(event.target)
        .parents(".file-caption-main")
        .find("input.dafile")
        .click();
    }
    event.preventDefault();
    return false;
  }
}
function daDisableIfNotHidden(query, value) {
  $(query).each(function () {
    var showIfParent = $(this).parents(".dashowif, .dajsshowif");
    if (
      !(
        showIfParent.length &&
        ($(showIfParent[0]).data("isVisible") == "0" ||
          !$(showIfParent[0]).is(":visible"))
      )
    ) {
      if (
        $(this).prop("tagName") == "INPUT" &&
        $(this).hasClass("combobox") &&
        daComboBoxes[$(this).attr("id")]
      ) {
        if (value) {
          daComboBoxes[$(this).attr("id")].disable();
        } else {
          daComboBoxes[$(this).attr("id")].enable();
        }
      } else if ($(this).hasClass("dafile")) {
        if (value) {
          $(this).data("fileinput").disable();
        } else {
          $(this).data("fileinput").enable();
        }
      } else if ($(this).hasClass("daslider")) {
        if (value) {
          $(this).slider("disable");
        } else {
          $(this).slider("enable");
        }
      } else {
        $(this).prop("disabled", value);
      }
      if (value) {
        $(this).parents(".da-form-group").addClass("dagreyedout");
      } else {
        $(this).parents(".da-form-group").removeClass("dagreyedout");
      }
    }
  });
}
function daShowIfCompare(theVal, showIfVal) {
  if (typeof theVal == "string" && theVal.match(/^-?\d+\.\d+$/)) {
    theVal = parseFloat(theVal);
  } else if (typeof theVal == "string" && theVal.match(/^-?\d+$/)) {
    theVal = parseInt(theVal);
  }
  if (typeof showIfVal == "string" && showIfVal.match(/^-?\d+\.\d+$/)) {
    showIfVal = parseFloat(showIfVal);
  } else if (typeof showIfVal == "string" && showIfVal.match(/^-?\d+$/)) {
    showIfVal = parseInt(showIfVal);
  }
  if (typeof theVal == "string" || typeof showIfVal == "string") {
    if (
      String(showIfVal) == "None" &&
      (String(theVal) == "" || theVal === null)
    ) {
      return true;
    }
    return String(theVal) == String(showIfVal);
  }
  return theVal == showIfVal;
}
function rationalizeListCollect() {
  var finalNum = $(".dacollectextraheader").last().data("collectnum");
  var num = $(".dacollectextraheader:visible").last().data("collectnum");
  if (parseInt(num) < parseInt(finalNum)) {
    if (
      $('div.dacollectextraheader[data-collectnum="' + num + '"]')
        .find(".dacollectadd")
        .hasClass("dainvisible")
    ) {
      $('div.dacollectextraheader[data-collectnum="' + (num + 1) + '"]').show(
        "fast",
      );
    }
  }
  var n = parseInt(finalNum);
  var firstNum = parseInt(
    $(".dacollectextraheader").first().data("collectnum"),
  );
  while (n-- > firstNum) {
    if (
      $('div.dacollectextraheader[data-collectnum="' + (n + 1) + '"]:visible')
        .length > 0
    ) {
      if (
        !$('div.dacollectextraheader[data-collectnum="' + (n + 1) + '"]')
          .find(".dacollectadd")
          .hasClass("dainvisible") &&
        $('div.dacollectextraheader[data-collectnum="' + n + '"]')
          .find(".dacollectremove")
          .hasClass("dainvisible")
      ) {
        $('div.dacollectextraheader[data-collectnum="' + (n + 1) + '"]').hide();
      }
    }
  }
  var n = parseInt(finalNum);
  var seenAddAnother = false;
  while (n-- > firstNum) {
    if (
      $('div.dacollectextraheader[data-collectnum="' + (n + 1) + '"]:visible')
        .length > 0
    ) {
      if (
        !$('div.dacollectextraheader[data-collectnum="' + (n + 1) + '"]')
          .find(".dacollectadd")
          .hasClass("dainvisible")
      ) {
        seenAddAnother = true;
      }
      var current = $('div.dacollectextraheader[data-collectnum="' + n + '"]');
      if (
        seenAddAnother &&
        !$(current).find(".dacollectadd").hasClass("dainvisible")
      ) {
        $(current).find(".dacollectadd").addClass("dainvisible");
        $(current).find(".dacollectunremove").removeClass("dainvisible");
      }
    }
  }
}
function daFetchAjax(elem, cb, doShow) {
  var wordStart = $(elem).val();
  if (wordStart.length < parseInt(cb.$source.data("trig"))) {
    if (cb.shown) {
      cb.hide();
    }
    return;
  }
  if (daFetchAjaxTimeout != null && daFetchAjaxTimeoutRunning) {
    daFetchAjaxTimeoutFetchAfter = true;
    return;
  }
  if (doShow) {
    daFetchAjaxTimeout = setTimeout(function () {
      daFetchAjaxTimeoutRunning = false;
      if (daFetchAjaxTimeoutFetchAfter) {
        daFetchAjax(elem, cb, doShow);
        daFetchAjaxTimeoutFetchAfter = false;
      }
    }, 2000);
    daFetchAjaxTimeoutRunning = true;
    daFetchAjaxTimeoutFetchAfter = false;
  }
  da_action_call(
    cb.$source.data("action"),
    { wordstart: wordStart },
    function (data) {
      wordStart = $(elem).val();
      if (typeof data == "object") {
        var upperWordStart = wordStart.toUpperCase();
        cb.$source.empty();
        var emptyItem = $("<option>");
        emptyItem.val("");
        emptyItem.text("");
        cb.$source.append(emptyItem);
        var notYetSelected = true;
        var selectedValue = null;
        if (Array.isArray(data)) {
          for (var i = 0; i < data.length; ++i) {
            if (Array.isArray(data[i])) {
              if (data[i].length >= 2) {
                var item = $("<option>");
                if (
                  notYetSelected &&
                  ((doShow && data[i][1].toString() == wordStart) ||
                    data[i][0].toString() == wordStart)
                ) {
                  item.prop("selected", true);
                  notYetSelected = false;
                  selectedValue = data[i][1];
                }
                item.text(data[i][1]);
                item.val(data[i][0]);
                cb.$source.append(item);
              } else if (data[i].length == 1) {
                var item = $("<option>");
                if (
                  notYetSelected &&
                  ((doShow && data[i][0].toString() == wordStart) ||
                    data[i][0].toString() == wordStart)
                ) {
                  item.prop("selected", true);
                  notYetSelected = false;
                  selectedValue = data[i][0];
                }
                item.text(data[i][0]);
                item.val(data[i][0]);
                cb.$source.append(item);
              }
            } else if (typeof data[i] == "object") {
              for (var key in data[i]) {
                if (data[i].hasOwnProperty(key)) {
                  var item = $("<option>");
                  if (
                    notYetSelected &&
                    ((doShow && key.toString() == wordStart) ||
                      key.toString() == wordStart)
                  ) {
                    item.prop("selected", true);
                    notYetSelected = false;
                    selectedValue = data[i][key];
                  }
                  item.text(data[i][key]);
                  item.val(key);
                  cb.$source.append(item);
                }
              }
            } else {
              var item = $("<option>");
              if (
                notYetSelected &&
                ((doShow &&
                  data[i].toString().toUpperCase() == upperWordStart) ||
                  data[i].toString() == wordStart)
              ) {
                item.prop("selected", true);
                notYetSelected = false;
                selectedValue = data[i];
              }
              item.text(data[i]);
              item.val(data[i]);
              cb.$source.append(item);
            }
          }
        } else if (typeof data == "object") {
          var keyList = Array();
          for (var key in data) {
            if (data.hasOwnProperty(key)) {
              keyList.push(key);
            }
          }
          keyList = keyList.sort();
          for (var i = 0; i < keyList.length; ++i) {
            var item = $("<option>");
            if (
              notYetSelected &&
              ((doShow &&
                keyList[i].toString().toUpperCase() == upperWordStart) ||
                keyList[i].toString() == wordStart)
            ) {
              item.prop("selected", true);
              notYetSelected = false;
              selectedValue = data[keyList[i]];
            }
            item.text(data[keyList[i]]);
            item.val(keyList[i]);
            cb.$source.append(item);
          }
        }
        if (doShow) {
          cb.refresh();
          cb.clearTarget();
          cb.$target.val(cb.$element.val());
          cb.lookup();
        } else {
          if (!notYetSelected) {
            cb.$element.val(selectedValue);
          }
        }
      }
    },
  );
}

function jsonIfObject(value) {
  if (typeof value === "object" || typeof value === "boolean") {
    return JSON.stringify(value);
  }
  return value;
}

function underscoreToCamel(str) {
  return str
    .split("_")
    .map((word, index) => {
      if (index === 0) return word;
      return word.charAt(0).toUpperCase() + word.slice(1);
    })
    .join("")
    .replace(/Uri$/, "URI");
}

function camelToUnderscore(camelStr) {
  return camelStr
    .replace(/URI$/, "Uri")
    .replace(/([A-Z])/g, "_$1")
    .toLowerCase()
    .replace(/^_/, "");
}

function daInitialize(doScroll) {
  if (!daObserverMode) {
    daResetCheckinCode();
  }
  daComboBoxes = Object();
  daVarLookupSelect = Object();
  daVarLookupCheckbox = Object();
  if (daSpinnerTimeout != null) {
    clearTimeout(daSpinnerTimeout);
    daSpinnerTimeout = null;
  }
  if (daShowingSpinner && !daWaitPage) {
    daHideSpinner();
  }
  if (daObserverMode) {
    $(
      'button[type="submit"], input[type="submit"], a.da-review-action, #dabackToQuestion, #daquestionlabel, #dapagetitle, #dahelptoggle, a[data-linknum], a[data-embaction], #dabackbutton',
    ).click(daObserverSubmitter);
  }
  daNotYetScrolled = true;
  // $(".dahelptrigger").click(function(e) {
  //   e.preventDefault();
  //   $(this).tab('show');
  // });
  $("input.dafile").fileinput({
    theme: "fas",
    language: document.documentElement.lang,
    allowedPreviewTypes: ["image"],
  });
  $(".datableup,.databledown").click(function (e) {
    e.preventDefault();
    $(this).blur();
    var row = $(this).parents("tr").first();
    if ($(this).is(".datableup")) {
      var prev = row.prev();
      if (prev.length == 0) {
        return false;
      }
      row.addClass("datablehighlighted");
      setTimeout(function () {
        row.insertBefore(prev);
      }, 200);
    } else {
      var next = row.next();
      if (next.length == 0) {
        return false;
      }
      row.addClass("datablehighlighted");
      setTimeout(function () {
        row.insertAfter(row.next());
      }, 200);
    }
    setTimeout(function () {
      row.removeClass("datablehighlighted");
    }, 1000);
    return false;
  });
  $(".dacollectextra").find("input, textarea, select").prop("disabled", true);
  $(".dacollectextra")
    .find("input.combobox")
    .each(function () {
      if (daComboBoxes[$(this).attr("id")]) {
        daComboBoxes[$(this).attr("id")].disable();
      } else {
        $(this).prop("disabled", true);
      }
    });
  $(".dacollectextra")
    .find("input.daslider")
    .each(function () {
      $(this).slider("disable");
    });
  $(".dacollectextra")
    .find("input.dafile")
    .each(function () {
      $(this).data("fileinput").disable();
    });
  $("#da-extra-collect").on("click", function () {
    $("<input>")
      .attr({
        type: "hidden",
        name: "_collect",
        value: $(this).val(),
      })
      .appendTo($("#daform"));
    $("#daform").submit();
    event.preventDefault();
    return false;
  });
  $(".dacollectadd").on("click", function (e) {
    e.preventDefault();
    if ($("#daform").valid()) {
      var num = $(this).parent().parent().data("collectnum");
      $('[data-collectnum="' + num + '"]').show("fast");
      $('[data-collectnum="' + num + '"]')
        .find("input, textarea, select")
        .each(function () {
          var showifParents = $(this).parents(".dajsshowif,.dashowif");
          if (showifParents.length == 0 || $(showifParents[0]).is(":visible")) {
            $(this).prop("disabled", false);
          }
        });
      $('[data-collectnum="' + num + '"]')
        .find("input.combobox")
        .each(function () {
          var showifParents = $(this).parents(".dajsshowif,.dashowif");
          if (showifParents.length == 0 || $(showifParents[0]).is(":visible")) {
            if (daComboBoxes[$(this).attr("id")]) {
              daComboBoxes[$(this).attr("id")].enable();
            } else {
              $(this).prop("disabled", false);
            }
          }
        });
      $('[data-collectnum="' + num + '"]')
        .find("input.daslider")
        .each(function () {
          var showifParents = $(this).parents(".dajsshowif,.dashowif");
          if (showifParents.length == 0 || $(showifParents[0]).is(":visible")) {
            $(this).slider("enable");
          }
        });
      $('[data-collectnum="' + num + '"]')
        .find("input.dafile")
        .each(function () {
          var showifParents = $(this).parents(".dajsshowif,.dashowif");
          if (showifParents.length == 0 || $(showifParents[0]).is(":visible")) {
            $(this).data("fileinput").enable();
          }
        });
      $(this)
        .parent()
        .find("button.dacollectremove")
        .removeClass("dainvisible");
      $(this).parent().find("span.dacollectnum").removeClass("dainvisible");
      $(this).addClass("dainvisible");
      $(".da-first-delete").removeClass("dainvisible");
      rationalizeListCollect();
      var elem = $('[data-collectnum="' + num + '"]')
        .find("input, textarea, select")
        .first();
      if ($(elem).visible()) {
        $(elem).focus();
      }
    }
    return false;
  });
  $("#dasigform").on("submit", daSignatureSubmit);
  $(".dacollectremove").on("click", function (e) {
    e.preventDefault();
    var num = $(this).parent().parent().data("collectnum");
    $(
      '[data-collectnum="' +
        num +
        '"]:not(.dacollectextraheader, .dacollectheader, .dacollectfirstheader)',
    ).hide("fast");
    $('[data-collectnum="' + num + '"]')
      .find("input, textarea, select")
      .prop("disabled", true);
    $('[data-collectnum="' + num + '"]')
      .find("input.combobox")
      .each(function () {
        if (daComboBoxes[$(this).attr("id")]) {
          daComboBoxes[$(this).attr("id")].disable();
        } else {
          $(this).prop("disabled", true);
        }
      });
    $('[data-collectnum="' + num + '"]')
      .find("input.daslider")
      .each(function () {
        $(this).slider("disable");
      });
    $('[data-collectnum="' + num + '"]')
      .find("input.dafile")
      .each(function () {
        $(this).data("fileinput").disable();
      });
    $(this).parent().find("button.dacollectadd").removeClass("dainvisible");
    $(this).parent().find("span.dacollectnum").addClass("dainvisible");
    $(this).addClass("dainvisible");
    rationalizeListCollect();
    return false;
  });
  $(".dacollectremoveexisting").on("click", function (e) {
    e.preventDefault();
    var num = $(this).parent().parent().data("collectnum");
    $(
      '[data-collectnum="' +
        num +
        '"]:not(.dacollectextraheader, .dacollectheader, .dacollectfirstheader)',
    ).hide("fast");
    $('[data-collectnum="' + num + '"]')
      .find("input, textarea, select")
      .prop("disabled", true);
    $('[data-collectnum="' + num + '"]')
      .find("input.combobox")
      .each(function () {
        if (daComboBoxes[$(this).attr("id")]) {
          daComboBoxes[$(this).attr("id")].disable();
        } else {
          $(this).prop("disabled", true);
        }
      });
    $('[data-collectnum="' + num + '"]')
      .find("input.daslider")
      .each(function () {
        $(this).slider("disable");
      });
    $('[data-collectnum="' + num + '"]')
      .find("input.dafile")
      .each(function () {
        $(this).data("fileinput").disable();
      });
    $(this)
      .parent()
      .find("button.dacollectunremove")
      .removeClass("dainvisible");
    $(this).parent().find("span.dacollectremoved").removeClass("dainvisible");
    $(this).addClass("dainvisible");
    rationalizeListCollect();
    return false;
  });
  $(".dacollectunremove").on("click", function (e) {
    e.preventDefault();
    var num = $(this).parent().parent().data("collectnum");
    $('[data-collectnum="' + num + '"]').show("fast");
    $('[data-collectnum="' + num + '"]')
      .find("input, textarea, select")
      .prop("disabled", false);
    $('[data-collectnum="' + num + '"]')
      .find("input.combobox")
      .each(function () {
        if (daComboBoxes[$(this).attr("id")]) {
          daComboBoxes[$(this).attr("id")].enable();
        } else {
          $(this).prop("disabled", false);
        }
      });
    $('[data-collectnum="' + num + '"]')
      .find("input.daslider")
      .each(function () {
        $(this).slider("enable");
      });
    $('[data-collectnum="' + num + '"]')
      .find("input.dafile")
      .each(function () {
        $(this).data("fileinput").enable();
      });
    $(this)
      .parent()
      .find("button.dacollectremoveexisting")
      .removeClass("dainvisible");
    $(this).parent().find("button.dacollectremove").removeClass("dainvisible");
    $(this).parent().find("span.dacollectnum").removeClass("dainvisible");
    $(this).parent().find("span.dacollectremoved").addClass("dainvisible");
    $(this).addClass("dainvisible");
    rationalizeListCollect();
    return false;
  });
  //$('#daquestionlabel').click(function(e) {
  //  e.preventDefault();
  //  $(this).tab('show');
  //});
  //$('#dapagetitle').click(function(e) {
  //  if ($(this).prop('href') == '#'){
  //    e.preventDefault();
  //    //$('#daquestionlabel').tab('show');
  //  }
  //});
  $("select.damultiselect").each(function () {
    var isObject = $(this).hasClass("daobject");
    var varname = atou($(this).data("varname"));
    var theSelect = this;
    $(this)
      .find("option")
      .each(function () {
        var theVal = atou($(this).data("valname"));
        if (isObject) {
          theVal = atou(theVal);
        }
        var key = varname + '["' + theVal + '"]';
        if (!daVarLookupSelect[key]) {
          daVarLookupSelect[key] = [];
        }
        daVarLookupSelect[key].push({
          select: theSelect,
          option: this,
          value: theVal,
        });
        key = varname + "['" + theVal + "']";
        if (!daVarLookupSelect[key]) {
          daVarLookupSelect[key] = [];
        }
        daVarLookupSelect[key].push({
          select: theSelect,
          option: this,
          value: theVal,
        });
      });
  });
  $("div.da-field-group.da-field-checkboxes").each(function () {
    var isObject = $(this).hasClass("daobject");
    var varname = atou($(this).data("varname"));
    var cbList = [];
    if (!daVarLookupCheckbox[varname]) {
      daVarLookupCheckbox[varname] = [];
    }
    $(this)
      .find("input")
      .each(function () {
        if ($(this).attr("name").substr(0, 7) === "_ignore") {
          return;
        }
        var theVal = atou($(this).data("cbvalue"));
        var theType = $(this).data("cbtype");
        var key;
        if (theType == "R") {
          key = varname + "[" + theVal + "]";
        } else {
          key = varname + '["' + theVal + '"]';
        }
        cbList.push({
          variable: key,
          value: theVal,
          type: theType,
          elem: this,
        });
      });
    daVarLookupCheckbox[varname].push({
      elem: this,
      checkboxes: cbList,
      isObject: isObject,
    });
    $(this)
      .find("input.danota-checkbox")
      .each(function () {
        if (!daVarLookupCheckbox[varname + "[nota]"]) {
          daVarLookupCheckbox[varname + "[nota]"] = [];
        }
        daVarLookupCheckbox[varname + "[nota]"].push({
          elem: this,
          checkboxes: [{ variable: varname + "[nota]", type: "X", elem: this }],
          isObject: isObject,
        });
      });
    $(this)
      .find("input.daaota-checkbox")
      .each(function () {
        if (!daVarLookupCheckbox[varname + "[aota]"]) {
          daVarLookupCheckbox[varname + "[aota]"] = [];
        }
        daVarLookupCheckbox[varname + "[aota]"].push({
          elem: this,
          checkboxes: [{ variable: varname + "[aota]", type: "X", elem: this }],
          isObject: isObject,
        });
      });
  });
  $(".dacurrency").each(function () {
    var theVal = $(this).val().toString();
    if (theVal.indexOf(".") >= 0) {
      theVal = theVal.replace(",", "");
      var num = parseFloat(theVal);
      var cleanNum = num.toFixed(daCurrencyDecimalPlaces).toString();
      if (cleanNum != "NaN") {
        $(this).val(cleanNum);
      }
    }
  });
  $(".dacurrency").on("change", function () {
    var theVal = $(this).val().toString();
    if (theVal.indexOf(".") >= 0) {
      theVal = theVal.replaceAll(/[\$,\(\)]/g, "");
      var num = parseFloat(theVal);
      var cleanNum = num.toFixed(daCurrencyDecimalPlaces).toString();
      if (cleanNum != "NaN") {
        $(this).val(cleanNum);
      } else {
        $(this).val(theVal);
      }
    } else {
      $(this).val(theVal.replaceAll(/[^0-9\.\-]/g, ""));
    }
  });
  $(".danumeric").on("change", function () {
    var theVal = $(this).val().toString();
    $(this).val(theVal.replaceAll(/[\$,\(\)]/g, ""));
  });
  // iOS will truncate text in `select` options. Adding an empty optgroup fixes that
  if (navigator.userAgent.match(/(iPad|iPhone|iPod touch);/i)) {
    var selects = document.querySelectorAll("select");
    for (var i = 0; i < selects.length; i++) {
      selects[i].appendChild(document.createElement("optgroup"));
    }
  }
  $(".da-to-labelauty").labelauty({
    class: "labelauty da-active-invisible dafullwidth",
  });
  $(".da-to-labelauty-icon").labelauty({ label: false });
  $("input[type=radio].da-to-labelauty:checked").trigger("change");
  $("input[type=radio].da-to-labelauty-icon:checked").trigger("change");
  $("button").on("click", function () {
    daWhichButton = this;
    return true;
  });
  $("#dasource").on("shown.bs.collapse", function (e) {
    if (daJsEmbed) {
      var scrollTarget = $("#dasource").first().position().top - 60;
      $(daTargetDiv).animate(
        {
          scrollTop: scrollTarget,
        },
        1000,
      );
    } else {
      var scrollTarget = $("#dasource").first().offset().top - 60;
      $("html, body").animate(
        {
          scrollTop: scrollTarget,
        },
        1000,
      );
    }
  });
  $('button[data-bs-target="#dahelp"]').on("shown.bs.tab", function (e) {
    daShowingHelp = 1;
    if (daNotYetScrolled) {
      daScrollChatFast();
      daNotYetScrolled = false;
    }
    if (daShouldDebugReadabilityHelp) {
      $("#dareadability-help").show();
      $("#dareadability-question").hide();
    }
  });
  $('button[data-bs-target="#daquestion"]').on("shown.bs.tab", function (e) {
    daShowingHelp = 0;
    if (daShouldDebugReadabilityQuestion) {
      $("#dareadability-help").hide();
      $("#dareadability-question").show();
    }
  });
  $("input.daaota-checkbox").click(function () {
    var anyChanged = false;
    var firstEncountered = null;
    $(this)
      .parents("div.da-field-group")
      .find("input.danon-nota-checkbox")
      .each(function () {
        if (firstEncountered === null) {
          firstEncountered = this;
        }
        var existing_val = $(this).prop("checked");
        $(this).prop("checked", true);
        if (existing_val != true) {
          $(this).trigger("change");
          anyChanged = true;
        }
      });
    if (firstEncountered !== null && anyChanged === false) {
      $(firstEncountered).trigger("change");
    }
    $(this)
      .parents("div.da-field-group")
      .find("input.danota-checkbox")
      .each(function () {
        var existing_val = $(this).prop("checked");
        $(this).prop("checked", false);
        if (existing_val != false) {
          $(this).trigger("change");
        }
      });
  });
  $("input.danota-checkbox").click(function () {
    var anyChanged = false;
    var firstEncountered = null;
    $(this)
      .parents("div.da-field-group")
      .find("input.danon-nota-checkbox")
      .each(function () {
        if (firstEncountered === null) {
          firstEncountered = this;
        }
        var existing_val = $(this).prop("checked");
        $(this).prop("checked", false);
        if (existing_val != false) {
          $(this).trigger("change");
          anyChanged = true;
        }
      });
    if (firstEncountered !== null && anyChanged === false) {
      $(firstEncountered).trigger("change");
    }
    $(this)
      .parents("div.da-field-group")
      .find("input.daaota-checkbox")
      .each(function () {
        var existing_val = $(this).prop("checked");
        $(this).prop("checked", false);
        if (existing_val != false) {
          $(this).trigger("change");
        }
      });
  });
  $("input.danon-nota-checkbox").click(function () {
    $(this)
      .parents("div.da-field-group")
      .find("input.danota-checkbox")
      .each(function () {
        var existing_val = $(this).prop("checked");
        $(this).prop("checked", false);
        if (existing_val != false) {
          $(this).trigger("change");
        }
      });
    if (!$(this).prop("checked")) {
      $(this)
        .parents("div.da-field-group")
        .find("input.daaota-checkbox")
        .each(function () {
          var existing_val = $(this).prop("checked");
          $(this).prop("checked", false);
          if (existing_val != false) {
            $(this).trigger("change");
          }
        });
    }
  });
  $("select.combobox").combobox({
    buttonLabel: daComboboxButtonLabel,
    inputBox: daInputBox,
  });
  $("select.da-ajax-combobox").combobox({
    clearIfNoMatch: true,
    buttonLabel: daComboboxButtonLabel,
    functionalButton: false,
    inputBox: daInputBox,
  });
  $("input.da-address-combobox").combobox({
    clearIfNoMatch: false,
    showButton: false,
    inputBox: daInputBox,
    matcher: function (item) {
      return true;
    },
    lookupWhileTyping: false,
  });
  $("input.da-ajax-combobox").each(function () {
    var cb = daComboBoxes[$(this).attr("id")];
    daFetchAjax(this, cb, false);
    $(this).on("keyup", function (e) {
      switch (e.keyCode) {
        case 40:
        case 39: // right arrow
        case 38: // up arrow
        case 37: // left arrow
        case 36: // home
        case 35: // end
        case 16: // shift
        case 17: // ctrl
        case 9: // tab
        case 13: // enter
        case 27: // escape
        case 18: // alt
          return;
      }
      daFetchAjax(this, cb, true);
      daFetchAcceptIncoming = true;
      e.preventDefault();
      return false;
    });
  });
  $.each(daComboBoxes, async function (thisId, cb) {
    if (!this.$element.hasClass("da-address-combobox")) {
      return;
    }
    if (cb.$target.val()) {
      cb.$element.val(cb.$target.val());
    }
    await daWaitForGoogle(false);
    const { Place, AutocompleteSessionToken, AutocompleteSuggestion } =
      await google.maps.importLibrary("places");
    const token = new AutocompleteSessionToken();
    var elem = cb.$element;
    var priorQuery = "";
    var priorResults = [];
    let request = {
      language: "en-US",
      region: "us",
      sessionToken: token,
    };
    cb.$target.on("change", async (e) => {
      if (!daAutocomplete[thisId].suggestions[cb.$target.val()]) {
        return;
      }
      var theVal = cb.$target.val();
      cb.$container.removeClass("combobox-selected");
      cb.selected = false;
      let place =
        daAutocomplete[thisId].suggestions[theVal].placePrediction.toPlace();
      await place.fetchFields({
        fields: (
          daAutocomplete[thisId].opts.fields || ["addressComponents"]
        ).map(underscoreToCamel),
      });
      // console.log(place);
      daFillInAddress(thisId, place);
    });
    elem.on("keyup", async (e) => {
      switch (e.keyCode) {
        case 40:
        case 39: // right arrow
        case 38: // up arrow
        case 37: // left arrow
        case 36: // home
        case 35: // end
        case 16: // shift
        case 17: // ctrl
        case 9: // tab
        case 13: // enter
        case 27: // escape
        case 18: // alt
          return;
      }
      request.input = elem.val();
      request.includedPrimaryTypes = daAutocomplete[thisId].opts.types || [
        "street_address",
      ];
      if (request.input.length > 2 && request.input != priorQuery) {
        priorQuery = request.input;
        const { suggestions } =
          await AutocompleteSuggestion.fetchAutocompleteSuggestions(request);
        var results = [];
        var sugMap = {};
        for (let suggestion of suggestions) {
          const placePrediction = suggestion.placePrediction;
          const addressText = placePrediction.text.toString();
          results.push(addressText);
          sugMap[addressText] = suggestion;
        }
        if (
          !(
            results.length === priorResults.length &&
            results.every((value, index) => value === priorResults[index])
          )
        ) {
          daAutocomplete[thisId].suggestions = sugMap;
          cb.options.items = results.length;
          cb.map = results.reduce((obj, key) => ({ ...obj, [key]: key }), {});
          cb.revMap = cb.map;
          priorResults = results;
        }
        cb.process(results);
      }
      e.preventDefault();
      return false;
    });
  });
  $("#daemailform").validate({
    submitHandler: daValidationHandler,
    rules: {
      _attachment_email_address: { minlength: 1, required: true, email: true },
    },
    messages: {
      _attachment_email_address: {
        required: daEmailAddressRequired,
        email: daNeedCompleteEmail,
      },
    },
    errorClass: "da-has-error invalid-feedback",
  });
  $("a[data-embaction]").click(daEmbeddedAction);
  $("a[data-js]").click(daEmbeddedJs);
  $("a.da-review-action").click(daReviewAction);
  $("input.dainput-embedded").on("keyup", daAdjustInputWidth);
  $("input.dainput-embedded").each(daAdjustInputWidth);
  var daPopoverTriggerList = [].slice.call(
    document.querySelectorAll('[data-bs-toggle="popover"]'),
  );
  var daPopoverTrigger = daDefaultPopoverTrigger;
  var daPopoverList = daPopoverTriggerList.map(function (daPopoverTriggerEl) {
    return new bootstrap.Popover(daPopoverTriggerEl, {
      trigger: daPopoverTrigger,
      html: true,
    });
  });
  if (daPopoverTrigger == "focus") {
    $(
      'label a[data-bs-toggle="popover"], legend a[data-bs-toggle="popover"]',
    ).on("click", function (event) {
      event.preventDefault();
      event.stopPropagation();
      $(this).focus();
      return false;
    });
  }
  if (!daObserverMode) {
    if (daPhoneAvailable) {
      $("#daPhoneAvailable").removeClass("dainvisible");
    }
    $(".daquestionbackbutton").on("click", function (event) {
      event.preventDefault();
      $("#dabackbutton").submit();
      return false;
    });
    $("#dabackbutton").on("submit", function (event) {
      if (daShowingHelp) {
        event.preventDefault();
        $("#daquestionlabel").tab("show");
        return false;
      }
      $("#dabackbutton").addClass("dabackiconpressed");
      var informed = "";
      if (daInformedChanged) {
        informed = "&informed=" + Object.keys(daInformed).join(",");
      }
      var url;
      if (daJsEmbed) {
        url = daPostURL;
      } else {
        url = $("#dabackbutton").attr("action");
      }
      daRequestPending = true;
      $.ajax({
        type: "POST",
        url: url,
        beforeSend: addCsrfHeader,
        xhrFields: {
          withCredentials: true,
        },
        data: $("#dabackbutton").serialize() + "&ajax=1" + informed,
        success: function (data) {
          setTimeout(function () {
            daProcessAjax(data, document.getElementById("backbutton"), 1);
          }, 0);
        },
        error: function (xhr, status, error) {
          setTimeout(function () {
            daProcessAjaxError(xhr, status, error);
          }, 0);
        },
      });
      daSpinnerTimeout = setTimeout(daShowSpinner, 1000);
      event.preventDefault();
    });
    $("#daChatOnButton").click(daRingChat);
    $("#daChatOffButton").click(daCloseChat);
    $("#daMessage").bind("keypress keydown keyup", function (e) {
      var theCode = e.which || e.keyCode;
      if (theCode == 13) {
        daSender();
        e.preventDefault();
      }
    });
    $('#daform button[type="submit"]').click(function () {
      daSubmitter = this;
      document.activeElement.blur();
      return true;
    });
    $('#daform input[type="submit"]').click(function () {
      daSubmitter = this;
      document.activeElement.blur();
      return true;
    });
    $('#daemailform button[type="submit"]').click(function () {
      daSubmitter = this;
      return true;
    });
    $('#dadownloadform button[type="submit"]').click(function () {
      daSubmitter = this;
      return true;
    });
    $(".danavlinks a.daclickable").click(function (e) {
      if (daRequestPending) {
        e.preventDefault();
        $(this).blur();
        return false;
      }
      var the_key = $(this).data("key");
      da_action_perform("_da_priority_action", { _action: the_key });
      e.preventDefault();
      return false;
    });
    $(".danav-vertical .danavnested").each(function () {
      var box = this;
      var prev = $(this).prev();
      if (prev && !prev.hasClass("active")) {
        var toggler;
        if ($(box).hasClass("danotshowing")) {
          toggler = $(
            '<a href="#" class="toggler" role="button" aria-pressed="false">',
          );
          $('<i class="fa-solid fa-caret-right">').appendTo(toggler);
          $(
            '<span class="visually-hidden">' + daToggleWord + "</span>",
          ).appendTo(toggler);
        } else {
          toggler = $(
            '<a href="#" class="toggler" role="button" aria-pressed="true">',
          );
          $('<i class="fa-solid fa-caret-down">').appendTo(toggler);
          $(
            '<span class="visually-hidden">' + daToggleWord + "</span>",
          ).appendTo(toggler);
        }
        toggler.appendTo(prev);
        toggler.on("click", function (e) {
          var oThis = this;
          $(this)
            .find("svg")
            .each(function () {
              if ($(this).attr("data-icon") == "caret-down") {
                $(this).removeClass("fa-caret-down");
                $(this).addClass("fa-caret-right");
                $(this).attr("data-icon", "caret-right");
                $(box).hide();
                $(oThis).attr("aria-pressed", "false");
                $(box).toggleClass("danotshowing");
              } else if ($(this).attr("data-icon") == "caret-right") {
                $(this).removeClass("fa-caret-right");
                $(this).addClass("fa-caret-down");
                $(this).attr("data-icon", "caret-down");
                $(box).show();
                $(oThis).attr("aria-pressed", "true");
                $(box).toggleClass("danotshowing");
              }
            });
          e.stopPropagation();
          e.preventDefault();
          return false;
        });
      }
    });
    $("body").focus();
    if (!daJsEmbed && !isAndroid) {
      setTimeout(function () {
        var firstInput = $("#daform .da-field-container")
          .not(".da-field-container-note")
          .first()
          .find("input, textarea, select")
          .filter(":visible")
          .first();
        if (firstInput.length > 0 && $(firstInput).visible()) {
          $(firstInput).focus();
          var inputType = $(firstInput).attr("type");
          if (
            $(firstInput).prop("tagName") != "SELECT" &&
            inputType != "checkbox" &&
            inputType != "radio" &&
            inputType != "hidden" &&
            inputType != "submit" &&
            inputType != "file" &&
            inputType != "range" &&
            inputType != "number" &&
            inputType != "date" &&
            inputType != "time"
          ) {
            var strLength = $(firstInput).val().length * 2;
            if (strLength > 0) {
              try {
                $(firstInput)[0].setSelectionRange(strLength, strLength);
              } catch (err) {
                console.log(err.message);
              }
            }
          }
        } else {
          var firstButton = $("#danavbar-collapse .nav-link")
            .filter(":visible")
            .first();
          if (firstButton.length > 0 && $(firstButton).visible()) {
            setTimeout(function () {
              $(firstButton).focus();
              $(firstButton).blur();
            }, 0);
          }
        }
      }, 15);
    }
  }
  $("input.dauncheckspecificothers").on("change", function () {
    if ($(this).is(":checked")) {
      var theIds = $.parseJSON(atou($(this).data("unchecklist")));
      var n = theIds.length;
      for (var i = 0; i < n; ++i) {
        var elem = document.getElementById(theIds[i]);
        $(elem).prop("checked", false);
        $(elem).trigger("change");
      }
    }
  });
  $("input.dauncheckspecificothers").each(function () {
    var theIds = $.parseJSON(atou($(this).data("unchecklist")));
    var n = theIds.length;
    var oThis = this;
    for (var i = 0; i < n; ++i) {
      var elem = document.getElementById(theIds[i]);
      $(elem).on("change", function () {
        if ($(this).is(":checked")) {
          $(oThis).prop("checked", false);
          $(oThis).trigger("change");
        }
      });
    }
  });
  $("input.dauncheckothers").on("change", function () {
    if ($(this).is(":checked")) {
      $("input.dauncheckable,input.dacheckothers").each(function () {
        if ($(this).is(":checked")) {
          $(this).prop("checked", false);
          $(this).trigger("change");
        }
      });
    }
  });
  $("input.dacheckspecificothers").on("change", function () {
    if ($(this).is(":checked")) {
      var theIds = $.parseJSON(atou($(this).data("checklist")));
      var n = theIds.length;
      for (var i = 0; i < n; ++i) {
        var elem = document.getElementById(theIds[i]);
        $(elem).prop("checked", true);
        $(elem).trigger("change");
      }
    }
  });
  $("input.dacheckspecificothers").each(function () {
    var theIds = $.parseJSON(atou($(this).data("checklist")));
    var n = theIds.length;
    var oThis = this;
    for (var i = 0; i < n; ++i) {
      var elem = document.getElementById(theIds[i]);
      $(elem).on("change", function () {
        if (!$(this).is(":checked")) {
          $(oThis).prop("checked", false);
          $(oThis).trigger("change");
        }
      });
    }
  });
  $("input.dacheckothers").on("change", function () {
    if ($(this).is(":checked")) {
      $("input.dauncheckable").each(function () {
        if (!$(this).is(":checked")) {
          $(this).prop("checked", true);
          $(this).trigger("change");
        }
      });
      $("input.dauncheckothers").each(function () {
        if (!$(this).is(":checked")) {
          $(this).prop("checked", false);
          $(this).trigger("change");
        }
      });
    }
  });
  $("input.dauncheckable").on("change", function () {
    if ($(this).is(":checked")) {
      $("input.dauncheckothers").each(function () {
        if ($(this).is(":checked")) {
          $(this).prop("checked", false);
          $(this).trigger("change");
        }
      });
    } else {
      $("input.dacheckothers").each(function () {
        if ($(this).is(":checked")) {
          $(this).prop("checked", false);
          $(this).trigger("change");
        }
      });
    }
  });
  var navMain = $("#danavbar-collapse");
  navMain.on("click", "a", null, function () {
    if (!$(this).hasClass("dropdown-toggle")) {
      navMain.collapse("hide");
    }
  });
  $("button[data-bs-target='#dahelp']").on("shown.bs.tab", function () {
    if (daJsEmbed) {
      $(daTargetDiv)[0].scrollTo(0, 1);
    } else {
      window.scrollTo(0, 1);
    }
    $("#dahelptoggle").removeClass("daactivetext");
    $("#dahelptoggle").blur();
  });
  $("#dasourcetoggle").on("click", function () {
    $(this).parent().toggleClass("active");
    $(this).blur();
  });
  $("#dabackToQuestion").click(function (event) {
    $("#daquestionlabel").tab("show");
  });
  daVarLookup = Object();
  daVarLookupRev = Object();
  daVarLookupMulti = Object();
  daVarLookupRevMulti = Object();
  daVarLookupOption = Object();
  if ($("input[name='_varnames']").length) {
    the_hash = $.parseJSON(atou($("input[name='_varnames']").val()));
    for (var key in the_hash) {
      if (the_hash.hasOwnProperty(key)) {
        daVarLookup[the_hash[key]] = key;
        daVarLookupRev[key] = the_hash[key];
        if (!daVarLookupMulti.hasOwnProperty(the_hash[key])) {
          daVarLookupMulti[the_hash[key]] = [];
        }
        daVarLookupMulti[the_hash[key]].push(key);
        if (!daVarLookupRevMulti.hasOwnProperty(key)) {
          daVarLookupRevMulti[key] = [];
        }
        daVarLookupRevMulti[key].push(the_hash[key]);
      }
    }
  }
  if ($("input[name='_checkboxes']").length) {
    var patt = new RegExp(/\[B['"][^\]]*['"]\]$/);
    var pattObj = new RegExp(/\[O['"][^\]]*['"]\]$/);
    var pattRaw = new RegExp(/\[R['"][^\]]*['"]\]$/);
    the_hash = $.parseJSON(atou($("input[name='_checkboxes']").val()));
    for (var key in the_hash) {
      if (the_hash.hasOwnProperty(key)) {
        var checkboxName = atou(key);
        var baseName = checkboxName;
        if (patt.test(baseName)) {
          bracketPart = checkboxName.replace(
            /^.*(\[B?['"][^\]]*['"]\])$/,
            "$1",
          );
          checkboxName = checkboxName.replace(
            /^.*\[B?['"]([^\]]*)['"]\]$/,
            "$1",
          );
          baseName = baseName.replace(/^(.*)\[.*/, "$1");
          var transBaseName = baseName;
          if (
            $("[name='" + key + "']").length == 0 &&
            typeof daVarLookup[utoa(transBaseName).replace(/[\n=]/g, "")] !=
              "undefined"
          ) {
            transBaseName = atou(
              daVarLookup[utoa(transBaseName).replace(/[\n=]/g, "")],
            );
          }
          var convertedName;
          try {
            convertedName = atou(checkboxName);
          } catch (e) {
            continue;
          }
          var daNameOne = utoa(transBaseName + bracketPart).replace(
            /[\n=]/g,
            "",
          );
          var daNameTwo = utoa(baseName + "['" + convertedName + "']").replace(
            /[\n=]/g,
            "",
          );
          var daNameThree = utoa(
            baseName + '["' + convertedName + '"]',
          ).replace(/[\n=]/g, "");
          var daNameBase = utoa(baseName).replace(/[\n=]/g, "");
          daVarLookupRev[daNameOne] = daNameTwo;
          daVarLookup[daNameTwo] = daNameOne;
          daVarLookup[daNameThree] = daNameOne;
          daVarLookupOption[key] = convertedName;
          if (!daVarLookupRevMulti.hasOwnProperty(daNameOne)) {
            daVarLookupRevMulti[daNameOne] = [];
          }
          daVarLookupRevMulti[daNameOne].push(daNameTwo);
          if (!daVarLookupMulti.hasOwnProperty(daNameTwo)) {
            daVarLookupMulti[daNameTwo] = [];
          }
          daVarLookupMulti[daNameTwo].push(daNameOne);
          if (!daVarLookupMulti.hasOwnProperty(daNameThree)) {
            daVarLookupMulti[daNameThree] = [];
          }
          daVarLookupMulti[daNameThree].push(daNameOne);
          if (!daVarLookupMulti.hasOwnProperty(daNameBase)) {
            daVarLookupMulti[daNameBase] = [];
          }
          daVarLookupMulti[daNameBase].push(daNameOne);
        } else if (pattObj.test(baseName)) {
          bracketPart = checkboxName.replace(
            /^.*(\[O?['"][^\]]*['"]\])$/,
            "$1",
          );
          checkboxName = checkboxName.replace(
            /^.*\[O?['"]([^\]]*)['"]\]$/,
            "$1",
          );
          baseName = baseName.replace(/^(.*)\[.*/, "$1");
          var transBaseName = baseName;
          if (
            $("[name='" + key + "']").length == 0 &&
            typeof daVarLookup[utoa(transBaseName).replace(/[\n=]/g, "")] !=
              "undefined"
          ) {
            transBaseName = atou(
              daVarLookup[utoa(transBaseName).replace(/[\n=]/g, "")],
            );
          }
          var convertedName;
          try {
            convertedName = atou(atou(checkboxName));
          } catch (e) {
            continue;
          }
          var daNameOne = utoa(transBaseName + bracketPart).replace(
            /[\n=]/g,
            "",
          );
          var daNameTwo = utoa(baseName + "['" + convertedName + "']").replace(
            /[\n=]/g,
            "",
          );
          var daNameThree = utoa(
            baseName + '["' + convertedName + '"]',
          ).replace(/[\n=]/g, "");
          var daNameBase = utoa(baseName).replace(/[\n=]/g, "");
          daVarLookupRev[daNameOne] = daNameTwo;
          daVarLookup[daNameTwo] = daNameOne;
          daVarLookup[daNameThree] = daNameOne;
          daVarLookupOption[key] = convertedName;
          if (!daVarLookupRevMulti.hasOwnProperty(daNameOne)) {
            daVarLookupRevMulti[daNameOne] = [];
          }
          daVarLookupRevMulti[daNameOne].push(daNameTwo);
          if (!daVarLookupMulti.hasOwnProperty(daNameTwo)) {
            daVarLookupMulti[daNameTwo] = [];
          }
          daVarLookupMulti[daNameTwo].push(daNameOne);
          if (!daVarLookupMulti.hasOwnProperty(daNameThree)) {
            daVarLookupMulti[daNameThree] = [];
          }
          daVarLookupMulti[daNameThree].push(daNameOne);
          if (!daVarLookupMulti.hasOwnProperty(daNameBase)) {
            daVarLookupMulti[daNameBase] = [];
          }
          daVarLookupMulti[daNameBase].push(daNameOne);
        } else if (pattRaw.test(baseName)) {
          bracketPart = checkboxName.replace(
            /^.*(\[R?['"][^\]]*['"]\])$/,
            "$1",
          );
          checkboxName = checkboxName.replace(
            /^.*\[R?['"]([^\]]*)['"]\]$/,
            "$1",
          );
          baseName = baseName.replace(/^(.*)\[.*/, "$1");
          var transBaseName = baseName;
          if (
            $("[name='" + key + "']").length == 0 &&
            typeof daVarLookup[utoa(transBaseName).replace(/[\n=]/g, "")] !=
              "undefined"
          ) {
            transBaseName = atou(
              daVarLookup[utoa(transBaseName).replace(/[\n=]/g, "")],
            );
          }
          var convertedName;
          try {
            convertedName = atou(checkboxName);
          } catch (e) {
            continue;
          }
          var daNameOne = utoa(transBaseName + bracketPart).replace(
            /[\n=]/g,
            "",
          );
          var daNameTwo = utoa(baseName + "[" + convertedName + "]").replace(
            /[\n=]/g,
            "",
          );
          var daNameBase = utoa(baseName).replace(/[\n=]/g, "");
          daVarLookupRev[daNameOne] = daNameTwo;
          daVarLookup[daNameTwo] = daNameOne;
          daVarLookupOption[key] = convertedName;
          if (!daVarLookupRevMulti.hasOwnProperty(daNameOne)) {
            daVarLookupRevMulti[daNameOne] = [];
          }
          daVarLookupRevMulti[daNameOne].push(daNameTwo);
          if (!daVarLookupMulti.hasOwnProperty(daNameTwo)) {
            daVarLookupMulti[daNameTwo] = [];
          }
          daVarLookupMulti[daNameTwo].push(daNameOne);
          if (!daVarLookupMulti.hasOwnProperty(daNameBase)) {
            daVarLookupMulti[daNameBase] = [];
          }
          daVarLookupMulti[daNameBase].push(daNameOne);
        }
      }
    }
  }
  daShowIfInProcess = true;
  var daTriggerQueries = [];
  var daInputsSeen = {};
  function daOnlyUnique(value, index, self) {
    return self.indexOf(value) === index;
  }
  $(".dajsshowif").each(function () {
    var showIfDiv = this;
    var jsInfo = JSON.parse(atou($(this).data("jsshowif")));
    var showIfSign = jsInfo["sign"];
    var showIfMode = jsInfo["mode"];
    var jsExpression = jsInfo["expression"];
    jsInfo["vars"].forEach(function (infoItem, i) {
      var showIfVars = [];
      var initShowIfVar = utoa(infoItem).replace(/[\n=]/g, "");
      var initShowIfVarEscaped = initShowIfVar.replace(
        /(:|\.|\[|\]|,|=)/g,
        "\\$1",
      );
      var elem = $("[name='" + initShowIfVarEscaped + "']");
      if (elem.length > 0) {
        showIfVars.push(initShowIfVar);
      }
      if (daVarLookupMulti.hasOwnProperty(initShowIfVar)) {
        for (var j = 0; j < daVarLookupMulti[initShowIfVar].length; j++) {
          var altShowIfVar = daVarLookupMulti[initShowIfVar][j];
          var altShowIfVarEscaped = altShowIfVar.replace(
            /(:|\.|\[|\]|,|=)/g,
            "\\$1",
          );
          var altElem = $("[name='" + altShowIfVarEscaped + "']");
          if (altElem.length > 0 && !$.contains(this, altElem[0])) {
            showIfVars.push(altShowIfVar);
          }
        }
      }
      if (showIfVars.length == 0) {
        console.log("ERROR: reference to non-existent field " + infoItem);
      }
      showIfVars.forEach(function (showIfVar) {
        var showIfVarEscaped = showIfVar.replace(/(:|\.|\[|\]|,|=)/g, "\\$1");
        var varToUse = infoItem;
        var showHideDiv = function (speed) {
          var elem = daGetField(varToUse);
          if (
            elem != null &&
            !$(elem)
              .parents(".da-form-group")
              .first()
              .is($(this).parents(".da-form-group").first())
          ) {
            return;
          }
          var resultt = eval(jsExpression);
          if (resultt) {
            if (showIfSign) {
              if ($(showIfDiv).data("isVisible") != "1") {
                daShowHideHappened = true;
              }
              if (showIfMode == 0) {
                $(showIfDiv).show(speed);
              }
              $(showIfDiv).data("isVisible", "1");
              $(showIfDiv)
                .find("input, textarea, select")
                .prop("disabled", false);
              $(showIfDiv)
                .find("input.combobox")
                .each(function () {
                  if (daComboBoxes[$(this).attr("id")]) {
                    daComboBoxes[$(this).attr("id")].enable();
                  } else {
                    $(this).prop("disabled", false);
                  }
                });
              $(showIfDiv)
                .find("input.daslider")
                .each(function () {
                  $(this).slider("enable");
                });
              $(showIfDiv)
                .find("input.dafile")
                .each(function () {
                  $(this).data("fileinput").enable();
                });
            } else {
              if ($(showIfDiv).data("isVisible") != "0") {
                daShowHideHappened = true;
              }
              if (showIfMode == 0) {
                $(showIfDiv).hide(speed);
              }
              $(showIfDiv).data("isVisible", "0");
              $(showIfDiv)
                .find("input, textarea, select")
                .prop("disabled", true);
              $(showIfDiv)
                .find("input.combobox")
                .each(function () {
                  if (daComboBoxes[$(this).attr("id")]) {
                    daComboBoxes[$(this).attr("id")].disable();
                  } else {
                    $(this).prop("disabled", false);
                  }
                });
              $(showIfDiv)
                .find("input.daslider")
                .each(function () {
                  $(this).slider("disable");
                });
              $(showIfDiv)
                .find("input.dafile")
                .each(function () {
                  $(this).data("fileinput").disable();
                });
            }
          } else {
            if (showIfSign) {
              if ($(showIfDiv).data("isVisible") != "0") {
                daShowHideHappened = true;
              }
              if (showIfMode == 0) {
                $(showIfDiv).hide(speed);
              }
              $(showIfDiv).data("isVisible", "0");
              $(showIfDiv)
                .find("input, textarea, select")
                .prop("disabled", true);
              $(showIfDiv)
                .find("input.combobox")
                .each(function () {
                  if (daComboBoxes[$(this).attr("id")]) {
                    daComboBoxes[$(this).attr("id")].disable();
                  } else {
                    $(this).prop("disabled", true);
                  }
                });
              $(showIfDiv)
                .find("input.daslider")
                .each(function () {
                  $(this).slider("disable");
                });
              $(showIfDiv)
                .find("input.dafile")
                .each(function () {
                  $(this).data("fileinput").disable();
                });
            } else {
              if ($(showIfDiv).data("isVisible") != "1") {
                daShowHideHappened = true;
              }
              if (showIfMode == 0) {
                $(showIfDiv).show(speed);
              }
              $(showIfDiv).data("isVisible", "1");
              $(showIfDiv)
                .find("input, textarea, select")
                .prop("disabled", false);
              $(showIfDiv)
                .find("input.combobox")
                .each(function () {
                  if (daComboBoxes[$(this).attr("id")]) {
                    daComboBoxes[$(this).attr("id")].enable();
                  } else {
                    $(this).prop("disabled", false);
                  }
                });
              $(showIfDiv)
                .find("input.daslider")
                .each(function () {
                  $(this).slider("enable");
                });
              $(showIfDiv)
                .find("input.dafile")
                .each(function () {
                  $(this).data("fileinput").enable();
                });
            }
          }
          var leader = false;
          if (!daShowIfInProcess) {
            daShowIfInProcess = true;
            daInputsSeen = {};
            leader = true;
          }
          $(showIfDiv)
            .find(":input")
            .not("[type='file']")
            .each(function () {
              if (!daInputsSeen.hasOwnProperty($(this).attr("id"))) {
                $(this).trigger("change");
              }
              daInputsSeen[$(this).attr("id")] = true;
            });
          if (leader) {
            daShowIfInProcess = false;
          }
        };
        var showHideDivImmediate = function () {
          showHideDiv.apply(this, [null]);
        };
        var showHideDivFast = function () {
          showHideDiv.apply(this, ["fast"]);
        };
        daTriggerQueries.push("#" + showIfVarEscaped);
        daTriggerQueries.push(
          "input[type='radio'][name='" + showIfVarEscaped + "']",
        );
        daTriggerQueries.push(
          "input[type='checkbox'][name='" + showIfVarEscaped + "']",
        );
        $("#" + showIfVarEscaped).change(showHideDivFast);
        $("input[type='radio'][name='" + showIfVarEscaped + "']").change(
          showHideDivFast,
        );
        $("input[type='checkbox'][name='" + showIfVarEscaped + "']").change(
          showHideDivFast,
        );
        $("input.dafile[name='" + showIfVarEscaped + "']").on(
          "filecleared",
          showHideDivFast,
        );
        $("#" + showIfVarEscaped).on("daManualTrigger", showHideDivImmediate);
        $("input[type='radio'][name='" + showIfVarEscaped + "']").on(
          "daManualTrigger",
          showHideDivImmediate,
        );
        $("input[type='checkbox'][name='" + showIfVarEscaped + "']").on(
          "daManualTrigger",
          showHideDivImmediate,
        );
      });
    });
  });
  $(".dashowif").each(function () {
    var showIfVars = [];
    var showIfSign = $(this).data("showif-sign");
    var showIfMode = parseInt($(this).data("showif-mode"));
    var initShowIfVar = $(this).data("showif-var");
    var varName = atou(initShowIfVar);
    var elem = [];
    if (varName.endsWith("[nota]") || varName.endsWith("[aota]")) {
      var signifier = varName.endsWith("[nota]") ? "nota" : "aota";
      var cbVarName = varName.replace(/\[[na]ota\]$/, "");
      $("div.da-field-group.da-field-checkboxes").each(function () {
        var thisVarName = atou($(this).data("varname"));
        if (thisVarName == cbVarName) {
          elem = $(this).find("input.da" + signifier + "-checkbox");
          initShowIfVar = $(elem).attr("name");
        }
      });
    } else {
      var initShowIfVarEscaped = initShowIfVar.replace(
        /(:|\.|\[|\]|,|=)/g,
        "\\$1",
      );
      elem = $("[name='" + initShowIfVarEscaped + "']");
    }
    if (elem.length > 0) {
      showIfVars.push(initShowIfVar);
    }
    if (daVarLookupMulti.hasOwnProperty(initShowIfVar)) {
      var n = daVarLookupMulti[initShowIfVar].length;
      for (var i = 0; i < n; i++) {
        var altShowIfVar = daVarLookupMulti[initShowIfVar][i];
        var altShowIfVarEscaped = altShowIfVar.replace(
          /(:|\.|\[|\]|,|=)/g,
          "\\$1",
        );
        var altElem = $("[name='" + altShowIfVarEscaped + "']");
        if (altElem.length > 0 && !$.contains(this, altElem[0])) {
          showIfVars.push(altShowIfVar);
        }
      }
    }
    var showIfVal = $(this).data("showif-val");
    var saveAs = $(this).data("saveas");
    var showIfDiv = this;
    showIfVars.forEach(function (showIfVar) {
      var showIfVarEscaped = showIfVar.replace(/(:|\.|\[|\]|,|=)/g, "\\$1");
      var showHideDiv = function (speed) {
        var elem = daGetField(varName, showIfDiv);
        if (
          elem != null &&
          !$(elem)
            .parents(".da-form-group")
            .first()
            .is($(this).parents(".da-form-group").first())
        ) {
          return;
        }
        var theVal;
        var showifParents = $(this).parents(".dashowif");
        if (
          showifParents.length !== 0 &&
          !($(showifParents[0]).data("isVisible") == "1")
        ) {
          theVal = "";
          //console.log("Setting theVal to blank.");
        } else if ($(this).attr("type") == "checkbox") {
          theVal = $("input[name='" + showIfVarEscaped + "']:checked").val();
          if (typeof theVal == "undefined") {
            //console.log('manually setting checkbox value to False');
            theVal = "False";
          }
        } else if ($(this).attr("type") == "radio") {
          theVal = $("input[name='" + showIfVarEscaped + "']:checked").val();
          if (typeof theVal == "undefined") {
            theVal = "";
          } else if (
            theVal != "" &&
            $("input[name='" + showIfVarEscaped + "']:checked").hasClass(
              "daobject",
            )
          ) {
            try {
              theVal = atou(theVal);
            } catch (e) {}
          }
        } else {
          theVal = $(this).val();
          if (theVal != "" && $(this).hasClass("daobject")) {
            try {
              theVal = atou(theVal);
            } catch (e) {}
          }
        }
        // console.log("There was a trigger on " + $(this).attr('id') + ". This handler was installed based on varName " + varName + ", showIfVar " + atou(showIfVar) + ". This handler was installed for the benefit of the .dashowif div encompassing the field for " + atou(saveAs) + ". The comparison value is " + String(showIfVal) + " and the current value of the element on the screen is " + String(theVal) + ".");
        if (daShowIfCompare(theVal, showIfVal)) {
          if (showIfSign) {
            if ($(showIfDiv).data("isVisible") != "1") {
              daShowHideHappened = true;
            }
            if (showIfMode == 0) {
              $(showIfDiv).show(speed);
            }
            $(showIfDiv).data("isVisible", "1");
            var firstChild = $(showIfDiv).children()[0];
            if (
              !$(firstChild).hasClass("dacollectextra") ||
              $(firstChild).is(":visible")
            ) {
              $(showIfDiv)
                .find("input, textarea, select")
                .prop("disabled", false);
              $(showIfDiv)
                .find("input.combobox")
                .each(function () {
                  if (daComboBoxes[$(this).attr("id")]) {
                    daComboBoxes[$(this).attr("id")].enable();
                  } else {
                    $(this).prop("disabled", false);
                  }
                });
              $(showIfDiv)
                .find("input.daslider")
                .each(function () {
                  $(this).slider("enable");
                });
              $(showIfDiv)
                .find("input.dafile")
                .each(function () {
                  $(this).data("fileinput").enable();
                });
            }
          } else {
            if ($(showIfDiv).data("isVisible") != "0") {
              daShowHideHappened = true;
            }
            if (showIfMode == 0) {
              $(showIfDiv).hide(speed);
            }
            $(showIfDiv).data("isVisible", "0");
            $(showIfDiv).find("input, textarea, select").prop("disabled", true);
            $(showIfDiv)
              .find("input.combobox")
              .each(function () {
                if (daComboBoxes[$(this).attr("id")]) {
                  daComboBoxes[$(this).attr("id")].disable();
                } else {
                  $(this).prop("disabled", true);
                }
              });
            $(showIfDiv)
              .find("input.daslider")
              .each(function () {
                $(this).slider("disable");
              });
            $(showIfDiv)
              .find("input.dafile")
              .each(function () {
                $(this).data("fileinput").disable();
              });
          }
        } else {
          if (showIfSign) {
            if ($(showIfDiv).data("isVisible") != "0") {
              daShowHideHappened = true;
            }
            if (showIfMode == 0) {
              $(showIfDiv).hide(speed);
            }
            $(showIfDiv).data("isVisible", "0");
            $(showIfDiv).find("input, textarea, select").prop("disabled", true);
            $(showIfDiv)
              .find("input.combobox")
              .each(function () {
                if (daComboBoxes[$(this).attr("id")]) {
                  daComboBoxes[$(this).attr("id")].disable();
                } else {
                  $(this).prop("disabled", true);
                }
              });
            $(showIfDiv)
              .find("input.daslider")
              .each(function () {
                $(this).slider("disable");
              });
            $(showIfDiv)
              .find("input.dafile")
              .each(function () {
                $(this).data("fileinput").disable();
              });
          } else {
            if ($(showIfDiv).data("isVisible") != "1") {
              daShowHideHappened = true;
            }
            if (showIfMode == 0) {
              $(showIfDiv).show(speed);
            }
            $(showIfDiv).data("isVisible", "1");
            var firstChild = $(showIfDiv).children()[0];
            if (
              !$(firstChild).hasClass("dacollectextra") ||
              $(firstChild).is(":visible")
            ) {
              $(showIfDiv)
                .find("input, textarea, select")
                .prop("disabled", false);
              $(showIfDiv)
                .find("input.combobox")
                .each(function () {
                  if (daComboBoxes[$(this).attr("id")]) {
                    daComboBoxes[$(this).attr("id")].enable();
                  } else {
                    $(this).prop("disabled", false);
                  }
                });
              $(showIfDiv)
                .find("input.daslider")
                .each(function () {
                  $(this).slider("enable");
                });
              $(showIfDiv)
                .find("input.dafile")
                .each(function () {
                  $(this).data("fileinput").enable();
                });
            }
          }
        }
        var leader = false;
        if (!daShowIfInProcess) {
          daShowIfInProcess = true;
          daInputsSeen = {};
          leader = true;
        }
        $(showIfDiv)
          .find(":input")
          .not("[type='file']")
          .each(function () {
            if (!daInputsSeen.hasOwnProperty($(this).attr("id"))) {
              $(this).trigger("change");
            }
            daInputsSeen[$(this).attr("id")] = true;
          });
        if (leader) {
          daShowIfInProcess = false;
        }
      };
      var showHideDivImmediate = function () {
        showHideDiv.apply(this, [null]);
      };
      var showHideDivFast = function () {
        showHideDiv.apply(this, ["fast"]);
      };
      daTriggerQueries.push("#" + showIfVarEscaped);
      daTriggerQueries.push(
        "input[type='radio'][name='" + showIfVarEscaped + "']",
      );
      daTriggerQueries.push(
        "input[type='checkbox'][name='" + showIfVarEscaped + "']",
      );
      $("#" + showIfVarEscaped).change(showHideDivFast);
      $("#" + showIfVarEscaped).on("daManualTrigger", showHideDivImmediate);
      $("input[type='radio'][name='" + showIfVarEscaped + "']").change(
        showHideDivFast,
      );
      $("input[type='radio'][name='" + showIfVarEscaped + "']").on(
        "daManualTrigger",
        showHideDivImmediate,
      );
      $("input[type='checkbox'][name='" + showIfVarEscaped + "']").change(
        showHideDivFast,
      );
      $("input[type='checkbox'][name='" + showIfVarEscaped + "']").on(
        "daManualTrigger",
        showHideDivImmediate,
      );
      $("input.dafile[name='" + showIfVarEscaped + "']").on(
        "filecleared",
        showHideDivFast,
      );
    });
  });
  function daTriggerAllShowHides() {
    var daUniqueTriggerQueries = daTriggerQueries.filter(daOnlyUnique);
    var daFirstTime = true;
    var daTries = 0;
    while ((daFirstTime || daShowHideHappened) && ++daTries < 100) {
      daShowHideHappened = false;
      daFirstTime = false;
      var n = daUniqueTriggerQueries.length;
      for (var i = 0; i < n; ++i) {
        $(daUniqueTriggerQueries[i]).trigger("daManualTrigger");
      }
    }
    if (daTries >= 100) {
      console.log("Too many contradictory 'show if' conditions");
    }
  }
  if (daTriggerQueries.length > 0) {
    daTriggerAllShowHides();
  }
  $(".danavlink").last().addClass("thelast");
  $(".danavlink").each(function () {
    if ($(this).hasClass("btn") && !$(this).hasClass("danotavailableyet")) {
      var the_a = $(this);
      var the_delay = 1000 + 250 * parseInt($(this).data("index"));
      setTimeout(function () {
        $(the_a).removeClass(daButtonStyle + "secondary");
        if ($(the_a).hasClass("active")) {
          $(the_a).addClass(daButtonStyle + "success");
        } else {
          $(the_a).addClass(daButtonStyle + "warning");
        }
      }, the_delay);
    }
  });
  daShowIfInProcess = false;
  if (!daObserverMode) {
    $("#daSend").click(daSender);
    if (daChatAvailable == "unavailable") {
      daChatStatus = "off";
    }
    if (daChatAvailable == "observeonly") {
      daChatStatus = "observeonly";
    }
    if (
      (daChatStatus == "off" || daChatStatus == "observeonly") &&
      daChatAvailable == "available"
    ) {
      daChatStatus = "waiting";
    }
    daDisplayChat();
    if (daBeingControlled) {
      daShowControl("fast");
    }
    if (daChatStatus == "ready" || daBeingControlled) {
      daInitializeSocket();
    }
    if (daInitialized == false && daCheckinSeconds > 0) {
      // why was this set to always retrieve the chat log?
      setTimeout(function () {
        //console.log("daInitialize call to chat_log in checkin");
        $.ajax({
          type: "POST",
          url: daCheckinUrlWithInterview,
          beforeSend: addCsrfHeader,
          xhrFields: {
            withCredentials: true,
          },
          data: $.param({ action: "chat_log", ajax: "1", csrf_token: daCsrf }),
          success: daChatLogCallback,
          dataType: "json",
        });
      }, 200);
    }
    if (daInitialized == true) {
      //console.log("Publishing from memory");
      $("#daCorrespondence").html("");
      for (var i = 0; i < daChatHistory.length; i++) {
        daPublishMessage(daChatHistory[i]);
      }
    }
    if (daChatStatus != "off") {
      daSendChanges = true;
    } else {
      if (daDoAction == null) {
        daSendChanges = false;
      } else {
        daSendChanges = true;
      }
    }
  }
  if (daSendChanges || daObserverMode) {
    $("#daform").each(function () {
      $(this).find(":input").change(daOnChange);
    });
  }
  daInitialized = true;
  daShowingHelp = 0;
  daSubmitter = null;
  $("#daflash .alert-success").each(function () {
    var oThis = this;
    setTimeout(function () {
      $(oThis).hide(300, function () {
        $(self).remove();
      });
    }, 3000);
  });
  if (doScroll && !daObserverMode) {
    setTimeout(function () {
      if (daJsEmbed) {
        $(daTargetDiv)[0].scrollTo(0, 1);
        if (daSteps > 1) {
          $(daTargetDiv)[0].scrollIntoView();
        }
      } else {
        window.scrollTo(0, 1);
      }
    }, 20);
  }
  if (daShowingSpinner && !daWaitPage) {
    daHideSpinner();
  }
  if (!daObserverMode) {
    if (daCheckinInterval != null) {
      clearInterval(daCheckinInterval);
    }
    if (daCheckinSeconds > 0 && !daWaitPage) {
      daInitialCheckinTimeout = setTimeout(daInitialCheckin, 100);
      daCheckinInterval = setInterval(daCheckin, daCheckinSeconds);
    }
    daShowNotifications();
    if (daUsingGA) {
      daPageview();
    }
    if (daUsingSegment) {
      daSegmentEvent();
    }
    hideTablist();
  }
}
function daUpdateHeight() {
  $(".dagooglemap").each(function () {
    var size = $(this).width();
    $(this).css("height", size);
  });
}
function daConfigureJqueryFuncs() {
  $.validator.setDefaults({
    ignore: ".danovalidation",
    highlight: function (element) {
      $(element).closest(".da-form-group").addClass("da-group-has-error");
      $(element).addClass("is-invalid");
    },
    unhighlight: function (element) {
      $(element).closest(".da-form-group").removeClass("da-group-has-error");
      $(element).removeClass("is-invalid");
    },
    errorElement: "span",
    errorClass: "da-has-error invalid-feedback",
    errorPlacement: function (error, element) {
      $(error).addClass("invalid-feedback");
      var elementName = $(element).attr("name");
      var idOfErrorSpan = $(element).attr("id") + "-error";
      $("#" + idOfErrorSpan).remove();
      $(error).attr("id", idOfErrorSpan);
      $(element).attr("aria-invalid", "true");
      $(element).attr("aria-errormessage", idOfErrorSpan);
      var lastInGroup = $.map(
        daValidationRules["groups"],
        function (thefields, thename) {
          var fieldsArr;
          if (thefields.indexOf(elementName) >= 0) {
            fieldsArr = thefields.split(" ");
            return fieldsArr[fieldsArr.length - 1];
          } else {
            return null;
          }
        },
      )[0];
      if (element.hasClass("dainput-embedded")) {
        error.insertAfter(element);
      } else if (element.hasClass("dafile-embedded")) {
        error.insertAfter(element);
      } else if (element.hasClass("daradio-embedded")) {
        element.parent().append(error);
      } else if (element.hasClass("dacheckbox-embedded")) {
        element.parent().append(error);
      } else if (element.hasClass("dauncheckable") && lastInGroup) {
        $("input[name='" + lastInGroup + "']")
          .parent()
          .append(error);
      } else if (element.parent().hasClass("combobox-container")) {
        element.parent().append(error);
      } else if (element.hasClass("dafile")) {
        var fileContainer = $(element).parents(".file-input").first();
        if (fileContainer.length > 0) {
          $(fileContainer).append(error);
        } else {
          error.insertAfter(element.parent());
        }
      } else if (element.parent(".input-group").length) {
        error.insertAfter(element.parent());
      } else if (element.hasClass("da-active-invisible")) {
        var choice_with_help = $(element).parents(".dachoicewithhelp").first();
        if (choice_with_help.length > 0) {
          $(choice_with_help).parent().append(error);
        } else {
          element.parent().append(error);
        }
      } else if (element.hasClass("danon-nota-checkbox")) {
        element.parents("div.da-field-group").append(error);
      } else {
        error.insertAfter(element);
      }
    },
  });
  $.validator.addMethod("datetime", function (a, b) {
    return true;
  });
  $.validator.addMethod("ajaxrequired", function (value, element, params) {
    var realElement = $("#" + $(element).attr("name") + "combobox");
    var realValue = $(realElement).val();
    if (!$(realElement).parent().is(":visible")) {
      return true;
    }
    if (realValue == null || realValue.replace(/\s/g, "") == "") {
      return false;
    }
    return true;
  });
  $.validator.addMethod("checkone", function (value, element, params) {
    var number_needed = params[0];
    var css_query = params[1];
    if ($(css_query).length >= number_needed) {
      return true;
    } else {
      return false;
    }
  });
  $.validator.addMethod("checkatleast", function (value, element, params) {
    if ($(element).attr("name") != "_ignore" + params[0]) {
      return true;
    }
    if ($(".dafield" + params[0] + ":checked").length >= params[1]) {
      return true;
    } else {
      return false;
    }
  });
  $.validator.addMethod("checkatmost", function (value, element, params) {
    if ($(element).attr("name") != "_ignore" + params[0]) {
      return true;
    }
    if ($(".dafield" + params[0] + ":checked").length > params[1]) {
      return false;
    } else {
      return true;
    }
  });
  $.validator.addMethod("checkexactly", function (value, element, params) {
    if ($(element).attr("name") != "_ignore" + params[0]) {
      return true;
    }
    if ($(".dafield" + params[0] + ":checked").length != params[1]) {
      return false;
    } else {
      return true;
    }
  });
  $.validator.addMethod("selectexactly", function (value, element, params) {
    if ($(element).find("option:selected").length == params[0]) {
      return true;
    } else {
      return false;
    }
  });
  $.validator.addMethod("mindate", function (value, element, params) {
    if (value == null || value == "") {
      return true;
    }
    try {
      var date = new Date(value);
      var comparator = new Date(params);
      if (date >= comparator) {
        return true;
      }
    } catch (e) {}
    return false;
  });
  $.validator.addMethod("maxdate", function (value, element, params) {
    if (value == null || value == "") {
      return true;
    }
    try {
      var date = new Date(value);
      var comparator = new Date(params);
      if (date <= comparator) {
        return true;
      }
    } catch (e) {}
    return false;
  });
  $.validator.addMethod("minmaxdate", function (value, element, params) {
    if (value == null || value == "") {
      return true;
    }
    try {
      var date = new Date(value);
      var before_comparator = new Date(params[0]);
      var after_comparator = new Date(params[1]);
      if (date >= before_comparator && date <= after_comparator) {
        return true;
      }
    } catch (e) {}
    return false;
  });
  $.validator.addMethod("mintime", function (value, element, params) {
    if (value == null || value == "") {
      return true;
    }
    try {
      var time = new Date("1970-01-01T" + value + "Z");
      var comparator = new Date("1970-01-01T" + params + "Z");
      if (time >= comparator) {
        return true;
      }
    } catch (e) {}
    return false;
  });
  $.validator.addMethod("maxtime", function (value, element, params) {
    if (value == null || value == "") {
      return true;
    }
    try {
      var time = new Date("1970-01-01T" + value + "Z");
      var comparator = new Date("1970-01-01T" + params + "Z");
      if (time <= comparator) {
        return true;
      }
    } catch (e) {}
    return false;
  });
  $.validator.addMethod("minmaxtime", function (value, element, params) {
    if (value == null || value == "") {
      return true;
    }
    try {
      var time = new Date("1970-01-01T" + value + "Z");
      var before_comparator = new Date("1970-01-01T" + params[0] + "Z");
      var after_comparator = new Date("1970-01-01T" + params[1] + "Z");
      if (time >= before_comparator && time <= after_comparator) {
        return true;
      }
    } catch (e) {}
    return false;
  });
  $.validator.addMethod("mindatetime", function (value, element, params) {
    if (value == null || value == "") {
      return true;
    }
    try {
      var datetime = new Date(value + "Z");
      var comparator = new Date(params + "Z");
      if (datetime >= comparator) {
        return true;
      }
    } catch (e) {}
    return false;
  });
  $.validator.addMethod("maxdatetime", function (value, element, params) {
    if (value == null || value == "") {
      return true;
    }
    try {
      var datetime = new Date(value + "Z");
      var comparator = new Date(params + "Z");
      if (datetime <= comparator) {
        return true;
      }
    } catch (e) {}
    return false;
  });
  $.validator.addMethod("minmaxdatetime", function (value, element, params) {
    if (value == null || value == "") {
      return true;
    }
    try {
      var datetime = new Date(value + "Z");
      var before_comparator = new Date(params[0] + "Z");
      var after_comparator = new Date(params[1] + "Z");
      if (datetime >= before_comparator && datetime <= after_comparator) {
        return true;
      }
    } catch (e) {}
    return false;
  });
  $.validator.addMethod("maxuploadsize", function (value, element, param) {
    try {
      var limit = parseInt(param) - 2000;
      if (limit <= 0) {
        return true;
      }
      var maxImageSize;
      if ($(element).data("maximagesize")) {
        maxImageSize =
          parseInt($(element).data("maximagesize")) *
          parseInt($(element).data("maximagesize")) *
          2;
      } else {
        maxImageSize = 0;
      }
      if ($(element).attr("type") === "file") {
        if (element.files && element.files.length) {
          var totalSize = 0;
          for (i = 0; i < element.files.length; i++) {
            if (
              maxImageSize > 0 &&
              element.files[i].size > 0.2 * maxImageSize &&
              element.files[i].type.match(/image.*/) &&
              !(element.files[i].type.indexOf("image/svg") == 0)
            ) {
              totalSize += maxImageSize;
            } else {
              totalSize += element.files[i].size;
            }
          }
          if (totalSize > limit) {
            return false;
          }
        }
        return true;
      }
    } catch (e) {}
    return false;
  });
}
var dataLayer = (window.dataLayer = window.dataLayer || []);
function gtag() {
  dataLayer.push(arguments);
}
function daPageview() {
  var idToUse = daQuestionID["id"];
  if (daQuestionID["ga"] != undefined && daQuestionID["ga"] != null) {
    idToUse = daQuestionID["ga"];
  }
  if (idToUse != null) {
    idToUse = idToUse.replace(/[^A-Za-z0-9]+/g, "_");
    if (!daGAConfigured) {
      var opts = { send_page_view: false };
      if (daSecureCookies) {
        opts["cookie_flags"] = "SameSite=None;Secure";
      }
      for (var i = 0; i < daGaIds.length; i++) {
        gtag("config", daGaIds[i], opts);
        daGAConfigured = true;
      }
    }
    gtag(
      "set",
      "page_path",
      daInterviewPackage + "/" + daInterviewFilename + "/" + idToUse,
    );
    gtag("event", "page_view", {
      page_path: daInterviewPackage + "/" + daInterviewFilename + "/" + idToUse,
    });
  }
}
function daStopPushChanges() {
  if (daObserverChangesInterval != null) {
    clearInterval(daObserverChangesInterval);
  }
}
function daResetPushChanges() {
  if (daObserverChangesInterval != null) {
    clearInterval(daObserverChangesInterval);
  }
  daObserverChangesInterval = setInterval(daPushChanges, 6000);
}
function daReadyFunction() {
  daInitialize(1);
  //console.log("ready: replaceState " + daSteps);
  if (!daJsEmbed && !daIframeEmbed) {
    history.replaceState(
      { steps: daSteps },
      "",
      daLocationBar + daPageSep + daSteps,
    );
  }
  var daReloadAfter = daReloadAfterSeconds;
  if (daReloadAfter > 0) {
    daReloader = setTimeout(function () {
      daRefreshSubmit();
    }, daReloadAfter);
  }
  if (daUsingGA && !daObserverMode) {
    gtag("js", new Date());
  }
  window.onpopstate = function (event) {
    if (
      event.state != null &&
      event.state.steps < daSteps &&
      daAllowGoingBack
    ) {
      $("#dabackbutton").submit();
    }
  };
  $(window).bind("unload", function () {
    if (!daObserverMode) {
      daStopCheckingIn();
    }
    if (daSocket != null && daSocket.connected) {
      //console.log('Terminating interview socket because window unloaded');
      daSocket.emit("terminate");
    }
  });
  var daDefaultAllowList = bootstrap.Tooltip.Default.allowList;
  daDefaultAllowList["*"].push("style");
  daDefaultAllowList["a"].push("style");
  daDefaultAllowList["img"].push("style");
  if (daJsEmbed) {
    $.ajax({
      type: "POST",
      url: daPostURL,
      beforeSend: addCsrfHeader,
      xhrFields: {
        withCredentials: true,
      },
      data: "csrf_token=" + daCsrf + "&ajax=1",
      success: function (data) {
        setTimeout(function () {
          daProcessAjax(data, $("#daform"), 0);
        }, 0);
      },
      error: function (xhr, status, error) {
        setTimeout(function () {
          daProcessAjaxError(xhr, status, error);
        }, 0);
      },
    });
  }
  if (daObserverMode) {
    if (
      location.protocol === "http:" ||
      document.location.protocol === "http:"
    ) {
      daSocket = io.connect("http://" + document.domain + "/observer", {
        path: daRootUrl + "/ws/socket.io",
        query: "i=" + daYamlFilename,
      });
    }
    if (
      location.protocol === "https:" ||
      document.location.protocol === "https:"
    ) {
      daSocket = io.connect("https://" + document.domain + "/observer", {
        path: daRootUrl + "/ws/socket.io",
        query: "i=" + daYamlFilename,
      });
    }
    if (typeof daSocket !== "undefined") {
      daSocket.on("connect", function () {
        //console.log("Connected!");
        daSocket.emit("observe", {
          uid: daUid,
          i: daYamlFilename,
          userid: daUserObserved,
        });
        daConnected = true;
      });
      daSocket.on("terminate", function () {
        //console.log("Terminating socket");
        daSocket.disconnect();
      });
      daSocket.on("disconnect", function () {
        //console.log("Disconnected socket");
        //daSocket = null;
      });
      daSocket.on("stopcontrolling", function (data) {
        window.parent.daStopControlling(data.key);
      });
      daSocket.on("start_being_controlled", function (data) {
        //console.log("Got start_being_controlled");
        daConfirmed = true;
        daPushChanges();
        window.parent.daGotConfirmation(data.key);
      });
      daSocket.on("abortcontrolling", function (data) {
        //console.log("Got abortcontrolling");
        //daSendChanges = false;
        //daConfirmed = false;
        //daStopPushChanges();
        window.parent.daAbortControlling(data.key);
      });
      daSocket.on("noconnection", function (data) {
        //console.log("warning: no connection");
        if (daNoConnectionCount++ > 2) {
          //console.log("error: no connection");
          window.parent.daStopControlling(data.key);
        }
      });
      daSocket.on("newpage", function (incoming) {
        //console.log("Got newpage")
        var data = incoming.obj;
        $(daTargetDiv).html(data.body);
        $(daTargetDiv).parent().removeClass();
        $(daTargetDiv).parent().addClass(data.bodyclass);
        daInitialize(1);
        for (var i = 0; i < data.extra_scripts.length; i++) {
          daEvalExtraScript(data.extra_scripts[i]);
        }
        for (var i = 0; i < data.extra_css.length; i++) {
          $("head").append(data.extra_css[i]);
        }
        document.title = data.browser_title;
        if ($("html").attr("lang") != data.lang) {
          $("html").attr("lang", data.lang);
        }
        daPushChanges();
      });
      daSocket.on("pushchanges", function (data) {
        //console.log("Got pushchanges: " + JSON.stringify(data));
        var valArray = Object();
        var values = data.parameters;
        for (var i = 0; i < values.length; i++) {
          valArray[values[i].name] = values[i].value;
        }
        $("#daform").each(function () {
          $(this)
            .find(":input")
            .each(function () {
              var type = $(this).attr("type");
              var id = $(this).attr("id");
              var name = $(this).attr("name");
              if (type == "checkbox") {
                if (name in valArray) {
                  if (valArray[name] == "True") {
                    if ($(this).prop("checked") != true) {
                      $(this).prop("checked", true);
                      $(this).trigger("change");
                    }
                  } else {
                    if ($(this).prop("checked") != false) {
                      $(this).prop("checked", false);
                      $(this).trigger("change");
                    }
                  }
                } else {
                  if ($(this).prop("checked") != false) {
                    $(this).prop("checked", false);
                    $(this).trigger("change");
                  }
                }
              } else if (type == "radio") {
                if (name in valArray) {
                  if (valArray[name] == $(this).val()) {
                    if ($(this).prop("checked") != true) {
                      $(this).prop("checked", true);
                      $(this).trigger("change");
                    }
                  } else {
                    if ($(this).prop("checked") != false) {
                      $(this).prop("checked", false);
                      $(this).trigger("change");
                    }
                  }
                }
              } else if ($(this).data().hasOwnProperty("sliderMax")) {
                $(this).slider("setValue", parseInt(valArray[name]));
              } else {
                if (name in valArray) {
                  $(this).val(valArray[name]);
                }
              }
            });
        });
      });
    }
    daObserverChangesInterval = setInterval(daPushChanges, daCheckinSeconds);
  }
  $(document).trigger("daPageLoad");
}

function daSetPosition(position) {
  document.getElementById("da_track_location").value = JSON.stringify({
    latitude: position.coords.latitude,
    longitude: position.coords.longitude,
  });
}

function daAddListenersFor(elementId) {
  $('[name="' + elementId + '"]').change(function () {
    if ($(this).attr("type") == "checkbox" || $(this).attr("type") == "radio") {
      theVal = $('[name="' + elementId + '"]:checked').val();
    } else {
      theVal = $(this).val();
    }
    var n = 0;
    if ($(this).data("disableothers")) {
      var id_list = JSON.parse(
        decodeURIComponent(escape(atob($(this).data("disableothers")))),
      );
      n = id_list.length;
    }
    if (n) {
      for (var i = 0; i < n; ++i) {
        var theElementId = id_list[i].replace(/(:|\.|\[|\]|,|=)/g, "\\$1");
        if (theVal == null || theVal == "") {
          daDisableIfNotHidden(
            "#daform [name='" + theElementId + "']:not([type=hidden])",
            false,
          );
          daDisableIfNotHidden(
            "#daform [id='" + theElementId + "']:not([type=hidden])",
            false,
          );
        } else {
          daDisableIfNotHidden(
            "#daform [name='" + theElementId + "']:not([type=hidden])",
            true,
          );
          daDisableIfNotHidden(
            "#daform [id='" + theElementId + "']:not([type=hidden])",
            true,
          );
        }
      }
    } else {
      if (theVal == null || theVal == "") {
        daDisableIfNotHidden(
          "#daform input:not([name='" +
            elementId +
            "']):not([id^='" +
            elementId +
            "']):not([type=hidden])",
          false,
        );
        daDisableIfNotHidden(
          "#daform select:not([name='" +
            elementId +
            "']):not([id^='" +
            elementId +
            "']):not([type=hidden])",
          false,
        );
        daDisableIfNotHidden(
          "#daform textarea:not([name='" + elementId + "']):not([type=hidden])",
          false,
        );
      } else {
        daDisableIfNotHidden(
          "#daform input:not([name='" +
            elementId +
            "']):not([id^='" +
            elementId +
            "']):not([type=hidden])",
          true,
        );
        daDisableIfNotHidden(
          "#daform select:not([name='" +
            elementId +
            "']):not([id^='" +
            elementId +
            "']):not([type=hidden])",
          true,
        );
        daDisableIfNotHidden(
          "#daform textarea:not([name='" + elementId + "']):not([type=hidden])",
          true,
        );
      }
    }
  });
  $("[data-disableothers]").trigger("change");
}

function daShowError(error) {
  switch (error.code) {
    case error.PERMISSION_DENIED:
      document.getElementById("da_track_location").value = JSON.stringify({
        error: "User denied the request for Geolocation",
      });
      console.log("User denied the request for Geolocation.");
      break;
    case error.POSITION_UNAVAILABLE:
      document.getElementById("da_track_location").value = JSON.stringify({
        error: "Location information is unavailable",
      });
      console.log("Location information is unavailable.");
      break;
    case error.TIMEOUT:
      document.getElementById("da_track_location").value = JSON.stringify({
        error: "The request to get user location timed out",
      });
      console.log("The request to get user location timed out.");
      break;
    case error.UNKNOWN_ERROR:
      document.getElementById("da_track_location").value = JSON.stringify({
        error: "An unknown error occurred",
      });
      console.log("An unknown error occurred.");
      break;
  }
}

/* =============================================================
 * bootstrap-combobox.js v1.1.8
 * =============================================================
 * Copyright 2012 Daniel Farrell
 * Modified 2018 for docassemble by Jonathan Pyle
 * Modified 2022 for docassemble by Bryce Willey
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * ============================================================ */

(function ($) {
  "use strict";

  /* COMBOBOX PUBLIC CLASS DEFINITION
   * ================================ */

  var Combobox = function (element, options) {
    this.options = $.extend({}, $.fn.combobox.defaults, options);
    this.template = this.options.template || this.template;
    this.$source = $(element);
    if (this.$source.hasClass("da-combobox-floating")) {
      this.$label = this.$source.next("label");
    } else {
      this.$label = null;
    }
    this.$container = this.setup();
    this.$element = this.$container.find("input[type=text]");
    this.$target = this.$container.find("input[type=hidden]");
    this.mousedover = false;
    if (this.$source.attr("disabled") !== undefined) {
      this.$target.prop("disabled", true);
    }
    this.$button = this.$container.find(".dacomboboxtoggle");
    if (this.$float) {
      this.$menu = $(this.options.menu).insertAfter(this.$float);
    } else {
      this.$menu = $(this.options.menu).insertAfter(this.$element);
    }
    this.matcher = this.options.matcher || this.matcher;
    this.sorter = this.options.sorter || this.sorter;
    this.highlighter = this.options.highlighter || this.highlighter;
    this.clearIfNoMatch = this.options.clearIfNoMatch;
    this.shown = false;
    this.selected = false;
    this.refresh();
    this.transferAttributes();
    this.listen();
  };

  Combobox.prototype = {
    constructor: Combobox,

    setup: function () {
      //console.log('setup');
      var combobox = $(this.template());
      this.$source.before(combobox);
      this.$source.hide();
      if (this.$label) {
        this.$float = $('<div class="form-floating"></div>');
        var innerText = this.$label.text();
        var inputElement = combobox.find('input[type="text"]');
        inputElement.attr("placeholder", innerText);
        inputElement.detach();
        this.$label.detach();
        this.$float.append(inputElement, this.$label);
        this.$float.insertAfter(inputElement);
      } else {
        this.$float = null;
      }
      return combobox;
    },

    template: function () {
      //console.log('template');
      if (this.options.showButton) {
        if (this.options.functionalButton) {
          return (
            '<div class="combobox-container"> <input type="hidden" /> ' +
            '<div class="input-group"> <input type="text" alt="' +
            this.options.inputBox +
            '" role="combobox" aria-autocomplete="list" aria-expanded="false" aria-activedescendant="" autocomplete="off" /> ' +
            '<button class="btn btn-outline-secondary dacomboboxtoggle" type="button" tabindex="-1" aria-label="' +
            this.options.buttonLabel +
            '" aria-expanded="false" aria-controls="id_controls">' +
            '<span class="fa-solid fa-caret-down"></span><span class="fa-solid fa-xmark"></span>' +
            "</button></div> </div>"
          );
        } else {
          return (
            '<div class="combobox-container"> <input type="hidden" /> ' +
            '<div class="input-group"> <input type="text" alt="' +
            this.options.inputBox +
            '" role="combobox" aria-autocomplete="list" aria-expanded="false" aria-activedescendant="" autocomplete="off" /> ' +
            '<button class="btn btn-outline-secondary" type="button" disabled tabindex="-1">' +
            '<span class="fa-solid fa-caret-down"></span>' +
            "</button></div> </div>"
          );
        }
      } else {
        return (
          '<div class="combobox-container"> <input type="hidden" /> ' +
          '<input type="text" alt="' +
          this.options.inputBox +
          '" role="combobox" aria-autocomplete="list" aria-expanded="false" aria-activedescendant="" autocomplete="off" /></div>'
        );
      }
    },

    disable: function () {
      this.$element.prop("disabled", true);
      this.$button.attr("disabled", true);
      this.$target.prop("disabled", true);
      this.$source.prop("disabled", true);
      this.disabled = true;
      this.$container.addClass("combobox-disabled");
    },

    enable: function () {
      this.$element.prop("disabled", false);
      this.$button.attr("disabled", false);
      this.$target.prop("disabled", false);
      this.$source.prop("disabled", false);
      this.disabled = false;
      this.$container.removeClass("combobox-disabled");
    },
    parse: function () {
      //console.log('parse');
      var that = this,
        map = {},
        revMap = {},
        source = [],
        selected = false,
        selectedValue = "";
      this.$source.find("option").each(function () {
        var option = $(this);
        if (option.val() === "") {
          that.options.placeholder = option.text();
          return;
        }
        map[option.text()] = option.val();
        revMap[option.val()] = option.text();
        source.push(option.text());
        if (option.prop("selected")) {
          selected = option.text();
          selectedValue = option.val();
        }
      });
      this.map = map;
      this.revMap = revMap;
      if (selected) {
        var triggerElement = false;
        var triggerTarget = false;
        var oldVal;
        oldVal = this.$element.val();
        if (oldVal !== selected) {
          this.$element.val(selected);
          triggerElement = true;
        }
        oldVal = this.$target.val();
        if (oldVal !== selectedValue) {
          this.$target.val(selectedValue);
          triggerTarget = true;
        }
        this.$container.addClass("combobox-selected");
        this.selected = true;
        if (triggerTarget) {
          this.$target.trigger("change");
        }
        if (triggerElement) {
          this.$element.trigger("change");
        }
      } else {
        this.$container.removeClass("combobox-selected");
        this.selected = false;
      }
      return source;
    },

    transferAttributes: function () {
      //console.log('transferAttributes');
      this.options.placeholder =
        this.$source.attr("data-placeholder") || this.options.placeholder;
      if (this.options.appendId !== "undefined") {
        // keep the source id on the input, otherwise the label (which refers to it by id) will be lost
        this.$element.attr("id", this.$source.attr("id"));
        this.$source.attr(
          "id",
          this.$source.attr("id") + this.options.appendId,
        );
        daComboBoxes[this.$element.attr("id")] = this;
      }
      this.$menu.attr("id", this.$element.attr("id") + "menu");
      // Set aria-controls now that things have ids
      this.$element.attr("aria-controls", this.$menu.attr("id"));
      this.$element.attr("aria-owns", this.$menu.attr("id"));
      this.$button.attr("aria-controls", this.$menu.attr("id"));
      this.$button.attr("aria-label", this.$source.attr("aria-label"));
      if (this.$source.attr("aria-labelledby")) {
        this.$element.attr(
          "aria-labelledby",
          this.$source.attr("aria-labelledby"),
        );
      } else {
        this.$source.attr("aria-labelledby", "daMainQuestion");
      }
      this.$button.attr(
        "aria-labelledby",
        this.$source.attr("aria-labelledby"),
      );
      this.$button.attr(
        "aria-describedby",
        this.$source.attr("aria-describedby"),
      );
      this.$element.attr("placeholder", this.options.placeholder);
      this.$target.prop("name", this.$source.prop("name"));
      this.$target.val(this.$source.val());
      this.$source.removeAttr("name"); // Remove from source otherwise form will pass parameter twice.
      this.$element.attr("required", this.$source.attr("required"));
      this.$element.attr("rel", this.$source.attr("rel"));
      this.$element.attr("title", this.$source.attr("title"));
      this.$element.attr("class", this.$source.attr("class"));
      if (this.$element.hasClass("daspaceafter")) {
        this.$element.removeClass("daspaceafter");
        this.$container.addClass("daspaceafter");
      }
      this.$element.attr("tabindex", this.$source.attr("tabindex"));
      this.$source.removeAttr("tabindex");
      if (!this.$target.val() && this.$source.data("default")) {
        var defaultVal = this.$source.data("default");
        this.$element.val(defaultVal);
        this.$target.val(defaultVal);
      }
      this.$element.addClass("danovalidation");
      this.$source.addClass("danovalidation");
      if (this.$source.attr("disabled") !== undefined) this.disable();
    },

    select: function () {
      //console.log("select");
      var val = this.$menu.find(".active").attr("data-value");
      var oldVal;
      var triggerElement = false;
      var triggerTarget = false;
      var triggerSource = false;
      this.$container.parent().find(".da-has-error").remove();
      oldVal = this.$element.val();
      var newVal = this.updater(val);
      if (oldVal !== newVal) {
        this.$element.val(newVal);
        triggerElement = true;
      }
      oldVal = this.$target.val();
      if (oldVal !== this.map[val]) {
        this.$target.val(this.map[val]); //.trigger("change");
        triggerTarget = true;
      }
      oldVal = this.$source.val();
      if (oldVal !== this.map[val]) {
        this.$source.val(this.map[val]);
        triggerSource = true;
      }
      this.$container.addClass("combobox-selected");
      this.selected = true;
      this.hide();
      if (triggerTarget) {
        this.$target.trigger("change");
      }
      if (triggerElement) {
        this.$element.trigger("change");
      }
      if (triggerSource) {
        this.$source.trigger("change");
      }
      return;
    },

    manualSelect: function (val) {
      //console.log("manualSelect");
      var oldVal;
      var found = false;
      var triggerSource = false;
      var triggerTarget = false;
      this.$container.parent().find(".da-has-error").remove();
      if (val !== "" && this.revMap[val] !== undefined) {
        this.$element.val(this.revMap[val]);
        found = true;
      } else {
        this.$element.val(val);
      }
      oldVal = this.$target.val();
      if (oldVal !== val) {
        this.$target.val(val);
        triggerTarget = true;
      }
      oldVal = this.$source.val();
      if (oldVal !== val) {
        this.$source.val(val);
        triggerSource = true;
      }
      if (val !== "" && found) {
        this.$container.addClass("combobox-selected");
        this.selected = true;
      }
      if (triggerTarget) {
        this.$target.trigger("change");
      }
      this.$element.trigger("change");
      if (triggerSource) {
        this.$source.trigger("change");
      }
      return;
    },

    updater: function (item) {
      //console.log('updater');
      return item;
    },

    show: function () {
      //console.log("show");
      var pos = $.extend({}, this.$element.position(), {
        height: this.$element[0].offsetHeight,
      });
      this.$menu
        .insertAfter(this.$element)
        .css({
          top: pos.top + pos.height,
          left: pos.left,
        })
        .show();

      this.hidden = false;

      this.$element.attr("aria-expanded", true);
      this.$button.attr("aria-expanded", true);

      this.shown = true;
      return this;
    },

    hide: function () {
      //console.log('hide');
      this.$menu.hide();
      this.hidden = true;
      this.$element.on("blur", $.proxy(this.blur, this));
      this.$element.attr("aria-expanded", false);
      this.$button.attr("aria-expanded", false);
      this.shown = false;
      return this;
    },

    lookup: function (event) {
      //console.log("lookup");
      this.query = this.$element.val();
      this.process(this.source);
    },

    process: function (items) {
      var that = this;

      items = $.grep(items, function (item) {
        return that.matcher(item);
      });

      items = this.sorter(items);

      if (!items.length) {
        return this.shown ? this.hide() : this;
      }

      return this.render(items.slice(0, this.options.items)).show();
    },

    matcher: function (item) {
      //console.log('matcher');
      return ~item.toLowerCase().indexOf(this.query.toLowerCase());
    },

    sorter: function (items) {
      //console.log('sorter');
      var beginswith = [],
        caseSensitive = [],
        caseInsensitive = [],
        item;

      while ((item = items.shift())) {
        if (!item.toLowerCase().indexOf(this.query.toLowerCase())) {
          beginswith.push(item);
        } else if (~item.indexOf(this.query)) {
          caseSensitive.push(item);
        } else {
          caseInsensitive.push(item);
        }
      }

      return beginswith.concat(caseSensitive, caseInsensitive);
    },

    highlighter: function (item) {
      //console.log('highlighter');
      var query = this.query.replace(/[\-\[\]{}()*+?.,\\\^$|#\s]/g, "\\$&");
      if (!query) {
        return item;
      }
      return item.replace(
        new RegExp("(" + query + ")", "ig"),
        function ($1, match) {
          return "<b>" + match + "</b>";
        },
      );
    },

    render: function (items) {
      //console.log('render');
      var that = this;

      items = $(items).map(function (i, item) {
        i = $(that.options.item)
          .attr("data-value", item)
          .attr("aria-label", item);
        i.attr("id", that.$element.attr("id") + "-option-" + item);
        i.html(that.highlighter(item));
        return i[0];
      });

      this.setActive(items.first());
      this.$menu.html(items);
      return this;
    },

    setActive: function (elem) {
      elem.addClass("active").attr("aria-selected", true);
      this.$element.attr("aria-activedescendant", elem.attr("id"));
    },

    swapActive: function (oldElem, newElem) {
      oldElem.removeClass("active").attr("aria-selected", false);
      this.setActive(newElem);
    },

    next: function (event) {
      //console.log('next');
      var active = this.$menu.find('[aria-selected="true"]');
      var next = active.next();

      if (!next.length) {
        next = $(this.$menu.find("li")[0]);
      }

      this.swapActive(active, next);
    },

    prev: function (event) {
      //console.log('prev');
      var active = this.$menu.find('[aria-selected="true"]');
      var prev = active.prev();

      if (!prev.length) {
        prev = this.$menu.find("li").last();
      }

      this.swapActive(active, prev);
    },

    toggle: function (e) {
      //console.log("toggle");
      if (!this.disabled) {
        if (this.$container.hasClass("combobox-selected")) {
          this.clearAll();
          this.$element.attr("aria-expanded", false);
          this.$button.attr("aria-expanded", false);
        } else {
          if (this.shown) {
            this.$element.attr("aria-expanded", false);
            this.$button.attr("aria-expanded", false);
            this.hide();
          } else {
            this.$element.attr("aria-expanded", true);
            this.$button.attr("aria-expanded", true);
            this.clearElement();
            this.lookup();
          }
        }
      }
      if (e) {
        e.preventDefault();
        e.stopPropagation();
      }
      return false;
    },

    clearAll: function () {
      //console.log('clearAll');
      var triggerElement = false;
      var triggerSource = false;
      var triggerTarget = false;
      var oldVal;
      oldVal = this.$element.val();
      if (oldVal !== "") {
        this.$element.val("");
        triggerElement = true;
      }
      oldVal = this.$source.val();
      if (oldVal !== "") {
        this.$source.val("");
        triggerSource = true;
      }
      oldVal = this.$target.val();
      if (oldVal !== "") {
        this.$target.val("");
        triggerTarget = true;
      }
      this.$container.removeClass("combobox-selected");
      if (triggerTarget) {
        this.$target.trigger("change");
      }
      if (triggerElement) {
        this.$element.trigger("change");
      }
      if (triggerSource) {
        this.$source.trigger("change");
      }
    },

    clearElement: function () {
      //console.log('clearElement');
      this.$element.val("").focus();
    },

    clearTarget: function () {
      //console.log('clearTarget');
      this.$source.val("");
      this.$target.val("");
      this.$container.removeClass("combobox-selected");
      this.selected = false;
    },

    refresh: function () {
      //console.log('refresh');
      this.source = this.parse();
      this.options.items = this.source.length;
    },

    listen: function () {
      //console.log('listen');
      this.$element
        .on("focus", $.proxy(this.focus, this))
        .on("change", $.proxy(this.change, this))
        .on("blur", $.proxy(this.blur, this))
        .on("keypress", $.proxy(this.keypress, this))
        .on("keyup", $.proxy(this.keyup, this));

      if (this.eventSupported("keydown")) {
        this.$element.on("keydown", $.proxy(this.keydown, this));
      }

      this.$menu
        .on("click", $.proxy(this.click, this))
        .on("mouseenter", "li", $.proxy(this.mouseenter, this))
        .on("mouseleave", "li", $.proxy(this.mouseleave, this))
        .on("mousedown", "li", $.proxy(this.mousedown, this));

      if (this.options.showButton && this.options.functionalButton) {
        this.$button.on("click touchend", $.proxy(this.toggle, this));
      }
    },

    eventSupported: function (eventName) {
      //console.log('eventSupported');
      var isSupported = eventName in this.$element;
      if (!isSupported) {
        this.$element.setAttribute(eventName, "return;");
        isSupported = typeof this.$element[eventName] === "function";
      }
      return isSupported;
    },

    move: function (e) {
      //console.log("move");
      if (!this.shown) {
        return;
      }

      switch (e.keyCode) {
        case 9: // tab
        case 13: // enter
        case 27: // escape
          e.preventDefault();
          break;

        case 38: // up arrow
          e.preventDefault();
          this.prev();
          this.fixMenuScroll();
          break;

        case 40: // down arrow
          e.preventDefault();
          this.next();
          this.fixMenuScroll();
          break;
      }
      e.stopPropagation();
    },

    fixMenuScroll: function () {
      //console.log('fixMenuScroll');
      var active = this.$menu.find(".active");
      if (active.length) {
        this.$element.attr("aria-activedescendant", active.attr("id"));
        var top = active.position().top;
        var bottom = top + active.height();
        var scrollTop = this.$menu.scrollTop();
        var menuHeight = this.$menu.height();
        if (bottom > menuHeight) {
          this.$menu.scrollTop(scrollTop + bottom - menuHeight);
        } else if (top < 0) {
          this.$menu.scrollTop(scrollTop + top);
        }
      }
    },

    setActiveDescendant: function (e) {
      if (this.mousedover) {
        this.swapActive(this.$menu.find(".active"), $(e.currentTarget));
      }
    },

    keydown: function (e) {
      //console.log('keyDown');
      this.suppressKeyPressRepeat = ~$.inArray(e.keyCode, [40, 38, 9, 13, 27]);
      this.move(e);
    },

    keypress: function (e) {
      //console.log('keyPress');
      if (this.suppressKeyPressRepeat) {
        return;
      }
      this.move(e);
    },

    keyup: function (e) {
      //console.log("keyUp");
      switch (e.keyCode) {
        case 40: // down arrow
          if (!this.shown) {
            this.toggle();
          }
          break;
        case 39: // right arrow
        case 38: // up arrow
        case 37: // left arrow
        case 36: // home
        case 35: // end
        case 16: // shift
        case 17: // ctrl
        case 18: // alt
          break;

        case 9: // tab
        case 13: // enter
          if (e) {
            e.stopPropagation();
            e.preventDefault();
          }
          daFetchAjaxTimeoutFetchAfter = false;
          daFetchAcceptIncoming = false;
          if (!this.shown) {
            return;
          }
          if (!this.selected) {
            this.select();
          } else {
            var val = this.$element.val();
            var opts = this.$menu.find("li");
            var n = opts.length;
            for (var i = 0; i < n; ++i) {
              if ($(opts[i]).attr("data-value") == val) {
                e.stopPropagation();
                e.preventDefault();
                $(opts[i]).click();
                return false;
              }
            }
          }
          break;

        case 27: // escape
          if (e) {
            e.stopPropagation();
            e.preventDefault();
          }
          daFetchAjaxTimeoutFetchAfter = false;
          daFetchAcceptIncoming = false;
          if (!this.shown) {
            return;
          }
          this.hide();
          break;

        default:
          if (this.options.lookupWhileTyping) {
            this.clearTarget();
            this.$target.val(this.$element.val());
            this.lookup();
          } else {
            this.query = this.$element.val();
          }
      }

      e.stopPropagation();
      e.preventDefault();
    },

    focus: function (e) {
      //console.log('focus');
      this.focused = true;
    },

    blur: function (e) {
      //console.log('blur');
      var that = this;
      this.focused = false;
      var val = this.$element.val();
      if (this.shown) {
        var opts = this.$menu.find("li");
        var n = opts.length;
        for (var i = 0; i < n; ++i) {
          if ($(opts[i]).attr("data-value") == val) {
            $(opts[i]).click();
            return;
          }
        }
      }
      var oldVal;
      var triggerElement = false;
      var triggerSource = false;
      var triggerTarget = false;
      if (this.clearIfNoMatch && !this.selected && val !== "") {
        oldVal = this.$element.val();
        if (oldVal !== "") {
          this.$element.val("");
          triggerElement = true;
        }
        oldVal = this.$source.val();
        if (oldVal !== "") {
          this.$source.val("");
          triggerSource = true;
        }
        oldVal = this.$target.val();
        if (oldVal !== "") {
          this.$target.val(""); //.trigger("change");
          triggerTarget = true;
        }
      }
      if (!this.selected) {
        oldVal = this.$target.val();
        if (oldVal !== val) {
          this.$target.val(val); //.trigger("change");
          triggerTarget = true;
        }
      }
      if (triggerTarget) {
        this.$target.trigger("change");
      }
      if (triggerElement) {
        this.$element.trigger("change");
      }
      if (triggerSource) {
        this.$source.trigger("change");
      }
      if (!this.mousedover && this.shown) {
        setTimeout(function () {
          that.hide();
        }, 200);
      }
    },

    click: function (e) {
      //console.log("click");
      if (e) {
        e.stopPropagation();
        e.preventDefault();
      }
      daFetchAjaxTimeoutFetchAfter = false;
      daFetchAcceptIncoming = false;
      this.select();
      this.$element.focus();
    },

    mouseenter: function (e) {
      //console.log('mouseenter');
      this.mousedover = true;
      this.setActiveDescendant(e);
    },

    mousedown: function (e) {
      this.mousedover = true;
      this.setActiveDescendant(e);
      this.mousedover = false;
      if (!this.hidden) {
        if (e.target.tagName == "UL") {
          this.$element.off("blur");
        }
      }
    },

    mouseleave: function (e) {
      //console.log('mouseleave');
      this.mousedover = false;
      this.setActiveDescendant(e);
    },
  };

  /* COMBOBOX PLUGIN DEFINITION
   * =========================== */
  $.fn.combobox = function (option) {
    return this.each(function () {
      var $this = $(this),
        data = $this.data("combobox"),
        options = typeof option == "object" && option;
      if (!data) {
        $this.data("combobox", (data = new Combobox(this, options)));
      }
      if (typeof option == "string") {
        data[option]();
      }
    });
  };

  $.fn.combobox.defaults = {
    bsVersion: "5",
    menu: '<ul role="listbox" class="typeahead typeahead-long dropdown-menu"></ul>',
    item: '<li role="option" class="dropdown-item dapointer"></li>',
    appendId: "combobox",
    buttonLabel: "dropdown",
    clearIfNoMatch: false,
    showButton: true,
    functionalButton: true,
    inputBox: "Input box",
    lookupWhileTyping: true,
  };

  $.fn.combobox.Constructor = Combobox;
})(window.jQuery);

/*!
 * Socket.IO v4.8.1
 * (c) 2014-2024 Guillermo Rauch
 * Released under the MIT License.
 */
(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :
  typeof define === 'function' && define.amd ? define(factory) :
  (global = typeof globalThis !== 'undefined' ? globalThis : global || self, global.io = factory());
})(this, (function () { 'use strict';

  function _arrayLikeToArray(r, a) {
    (null == a || a > r.length) && (a = r.length);
    for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e];
    return n;
  }
  function _arrayWithoutHoles(r) {
    if (Array.isArray(r)) return _arrayLikeToArray(r);
  }
  function _construct(t, e, r) {
    if (_isNativeReflectConstruct()) return Reflect.construct.apply(null, arguments);
    var o = [null];
    o.push.apply(o, e);
    var p = new (t.bind.apply(t, o))();
    return r && _setPrototypeOf(p, r.prototype), p;
  }
  function _defineProperties(e, r) {
    for (var t = 0; t < r.length; t++) {
      var o = r[t];
      o.enumerable = o.enumerable || !1, o.configurable = !0, "value" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o);
    }
  }
  function _createClass(e, r, t) {
    return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, "prototype", {
      writable: !1
    }), e;
  }
  function _createForOfIteratorHelper(r, e) {
    var t = "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"];
    if (!t) {
      if (Array.isArray(r) || (t = _unsupportedIterableToArray(r)) || e && r && "number" == typeof r.length) {
        t && (r = t);
        var n = 0,
          F = function () {};
        return {
          s: F,
          n: function () {
            return n >= r.length ? {
              done: !0
            } : {
              done: !1,
              value: r[n++]
            };
          },
          e: function (r) {
            throw r;
          },
          f: F
        };
      }
      throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }
    var o,
      a = !0,
      u = !1;
    return {
      s: function () {
        t = t.call(r);
      },
      n: function () {
        var r = t.next();
        return a = r.done, r;
      },
      e: function (r) {
        u = !0, o = r;
      },
      f: function () {
        try {
          a || null == t.return || t.return();
        } finally {
          if (u) throw o;
        }
      }
    };
  }
  function _extends() {
    return _extends = Object.assign ? Object.assign.bind() : function (n) {
      for (var e = 1; e < arguments.length; e++) {
        var t = arguments[e];
        for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]);
      }
      return n;
    }, _extends.apply(null, arguments);
  }
  function _getPrototypeOf(t) {
    return _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function (t) {
      return t.__proto__ || Object.getPrototypeOf(t);
    }, _getPrototypeOf(t);
  }
  function _inheritsLoose(t, o) {
    t.prototype = Object.create(o.prototype), t.prototype.constructor = t, _setPrototypeOf(t, o);
  }
  function _isNativeFunction(t) {
    try {
      return -1 !== Function.toString.call(t).indexOf("[native code]");
    } catch (n) {
      return "function" == typeof t;
    }
  }
  function _isNativeReflectConstruct() {
    try {
      var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
    } catch (t) {}
    return (_isNativeReflectConstruct = function () {
      return !!t;
    })();
  }
  function _iterableToArray(r) {
    if ("undefined" != typeof Symbol && null != r[Symbol.iterator] || null != r["@@iterator"]) return Array.from(r);
  }
  function _nonIterableSpread() {
    throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }
  function _setPrototypeOf(t, e) {
    return _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function (t, e) {
      return t.__proto__ = e, t;
    }, _setPrototypeOf(t, e);
  }
  function _toConsumableArray(r) {
    return _arrayWithoutHoles(r) || _iterableToArray(r) || _unsupportedIterableToArray(r) || _nonIterableSpread();
  }
  function _toPrimitive(t, r) {
    if ("object" != typeof t || !t) return t;
    var e = t[Symbol.toPrimitive];
    if (void 0 !== e) {
      var i = e.call(t, r || "default");
      if ("object" != typeof i) return i;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return ("string" === r ? String : Number)(t);
  }
  function _toPropertyKey(t) {
    var i = _toPrimitive(t, "string");
    return "symbol" == typeof i ? i : i + "";
  }
  function _typeof(o) {
    "@babel/helpers - typeof";

    return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) {
      return typeof o;
    } : function (o) {
      return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o;
    }, _typeof(o);
  }
  function _unsupportedIterableToArray(r, a) {
    if (r) {
      if ("string" == typeof r) return _arrayLikeToArray(r, a);
      var t = {}.toString.call(r).slice(8, -1);
      return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0;
    }
  }
  function _wrapNativeSuper(t) {
    var r = "function" == typeof Map ? new Map() : void 0;
    return _wrapNativeSuper = function (t) {
      if (null === t || !_isNativeFunction(t)) return t;
      if ("function" != typeof t) throw new TypeError("Super expression must either be null or a function");
      if (void 0 !== r) {
        if (r.has(t)) return r.get(t);
        r.set(t, Wrapper);
      }
      function Wrapper() {
        return _construct(t, arguments, _getPrototypeOf(this).constructor);
      }
      return Wrapper.prototype = Object.create(t.prototype, {
        constructor: {
          value: Wrapper,
          enumerable: !1,
          writable: !0,
          configurable: !0
        }
      }), _setPrototypeOf(Wrapper, t);
    }, _wrapNativeSuper(t);
  }

  var PACKET_TYPES = Object.create(null); // no Map = no polyfill
  PACKET_TYPES["open"] = "0";
  PACKET_TYPES["close"] = "1";
  PACKET_TYPES["ping"] = "2";
  PACKET_TYPES["pong"] = "3";
  PACKET_TYPES["message"] = "4";
  PACKET_TYPES["upgrade"] = "5";
  PACKET_TYPES["noop"] = "6";
  var PACKET_TYPES_REVERSE = Object.create(null);
  Object.keys(PACKET_TYPES).forEach(function (key) {
    PACKET_TYPES_REVERSE[PACKET_TYPES[key]] = key;
  });
  var ERROR_PACKET = {
    type: "error",
    data: "parser error"
  };

  var withNativeBlob$1 = typeof Blob === "function" || typeof Blob !== "undefined" && Object.prototype.toString.call(Blob) === "[object BlobConstructor]";
  var withNativeArrayBuffer$2 = typeof ArrayBuffer === "function";
  // ArrayBuffer.isView method is not defined in IE10
  var isView$1 = function isView(obj) {
    return typeof ArrayBuffer.isView === "function" ? ArrayBuffer.isView(obj) : obj && obj.buffer instanceof ArrayBuffer;
  };
  var encodePacket = function encodePacket(_ref, supportsBinary, callback) {
    var type = _ref.type,
      data = _ref.data;
    if (withNativeBlob$1 && data instanceof Blob) {
      if (supportsBinary) {
        return callback(data);
      } else {
        return encodeBlobAsBase64(data, callback);
      }
    } else if (withNativeArrayBuffer$2 && (data instanceof ArrayBuffer || isView$1(data))) {
      if (supportsBinary) {
        return callback(data);
      } else {
        return encodeBlobAsBase64(new Blob([data]), callback);
      }
    }
    // plain string
    return callback(PACKET_TYPES[type] + (data || ""));
  };
  var encodeBlobAsBase64 = function encodeBlobAsBase64(data, callback) {
    var fileReader = new FileReader();
    fileReader.onload = function () {
      var content = fileReader.result.split(",")[1];
      callback("b" + (content || ""));
    };
    return fileReader.readAsDataURL(data);
  };
  function toArray(data) {
    if (data instanceof Uint8Array) {
      return data;
    } else if (data instanceof ArrayBuffer) {
      return new Uint8Array(data);
    } else {
      return new Uint8Array(data.buffer, data.byteOffset, data.byteLength);
    }
  }
  var TEXT_ENCODER;
  function encodePacketToBinary(packet, callback) {
    if (withNativeBlob$1 && packet.data instanceof Blob) {
      return packet.data.arrayBuffer().then(toArray).then(callback);
    } else if (withNativeArrayBuffer$2 && (packet.data instanceof ArrayBuffer || isView$1(packet.data))) {
      return callback(toArray(packet.data));
    }
    encodePacket(packet, false, function (encoded) {
      if (!TEXT_ENCODER) {
        TEXT_ENCODER = new TextEncoder();
      }
      callback(TEXT_ENCODER.encode(encoded));
    });
  }

  // imported from https://github.com/socketio/base64-arraybuffer
  var chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
  // Use a lookup table to find the index.
  var lookup$1 = typeof Uint8Array === 'undefined' ? [] : new Uint8Array(256);
  for (var i = 0; i < chars.length; i++) {
    lookup$1[chars.charCodeAt(i)] = i;
  }
  var decode$1 = function decode(base64) {
    var bufferLength = base64.length * 0.75,
      len = base64.length,
      i,
      p = 0,
      encoded1,
      encoded2,
      encoded3,
      encoded4;
    if (base64[base64.length - 1] === '=') {
      bufferLength--;
      if (base64[base64.length - 2] === '=') {
        bufferLength--;
      }
    }
    var arraybuffer = new ArrayBuffer(bufferLength),
      bytes = new Uint8Array(arraybuffer);
    for (i = 0; i < len; i += 4) {
      encoded1 = lookup$1[base64.charCodeAt(i)];
      encoded2 = lookup$1[base64.charCodeAt(i + 1)];
      encoded3 = lookup$1[base64.charCodeAt(i + 2)];
      encoded4 = lookup$1[base64.charCodeAt(i + 3)];
      bytes[p++] = encoded1 << 2 | encoded2 >> 4;
      bytes[p++] = (encoded2 & 15) << 4 | encoded3 >> 2;
      bytes[p++] = (encoded3 & 3) << 6 | encoded4 & 63;
    }
    return arraybuffer;
  };

  var withNativeArrayBuffer$1 = typeof ArrayBuffer === "function";
  var decodePacket = function decodePacket(encodedPacket, binaryType) {
    if (typeof encodedPacket !== "string") {
      return {
        type: "message",
        data: mapBinary(encodedPacket, binaryType)
      };
    }
    var type = encodedPacket.charAt(0);
    if (type === "b") {
      return {
        type: "message",
        data: decodeBase64Packet(encodedPacket.substring(1), binaryType)
      };
    }
    var packetType = PACKET_TYPES_REVERSE[type];
    if (!packetType) {
      return ERROR_PACKET;
    }
    return encodedPacket.length > 1 ? {
      type: PACKET_TYPES_REVERSE[type],
      data: encodedPacket.substring(1)
    } : {
      type: PACKET_TYPES_REVERSE[type]
    };
  };
  var decodeBase64Packet = function decodeBase64Packet(data, binaryType) {
    if (withNativeArrayBuffer$1) {
      var decoded = decode$1(data);
      return mapBinary(decoded, binaryType);
    } else {
      return {
        base64: true,
        data: data
      }; // fallback for old browsers
    }
  };
  var mapBinary = function mapBinary(data, binaryType) {
    switch (binaryType) {
      case "blob":
        if (data instanceof Blob) {
          // from WebSocket + binaryType "blob"
          return data;
        } else {
          // from HTTP long-polling or WebTransport
          return new Blob([data]);
        }
      case "arraybuffer":
      default:
        if (data instanceof ArrayBuffer) {
          // from HTTP long-polling (base64) or WebSocket + binaryType "arraybuffer"
          return data;
        } else {
          // from WebTransport (Uint8Array)
          return data.buffer;
        }
    }
  };

  var SEPARATOR = String.fromCharCode(30); // see https://en.wikipedia.org/wiki/Delimiter#ASCII_delimited_text
  var encodePayload = function encodePayload(packets, callback) {
    // some packets may be added to the array while encoding, so the initial length must be saved
    var length = packets.length;
    var encodedPackets = new Array(length);
    var count = 0;
    packets.forEach(function (packet, i) {
      // force base64 encoding for binary packets
      encodePacket(packet, false, function (encodedPacket) {
        encodedPackets[i] = encodedPacket;
        if (++count === length) {
          callback(encodedPackets.join(SEPARATOR));
        }
      });
    });
  };
  var decodePayload = function decodePayload(encodedPayload, binaryType) {
    var encodedPackets = encodedPayload.split(SEPARATOR);
    var packets = [];
    for (var i = 0; i < encodedPackets.length; i++) {
      var decodedPacket = decodePacket(encodedPackets[i], binaryType);
      packets.push(decodedPacket);
      if (decodedPacket.type === "error") {
        break;
      }
    }
    return packets;
  };
  function createPacketEncoderStream() {
    return new TransformStream({
      transform: function transform(packet, controller) {
        encodePacketToBinary(packet, function (encodedPacket) {
          var payloadLength = encodedPacket.length;
          var header;
          // inspired by the WebSocket format: https://developer.mozilla.org/en-US/docs/Web/API/WebSockets_API/Writing_WebSocket_servers#decoding_payload_length
          if (payloadLength < 126) {
            header = new Uint8Array(1);
            new DataView(header.buffer).setUint8(0, payloadLength);
          } else if (payloadLength < 65536) {
            header = new Uint8Array(3);
            var view = new DataView(header.buffer);
            view.setUint8(0, 126);
            view.setUint16(1, payloadLength);
          } else {
            header = new Uint8Array(9);
            var _view = new DataView(header.buffer);
            _view.setUint8(0, 127);
            _view.setBigUint64(1, BigInt(payloadLength));
          }
          // first bit indicates whether the payload is plain text (0) or binary (1)
          if (packet.data && typeof packet.data !== "string") {
            header[0] |= 0x80;
          }
          controller.enqueue(header);
          controller.enqueue(encodedPacket);
        });
      }
    });
  }
  var TEXT_DECODER;
  function totalLength(chunks) {
    return chunks.reduce(function (acc, chunk) {
      return acc + chunk.length;
    }, 0);
  }
  function concatChunks(chunks, size) {
    if (chunks[0].length === size) {
      return chunks.shift();
    }
    var buffer = new Uint8Array(size);
    var j = 0;
    for (var i = 0; i < size; i++) {
      buffer[i] = chunks[0][j++];
      if (j === chunks[0].length) {
        chunks.shift();
        j = 0;
      }
    }
    if (chunks.length && j < chunks[0].length) {
      chunks[0] = chunks[0].slice(j);
    }
    return buffer;
  }
  function createPacketDecoderStream(maxPayload, binaryType) {
    if (!TEXT_DECODER) {
      TEXT_DECODER = new TextDecoder();
    }
    var chunks = [];
    var state = 0 /* State.READ_HEADER */;
    var expectedLength = -1;
    var isBinary = false;
    return new TransformStream({
      transform: function transform(chunk, controller) {
        chunks.push(chunk);
        while (true) {
          if (state === 0 /* State.READ_HEADER */) {
            if (totalLength(chunks) < 1) {
              break;
            }
            var header = concatChunks(chunks, 1);
            isBinary = (header[0] & 0x80) === 0x80;
            expectedLength = header[0] & 0x7f;
            if (expectedLength < 126) {
              state = 3 /* State.READ_PAYLOAD */;
            } else if (expectedLength === 126) {
              state = 1 /* State.READ_EXTENDED_LENGTH_16 */;
            } else {
              state = 2 /* State.READ_EXTENDED_LENGTH_64 */;
            }
          } else if (state === 1 /* State.READ_EXTENDED_LENGTH_16 */) {
            if (totalLength(chunks) < 2) {
              break;
            }
            var headerArray = concatChunks(chunks, 2);
            expectedLength = new DataView(headerArray.buffer, headerArray.byteOffset, headerArray.length).getUint16(0);
            state = 3 /* State.READ_PAYLOAD */;
          } else if (state === 2 /* State.READ_EXTENDED_LENGTH_64 */) {
            if (totalLength(chunks) < 8) {
              break;
            }
            var _headerArray = concatChunks(chunks, 8);
            var view = new DataView(_headerArray.buffer, _headerArray.byteOffset, _headerArray.length);
            var n = view.getUint32(0);
            if (n > Math.pow(2, 53 - 32) - 1) {
              // the maximum safe integer in JavaScript is 2^53 - 1
              controller.enqueue(ERROR_PACKET);
              break;
            }
            expectedLength = n * Math.pow(2, 32) + view.getUint32(4);
            state = 3 /* State.READ_PAYLOAD */;
          } else {
            if (totalLength(chunks) < expectedLength) {
              break;
            }
            var data = concatChunks(chunks, expectedLength);
            controller.enqueue(decodePacket(isBinary ? data : TEXT_DECODER.decode(data), binaryType));
            state = 0 /* State.READ_HEADER */;
          }
          if (expectedLength === 0 || expectedLength > maxPayload) {
            controller.enqueue(ERROR_PACKET);
            break;
          }
        }
      }
    });
  }
  var protocol$1 = 4;

  /**
   * Initialize a new `Emitter`.
   *
   * @api public
   */

  function Emitter(obj) {
    if (obj) return mixin(obj);
  }

  /**
   * Mixin the emitter properties.
   *
   * @param {Object} obj
   * @return {Object}
   * @api private
   */

  function mixin(obj) {
    for (var key in Emitter.prototype) {
      obj[key] = Emitter.prototype[key];
    }
    return obj;
  }

  /**
   * Listen on the given `event` with `fn`.
   *
   * @param {String} event
   * @param {Function} fn
   * @return {Emitter}
   * @api public
   */

  Emitter.prototype.on = Emitter.prototype.addEventListener = function (event, fn) {
    this._callbacks = this._callbacks || {};
    (this._callbacks['$' + event] = this._callbacks['$' + event] || []).push(fn);
    return this;
  };

  /**
   * Adds an `event` listener that will be invoked a single
   * time then automatically removed.
   *
   * @param {String} event
   * @param {Function} fn
   * @return {Emitter}
   * @api public
   */

  Emitter.prototype.once = function (event, fn) {
    function on() {
      this.off(event, on);
      fn.apply(this, arguments);
    }
    on.fn = fn;
    this.on(event, on);
    return this;
  };

  /**
   * Remove the given callback for `event` or all
   * registered callbacks.
   *
   * @param {String} event
   * @param {Function} fn
   * @return {Emitter}
   * @api public
   */

  Emitter.prototype.off = Emitter.prototype.removeListener = Emitter.prototype.removeAllListeners = Emitter.prototype.removeEventListener = function (event, fn) {
    this._callbacks = this._callbacks || {};

    // all
    if (0 == arguments.length) {
      this._callbacks = {};
      return this;
    }

    // specific event
    var callbacks = this._callbacks['$' + event];
    if (!callbacks) return this;

    // remove all handlers
    if (1 == arguments.length) {
      delete this._callbacks['$' + event];
      return this;
    }

    // remove specific handler
    var cb;
    for (var i = 0; i < callbacks.length; i++) {
      cb = callbacks[i];
      if (cb === fn || cb.fn === fn) {
        callbacks.splice(i, 1);
        break;
      }
    }

    // Remove event specific arrays for event types that no
    // one is subscribed for to avoid memory leak.
    if (callbacks.length === 0) {
      delete this._callbacks['$' + event];
    }
    return this;
  };

  /**
   * Emit `event` with the given args.
   *
   * @param {String} event
   * @param {Mixed} ...
   * @return {Emitter}
   */

  Emitter.prototype.emit = function (event) {
    this._callbacks = this._callbacks || {};
    var args = new Array(arguments.length - 1),
      callbacks = this._callbacks['$' + event];
    for (var i = 1; i < arguments.length; i++) {
      args[i - 1] = arguments[i];
    }
    if (callbacks) {
      callbacks = callbacks.slice(0);
      for (var i = 0, len = callbacks.length; i < len; ++i) {
        callbacks[i].apply(this, args);
      }
    }
    return this;
  };

  // alias used for reserved events (protected method)
  Emitter.prototype.emitReserved = Emitter.prototype.emit;

  /**
   * Return array of callbacks for `event`.
   *
   * @param {String} event
   * @return {Array}
   * @api public
   */

  Emitter.prototype.listeners = function (event) {
    this._callbacks = this._callbacks || {};
    return this._callbacks['$' + event] || [];
  };

  /**
   * Check if this emitter has `event` handlers.
   *
   * @param {String} event
   * @return {Boolean}
   * @api public
   */

  Emitter.prototype.hasListeners = function (event) {
    return !!this.listeners(event).length;
  };

  var nextTick = function () {
    var isPromiseAvailable = typeof Promise === "function" && typeof Promise.resolve === "function";
    if (isPromiseAvailable) {
      return function (cb) {
        return Promise.resolve().then(cb);
      };
    } else {
      return function (cb, setTimeoutFn) {
        return setTimeoutFn(cb, 0);
      };
    }
  }();
  var globalThisShim = function () {
    if (typeof self !== "undefined") {
      return self;
    } else if (typeof window !== "undefined") {
      return window;
    } else {
      return Function("return this")();
    }
  }();
  var defaultBinaryType = "arraybuffer";
  function createCookieJar() {}

  function pick(obj) {
    for (var _len = arguments.length, attr = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      attr[_key - 1] = arguments[_key];
    }
    return attr.reduce(function (acc, k) {
      if (obj.hasOwnProperty(k)) {
        acc[k] = obj[k];
      }
      return acc;
    }, {});
  }
  // Keep a reference to the real timeout functions so they can be used when overridden
  var NATIVE_SET_TIMEOUT = globalThisShim.setTimeout;
  var NATIVE_CLEAR_TIMEOUT = globalThisShim.clearTimeout;
  function installTimerFunctions(obj, opts) {
    if (opts.useNativeTimers) {
      obj.setTimeoutFn = NATIVE_SET_TIMEOUT.bind(globalThisShim);
      obj.clearTimeoutFn = NATIVE_CLEAR_TIMEOUT.bind(globalThisShim);
    } else {
      obj.setTimeoutFn = globalThisShim.setTimeout.bind(globalThisShim);
      obj.clearTimeoutFn = globalThisShim.clearTimeout.bind(globalThisShim);
    }
  }
  // base64 encoded buffers are about 33% bigger (https://en.wikipedia.org/wiki/Base64)
  var BASE64_OVERHEAD = 1.33;
  // we could also have used `new Blob([obj]).size`, but it isn't supported in IE9
  function byteLength(obj) {
    if (typeof obj === "string") {
      return utf8Length(obj);
    }
    // arraybuffer or blob
    return Math.ceil((obj.byteLength || obj.size) * BASE64_OVERHEAD);
  }
  function utf8Length(str) {
    var c = 0,
      length = 0;
    for (var i = 0, l = str.length; i < l; i++) {
      c = str.charCodeAt(i);
      if (c < 0x80) {
        length += 1;
      } else if (c < 0x800) {
        length += 2;
      } else if (c < 0xd800 || c >= 0xe000) {
        length += 3;
      } else {
        i++;
        length += 4;
      }
    }
    return length;
  }
  /**
   * Generates a random 8-characters string.
   */
  function randomString() {
    return Date.now().toString(36).substring(3) + Math.random().toString(36).substring(2, 5);
  }

  // imported from https://github.com/galkn/querystring
  /**
   * Compiles a querystring
   * Returns string representation of the object
   *
   * @param {Object}
   * @api private
   */
  function encode(obj) {
    var str = '';
    for (var i in obj) {
      if (obj.hasOwnProperty(i)) {
        if (str.length) str += '&';
        str += encodeURIComponent(i) + '=' + encodeURIComponent(obj[i]);
      }
    }
    return str;
  }
  /**
   * Parses a simple querystring into an object
   *
   * @param {String} qs
   * @api private
   */
  function decode(qs) {
    var qry = {};
    var pairs = qs.split('&');
    for (var i = 0, l = pairs.length; i < l; i++) {
      var pair = pairs[i].split('=');
      qry[decodeURIComponent(pair[0])] = decodeURIComponent(pair[1]);
    }
    return qry;
  }

  var TransportError = /*#__PURE__*/function (_Error) {
    function TransportError(reason, description, context) {
      var _this;
      _this = _Error.call(this, reason) || this;
      _this.description = description;
      _this.context = context;
      _this.type = "TransportError";
      return _this;
    }
    _inheritsLoose(TransportError, _Error);
    return TransportError;
  }( /*#__PURE__*/_wrapNativeSuper(Error));
  var Transport = /*#__PURE__*/function (_Emitter) {
    /**
     * Transport abstract constructor.
     *
     * @param {Object} opts - options
     * @protected
     */
    function Transport(opts) {
      var _this2;
      _this2 = _Emitter.call(this) || this;
      _this2.writable = false;
      installTimerFunctions(_this2, opts);
      _this2.opts = opts;
      _this2.query = opts.query;
      _this2.socket = opts.socket;
      _this2.supportsBinary = !opts.forceBase64;
      return _this2;
    }
    /**
     * Emits an error.
     *
     * @param {String} reason
     * @param description
     * @param context - the error context
     * @return {Transport} for chaining
     * @protected
     */
    _inheritsLoose(Transport, _Emitter);
    var _proto = Transport.prototype;
    _proto.onError = function onError(reason, description, context) {
      _Emitter.prototype.emitReserved.call(this, "error", new TransportError(reason, description, context));
      return this;
    }
    /**
     * Opens the transport.
     */;
    _proto.open = function open() {
      this.readyState = "opening";
      this.doOpen();
      return this;
    }
    /**
     * Closes the transport.
     */;
    _proto.close = function close() {
      if (this.readyState === "opening" || this.readyState === "open") {
        this.doClose();
        this.onClose();
      }
      return this;
    }
    /**
     * Sends multiple packets.
     *
     * @param {Array} packets
     */;
    _proto.send = function send(packets) {
      if (this.readyState === "open") {
        this.write(packets);
      }
    }
    /**
     * Called upon open
     *
     * @protected
     */;
    _proto.onOpen = function onOpen() {
      this.readyState = "open";
      this.writable = true;
      _Emitter.prototype.emitReserved.call(this, "open");
    }
    /**
     * Called with data.
     *
     * @param {String} data
     * @protected
     */;
    _proto.onData = function onData(data) {
      var packet = decodePacket(data, this.socket.binaryType);
      this.onPacket(packet);
    }
    /**
     * Called with a decoded packet.
     *
     * @protected
     */;
    _proto.onPacket = function onPacket(packet) {
      _Emitter.prototype.emitReserved.call(this, "packet", packet);
    }
    /**
     * Called upon close.
     *
     * @protected
     */;
    _proto.onClose = function onClose(details) {
      this.readyState = "closed";
      _Emitter.prototype.emitReserved.call(this, "close", details);
    }
    /**
     * Pauses the transport, in order not to lose packets during an upgrade.
     *
     * @param onPause
     */;
    _proto.pause = function pause(onPause) {};
    _proto.createUri = function createUri(schema) {
      var query = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      return schema + "://" + this._hostname() + this._port() + this.opts.path + this._query(query);
    };
    _proto._hostname = function _hostname() {
      var hostname = this.opts.hostname;
      return hostname.indexOf(":") === -1 ? hostname : "[" + hostname + "]";
    };
    _proto._port = function _port() {
      if (this.opts.port && (this.opts.secure && Number(this.opts.port !== 443) || !this.opts.secure && Number(this.opts.port) !== 80)) {
        return ":" + this.opts.port;
      } else {
        return "";
      }
    };
    _proto._query = function _query(query) {
      var encodedQuery = encode(query);
      return encodedQuery.length ? "?" + encodedQuery : "";
    };
    return Transport;
  }(Emitter);

  var Polling = /*#__PURE__*/function (_Transport) {
    function Polling() {
      var _this;
      _this = _Transport.apply(this, arguments) || this;
      _this._polling = false;
      return _this;
    }
    _inheritsLoose(Polling, _Transport);
    var _proto = Polling.prototype;
    /**
     * Opens the socket (triggers polling). We write a PING message to determine
     * when the transport is open.
     *
     * @protected
     */
    _proto.doOpen = function doOpen() {
      this._poll();
    }
    /**
     * Pauses polling.
     *
     * @param {Function} onPause - callback upon buffers are flushed and transport is paused
     * @package
     */;
    _proto.pause = function pause(onPause) {
      var _this2 = this;
      this.readyState = "pausing";
      var pause = function pause() {
        _this2.readyState = "paused";
        onPause();
      };
      if (this._polling || !this.writable) {
        var total = 0;
        if (this._polling) {
          total++;
          this.once("pollComplete", function () {
            --total || pause();
          });
        }
        if (!this.writable) {
          total++;
          this.once("drain", function () {
            --total || pause();
          });
        }
      } else {
        pause();
      }
    }
    /**
     * Starts polling cycle.
     *
     * @private
     */;
    _proto._poll = function _poll() {
      this._polling = true;
      this.doPoll();
      this.emitReserved("poll");
    }
    /**
     * Overloads onData to detect payloads.
     *
     * @protected
     */;
    _proto.onData = function onData(data) {
      var _this3 = this;
      var callback = function callback(packet) {
        // if its the first message we consider the transport open
        if ("opening" === _this3.readyState && packet.type === "open") {
          _this3.onOpen();
        }
        // if its a close packet, we close the ongoing requests
        if ("close" === packet.type) {
          _this3.onClose({
            description: "transport closed by the server"
          });
          return false;
        }
        // otherwise bypass onData and handle the message
        _this3.onPacket(packet);
      };
      // decode payload
      decodePayload(data, this.socket.binaryType).forEach(callback);
      // if an event did not trigger closing
      if ("closed" !== this.readyState) {
        // if we got data we're not polling
        this._polling = false;
        this.emitReserved("pollComplete");
        if ("open" === this.readyState) {
          this._poll();
        }
      }
    }
    /**
     * For polling, send a close packet.
     *
     * @protected
     */;
    _proto.doClose = function doClose() {
      var _this4 = this;
      var close = function close() {
        _this4.write([{
          type: "close"
        }]);
      };
      if ("open" === this.readyState) {
        close();
      } else {
        // in case we're trying to close while
        // handshaking is in progress (GH-164)
        this.once("open", close);
      }
    }
    /**
     * Writes a packets payload.
     *
     * @param {Array} packets - data packets
     * @protected
     */;
    _proto.write = function write(packets) {
      var _this5 = this;
      this.writable = false;
      encodePayload(packets, function (data) {
        _this5.doWrite(data, function () {
          _this5.writable = true;
          _this5.emitReserved("drain");
        });
      });
    }
    /**
     * Generates uri for connection.
     *
     * @private
     */;
    _proto.uri = function uri() {
      var schema = this.opts.secure ? "https" : "http";
      var query = this.query || {};
      // cache busting is forced
      if (false !== this.opts.timestampRequests) {
        query[this.opts.timestampParam] = randomString();
      }
      if (!this.supportsBinary && !query.sid) {
        query.b64 = 1;
      }
      return this.createUri(schema, query);
    };
    return _createClass(Polling, [{
      key: "name",
      get: function get() {
        return "polling";
      }
    }]);
  }(Transport);

  // imported from https://github.com/component/has-cors
  var value = false;
  try {
    value = typeof XMLHttpRequest !== 'undefined' && 'withCredentials' in new XMLHttpRequest();
  } catch (err) {
    // if XMLHttp support is disabled in IE then it will throw
    // when trying to create
  }
  var hasCORS = value;

  function empty() {}
  var BaseXHR = /*#__PURE__*/function (_Polling) {
    /**
     * XHR Polling constructor.
     *
     * @param {Object} opts
     * @package
     */
    function BaseXHR(opts) {
      var _this;
      _this = _Polling.call(this, opts) || this;
      if (typeof location !== "undefined") {
        var isSSL = "https:" === location.protocol;
        var port = location.port;
        // some user agents have empty `location.port`
        if (!port) {
          port = isSSL ? "443" : "80";
        }
        _this.xd = typeof location !== "undefined" && opts.hostname !== location.hostname || port !== opts.port;
      }
      return _this;
    }
    /**
     * Sends data.
     *
     * @param {String} data to send.
     * @param {Function} called upon flush.
     * @private
     */
    _inheritsLoose(BaseXHR, _Polling);
    var _proto = BaseXHR.prototype;
    _proto.doWrite = function doWrite(data, fn) {
      var _this2 = this;
      var req = this.request({
        method: "POST",
        data: data
      });
      req.on("success", fn);
      req.on("error", function (xhrStatus, context) {
        _this2.onError("xhr post error", xhrStatus, context);
      });
    }
    /**
     * Starts a poll cycle.
     *
     * @private
     */;
    _proto.doPoll = function doPoll() {
      var _this3 = this;
      var req = this.request();
      req.on("data", this.onData.bind(this));
      req.on("error", function (xhrStatus, context) {
        _this3.onError("xhr poll error", xhrStatus, context);
      });
      this.pollXhr = req;
    };
    return BaseXHR;
  }(Polling);
  var Request = /*#__PURE__*/function (_Emitter) {
    /**
     * Request constructor
     *
     * @param {Object} options
     * @package
     */
    function Request(createRequest, uri, opts) {
      var _this4;
      _this4 = _Emitter.call(this) || this;
      _this4.createRequest = createRequest;
      installTimerFunctions(_this4, opts);
      _this4._opts = opts;
      _this4._method = opts.method || "GET";
      _this4._uri = uri;
      _this4._data = undefined !== opts.data ? opts.data : null;
      _this4._create();
      return _this4;
    }
    /**
     * Creates the XHR object and sends the request.
     *
     * @private
     */
    _inheritsLoose(Request, _Emitter);
    var _proto2 = Request.prototype;
    _proto2._create = function _create() {
      var _this5 = this;
      var _a;
      var opts = pick(this._opts, "agent", "pfx", "key", "passphrase", "cert", "ca", "ciphers", "rejectUnauthorized", "autoUnref");
      opts.xdomain = !!this._opts.xd;
      var xhr = this._xhr = this.createRequest(opts);
      try {
        xhr.open(this._method, this._uri, true);
        try {
          if (this._opts.extraHeaders) {
            // @ts-ignore
            xhr.setDisableHeaderCheck && xhr.setDisableHeaderCheck(true);
            for (var i in this._opts.extraHeaders) {
              if (this._opts.extraHeaders.hasOwnProperty(i)) {
                xhr.setRequestHeader(i, this._opts.extraHeaders[i]);
              }
            }
          }
        } catch (e) {}
        if ("POST" === this._method) {
          try {
            xhr.setRequestHeader("Content-type", "text/plain;charset=UTF-8");
          } catch (e) {}
        }
        try {
          xhr.setRequestHeader("Accept", "*/*");
        } catch (e) {}
        (_a = this._opts.cookieJar) === null || _a === void 0 ? void 0 : _a.addCookies(xhr);
        // ie6 check
        if ("withCredentials" in xhr) {
          xhr.withCredentials = this._opts.withCredentials;
        }
        if (this._opts.requestTimeout) {
          xhr.timeout = this._opts.requestTimeout;
        }
        xhr.onreadystatechange = function () {
          var _a;
          if (xhr.readyState === 3) {
            (_a = _this5._opts.cookieJar) === null || _a === void 0 ? void 0 : _a.parseCookies(
            // @ts-ignore
            xhr.getResponseHeader("set-cookie"));
          }
          if (4 !== xhr.readyState) return;
          if (200 === xhr.status || 1223 === xhr.status) {
            _this5._onLoad();
          } else {
            // make sure the `error` event handler that's user-set
            // does not throw in the same tick and gets caught here
            _this5.setTimeoutFn(function () {
              _this5._onError(typeof xhr.status === "number" ? xhr.status : 0);
            }, 0);
          }
        };
        xhr.send(this._data);
      } catch (e) {
        // Need to defer since .create() is called directly from the constructor
        // and thus the 'error' event can only be only bound *after* this exception
        // occurs.  Therefore, also, we cannot throw here at all.
        this.setTimeoutFn(function () {
          _this5._onError(e);
        }, 0);
        return;
      }
      if (typeof document !== "undefined") {
        this._index = Request.requestsCount++;
        Request.requests[this._index] = this;
      }
    }
    /**
     * Called upon error.
     *
     * @private
     */;
    _proto2._onError = function _onError(err) {
      this.emitReserved("error", err, this._xhr);
      this._cleanup(true);
    }
    /**
     * Cleans up house.
     *
     * @private
     */;
    _proto2._cleanup = function _cleanup(fromError) {
      if ("undefined" === typeof this._xhr || null === this._xhr) {
        return;
      }
      this._xhr.onreadystatechange = empty;
      if (fromError) {
        try {
          this._xhr.abort();
        } catch (e) {}
      }
      if (typeof document !== "undefined") {
        delete Request.requests[this._index];
      }
      this._xhr = null;
    }
    /**
     * Called upon load.
     *
     * @private
     */;
    _proto2._onLoad = function _onLoad() {
      var data = this._xhr.responseText;
      if (data !== null) {
        this.emitReserved("data", data);
        this.emitReserved("success");
        this._cleanup();
      }
    }
    /**
     * Aborts the request.
     *
     * @package
     */;
    _proto2.abort = function abort() {
      this._cleanup();
    };
    return Request;
  }(Emitter);
  Request.requestsCount = 0;
  Request.requests = {};
  /**
   * Aborts pending requests when unloading the window. This is needed to prevent
   * memory leaks (e.g. when using IE) and to ensure that no spurious error is
   * emitted.
   */
  if (typeof document !== "undefined") {
    // @ts-ignore
    if (typeof attachEvent === "function") {
      // @ts-ignore
      attachEvent("onunload", unloadHandler);
    } else if (typeof addEventListener === "function") {
      var terminationEvent = "onpagehide" in globalThisShim ? "pagehide" : "unload";
      addEventListener(terminationEvent, unloadHandler, false);
    }
  }
  function unloadHandler() {
    for (var i in Request.requests) {
      if (Request.requests.hasOwnProperty(i)) {
        Request.requests[i].abort();
      }
    }
  }
  var hasXHR2 = function () {
    var xhr = newRequest({
      xdomain: false
    });
    return xhr && xhr.responseType !== null;
  }();
  /**
   * HTTP long-polling based on the built-in `XMLHttpRequest` object.
   *
   * Usage: browser
   *
   * @see https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest
   */
  var XHR = /*#__PURE__*/function (_BaseXHR) {
    function XHR(opts) {
      var _this6;
      _this6 = _BaseXHR.call(this, opts) || this;
      var forceBase64 = opts && opts.forceBase64;
      _this6.supportsBinary = hasXHR2 && !forceBase64;
      return _this6;
    }
    _inheritsLoose(XHR, _BaseXHR);
    var _proto3 = XHR.prototype;
    _proto3.request = function request() {
      var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      _extends(opts, {
        xd: this.xd
      }, this.opts);
      return new Request(newRequest, this.uri(), opts);
    };
    return XHR;
  }(BaseXHR);
  function newRequest(opts) {
    var xdomain = opts.xdomain;
    // XMLHttpRequest can be disabled on IE
    try {
      if ("undefined" !== typeof XMLHttpRequest && (!xdomain || hasCORS)) {
        return new XMLHttpRequest();
      }
    } catch (e) {}
    if (!xdomain) {
      try {
        return new globalThisShim[["Active"].concat("Object").join("X")]("Microsoft.XMLHTTP");
      } catch (e) {}
    }
  }

  // detect ReactNative environment
  var isReactNative = typeof navigator !== "undefined" && typeof navigator.product === "string" && navigator.product.toLowerCase() === "reactnative";
  var BaseWS = /*#__PURE__*/function (_Transport) {
    function BaseWS() {
      return _Transport.apply(this, arguments) || this;
    }
    _inheritsLoose(BaseWS, _Transport);
    var _proto = BaseWS.prototype;
    _proto.doOpen = function doOpen() {
      var uri = this.uri();
      var protocols = this.opts.protocols;
      // React Native only supports the 'headers' option, and will print a warning if anything else is passed
      var opts = isReactNative ? {} : pick(this.opts, "agent", "perMessageDeflate", "pfx", "key", "passphrase", "cert", "ca", "ciphers", "rejectUnauthorized", "localAddress", "protocolVersion", "origin", "maxPayload", "family", "checkServerIdentity");
      if (this.opts.extraHeaders) {
        opts.headers = this.opts.extraHeaders;
      }
      try {
        this.ws = this.createSocket(uri, protocols, opts);
      } catch (err) {
        return this.emitReserved("error", err);
      }
      this.ws.binaryType = this.socket.binaryType;
      this.addEventListeners();
    }
    /**
     * Adds event listeners to the socket
     *
     * @private
     */;
    _proto.addEventListeners = function addEventListeners() {
      var _this = this;
      this.ws.onopen = function () {
        if (_this.opts.autoUnref) {
          _this.ws._socket.unref();
        }
        _this.onOpen();
      };
      this.ws.onclose = function (closeEvent) {
        return _this.onClose({
          description: "websocket connection closed",
          context: closeEvent
        });
      };
      this.ws.onmessage = function (ev) {
        return _this.onData(ev.data);
      };
      this.ws.onerror = function (e) {
        return _this.onError("websocket error", e);
      };
    };
    _proto.write = function write(packets) {
      var _this2 = this;
      this.writable = false;
      // encodePacket efficient as it uses WS framing
      // no need for encodePayload
      var _loop = function _loop() {
        var packet = packets[i];
        var lastPacket = i === packets.length - 1;
        encodePacket(packet, _this2.supportsBinary, function (data) {
          // Sometimes the websocket has already been closed but the browser didn't
          // have a chance of informing us about it yet, in that case send will
          // throw an error
          try {
            _this2.doWrite(packet, data);
          } catch (e) {}
          if (lastPacket) {
            // fake drain
            // defer to next tick to allow Socket to clear writeBuffer
            nextTick(function () {
              _this2.writable = true;
              _this2.emitReserved("drain");
            }, _this2.setTimeoutFn);
          }
        });
      };
      for (var i = 0; i < packets.length; i++) {
        _loop();
      }
    };
    _proto.doClose = function doClose() {
      if (typeof this.ws !== "undefined") {
        this.ws.onerror = function () {};
        this.ws.close();
        this.ws = null;
      }
    }
    /**
     * Generates uri for connection.
     *
     * @private
     */;
    _proto.uri = function uri() {
      var schema = this.opts.secure ? "wss" : "ws";
      var query = this.query || {};
      // append timestamp to URI
      if (this.opts.timestampRequests) {
        query[this.opts.timestampParam] = randomString();
      }
      // communicate binary support capabilities
      if (!this.supportsBinary) {
        query.b64 = 1;
      }
      return this.createUri(schema, query);
    };
    return _createClass(BaseWS, [{
      key: "name",
      get: function get() {
        return "websocket";
      }
    }]);
  }(Transport);
  var WebSocketCtor = globalThisShim.WebSocket || globalThisShim.MozWebSocket;
  /**
   * WebSocket transport based on the built-in `WebSocket` object.
   *
   * Usage: browser, Node.js (since v21), Deno, Bun
   *
   * @see https://developer.mozilla.org/en-US/docs/Web/API/WebSocket
   * @see https://caniuse.com/mdn-api_websocket
   * @see https://nodejs.org/api/globals.html#websocket
   */
  var WS = /*#__PURE__*/function (_BaseWS) {
    function WS() {
      return _BaseWS.apply(this, arguments) || this;
    }
    _inheritsLoose(WS, _BaseWS);
    var _proto2 = WS.prototype;
    _proto2.createSocket = function createSocket(uri, protocols, opts) {
      return !isReactNative ? protocols ? new WebSocketCtor(uri, protocols) : new WebSocketCtor(uri) : new WebSocketCtor(uri, protocols, opts);
    };
    _proto2.doWrite = function doWrite(_packet, data) {
      this.ws.send(data);
    };
    return WS;
  }(BaseWS);

  /**
   * WebTransport transport based on the built-in `WebTransport` object.
   *
   * Usage: browser, Node.js (with the `@fails-components/webtransport` package)
   *
   * @see https://developer.mozilla.org/en-US/docs/Web/API/WebTransport
   * @see https://caniuse.com/webtransport
   */
  var WT = /*#__PURE__*/function (_Transport) {
    function WT() {
      return _Transport.apply(this, arguments) || this;
    }
    _inheritsLoose(WT, _Transport);
    var _proto = WT.prototype;
    _proto.doOpen = function doOpen() {
      var _this = this;
      try {
        // @ts-ignore
        this._transport = new WebTransport(this.createUri("https"), this.opts.transportOptions[this.name]);
      } catch (err) {
        return this.emitReserved("error", err);
      }
      this._transport.closed.then(function () {
        _this.onClose();
      })["catch"](function (err) {
        _this.onError("webtransport error", err);
      });
      // note: we could have used async/await, but that would require some additional polyfills
      this._transport.ready.then(function () {
        _this._transport.createBidirectionalStream().then(function (stream) {
          var decoderStream = createPacketDecoderStream(Number.MAX_SAFE_INTEGER, _this.socket.binaryType);
          var reader = stream.readable.pipeThrough(decoderStream).getReader();
          var encoderStream = createPacketEncoderStream();
          encoderStream.readable.pipeTo(stream.writable);
          _this._writer = encoderStream.writable.getWriter();
          var read = function read() {
            reader.read().then(function (_ref) {
              var done = _ref.done,
                value = _ref.value;
              if (done) {
                return;
              }
              _this.onPacket(value);
              read();
            })["catch"](function (err) {});
          };
          read();
          var packet = {
            type: "open"
          };
          if (_this.query.sid) {
            packet.data = "{\"sid\":\"".concat(_this.query.sid, "\"}");
          }
          _this._writer.write(packet).then(function () {
            return _this.onOpen();
          });
        });
      });
    };
    _proto.write = function write(packets) {
      var _this2 = this;
      this.writable = false;
      var _loop = function _loop() {
        var packet = packets[i];
        var lastPacket = i === packets.length - 1;
        _this2._writer.write(packet).then(function () {
          if (lastPacket) {
            nextTick(function () {
              _this2.writable = true;
              _this2.emitReserved("drain");
            }, _this2.setTimeoutFn);
          }
        });
      };
      for (var i = 0; i < packets.length; i++) {
        _loop();
      }
    };
    _proto.doClose = function doClose() {
      var _a;
      (_a = this._transport) === null || _a === void 0 ? void 0 : _a.close();
    };
    return _createClass(WT, [{
      key: "name",
      get: function get() {
        return "webtransport";
      }
    }]);
  }(Transport);

  var transports = {
    websocket: WS,
    webtransport: WT,
    polling: XHR
  };

  // imported from https://github.com/galkn/parseuri
  /**
   * Parses a URI
   *
   * Note: we could also have used the built-in URL object, but it isn't supported on all platforms.
   *
   * See:
   * - https://developer.mozilla.org/en-US/docs/Web/API/URL
   * - https://caniuse.com/url
   * - https://www.rfc-editor.org/rfc/rfc3986#appendix-B
   *
   * History of the parse() method:
   * - first commit: https://github.com/socketio/socket.io-client/commit/4ee1d5d94b3906a9c052b459f1a818b15f38f91c
   * - export into its own module: https://github.com/socketio/engine.io-client/commit/de2c561e4564efeb78f1bdb1ba39ef81b2822cb3
   * - reimport: https://github.com/socketio/engine.io-client/commit/df32277c3f6d622eec5ed09f493cae3f3391d242
   *
   * @author Steven Levithan <stevenlevithan.com> (MIT license)
   * @api private
   */
  var re = /^(?:(?![^:@\/?#]+:[^:@\/]*@)(http|https|ws|wss):\/\/)?((?:(([^:@\/?#]*)(?::([^:@\/?#]*))?)?@)?((?:[a-f0-9]{0,4}:){2,7}[a-f0-9]{0,4}|[^:\/?#]*)(?::(\d*))?)(((\/(?:[^?#](?![^?#\/]*\.[^?#\/.]+(?:[?#]|$)))*\/?)?([^?#\/]*))(?:\?([^#]*))?(?:#(.*))?)/;
  var parts = ['source', 'protocol', 'authority', 'userInfo', 'user', 'password', 'host', 'port', 'relative', 'path', 'directory', 'file', 'query', 'anchor'];
  function parse(str) {
    if (str.length > 8000) {
      throw "URI too long";
    }
    var src = str,
      b = str.indexOf('['),
      e = str.indexOf(']');
    if (b != -1 && e != -1) {
      str = str.substring(0, b) + str.substring(b, e).replace(/:/g, ';') + str.substring(e, str.length);
    }
    var m = re.exec(str || ''),
      uri = {},
      i = 14;
    while (i--) {
      uri[parts[i]] = m[i] || '';
    }
    if (b != -1 && e != -1) {
      uri.source = src;
      uri.host = uri.host.substring(1, uri.host.length - 1).replace(/;/g, ':');
      uri.authority = uri.authority.replace('[', '').replace(']', '').replace(/;/g, ':');
      uri.ipv6uri = true;
    }
    uri.pathNames = pathNames(uri, uri['path']);
    uri.queryKey = queryKey(uri, uri['query']);
    return uri;
  }
  function pathNames(obj, path) {
    var regx = /\/{2,9}/g,
      names = path.replace(regx, "/").split("/");
    if (path.slice(0, 1) == '/' || path.length === 0) {
      names.splice(0, 1);
    }
    if (path.slice(-1) == '/') {
      names.splice(names.length - 1, 1);
    }
    return names;
  }
  function queryKey(uri, query) {
    var data = {};
    query.replace(/(?:^|&)([^&=]*)=?([^&]*)/g, function ($0, $1, $2) {
      if ($1) {
        data[$1] = $2;
      }
    });
    return data;
  }

  var withEventListeners = typeof addEventListener === "function" && typeof removeEventListener === "function";
  var OFFLINE_EVENT_LISTENERS = [];
  if (withEventListeners) {
    // within a ServiceWorker, any event handler for the 'offline' event must be added on the initial evaluation of the
    // script, so we create one single event listener here which will forward the event to the socket instances
    addEventListener("offline", function () {
      OFFLINE_EVENT_LISTENERS.forEach(function (listener) {
        return listener();
      });
    }, false);
  }
  /**
   * This class provides a WebSocket-like interface to connect to an Engine.IO server. The connection will be established
   * with one of the available low-level transports, like HTTP long-polling, WebSocket or WebTransport.
   *
   * This class comes without upgrade mechanism, which means that it will keep the first low-level transport that
   * successfully establishes the connection.
   *
   * In order to allow tree-shaking, there are no transports included, that's why the `transports` option is mandatory.
   *
   * @example
   * import { SocketWithoutUpgrade, WebSocket } from "engine.io-client";
   *
   * const socket = new SocketWithoutUpgrade({
   *   transports: [WebSocket]
   * });
   *
   * socket.on("open", () => {
   *   socket.send("hello");
   * });
   *
   * @see SocketWithUpgrade
   * @see Socket
   */
  var SocketWithoutUpgrade = /*#__PURE__*/function (_Emitter) {
    /**
     * Socket constructor.
     *
     * @param {String|Object} uri - uri or options
     * @param {Object} opts - options
     */
    function SocketWithoutUpgrade(uri, opts) {
      var _this;
      _this = _Emitter.call(this) || this;
      _this.binaryType = defaultBinaryType;
      _this.writeBuffer = [];
      _this._prevBufferLen = 0;
      _this._pingInterval = -1;
      _this._pingTimeout = -1;
      _this._maxPayload = -1;
      /**
       * The expiration timestamp of the {@link _pingTimeoutTimer} object is tracked, in case the timer is throttled and the
       * callback is not fired on time. This can happen for example when a laptop is suspended or when a phone is locked.
       */
      _this._pingTimeoutTime = Infinity;
      if (uri && "object" === _typeof(uri)) {
        opts = uri;
        uri = null;
      }
      if (uri) {
        var parsedUri = parse(uri);
        opts.hostname = parsedUri.host;
        opts.secure = parsedUri.protocol === "https" || parsedUri.protocol === "wss";
        opts.port = parsedUri.port;
        if (parsedUri.query) opts.query = parsedUri.query;
      } else if (opts.host) {
        opts.hostname = parse(opts.host).host;
      }
      installTimerFunctions(_this, opts);
      _this.secure = null != opts.secure ? opts.secure : typeof location !== "undefined" && "https:" === location.protocol;
      if (opts.hostname && !opts.port) {
        // if no port is specified manually, use the protocol default
        opts.port = _this.secure ? "443" : "80";
      }
      _this.hostname = opts.hostname || (typeof location !== "undefined" ? location.hostname : "localhost");
      _this.port = opts.port || (typeof location !== "undefined" && location.port ? location.port : _this.secure ? "443" : "80");
      _this.transports = [];
      _this._transportsByName = {};
      opts.transports.forEach(function (t) {
        var transportName = t.prototype.name;
        _this.transports.push(transportName);
        _this._transportsByName[transportName] = t;
      });
      _this.opts = _extends({
        path: "/engine.io",
        agent: false,
        withCredentials: false,
        upgrade: true,
        timestampParam: "t",
        rememberUpgrade: false,
        addTrailingSlash: true,
        rejectUnauthorized: true,
        perMessageDeflate: {
          threshold: 1024
        },
        transportOptions: {},
        closeOnBeforeunload: false
      }, opts);
      _this.opts.path = _this.opts.path.replace(/\/$/, "") + (_this.opts.addTrailingSlash ? "/" : "");
      if (typeof _this.opts.query === "string") {
        _this.opts.query = decode(_this.opts.query);
      }
      if (withEventListeners) {
        if (_this.opts.closeOnBeforeunload) {
          // Firefox closes the connection when the "beforeunload" event is emitted but not Chrome. This event listener
          // ensures every browser behaves the same (no "disconnect" event at the Socket.IO level when the page is
          // closed/reloaded)
          _this._beforeunloadEventListener = function () {
            if (_this.transport) {
              // silently close the transport
              _this.transport.removeAllListeners();
              _this.transport.close();
            }
          };
          addEventListener("beforeunload", _this._beforeunloadEventListener, false);
        }
        if (_this.hostname !== "localhost") {
          _this._offlineEventListener = function () {
            _this._onClose("transport close", {
              description: "network connection lost"
            });
          };
          OFFLINE_EVENT_LISTENERS.push(_this._offlineEventListener);
        }
      }
      if (_this.opts.withCredentials) {
        _this._cookieJar = createCookieJar();
      }
      _this._open();
      return _this;
    }
    /**
     * Creates transport of the given type.
     *
     * @param {String} name - transport name
     * @return {Transport}
     * @private
     */
    _inheritsLoose(SocketWithoutUpgrade, _Emitter);
    var _proto = SocketWithoutUpgrade.prototype;
    _proto.createTransport = function createTransport(name) {
      var query = _extends({}, this.opts.query);
      // append engine.io protocol identifier
      query.EIO = protocol$1;
      // transport name
      query.transport = name;
      // session id if we already have one
      if (this.id) query.sid = this.id;
      var opts = _extends({}, this.opts, {
        query: query,
        socket: this,
        hostname: this.hostname,
        secure: this.secure,
        port: this.port
      }, this.opts.transportOptions[name]);
      return new this._transportsByName[name](opts);
    }
    /**
     * Initializes transport to use and starts probe.
     *
     * @private
     */;
    _proto._open = function _open() {
      var _this2 = this;
      if (this.transports.length === 0) {
        // Emit error on next tick so it can be listened to
        this.setTimeoutFn(function () {
          _this2.emitReserved("error", "No transports available");
        }, 0);
        return;
      }
      var transportName = this.opts.rememberUpgrade && SocketWithoutUpgrade.priorWebsocketSuccess && this.transports.indexOf("websocket") !== -1 ? "websocket" : this.transports[0];
      this.readyState = "opening";
      var transport = this.createTransport(transportName);
      transport.open();
      this.setTransport(transport);
    }
    /**
     * Sets the current transport. Disables the existing one (if any).
     *
     * @private
     */;
    _proto.setTransport = function setTransport(transport) {
      var _this3 = this;
      if (this.transport) {
        this.transport.removeAllListeners();
      }
      // set up transport
      this.transport = transport;
      // set up transport listeners
      transport.on("drain", this._onDrain.bind(this)).on("packet", this._onPacket.bind(this)).on("error", this._onError.bind(this)).on("close", function (reason) {
        return _this3._onClose("transport close", reason);
      });
    }
    /**
     * Called when connection is deemed open.
     *
     * @private
     */;
    _proto.onOpen = function onOpen() {
      this.readyState = "open";
      SocketWithoutUpgrade.priorWebsocketSuccess = "websocket" === this.transport.name;
      this.emitReserved("open");
      this.flush();
    }
    /**
     * Handles a packet.
     *
     * @private
     */;
    _proto._onPacket = function _onPacket(packet) {
      if ("opening" === this.readyState || "open" === this.readyState || "closing" === this.readyState) {
        this.emitReserved("packet", packet);
        // Socket is live - any packet counts
        this.emitReserved("heartbeat");
        switch (packet.type) {
          case "open":
            this.onHandshake(JSON.parse(packet.data));
            break;
          case "ping":
            this._sendPacket("pong");
            this.emitReserved("ping");
            this.emitReserved("pong");
            this._resetPingTimeout();
            break;
          case "error":
            var err = new Error("server error");
            // @ts-ignore
            err.code = packet.data;
            this._onError(err);
            break;
          case "message":
            this.emitReserved("data", packet.data);
            this.emitReserved("message", packet.data);
            break;
        }
      }
    }
    /**
     * Called upon handshake completion.
     *
     * @param {Object} data - handshake obj
     * @private
     */;
    _proto.onHandshake = function onHandshake(data) {
      this.emitReserved("handshake", data);
      this.id = data.sid;
      this.transport.query.sid = data.sid;
      this._pingInterval = data.pingInterval;
      this._pingTimeout = data.pingTimeout;
      this._maxPayload = data.maxPayload;
      this.onOpen();
      // In case open handler closes socket
      if ("closed" === this.readyState) return;
      this._resetPingTimeout();
    }
    /**
     * Sets and resets ping timeout timer based on server pings.
     *
     * @private
     */;
    _proto._resetPingTimeout = function _resetPingTimeout() {
      var _this4 = this;
      this.clearTimeoutFn(this._pingTimeoutTimer);
      var delay = this._pingInterval + this._pingTimeout;
      this._pingTimeoutTime = Date.now() + delay;
      this._pingTimeoutTimer = this.setTimeoutFn(function () {
        _this4._onClose("ping timeout");
      }, delay);
      if (this.opts.autoUnref) {
        this._pingTimeoutTimer.unref();
      }
    }
    /**
     * Called on `drain` event
     *
     * @private
     */;
    _proto._onDrain = function _onDrain() {
      this.writeBuffer.splice(0, this._prevBufferLen);
      // setting prevBufferLen = 0 is very important
      // for example, when upgrading, upgrade packet is sent over,
      // and a nonzero prevBufferLen could cause problems on `drain`
      this._prevBufferLen = 0;
      if (0 === this.writeBuffer.length) {
        this.emitReserved("drain");
      } else {
        this.flush();
      }
    }
    /**
     * Flush write buffers.
     *
     * @private
     */;
    _proto.flush = function flush() {
      if ("closed" !== this.readyState && this.transport.writable && !this.upgrading && this.writeBuffer.length) {
        var packets = this._getWritablePackets();
        this.transport.send(packets);
        // keep track of current length of writeBuffer
        // splice writeBuffer and callbackBuffer on `drain`
        this._prevBufferLen = packets.length;
        this.emitReserved("flush");
      }
    }
    /**
     * Ensure the encoded size of the writeBuffer is below the maxPayload value sent by the server (only for HTTP
     * long-polling)
     *
     * @private
     */;
    _proto._getWritablePackets = function _getWritablePackets() {
      var shouldCheckPayloadSize = this._maxPayload && this.transport.name === "polling" && this.writeBuffer.length > 1;
      if (!shouldCheckPayloadSize) {
        return this.writeBuffer;
      }
      var payloadSize = 1; // first packet type
      for (var i = 0; i < this.writeBuffer.length; i++) {
        var data = this.writeBuffer[i].data;
        if (data) {
          payloadSize += byteLength(data);
        }
        if (i > 0 && payloadSize > this._maxPayload) {
          return this.writeBuffer.slice(0, i);
        }
        payloadSize += 2; // separator + packet type
      }
      return this.writeBuffer;
    }
    /**
     * Checks whether the heartbeat timer has expired but the socket has not yet been notified.
     *
     * Note: this method is private for now because it does not really fit the WebSocket API, but if we put it in the
     * `write()` method then the message would not be buffered by the Socket.IO client.
     *
     * @return {boolean}
     * @private
     */
    /* private */;
    _proto._hasPingExpired = function _hasPingExpired() {
      var _this5 = this;
      if (!this._pingTimeoutTime) return true;
      var hasExpired = Date.now() > this._pingTimeoutTime;
      if (hasExpired) {
        this._pingTimeoutTime = 0;
        nextTick(function () {
          _this5._onClose("ping timeout");
        }, this.setTimeoutFn);
      }
      return hasExpired;
    }
    /**
     * Sends a message.
     *
     * @param {String} msg - message.
     * @param {Object} options.
     * @param {Function} fn - callback function.
     * @return {Socket} for chaining.
     */;
    _proto.write = function write(msg, options, fn) {
      this._sendPacket("message", msg, options, fn);
      return this;
    }
    /**
     * Sends a message. Alias of {@link Socket#write}.
     *
     * @param {String} msg - message.
     * @param {Object} options.
     * @param {Function} fn - callback function.
     * @return {Socket} for chaining.
     */;
    _proto.send = function send(msg, options, fn) {
      this._sendPacket("message", msg, options, fn);
      return this;
    }
    /**
     * Sends a packet.
     *
     * @param {String} type: packet type.
     * @param {String} data.
     * @param {Object} options.
     * @param {Function} fn - callback function.
     * @private
     */;
    _proto._sendPacket = function _sendPacket(type, data, options, fn) {
      if ("function" === typeof data) {
        fn = data;
        data = undefined;
      }
      if ("function" === typeof options) {
        fn = options;
        options = null;
      }
      if ("closing" === this.readyState || "closed" === this.readyState) {
        return;
      }
      options = options || {};
      options.compress = false !== options.compress;
      var packet = {
        type: type,
        data: data,
        options: options
      };
      this.emitReserved("packetCreate", packet);
      this.writeBuffer.push(packet);
      if (fn) this.once("flush", fn);
      this.flush();
    }
    /**
     * Closes the connection.
     */;
    _proto.close = function close() {
      var _this6 = this;
      var close = function close() {
        _this6._onClose("forced close");
        _this6.transport.close();
      };
      var cleanupAndClose = function cleanupAndClose() {
        _this6.off("upgrade", cleanupAndClose);
        _this6.off("upgradeError", cleanupAndClose);
        close();
      };
      var waitForUpgrade = function waitForUpgrade() {
        // wait for upgrade to finish since we can't send packets while pausing a transport
        _this6.once("upgrade", cleanupAndClose);
        _this6.once("upgradeError", cleanupAndClose);
      };
      if ("opening" === this.readyState || "open" === this.readyState) {
        this.readyState = "closing";
        if (this.writeBuffer.length) {
          this.once("drain", function () {
            if (_this6.upgrading) {
              waitForUpgrade();
            } else {
              close();
            }
          });
        } else if (this.upgrading) {
          waitForUpgrade();
        } else {
          close();
        }
      }
      return this;
    }
    /**
     * Called upon transport error
     *
     * @private
     */;
    _proto._onError = function _onError(err) {
      SocketWithoutUpgrade.priorWebsocketSuccess = false;
      if (this.opts.tryAllTransports && this.transports.length > 1 && this.readyState === "opening") {
        this.transports.shift();
        return this._open();
      }
      this.emitReserved("error", err);
      this._onClose("transport error", err);
    }
    /**
     * Called upon transport close.
     *
     * @private
     */;
    _proto._onClose = function _onClose(reason, description) {
      if ("opening" === this.readyState || "open" === this.readyState || "closing" === this.readyState) {
        // clear timers
        this.clearTimeoutFn(this._pingTimeoutTimer);
        // stop event from firing again for transport
        this.transport.removeAllListeners("close");
        // ensure transport won't stay open
        this.transport.close();
        // ignore further transport communication
        this.transport.removeAllListeners();
        if (withEventListeners) {
          if (this._beforeunloadEventListener) {
            removeEventListener("beforeunload", this._beforeunloadEventListener, false);
          }
          if (this._offlineEventListener) {
            var i = OFFLINE_EVENT_LISTENERS.indexOf(this._offlineEventListener);
            if (i !== -1) {
              OFFLINE_EVENT_LISTENERS.splice(i, 1);
            }
          }
        }
        // set ready state
        this.readyState = "closed";
        // clear session id
        this.id = null;
        // emit close event
        this.emitReserved("close", reason, description);
        // clean buffers after, so users can still
        // grab the buffers on `close` event
        this.writeBuffer = [];
        this._prevBufferLen = 0;
      }
    };
    return SocketWithoutUpgrade;
  }(Emitter);
  SocketWithoutUpgrade.protocol = protocol$1;
  /**
   * This class provides a WebSocket-like interface to connect to an Engine.IO server. The connection will be established
   * with one of the available low-level transports, like HTTP long-polling, WebSocket or WebTransport.
   *
   * This class comes with an upgrade mechanism, which means that once the connection is established with the first
   * low-level transport, it will try to upgrade to a better transport.
   *
   * In order to allow tree-shaking, there are no transports included, that's why the `transports` option is mandatory.
   *
   * @example
   * import { SocketWithUpgrade, WebSocket } from "engine.io-client";
   *
   * const socket = new SocketWithUpgrade({
   *   transports: [WebSocket]
   * });
   *
   * socket.on("open", () => {
   *   socket.send("hello");
   * });
   *
   * @see SocketWithoutUpgrade
   * @see Socket
   */
  var SocketWithUpgrade = /*#__PURE__*/function (_SocketWithoutUpgrade) {
    function SocketWithUpgrade() {
      var _this7;
      _this7 = _SocketWithoutUpgrade.apply(this, arguments) || this;
      _this7._upgrades = [];
      return _this7;
    }
    _inheritsLoose(SocketWithUpgrade, _SocketWithoutUpgrade);
    var _proto2 = SocketWithUpgrade.prototype;
    _proto2.onOpen = function onOpen() {
      _SocketWithoutUpgrade.prototype.onOpen.call(this);
      if ("open" === this.readyState && this.opts.upgrade) {
        for (var i = 0; i < this._upgrades.length; i++) {
          this._probe(this._upgrades[i]);
        }
      }
    }
    /**
     * Probes a transport.
     *
     * @param {String} name - transport name
     * @private
     */;
    _proto2._probe = function _probe(name) {
      var _this8 = this;
      var transport = this.createTransport(name);
      var failed = false;
      SocketWithoutUpgrade.priorWebsocketSuccess = false;
      var onTransportOpen = function onTransportOpen() {
        if (failed) return;
        transport.send([{
          type: "ping",
          data: "probe"
        }]);
        transport.once("packet", function (msg) {
          if (failed) return;
          if ("pong" === msg.type && "probe" === msg.data) {
            _this8.upgrading = true;
            _this8.emitReserved("upgrading", transport);
            if (!transport) return;
            SocketWithoutUpgrade.priorWebsocketSuccess = "websocket" === transport.name;
            _this8.transport.pause(function () {
              if (failed) return;
              if ("closed" === _this8.readyState) return;
              cleanup();
              _this8.setTransport(transport);
              transport.send([{
                type: "upgrade"
              }]);
              _this8.emitReserved("upgrade", transport);
              transport = null;
              _this8.upgrading = false;
              _this8.flush();
            });
          } else {
            var err = new Error("probe error");
            // @ts-ignore
            err.transport = transport.name;
            _this8.emitReserved("upgradeError", err);
          }
        });
      };
      function freezeTransport() {
        if (failed) return;
        // Any callback called by transport should be ignored since now
        failed = true;
        cleanup();
        transport.close();
        transport = null;
      }
      // Handle any error that happens while probing
      var onerror = function onerror(err) {
        var error = new Error("probe error: " + err);
        // @ts-ignore
        error.transport = transport.name;
        freezeTransport();
        _this8.emitReserved("upgradeError", error);
      };
      function onTransportClose() {
        onerror("transport closed");
      }
      // When the socket is closed while we're probing
      function onclose() {
        onerror("socket closed");
      }
      // When the socket is upgraded while we're probing
      function onupgrade(to) {
        if (transport && to.name !== transport.name) {
          freezeTransport();
        }
      }
      // Remove all listeners on the transport and on self
      var cleanup = function cleanup() {
        transport.removeListener("open", onTransportOpen);
        transport.removeListener("error", onerror);
        transport.removeListener("close", onTransportClose);
        _this8.off("close", onclose);
        _this8.off("upgrading", onupgrade);
      };
      transport.once("open", onTransportOpen);
      transport.once("error", onerror);
      transport.once("close", onTransportClose);
      this.once("close", onclose);
      this.once("upgrading", onupgrade);
      if (this._upgrades.indexOf("webtransport") !== -1 && name !== "webtransport") {
        // favor WebTransport
        this.setTimeoutFn(function () {
          if (!failed) {
            transport.open();
          }
        }, 200);
      } else {
        transport.open();
      }
    };
    _proto2.onHandshake = function onHandshake(data) {
      this._upgrades = this._filterUpgrades(data.upgrades);
      _SocketWithoutUpgrade.prototype.onHandshake.call(this, data);
    }
    /**
     * Filters upgrades, returning only those matching client transports.
     *
     * @param {Array} upgrades - server upgrades
     * @private
     */;
    _proto2._filterUpgrades = function _filterUpgrades(upgrades) {
      var filteredUpgrades = [];
      for (var i = 0; i < upgrades.length; i++) {
        if (~this.transports.indexOf(upgrades[i])) filteredUpgrades.push(upgrades[i]);
      }
      return filteredUpgrades;
    };
    return SocketWithUpgrade;
  }(SocketWithoutUpgrade);
  /**
   * This class provides a WebSocket-like interface to connect to an Engine.IO server. The connection will be established
   * with one of the available low-level transports, like HTTP long-polling, WebSocket or WebTransport.
   *
   * This class comes with an upgrade mechanism, which means that once the connection is established with the first
   * low-level transport, it will try to upgrade to a better transport.
   *
   * @example
   * import { Socket } from "engine.io-client";
   *
   * const socket = new Socket();
   *
   * socket.on("open", () => {
   *   socket.send("hello");
   * });
   *
   * @see SocketWithoutUpgrade
   * @see SocketWithUpgrade
   */
  var Socket$1 = /*#__PURE__*/function (_SocketWithUpgrade) {
    function Socket(uri) {
      var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      var o = _typeof(uri) === "object" ? uri : opts;
      if (!o.transports || o.transports && typeof o.transports[0] === "string") {
        o.transports = (o.transports || ["polling", "websocket", "webtransport"]).map(function (transportName) {
          return transports[transportName];
        }).filter(function (t) {
          return !!t;
        });
      }
      return _SocketWithUpgrade.call(this, uri, o) || this;
    }
    _inheritsLoose(Socket, _SocketWithUpgrade);
    return Socket;
  }(SocketWithUpgrade);

  Socket$1.protocol;

  function getDefaultExportFromCjs (x) {
  	return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;
  }

  var browser = {exports: {}};

  var ms;
  var hasRequiredMs;
  function requireMs() {
    if (hasRequiredMs) return ms;
    hasRequiredMs = 1;
    var s = 1000;
    var m = s * 60;
    var h = m * 60;
    var d = h * 24;
    var w = d * 7;
    var y = d * 365.25;

    /**
     * Parse or format the given `val`.
     *
     * Options:
     *
     *  - `long` verbose formatting [false]
     *
     * @param {String|Number} val
     * @param {Object} [options]
     * @throws {Error} throw an error if val is not a non-empty string or a number
     * @return {String|Number}
     * @api public
     */

    ms = function ms(val, options) {
      options = options || {};
      var type = _typeof(val);
      if (type === 'string' && val.length > 0) {
        return parse(val);
      } else if (type === 'number' && isFinite(val)) {
        return options["long"] ? fmtLong(val) : fmtShort(val);
      }
      throw new Error('val is not a non-empty string or a valid number. val=' + JSON.stringify(val));
    };

    /**
     * Parse the given `str` and return milliseconds.
     *
     * @param {String} str
     * @return {Number}
     * @api private
     */

    function parse(str) {
      str = String(str);
      if (str.length > 100) {
        return;
      }
      var match = /^(-?(?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(str);
      if (!match) {
        return;
      }
      var n = parseFloat(match[1]);
      var type = (match[2] || 'ms').toLowerCase();
      switch (type) {
        case 'years':
        case 'year':
        case 'yrs':
        case 'yr':
        case 'y':
          return n * y;
        case 'weeks':
        case 'week':
        case 'w':
          return n * w;
        case 'days':
        case 'day':
        case 'd':
          return n * d;
        case 'hours':
        case 'hour':
        case 'hrs':
        case 'hr':
        case 'h':
          return n * h;
        case 'minutes':
        case 'minute':
        case 'mins':
        case 'min':
        case 'm':
          return n * m;
        case 'seconds':
        case 'second':
        case 'secs':
        case 'sec':
        case 's':
          return n * s;
        case 'milliseconds':
        case 'millisecond':
        case 'msecs':
        case 'msec':
        case 'ms':
          return n;
        default:
          return undefined;
      }
    }

    /**
     * Short format for `ms`.
     *
     * @param {Number} ms
     * @return {String}
     * @api private
     */

    function fmtShort(ms) {
      var msAbs = Math.abs(ms);
      if (msAbs >= d) {
        return Math.round(ms / d) + 'd';
      }
      if (msAbs >= h) {
        return Math.round(ms / h) + 'h';
      }
      if (msAbs >= m) {
        return Math.round(ms / m) + 'm';
      }
      if (msAbs >= s) {
        return Math.round(ms / s) + 's';
      }
      return ms + 'ms';
    }

    /**
     * Long format for `ms`.
     *
     * @param {Number} ms
     * @return {String}
     * @api private
     */

    function fmtLong(ms) {
      var msAbs = Math.abs(ms);
      if (msAbs >= d) {
        return plural(ms, msAbs, d, 'day');
      }
      if (msAbs >= h) {
        return plural(ms, msAbs, h, 'hour');
      }
      if (msAbs >= m) {
        return plural(ms, msAbs, m, 'minute');
      }
      if (msAbs >= s) {
        return plural(ms, msAbs, s, 'second');
      }
      return ms + ' ms';
    }

    /**
     * Pluralization helper.
     */

    function plural(ms, msAbs, n, name) {
      var isPlural = msAbs >= n * 1.5;
      return Math.round(ms / n) + ' ' + name + (isPlural ? 's' : '');
    }
    return ms;
  }

  /**
   * This is the common logic for both the Node.js and web browser
   * implementations of `debug()`.
   */

  function setup(env) {
    createDebug.debug = createDebug;
    createDebug["default"] = createDebug;
    createDebug.coerce = coerce;
    createDebug.disable = disable;
    createDebug.enable = enable;
    createDebug.enabled = enabled;
    createDebug.humanize = requireMs();
    createDebug.destroy = destroy;
    Object.keys(env).forEach(function (key) {
      createDebug[key] = env[key];
    });

    /**
    * The currently active debug mode names, and names to skip.
    */

    createDebug.names = [];
    createDebug.skips = [];

    /**
    * Map of special "%n" handling functions, for the debug "format" argument.
    *
    * Valid key names are a single, lower or upper-case letter, i.e. "n" and "N".
    */
    createDebug.formatters = {};

    /**
    * Selects a color for a debug namespace
    * @param {String} namespace The namespace string for the debug instance to be colored
    * @return {Number|String} An ANSI color code for the given namespace
    * @api private
    */
    function selectColor(namespace) {
      var hash = 0;
      for (var i = 0; i < namespace.length; i++) {
        hash = (hash << 5) - hash + namespace.charCodeAt(i);
        hash |= 0; // Convert to 32bit integer
      }
      return createDebug.colors[Math.abs(hash) % createDebug.colors.length];
    }
    createDebug.selectColor = selectColor;

    /**
    * Create a debugger with the given `namespace`.
    *
    * @param {String} namespace
    * @return {Function}
    * @api public
    */
    function createDebug(namespace) {
      var prevTime;
      var enableOverride = null;
      var namespacesCache;
      var enabledCache;
      function debug() {
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }
        // Disabled?
        if (!debug.enabled) {
          return;
        }
        var self = debug;

        // Set `diff` timestamp
        var curr = Number(new Date());
        var ms = curr - (prevTime || curr);
        self.diff = ms;
        self.prev = prevTime;
        self.curr = curr;
        prevTime = curr;
        args[0] = createDebug.coerce(args[0]);
        if (typeof args[0] !== 'string') {
          // Anything else let's inspect with %O
          args.unshift('%O');
        }

        // Apply any `formatters` transformations
        var index = 0;
        args[0] = args[0].replace(/%([a-zA-Z%])/g, function (match, format) {
          // If we encounter an escaped % then don't increase the array index
          if (match === '%%') {
            return '%';
          }
          index++;
          var formatter = createDebug.formatters[format];
          if (typeof formatter === 'function') {
            var val = args[index];
            match = formatter.call(self, val);

            // Now we need to remove `args[index]` since it's inlined in the `format`
            args.splice(index, 1);
            index--;
          }
          return match;
        });

        // Apply env-specific formatting (colors, etc.)
        createDebug.formatArgs.call(self, args);
        var logFn = self.log || createDebug.log;
        logFn.apply(self, args);
      }
      debug.namespace = namespace;
      debug.useColors = createDebug.useColors();
      debug.color = createDebug.selectColor(namespace);
      debug.extend = extend;
      debug.destroy = createDebug.destroy; // XXX Temporary. Will be removed in the next major release.

      Object.defineProperty(debug, 'enabled', {
        enumerable: true,
        configurable: false,
        get: function get() {
          if (enableOverride !== null) {
            return enableOverride;
          }
          if (namespacesCache !== createDebug.namespaces) {
            namespacesCache = createDebug.namespaces;
            enabledCache = createDebug.enabled(namespace);
          }
          return enabledCache;
        },
        set: function set(v) {
          enableOverride = v;
        }
      });

      // Env-specific initialization logic for debug instances
      if (typeof createDebug.init === 'function') {
        createDebug.init(debug);
      }
      return debug;
    }
    function extend(namespace, delimiter) {
      var newDebug = createDebug(this.namespace + (typeof delimiter === 'undefined' ? ':' : delimiter) + namespace);
      newDebug.log = this.log;
      return newDebug;
    }

    /**
    * Enables a debug mode by namespaces. This can include modes
    * separated by a colon and wildcards.
    *
    * @param {String} namespaces
    * @api public
    */
    function enable(namespaces) {
      createDebug.save(namespaces);
      createDebug.namespaces = namespaces;
      createDebug.names = [];
      createDebug.skips = [];
      var i;
      var split = (typeof namespaces === 'string' ? namespaces : '').split(/[\s,]+/);
      var len = split.length;
      for (i = 0; i < len; i++) {
        if (!split[i]) {
          // ignore empty strings
          continue;
        }
        namespaces = split[i].replace(/\*/g, '.*?');
        if (namespaces[0] === '-') {
          createDebug.skips.push(new RegExp('^' + namespaces.slice(1) + '$'));
        } else {
          createDebug.names.push(new RegExp('^' + namespaces + '$'));
        }
      }
    }

    /**
    * Disable debug output.
    *
    * @return {String} namespaces
    * @api public
    */
    function disable() {
      var namespaces = [].concat(_toConsumableArray(createDebug.names.map(toNamespace)), _toConsumableArray(createDebug.skips.map(toNamespace).map(function (namespace) {
        return '-' + namespace;
      }))).join(',');
      createDebug.enable('');
      return namespaces;
    }

    /**
    * Returns true if the given mode name is enabled, false otherwise.
    *
    * @param {String} name
    * @return {Boolean}
    * @api public
    */
    function enabled(name) {
      if (name[name.length - 1] === '*') {
        return true;
      }
      var i;
      var len;
      for (i = 0, len = createDebug.skips.length; i < len; i++) {
        if (createDebug.skips[i].test(name)) {
          return false;
        }
      }
      for (i = 0, len = createDebug.names.length; i < len; i++) {
        if (createDebug.names[i].test(name)) {
          return true;
        }
      }
      return false;
    }

    /**
    * Convert regexp to namespace
    *
    * @param {RegExp} regxep
    * @return {String} namespace
    * @api private
    */
    function toNamespace(regexp) {
      return regexp.toString().substring(2, regexp.toString().length - 2).replace(/\.\*\?$/, '*');
    }

    /**
    * Coerce `val`.
    *
    * @param {Mixed} val
    * @return {Mixed}
    * @api private
    */
    function coerce(val) {
      if (val instanceof Error) {
        return val.stack || val.message;
      }
      return val;
    }

    /**
    * XXX DO NOT USE. This is a temporary stub function.
    * XXX It WILL be removed in the next major release.
    */
    function destroy() {
      console.warn('Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.');
    }
    createDebug.enable(createDebug.load());
    return createDebug;
  }
  var common = setup;

  /* eslint-env browser */
  browser.exports;
  (function (module, exports) {
    /**
     * This is the web browser implementation of `debug()`.
     */

    exports.formatArgs = formatArgs;
    exports.save = save;
    exports.load = load;
    exports.useColors = useColors;
    exports.storage = localstorage();
    exports.destroy = function () {
      var warned = false;
      return function () {
        if (!warned) {
          warned = true;
          console.warn('Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.');
        }
      };
    }();

    /**
     * Colors.
     */

    exports.colors = ['#0000CC', '#0000FF', '#0033CC', '#0033FF', '#0066CC', '#0066FF', '#0099CC', '#0099FF', '#00CC00', '#00CC33', '#00CC66', '#00CC99', '#00CCCC', '#00CCFF', '#3300CC', '#3300FF', '#3333CC', '#3333FF', '#3366CC', '#3366FF', '#3399CC', '#3399FF', '#33CC00', '#33CC33', '#33CC66', '#33CC99', '#33CCCC', '#33CCFF', '#6600CC', '#6600FF', '#6633CC', '#6633FF', '#66CC00', '#66CC33', '#9900CC', '#9900FF', '#9933CC', '#9933FF', '#99CC00', '#99CC33', '#CC0000', '#CC0033', '#CC0066', '#CC0099', '#CC00CC', '#CC00FF', '#CC3300', '#CC3333', '#CC3366', '#CC3399', '#CC33CC', '#CC33FF', '#CC6600', '#CC6633', '#CC9900', '#CC9933', '#CCCC00', '#CCCC33', '#FF0000', '#FF0033', '#FF0066', '#FF0099', '#FF00CC', '#FF00FF', '#FF3300', '#FF3333', '#FF3366', '#FF3399', '#FF33CC', '#FF33FF', '#FF6600', '#FF6633', '#FF9900', '#FF9933', '#FFCC00', '#FFCC33'];

    /**
     * Currently only WebKit-based Web Inspectors, Firefox >= v31,
     * and the Firebug extension (any Firefox version) are known
     * to support "%c" CSS customizations.
     *
     * TODO: add a `localStorage` variable to explicitly enable/disable colors
     */

    // eslint-disable-next-line complexity
    function useColors() {
      // NB: In an Electron preload script, document will be defined but not fully
      // initialized. Since we know we're in Chrome, we'll just detect this case
      // explicitly
      if (typeof window !== 'undefined' && window.process && (window.process.type === 'renderer' || window.process.__nwjs)) {
        return true;
      }

      // Internet Explorer and Edge do not support colors.
      if (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/)) {
        return false;
      }

      // Is webkit? http://stackoverflow.com/a/16459606/376773
      // document is undefined in react-native: https://github.com/facebook/react-native/pull/1632
      return typeof document !== 'undefined' && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance ||
      // Is firebug? http://stackoverflow.com/a/398120/376773
      typeof window !== 'undefined' && window.console && (window.console.firebug || window.console.exception && window.console.table) ||
      // Is firefox >= v31?
      // https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages
      typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/) && parseInt(RegExp.$1, 10) >= 31 ||
      // Double check webkit in userAgent just in case we are in a worker
      typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/);
    }

    /**
     * Colorize log arguments if enabled.
     *
     * @api public
     */

    function formatArgs(args) {
      args[0] = (this.useColors ? '%c' : '') + this.namespace + (this.useColors ? ' %c' : ' ') + args[0] + (this.useColors ? '%c ' : ' ') + '+' + module.exports.humanize(this.diff);
      if (!this.useColors) {
        return;
      }
      var c = 'color: ' + this.color;
      args.splice(1, 0, c, 'color: inherit');

      // The final "%c" is somewhat tricky, because there could be other
      // arguments passed either before or after the %c, so we need to
      // figure out the correct index to insert the CSS into
      var index = 0;
      var lastC = 0;
      args[0].replace(/%[a-zA-Z%]/g, function (match) {
        if (match === '%%') {
          return;
        }
        index++;
        if (match === '%c') {
          // We only are interested in the *last* %c
          // (the user may have provided their own)
          lastC = index;
        }
      });
      args.splice(lastC, 0, c);
    }

    /**
     * Invokes `console.debug()` when available.
     * No-op when `console.debug` is not a "function".
     * If `console.debug` is not available, falls back
     * to `console.log`.
     *
     * @api public
     */
    exports.log = console.debug || console.log || function () {};

    /**
     * Save `namespaces`.
     *
     * @param {String} namespaces
     * @api private
     */
    function save(namespaces) {
      try {
        if (namespaces) {
          exports.storage.setItem('debug', namespaces);
        } else {
          exports.storage.removeItem('debug');
        }
      } catch (error) {
        // Swallow
        // XXX (@Qix-) should we be logging these?
      }
    }

    /**
     * Load `namespaces`.
     *
     * @return {String} returns the previously persisted debug modes
     * @api private
     */
    function load() {
      var r;
      try {
        r = exports.storage.getItem('debug');
      } catch (error) {
        // Swallow
        // XXX (@Qix-) should we be logging these?
      }

      // If debug isn't set in LS, and we're in Electron, try to load $DEBUG
      if (!r && typeof process !== 'undefined' && 'env' in process) {
        r = process.env.DEBUG;
      }
      return r;
    }

    /**
     * Localstorage attempts to return the localstorage.
     *
     * This is necessary because safari throws
     * when a user disables cookies/localstorage
     * and you attempt to access it.
     *
     * @return {LocalStorage}
     * @api private
     */

    function localstorage() {
      try {
        // TVMLKit (Apple TV JS Runtime) does not have a window object, just localStorage in the global context
        // The Browser also has localStorage in the global context.
        return localStorage;
      } catch (error) {
        // Swallow
        // XXX (@Qix-) should we be logging these?
      }
    }
    module.exports = common(exports);
    var formatters = module.exports.formatters;

    /**
     * Map %j to `JSON.stringify()`, since no Web Inspectors do that by default.
     */

    formatters.j = function (v) {
      try {
        return JSON.stringify(v);
      } catch (error) {
        return '[UnexpectedJSONParseError]: ' + error.message;
      }
    };
  })(browser, browser.exports);
  var browserExports = browser.exports;
  var debugModule = /*@__PURE__*/getDefaultExportFromCjs(browserExports);

  var debug$3 = debugModule("socket.io-client:url"); // debug()
  /**
   * URL parser.
   *
   * @param uri - url
   * @param path - the request path of the connection
   * @param loc - An object meant to mimic window.location.
   *        Defaults to window.location.
   * @public
   */
  function url(uri) {
    var path = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "";
    var loc = arguments.length > 2 ? arguments[2] : undefined;
    var obj = uri;
    // default to window.location
    loc = loc || typeof location !== "undefined" && location;
    if (null == uri) uri = loc.protocol + "//" + loc.host;
    // relative path support
    if (typeof uri === "string") {
      if ("/" === uri.charAt(0)) {
        if ("/" === uri.charAt(1)) {
          uri = loc.protocol + uri;
        } else {
          uri = loc.host + uri;
        }
      }
      if (!/^(https?|wss?):\/\//.test(uri)) {
        debug$3("protocol-less url %s", uri);
        if ("undefined" !== typeof loc) {
          uri = loc.protocol + "//" + uri;
        } else {
          uri = "https://" + uri;
        }
      }
      // parse
      debug$3("parse %s", uri);
      obj = parse(uri);
    }
    // make sure we treat `localhost:80` and `localhost` equally
    if (!obj.port) {
      if (/^(http|ws)$/.test(obj.protocol)) {
        obj.port = "80";
      } else if (/^(http|ws)s$/.test(obj.protocol)) {
        obj.port = "443";
      }
    }
    obj.path = obj.path || "/";
    var ipv6 = obj.host.indexOf(":") !== -1;
    var host = ipv6 ? "[" + obj.host + "]" : obj.host;
    // define unique id
    obj.id = obj.protocol + "://" + host + ":" + obj.port + path;
    // define href
    obj.href = obj.protocol + "://" + host + (loc && loc.port === obj.port ? "" : ":" + obj.port);
    return obj;
  }

  var withNativeArrayBuffer = typeof ArrayBuffer === "function";
  var isView = function isView(obj) {
    return typeof ArrayBuffer.isView === "function" ? ArrayBuffer.isView(obj) : obj.buffer instanceof ArrayBuffer;
  };
  var toString = Object.prototype.toString;
  var withNativeBlob = typeof Blob === "function" || typeof Blob !== "undefined" && toString.call(Blob) === "[object BlobConstructor]";
  var withNativeFile = typeof File === "function" || typeof File !== "undefined" && toString.call(File) === "[object FileConstructor]";
  /**
   * Returns true if obj is a Buffer, an ArrayBuffer, a Blob or a File.
   *
   * @private
   */
  function isBinary(obj) {
    return withNativeArrayBuffer && (obj instanceof ArrayBuffer || isView(obj)) || withNativeBlob && obj instanceof Blob || withNativeFile && obj instanceof File;
  }
  function hasBinary(obj, toJSON) {
    if (!obj || _typeof(obj) !== "object") {
      return false;
    }
    if (Array.isArray(obj)) {
      for (var i = 0, l = obj.length; i < l; i++) {
        if (hasBinary(obj[i])) {
          return true;
        }
      }
      return false;
    }
    if (isBinary(obj)) {
      return true;
    }
    if (obj.toJSON && typeof obj.toJSON === "function" && arguments.length === 1) {
      return hasBinary(obj.toJSON(), true);
    }
    for (var key in obj) {
      if (Object.prototype.hasOwnProperty.call(obj, key) && hasBinary(obj[key])) {
        return true;
      }
    }
    return false;
  }

  /**
   * Replaces every Buffer | ArrayBuffer | Blob | File in packet with a numbered placeholder.
   *
   * @param {Object} packet - socket.io event packet
   * @return {Object} with deconstructed packet and list of buffers
   * @public
   */
  function deconstructPacket(packet) {
    var buffers = [];
    var packetData = packet.data;
    var pack = packet;
    pack.data = _deconstructPacket(packetData, buffers);
    pack.attachments = buffers.length; // number of binary 'attachments'
    return {
      packet: pack,
      buffers: buffers
    };
  }
  function _deconstructPacket(data, buffers) {
    if (!data) return data;
    if (isBinary(data)) {
      var placeholder = {
        _placeholder: true,
        num: buffers.length
      };
      buffers.push(data);
      return placeholder;
    } else if (Array.isArray(data)) {
      var newData = new Array(data.length);
      for (var i = 0; i < data.length; i++) {
        newData[i] = _deconstructPacket(data[i], buffers);
      }
      return newData;
    } else if (_typeof(data) === "object" && !(data instanceof Date)) {
      var _newData = {};
      for (var key in data) {
        if (Object.prototype.hasOwnProperty.call(data, key)) {
          _newData[key] = _deconstructPacket(data[key], buffers);
        }
      }
      return _newData;
    }
    return data;
  }
  /**
   * Reconstructs a binary packet from its placeholder packet and buffers
   *
   * @param {Object} packet - event packet with placeholders
   * @param {Array} buffers - binary buffers to put in placeholder positions
   * @return {Object} reconstructed packet
   * @public
   */
  function reconstructPacket(packet, buffers) {
    packet.data = _reconstructPacket(packet.data, buffers);
    delete packet.attachments; // no longer useful
    return packet;
  }
  function _reconstructPacket(data, buffers) {
    if (!data) return data;
    if (data && data._placeholder === true) {
      var isIndexValid = typeof data.num === "number" && data.num >= 0 && data.num < buffers.length;
      if (isIndexValid) {
        return buffers[data.num]; // appropriate buffer (should be natural order anyway)
      } else {
        throw new Error("illegal attachments");
      }
    } else if (Array.isArray(data)) {
      for (var i = 0; i < data.length; i++) {
        data[i] = _reconstructPacket(data[i], buffers);
      }
    } else if (_typeof(data) === "object") {
      for (var key in data) {
        if (Object.prototype.hasOwnProperty.call(data, key)) {
          data[key] = _reconstructPacket(data[key], buffers);
        }
      }
    }
    return data;
  }

  /**
   * These strings must not be used as event names, as they have a special meaning.
   */
  var RESERVED_EVENTS$1 = ["connect",
  // used on the client side
  "connect_error",
  // used on the client side
  "disconnect",
  // used on both sides
  "disconnecting",
  // used on the server side
  "newListener",
  // used by the Node.js EventEmitter
  "removeListener" // used by the Node.js EventEmitter
  ];
  /**
   * Protocol version.
   *
   * @public
   */
  var protocol = 5;
  var PacketType;
  (function (PacketType) {
    PacketType[PacketType["CONNECT"] = 0] = "CONNECT";
    PacketType[PacketType["DISCONNECT"] = 1] = "DISCONNECT";
    PacketType[PacketType["EVENT"] = 2] = "EVENT";
    PacketType[PacketType["ACK"] = 3] = "ACK";
    PacketType[PacketType["CONNECT_ERROR"] = 4] = "CONNECT_ERROR";
    PacketType[PacketType["BINARY_EVENT"] = 5] = "BINARY_EVENT";
    PacketType[PacketType["BINARY_ACK"] = 6] = "BINARY_ACK";
  })(PacketType || (PacketType = {}));
  /**
   * A socket.io Encoder instance
   */
  var Encoder = /*#__PURE__*/function () {
    /**
     * Encoder constructor
     *
     * @param {function} replacer - custom replacer to pass down to JSON.parse
     */
    function Encoder(replacer) {
      this.replacer = replacer;
    }
    /**
     * Encode a packet as a single string if non-binary, or as a
     * buffer sequence, depending on packet type.
     *
     * @param {Object} obj - packet object
     */
    var _proto = Encoder.prototype;
    _proto.encode = function encode(obj) {
      if (obj.type === PacketType.EVENT || obj.type === PacketType.ACK) {
        if (hasBinary(obj)) {
          return this.encodeAsBinary({
            type: obj.type === PacketType.EVENT ? PacketType.BINARY_EVENT : PacketType.BINARY_ACK,
            nsp: obj.nsp,
            data: obj.data,
            id: obj.id
          });
        }
      }
      return [this.encodeAsString(obj)];
    }
    /**
     * Encode packet as string.
     */;
    _proto.encodeAsString = function encodeAsString(obj) {
      // first is type
      var str = "" + obj.type;
      // attachments if we have them
      if (obj.type === PacketType.BINARY_EVENT || obj.type === PacketType.BINARY_ACK) {
        str += obj.attachments + "-";
      }
      // if we have a namespace other than `/`
      // we append it followed by a comma `,`
      if (obj.nsp && "/" !== obj.nsp) {
        str += obj.nsp + ",";
      }
      // immediately followed by the id
      if (null != obj.id) {
        str += obj.id;
      }
      // json data
      if (null != obj.data) {
        str += JSON.stringify(obj.data, this.replacer);
      }
      return str;
    }
    /**
     * Encode packet as 'buffer sequence' by removing blobs, and
     * deconstructing packet into object with placeholders and
     * a list of buffers.
     */;
    _proto.encodeAsBinary = function encodeAsBinary(obj) {
      var deconstruction = deconstructPacket(obj);
      var pack = this.encodeAsString(deconstruction.packet);
      var buffers = deconstruction.buffers;
      buffers.unshift(pack); // add packet info to beginning of data list
      return buffers; // write all the buffers
    };
    return Encoder;
  }();
  /**
   * A socket.io Decoder instance
   *
   * @return {Object} decoder
   */
  var Decoder = /*#__PURE__*/function (_Emitter) {
    /**
     * Decoder constructor
     *
     * @param {function} reviver - custom reviver to pass down to JSON.stringify
     */
    function Decoder(reviver) {
      var _this;
      _this = _Emitter.call(this) || this;
      _this.reviver = reviver;
      return _this;
    }
    /**
     * Decodes an encoded packet string into packet JSON.
     *
     * @param {String} obj - encoded packet
     */
    _inheritsLoose(Decoder, _Emitter);
    var _proto2 = Decoder.prototype;
    _proto2.add = function add(obj) {
      var packet;
      if (typeof obj === "string") {
        if (this.reconstructor) {
          throw new Error("got plaintext data when reconstructing a packet");
        }
        packet = this.decodeString(obj);
        var isBinaryEvent = packet.type === PacketType.BINARY_EVENT;
        if (isBinaryEvent || packet.type === PacketType.BINARY_ACK) {
          packet.type = isBinaryEvent ? PacketType.EVENT : PacketType.ACK;
          // binary packet's json
          this.reconstructor = new BinaryReconstructor(packet);
          // no attachments, labeled binary but no binary data to follow
          if (packet.attachments === 0) {
            _Emitter.prototype.emitReserved.call(this, "decoded", packet);
          }
        } else {
          // non-binary full packet
          _Emitter.prototype.emitReserved.call(this, "decoded", packet);
        }
      } else if (isBinary(obj) || obj.base64) {
        // raw binary data
        if (!this.reconstructor) {
          throw new Error("got binary data when not reconstructing a packet");
        } else {
          packet = this.reconstructor.takeBinaryData(obj);
          if (packet) {
            // received final buffer
            this.reconstructor = null;
            _Emitter.prototype.emitReserved.call(this, "decoded", packet);
          }
        }
      } else {
        throw new Error("Unknown type: " + obj);
      }
    }
    /**
     * Decode a packet String (JSON data)
     *
     * @param {String} str
     * @return {Object} packet
     */;
    _proto2.decodeString = function decodeString(str) {
      var i = 0;
      // look up type
      var p = {
        type: Number(str.charAt(0))
      };
      if (PacketType[p.type] === undefined) {
        throw new Error("unknown packet type " + p.type);
      }
      // look up attachments if type binary
      if (p.type === PacketType.BINARY_EVENT || p.type === PacketType.BINARY_ACK) {
        var start = i + 1;
        while (str.charAt(++i) !== "-" && i != str.length) {}
        var buf = str.substring(start, i);
        if (buf != Number(buf) || str.charAt(i) !== "-") {
          throw new Error("Illegal attachments");
        }
        p.attachments = Number(buf);
      }
      // look up namespace (if any)
      if ("/" === str.charAt(i + 1)) {
        var _start = i + 1;
        while (++i) {
          var c = str.charAt(i);
          if ("," === c) break;
          if (i === str.length) break;
        }
        p.nsp = str.substring(_start, i);
      } else {
        p.nsp = "/";
      }
      // look up id
      var next = str.charAt(i + 1);
      if ("" !== next && Number(next) == next) {
        var _start2 = i + 1;
        while (++i) {
          var _c = str.charAt(i);
          if (null == _c || Number(_c) != _c) {
            --i;
            break;
          }
          if (i === str.length) break;
        }
        p.id = Number(str.substring(_start2, i + 1));
      }
      // look up json data
      if (str.charAt(++i)) {
        var payload = this.tryParse(str.substr(i));
        if (Decoder.isPayloadValid(p.type, payload)) {
          p.data = payload;
        } else {
          throw new Error("invalid payload");
        }
      }
      return p;
    };
    _proto2.tryParse = function tryParse(str) {
      try {
        return JSON.parse(str, this.reviver);
      } catch (e) {
        return false;
      }
    };
    Decoder.isPayloadValid = function isPayloadValid(type, payload) {
      switch (type) {
        case PacketType.CONNECT:
          return isObject(payload);
        case PacketType.DISCONNECT:
          return payload === undefined;
        case PacketType.CONNECT_ERROR:
          return typeof payload === "string" || isObject(payload);
        case PacketType.EVENT:
        case PacketType.BINARY_EVENT:
          return Array.isArray(payload) && (typeof payload[0] === "number" || typeof payload[0] === "string" && RESERVED_EVENTS$1.indexOf(payload[0]) === -1);
        case PacketType.ACK:
        case PacketType.BINARY_ACK:
          return Array.isArray(payload);
      }
    }
    /**
     * Deallocates a parser's resources
     */;
    _proto2.destroy = function destroy() {
      if (this.reconstructor) {
        this.reconstructor.finishedReconstruction();
        this.reconstructor = null;
      }
    };
    return Decoder;
  }(Emitter);
  /**
   * A manager of a binary event's 'buffer sequence'. Should
   * be constructed whenever a packet of type BINARY_EVENT is
   * decoded.
   *
   * @param {Object} packet
   * @return {BinaryReconstructor} initialized reconstructor
   */
  var BinaryReconstructor = /*#__PURE__*/function () {
    function BinaryReconstructor(packet) {
      this.packet = packet;
      this.buffers = [];
      this.reconPack = packet;
    }
    /**
     * Method to be called when binary data received from connection
     * after a BINARY_EVENT packet.
     *
     * @param {Buffer | ArrayBuffer} binData - the raw binary data received
     * @return {null | Object} returns null if more binary data is expected or
     *   a reconstructed packet object if all buffers have been received.
     */
    var _proto3 = BinaryReconstructor.prototype;
    _proto3.takeBinaryData = function takeBinaryData(binData) {
      this.buffers.push(binData);
      if (this.buffers.length === this.reconPack.attachments) {
        // done with buffer list
        var packet = reconstructPacket(this.reconPack, this.buffers);
        this.finishedReconstruction();
        return packet;
      }
      return null;
    }
    /**
     * Cleans up binary packet reconstruction variables.
     */;
    _proto3.finishedReconstruction = function finishedReconstruction() {
      this.reconPack = null;
      this.buffers = [];
    };
    return BinaryReconstructor;
  }();
  function isNamespaceValid(nsp) {
    return typeof nsp === "string";
  }
  // see https://caniuse.com/mdn-javascript_builtins_number_isinteger
  var isInteger = Number.isInteger || function (value) {
    return typeof value === "number" && isFinite(value) && Math.floor(value) === value;
  };
  function isAckIdValid(id) {
    return id === undefined || isInteger(id);
  }
  // see https://stackoverflow.com/questions/8511281/check-if-a-value-is-an-object-in-javascript
  function isObject(value) {
    return Object.prototype.toString.call(value) === "[object Object]";
  }
  function isDataValid(type, payload) {
    switch (type) {
      case PacketType.CONNECT:
        return payload === undefined || isObject(payload);
      case PacketType.DISCONNECT:
        return payload === undefined;
      case PacketType.EVENT:
        return Array.isArray(payload) && (typeof payload[0] === "number" || typeof payload[0] === "string" && RESERVED_EVENTS$1.indexOf(payload[0]) === -1);
      case PacketType.ACK:
        return Array.isArray(payload);
      case PacketType.CONNECT_ERROR:
        return typeof payload === "string" || isObject(payload);
      default:
        return false;
    }
  }
  function isPacketValid(packet) {
    return isNamespaceValid(packet.nsp) && isAckIdValid(packet.id) && isDataValid(packet.type, packet.data);
  }

  var parser = /*#__PURE__*/Object.freeze({
    __proto__: null,
    protocol: protocol,
    get PacketType () { return PacketType; },
    Encoder: Encoder,
    Decoder: Decoder,
    isPacketValid: isPacketValid
  });

  function on(obj, ev, fn) {
    obj.on(ev, fn);
    return function subDestroy() {
      obj.off(ev, fn);
    };
  }

  var debug$2 = debugModule("socket.io-client:socket"); // debug()
  /**
   * Internal events.
   * These events can't be emitted by the user.
   */
  var RESERVED_EVENTS = Object.freeze({
    connect: 1,
    connect_error: 1,
    disconnect: 1,
    disconnecting: 1,
    // EventEmitter reserved events: https://nodejs.org/api/events.html#events_event_newlistener
    newListener: 1,
    removeListener: 1
  });
  /**
   * A Socket is the fundamental class for interacting with the server.
   *
   * A Socket belongs to a certain Namespace (by default /) and uses an underlying {@link Manager} to communicate.
   *
   * @example
   * const socket = io();
   *
   * socket.on("connect", () => {
   *   console.log("connected");
   * });
   *
   * // send an event to the server
   * socket.emit("foo", "bar");
   *
   * socket.on("foobar", () => {
   *   // an event was received from the server
   * });
   *
   * // upon disconnection
   * socket.on("disconnect", (reason) => {
   *   console.log(`disconnected due to ${reason}`);
   * });
   */
  var Socket = /*#__PURE__*/function (_Emitter) {
    /**
     * `Socket` constructor.
     */
    function Socket(io, nsp, opts) {
      var _this;
      _this = _Emitter.call(this) || this;
      /**
       * Whether the socket is currently connected to the server.
       *
       * @example
       * const socket = io();
       *
       * socket.on("connect", () => {
       *   console.log(socket.connected); // true
       * });
       *
       * socket.on("disconnect", () => {
       *   console.log(socket.connected); // false
       * });
       */
      _this.connected = false;
      /**
       * Whether the connection state was recovered after a temporary disconnection. In that case, any missed packets will
       * be transmitted by the server.
       */
      _this.recovered = false;
      /**
       * Buffer for packets received before the CONNECT packet
       */
      _this.receiveBuffer = [];
      /**
       * Buffer for packets that will be sent once the socket is connected
       */
      _this.sendBuffer = [];
      /**
       * The queue of packets to be sent with retry in case of failure.
       *
       * Packets are sent one by one, each waiting for the server acknowledgement, in order to guarantee the delivery order.
       * @private
       */
      _this._queue = [];
      /**
       * A sequence to generate the ID of the {@link QueuedPacket}.
       * @private
       */
      _this._queueSeq = 0;
      _this.ids = 0;
      /**
       * A map containing acknowledgement handlers.
       *
       * The `withError` attribute is used to differentiate handlers that accept an error as first argument:
       *
       * - `socket.emit("test", (err, value) => { ... })` with `ackTimeout` option
       * - `socket.timeout(5000).emit("test", (err, value) => { ... })`
       * - `const value = await socket.emitWithAck("test")`
       *
       * From those that don't:
       *
       * - `socket.emit("test", (value) => { ... });`
       *
       * In the first case, the handlers will be called with an error when:
       *
       * - the timeout is reached
       * - the socket gets disconnected
       *
       * In the second case, the handlers will be simply discarded upon disconnection, since the client will never receive
       * an acknowledgement from the server.
       *
       * @private
       */
      _this.acks = {};
      _this.flags = {};
      _this.io = io;
      _this.nsp = nsp;
      if (opts && opts.auth) {
        _this.auth = opts.auth;
      }
      _this._opts = _extends({}, opts);
      if (_this.io._autoConnect) _this.open();
      return _this;
    }
    /**
     * Whether the socket is currently disconnected
     *
     * @example
     * const socket = io();
     *
     * socket.on("connect", () => {
     *   console.log(socket.disconnected); // false
     * });
     *
     * socket.on("disconnect", () => {
     *   console.log(socket.disconnected); // true
     * });
     */
    _inheritsLoose(Socket, _Emitter);
    var _proto = Socket.prototype;
    /**
     * Subscribe to open, close and packet events
     *
     * @private
     */
    _proto.subEvents = function subEvents() {
      if (this.subs) return;
      var io = this.io;
      this.subs = [on(io, "open", this.onopen.bind(this)), on(io, "packet", this.onpacket.bind(this)), on(io, "error", this.onerror.bind(this)), on(io, "close", this.onclose.bind(this))];
    }
    /**
     * Whether the Socket will try to reconnect when its Manager connects or reconnects.
     *
     * @example
     * const socket = io();
     *
     * console.log(socket.active); // true
     *
     * socket.on("disconnect", (reason) => {
     *   if (reason === "io server disconnect") {
     *     // the disconnection was initiated by the server, you need to manually reconnect
     *     console.log(socket.active); // false
     *   }
     *   // else the socket will automatically try to reconnect
     *   console.log(socket.active); // true
     * });
     */;
    /**
     * "Opens" the socket.
     *
     * @example
     * const socket = io({
     *   autoConnect: false
     * });
     *
     * socket.connect();
     */
    _proto.connect = function connect() {
      if (this.connected) return this;
      this.subEvents();
      if (!this.io["_reconnecting"]) this.io.open(); // ensure open
      if ("open" === this.io._readyState) this.onopen();
      return this;
    }
    /**
     * Alias for {@link connect()}.
     */;
    _proto.open = function open() {
      return this.connect();
    }
    /**
     * Sends a `message` event.
     *
     * This method mimics the WebSocket.send() method.
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/API/WebSocket/send
     *
     * @example
     * socket.send("hello");
     *
     * // this is equivalent to
     * socket.emit("message", "hello");
     *
     * @return self
     */;
    _proto.send = function send() {
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      args.unshift("message");
      this.emit.apply(this, args);
      return this;
    }
    /**
     * Override `emit`.
     * If the event is in `events`, it's emitted normally.
     *
     * @example
     * socket.emit("hello", "world");
     *
     * // all serializable datastructures are supported (no need to call JSON.stringify)
     * socket.emit("hello", 1, "2", { 3: ["4"], 5: Uint8Array.from([6]) });
     *
     * // with an acknowledgement from the server
     * socket.emit("hello", "world", (val) => {
     *   // ...
     * });
     *
     * @return self
     */;
    _proto.emit = function emit(ev) {
      var _a, _b, _c;
      if (RESERVED_EVENTS.hasOwnProperty(ev)) {
        throw new Error('"' + ev.toString() + '" is a reserved event name');
      }
      for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
        args[_key2 - 1] = arguments[_key2];
      }
      args.unshift(ev);
      if (this._opts.retries && !this.flags.fromQueue && !this.flags["volatile"]) {
        this._addToQueue(args);
        return this;
      }
      var packet = {
        type: PacketType.EVENT,
        data: args
      };
      packet.options = {};
      packet.options.compress = this.flags.compress !== false;
      // event ack callback
      if ("function" === typeof args[args.length - 1]) {
        var id = this.ids++;
        debug$2("emitting packet with ack id %d", id);
        var ack = args.pop();
        this._registerAckCallback(id, ack);
        packet.id = id;
      }
      var isTransportWritable = (_b = (_a = this.io.engine) === null || _a === void 0 ? void 0 : _a.transport) === null || _b === void 0 ? void 0 : _b.writable;
      var isConnected = this.connected && !((_c = this.io.engine) === null || _c === void 0 ? void 0 : _c._hasPingExpired());
      var discardPacket = this.flags["volatile"] && !isTransportWritable;
      if (discardPacket) {
        debug$2("discard packet as the transport is not currently writable");
      } else if (isConnected) {
        this.notifyOutgoingListeners(packet);
        this.packet(packet);
      } else {
        this.sendBuffer.push(packet);
      }
      this.flags = {};
      return this;
    }
    /**
     * @private
     */;
    _proto._registerAckCallback = function _registerAckCallback(id, ack) {
      var _this2 = this;
      var _a;
      var timeout = (_a = this.flags.timeout) !== null && _a !== void 0 ? _a : this._opts.ackTimeout;
      if (timeout === undefined) {
        this.acks[id] = ack;
        return;
      }
      // @ts-ignore
      var timer = this.io.setTimeoutFn(function () {
        delete _this2.acks[id];
        for (var i = 0; i < _this2.sendBuffer.length; i++) {
          if (_this2.sendBuffer[i].id === id) {
            debug$2("removing packet with ack id %d from the buffer", id);
            _this2.sendBuffer.splice(i, 1);
          }
        }
        debug$2("event with ack id %d has timed out after %d ms", id, timeout);
        ack.call(_this2, new Error("operation has timed out"));
      }, timeout);
      var fn = function fn() {
        // @ts-ignore
        _this2.io.clearTimeoutFn(timer);
        for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
          args[_key3] = arguments[_key3];
        }
        ack.apply(_this2, args);
      };
      fn.withError = true;
      this.acks[id] = fn;
    }
    /**
     * Emits an event and waits for an acknowledgement
     *
     * @example
     * // without timeout
     * const response = await socket.emitWithAck("hello", "world");
     *
     * // with a specific timeout
     * try {
     *   const response = await socket.timeout(1000).emitWithAck("hello", "world");
     * } catch (err) {
     *   // the server did not acknowledge the event in the given delay
     * }
     *
     * @return a Promise that will be fulfilled when the server acknowledges the event
     */;
    _proto.emitWithAck = function emitWithAck(ev) {
      var _this3 = this;
      for (var _len4 = arguments.length, args = new Array(_len4 > 1 ? _len4 - 1 : 0), _key4 = 1; _key4 < _len4; _key4++) {
        args[_key4 - 1] = arguments[_key4];
      }
      return new Promise(function (resolve, reject) {
        var fn = function fn(arg1, arg2) {
          return arg1 ? reject(arg1) : resolve(arg2);
        };
        fn.withError = true;
        args.push(fn);
        _this3.emit.apply(_this3, [ev].concat(args));
      });
    }
    /**
     * Add the packet to the queue.
     * @param args
     * @private
     */;
    _proto._addToQueue = function _addToQueue(args) {
      var _this4 = this;
      var ack;
      if (typeof args[args.length - 1] === "function") {
        ack = args.pop();
      }
      var packet = {
        id: this._queueSeq++,
        tryCount: 0,
        pending: false,
        args: args,
        flags: _extends({
          fromQueue: true
        }, this.flags)
      };
      args.push(function (err) {
        if (packet !== _this4._queue[0]) {
          // the packet has already been acknowledged
          return;
        }
        var hasError = err !== null;
        if (hasError) {
          if (packet.tryCount > _this4._opts.retries) {
            debug$2("packet [%d] is discarded after %d tries", packet.id, packet.tryCount);
            _this4._queue.shift();
            if (ack) {
              ack(err);
            }
          }
        } else {
          debug$2("packet [%d] was successfully sent", packet.id);
          _this4._queue.shift();
          if (ack) {
            for (var _len5 = arguments.length, responseArgs = new Array(_len5 > 1 ? _len5 - 1 : 0), _key5 = 1; _key5 < _len5; _key5++) {
              responseArgs[_key5 - 1] = arguments[_key5];
            }
            ack.apply(void 0, [null].concat(responseArgs));
          }
        }
        packet.pending = false;
        return _this4._drainQueue();
      });
      this._queue.push(packet);
      this._drainQueue();
    }
    /**
     * Send the first packet of the queue, and wait for an acknowledgement from the server.
     * @param force - whether to resend a packet that has not been acknowledged yet
     *
     * @private
     */;
    _proto._drainQueue = function _drainQueue() {
      var force = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
      debug$2("draining queue");
      if (!this.connected || this._queue.length === 0) {
        return;
      }
      var packet = this._queue[0];
      if (packet.pending && !force) {
        debug$2("packet [%d] has already been sent and is waiting for an ack", packet.id);
        return;
      }
      packet.pending = true;
      packet.tryCount++;
      debug$2("sending packet [%d] (try n°%d)", packet.id, packet.tryCount);
      this.flags = packet.flags;
      this.emit.apply(this, packet.args);
    }
    /**
     * Sends a packet.
     *
     * @param packet
     * @private
     */;
    _proto.packet = function packet(_packet) {
      _packet.nsp = this.nsp;
      this.io._packet(_packet);
    }
    /**
     * Called upon engine `open`.
     *
     * @private
     */;
    _proto.onopen = function onopen() {
      var _this5 = this;
      debug$2("transport is open - connecting");
      if (typeof this.auth == "function") {
        this.auth(function (data) {
          _this5._sendConnectPacket(data);
        });
      } else {
        this._sendConnectPacket(this.auth);
      }
    }
    /**
     * Sends a CONNECT packet to initiate the Socket.IO session.
     *
     * @param data
     * @private
     */;
    _proto._sendConnectPacket = function _sendConnectPacket(data) {
      this.packet({
        type: PacketType.CONNECT,
        data: this._pid ? _extends({
          pid: this._pid,
          offset: this._lastOffset
        }, data) : data
      });
    }
    /**
     * Called upon engine or manager `error`.
     *
     * @param err
     * @private
     */;
    _proto.onerror = function onerror(err) {
      if (!this.connected) {
        this.emitReserved("connect_error", err);
      }
    }
    /**
     * Called upon engine `close`.
     *
     * @param reason
     * @param description
     * @private
     */;
    _proto.onclose = function onclose(reason, description) {
      debug$2("close (%s)", reason);
      this.connected = false;
      delete this.id;
      this.emitReserved("disconnect", reason, description);
      this._clearAcks();
    }
    /**
     * Clears the acknowledgement handlers upon disconnection, since the client will never receive an acknowledgement from
     * the server.
     *
     * @private
     */;
    _proto._clearAcks = function _clearAcks() {
      var _this6 = this;
      Object.keys(this.acks).forEach(function (id) {
        var isBuffered = _this6.sendBuffer.some(function (packet) {
          return String(packet.id) === id;
        });
        if (!isBuffered) {
          // note: handlers that do not accept an error as first argument are ignored here
          var ack = _this6.acks[id];
          delete _this6.acks[id];
          if (ack.withError) {
            ack.call(_this6, new Error("socket has been disconnected"));
          }
        }
      });
    }
    /**
     * Called with socket packet.
     *
     * @param packet
     * @private
     */;
    _proto.onpacket = function onpacket(packet) {
      var sameNamespace = packet.nsp === this.nsp;
      if (!sameNamespace) return;
      switch (packet.type) {
        case PacketType.CONNECT:
          if (packet.data && packet.data.sid) {
            this.onconnect(packet.data.sid, packet.data.pid);
          } else {
            this.emitReserved("connect_error", new Error("It seems you are trying to reach a Socket.IO server in v2.x with a v3.x client, but they are not compatible (more information here: https://socket.io/docs/v3/migrating-from-2-x-to-3-0/)"));
          }
          break;
        case PacketType.EVENT:
        case PacketType.BINARY_EVENT:
          this.onevent(packet);
          break;
        case PacketType.ACK:
        case PacketType.BINARY_ACK:
          this.onack(packet);
          break;
        case PacketType.DISCONNECT:
          this.ondisconnect();
          break;
        case PacketType.CONNECT_ERROR:
          this.destroy();
          var err = new Error(packet.data.message);
          // @ts-ignore
          err.data = packet.data.data;
          this.emitReserved("connect_error", err);
          break;
      }
    }
    /**
     * Called upon a server event.
     *
     * @param packet
     * @private
     */;
    _proto.onevent = function onevent(packet) {
      var args = packet.data || [];
      debug$2("emitting event %j", args);
      if (null != packet.id) {
        debug$2("attaching ack callback to event");
        args.push(this.ack(packet.id));
      }
      if (this.connected) {
        this.emitEvent(args);
      } else {
        this.receiveBuffer.push(Object.freeze(args));
      }
    };
    _proto.emitEvent = function emitEvent(args) {
      if (this._anyListeners && this._anyListeners.length) {
        var listeners = this._anyListeners.slice();
        var _iterator = _createForOfIteratorHelper(listeners),
          _step;
        try {
          for (_iterator.s(); !(_step = _iterator.n()).done;) {
            var listener = _step.value;
            listener.apply(this, args);
          }
        } catch (err) {
          _iterator.e(err);
        } finally {
          _iterator.f();
        }
      }
      _Emitter.prototype.emit.apply(this, args);
      if (this._pid && args.length && typeof args[args.length - 1] === "string") {
        this._lastOffset = args[args.length - 1];
      }
    }
    /**
     * Produces an ack callback to emit with an event.
     *
     * @private
     */;
    _proto.ack = function ack(id) {
      var self = this;
      var sent = false;
      return function () {
        // prevent double callbacks
        if (sent) return;
        sent = true;
        for (var _len6 = arguments.length, args = new Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {
          args[_key6] = arguments[_key6];
        }
        debug$2("sending ack %j", args);
        self.packet({
          type: PacketType.ACK,
          id: id,
          data: args
        });
      };
    }
    /**
     * Called upon a server acknowledgement.
     *
     * @param packet
     * @private
     */;
    _proto.onack = function onack(packet) {
      var ack = this.acks[packet.id];
      if (typeof ack !== "function") {
        debug$2("bad ack %s", packet.id);
        return;
      }
      delete this.acks[packet.id];
      debug$2("calling ack %s with %j", packet.id, packet.data);
      // @ts-ignore FIXME ack is incorrectly inferred as 'never'
      if (ack.withError) {
        packet.data.unshift(null);
      }
      // @ts-ignore
      ack.apply(this, packet.data);
    }
    /**
     * Called upon server connect.
     *
     * @private
     */;
    _proto.onconnect = function onconnect(id, pid) {
      debug$2("socket connected with id %s", id);
      this.id = id;
      this.recovered = pid && this._pid === pid;
      this._pid = pid; // defined only if connection state recovery is enabled
      this.connected = true;
      this.emitBuffered();
      this.emitReserved("connect");
      this._drainQueue(true);
    }
    /**
     * Emit buffered events (received and emitted).
     *
     * @private
     */;
    _proto.emitBuffered = function emitBuffered() {
      var _this7 = this;
      this.receiveBuffer.forEach(function (args) {
        return _this7.emitEvent(args);
      });
      this.receiveBuffer = [];
      this.sendBuffer.forEach(function (packet) {
        _this7.notifyOutgoingListeners(packet);
        _this7.packet(packet);
      });
      this.sendBuffer = [];
    }
    /**
     * Called upon server disconnect.
     *
     * @private
     */;
    _proto.ondisconnect = function ondisconnect() {
      debug$2("server disconnect (%s)", this.nsp);
      this.destroy();
      this.onclose("io server disconnect");
    }
    /**
     * Called upon forced client/server side disconnections,
     * this method ensures the manager stops tracking us and
     * that reconnections don't get triggered for this.
     *
     * @private
     */;
    _proto.destroy = function destroy() {
      if (this.subs) {
        // clean subscriptions to avoid reconnections
        this.subs.forEach(function (subDestroy) {
          return subDestroy();
        });
        this.subs = undefined;
      }
      this.io["_destroy"](this);
    }
    /**
     * Disconnects the socket manually. In that case, the socket will not try to reconnect.
     *
     * If this is the last active Socket instance of the {@link Manager}, the low-level connection will be closed.
     *
     * @example
     * const socket = io();
     *
     * socket.on("disconnect", (reason) => {
     *   // console.log(reason); prints "io client disconnect"
     * });
     *
     * socket.disconnect();
     *
     * @return self
     */;
    _proto.disconnect = function disconnect() {
      if (this.connected) {
        debug$2("performing disconnect (%s)", this.nsp);
        this.packet({
          type: PacketType.DISCONNECT
        });
      }
      // remove socket from pool
      this.destroy();
      if (this.connected) {
        // fire events
        this.onclose("io client disconnect");
      }
      return this;
    }
    /**
     * Alias for {@link disconnect()}.
     *
     * @return self
     */;
    _proto.close = function close() {
      return this.disconnect();
    }
    /**
     * Sets the compress flag.
     *
     * @example
     * socket.compress(false).emit("hello");
     *
     * @param compress - if `true`, compresses the sending data
     * @return self
     */;
    _proto.compress = function compress(_compress) {
      this.flags.compress = _compress;
      return this;
    }
    /**
     * Sets a modifier for a subsequent event emission that the event message will be dropped when this socket is not
     * ready to send messages.
     *
     * @example
     * socket.volatile.emit("hello"); // the server may or may not receive it
     *
     * @returns self
     */;
    /**
     * Sets a modifier for a subsequent event emission that the callback will be called with an error when the
     * given number of milliseconds have elapsed without an acknowledgement from the server:
     *
     * @example
     * socket.timeout(5000).emit("my-event", (err) => {
     *   if (err) {
     *     // the server did not acknowledge the event in the given delay
     *   }
     * });
     *
     * @returns self
     */
    _proto.timeout = function timeout(_timeout) {
      this.flags.timeout = _timeout;
      return this;
    }
    /**
     * Adds a listener that will be fired when any event is emitted. The event name is passed as the first argument to the
     * callback.
     *
     * @example
     * socket.onAny((event, ...args) => {
     *   console.log(`got ${event}`);
     * });
     *
     * @param listener
     */;
    _proto.onAny = function onAny(listener) {
      this._anyListeners = this._anyListeners || [];
      this._anyListeners.push(listener);
      return this;
    }
    /**
     * Adds a listener that will be fired when any event is emitted. The event name is passed as the first argument to the
     * callback. The listener is added to the beginning of the listeners array.
     *
     * @example
     * socket.prependAny((event, ...args) => {
     *   console.log(`got event ${event}`);
     * });
     *
     * @param listener
     */;
    _proto.prependAny = function prependAny(listener) {
      this._anyListeners = this._anyListeners || [];
      this._anyListeners.unshift(listener);
      return this;
    }
    /**
     * Removes the listener that will be fired when any event is emitted.
     *
     * @example
     * const catchAllListener = (event, ...args) => {
     *   console.log(`got event ${event}`);
     * }
     *
     * socket.onAny(catchAllListener);
     *
     * // remove a specific listener
     * socket.offAny(catchAllListener);
     *
     * // or remove all listeners
     * socket.offAny();
     *
     * @param listener
     */;
    _proto.offAny = function offAny(listener) {
      if (!this._anyListeners) {
        return this;
      }
      if (listener) {
        var listeners = this._anyListeners;
        for (var i = 0; i < listeners.length; i++) {
          if (listener === listeners[i]) {
            listeners.splice(i, 1);
            return this;
          }
        }
      } else {
        this._anyListeners = [];
      }
      return this;
    }
    /**
     * Returns an array of listeners that are listening for any event that is specified. This array can be manipulated,
     * e.g. to remove listeners.
     */;
    _proto.listenersAny = function listenersAny() {
      return this._anyListeners || [];
    }
    /**
     * Adds a listener that will be fired when any event is emitted. The event name is passed as the first argument to the
     * callback.
     *
     * Note: acknowledgements sent to the server are not included.
     *
     * @example
     * socket.onAnyOutgoing((event, ...args) => {
     *   console.log(`sent event ${event}`);
     * });
     *
     * @param listener
     */;
    _proto.onAnyOutgoing = function onAnyOutgoing(listener) {
      this._anyOutgoingListeners = this._anyOutgoingListeners || [];
      this._anyOutgoingListeners.push(listener);
      return this;
    }
    /**
     * Adds a listener that will be fired when any event is emitted. The event name is passed as the first argument to the
     * callback. The listener is added to the beginning of the listeners array.
     *
     * Note: acknowledgements sent to the server are not included.
     *
     * @example
     * socket.prependAnyOutgoing((event, ...args) => {
     *   console.log(`sent event ${event}`);
     * });
     *
     * @param listener
     */;
    _proto.prependAnyOutgoing = function prependAnyOutgoing(listener) {
      this._anyOutgoingListeners = this._anyOutgoingListeners || [];
      this._anyOutgoingListeners.unshift(listener);
      return this;
    }
    /**
     * Removes the listener that will be fired when any event is emitted.
     *
     * @example
     * const catchAllListener = (event, ...args) => {
     *   console.log(`sent event ${event}`);
     * }
     *
     * socket.onAnyOutgoing(catchAllListener);
     *
     * // remove a specific listener
     * socket.offAnyOutgoing(catchAllListener);
     *
     * // or remove all listeners
     * socket.offAnyOutgoing();
     *
     * @param [listener] - the catch-all listener (optional)
     */;
    _proto.offAnyOutgoing = function offAnyOutgoing(listener) {
      if (!this._anyOutgoingListeners) {
        return this;
      }
      if (listener) {
        var listeners = this._anyOutgoingListeners;
        for (var i = 0; i < listeners.length; i++) {
          if (listener === listeners[i]) {
            listeners.splice(i, 1);
            return this;
          }
        }
      } else {
        this._anyOutgoingListeners = [];
      }
      return this;
    }
    /**
     * Returns an array of listeners that are listening for any event that is specified. This array can be manipulated,
     * e.g. to remove listeners.
     */;
    _proto.listenersAnyOutgoing = function listenersAnyOutgoing() {
      return this._anyOutgoingListeners || [];
    }
    /**
     * Notify the listeners for each packet sent
     *
     * @param packet
     *
     * @private
     */;
    _proto.notifyOutgoingListeners = function notifyOutgoingListeners(packet) {
      if (this._anyOutgoingListeners && this._anyOutgoingListeners.length) {
        var listeners = this._anyOutgoingListeners.slice();
        var _iterator2 = _createForOfIteratorHelper(listeners),
          _step2;
        try {
          for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
            var listener = _step2.value;
            listener.apply(this, packet.data);
          }
        } catch (err) {
          _iterator2.e(err);
        } finally {
          _iterator2.f();
        }
      }
    };
    return _createClass(Socket, [{
      key: "disconnected",
      get: function get() {
        return !this.connected;
      }
    }, {
      key: "active",
      get: function get() {
        return !!this.subs;
      }
    }, {
      key: "volatile",
      get: function get() {
        this.flags["volatile"] = true;
        return this;
      }
    }]);
  }(Emitter);

  /**
   * Initialize backoff timer with `opts`.
   *
   * - `min` initial timeout in milliseconds [100]
   * - `max` max timeout [10000]
   * - `jitter` [0]
   * - `factor` [2]
   *
   * @param {Object} opts
   * @api public
   */
  function Backoff(opts) {
    opts = opts || {};
    this.ms = opts.min || 100;
    this.max = opts.max || 10000;
    this.factor = opts.factor || 2;
    this.jitter = opts.jitter > 0 && opts.jitter <= 1 ? opts.jitter : 0;
    this.attempts = 0;
  }
  /**
   * Return the backoff duration.
   *
   * @return {Number}
   * @api public
   */
  Backoff.prototype.duration = function () {
    var ms = this.ms * Math.pow(this.factor, this.attempts++);
    if (this.jitter) {
      var rand = Math.random();
      var deviation = Math.floor(rand * this.jitter * ms);
      ms = (Math.floor(rand * 10) & 1) == 0 ? ms - deviation : ms + deviation;
    }
    return Math.min(ms, this.max) | 0;
  };
  /**
   * Reset the number of attempts.
   *
   * @api public
   */
  Backoff.prototype.reset = function () {
    this.attempts = 0;
  };
  /**
   * Set the minimum duration
   *
   * @api public
   */
  Backoff.prototype.setMin = function (min) {
    this.ms = min;
  };
  /**
   * Set the maximum duration
   *
   * @api public
   */
  Backoff.prototype.setMax = function (max) {
    this.max = max;
  };
  /**
   * Set the jitter
   *
   * @api public
   */
  Backoff.prototype.setJitter = function (jitter) {
    this.jitter = jitter;
  };

  var debug$1 = debugModule("socket.io-client:manager"); // debug()
  var Manager = /*#__PURE__*/function (_Emitter) {
    function Manager(uri, opts) {
      var _this;
      var _a;
      _this = _Emitter.call(this) || this;
      _this.nsps = {};
      _this.subs = [];
      if (uri && "object" === _typeof(uri)) {
        opts = uri;
        uri = undefined;
      }
      opts = opts || {};
      opts.path = opts.path || "/socket.io";
      _this.opts = opts;
      installTimerFunctions(_this, opts);
      _this.reconnection(opts.reconnection !== false);
      _this.reconnectionAttempts(opts.reconnectionAttempts || Infinity);
      _this.reconnectionDelay(opts.reconnectionDelay || 1000);
      _this.reconnectionDelayMax(opts.reconnectionDelayMax || 5000);
      _this.randomizationFactor((_a = opts.randomizationFactor) !== null && _a !== void 0 ? _a : 0.5);
      _this.backoff = new Backoff({
        min: _this.reconnectionDelay(),
        max: _this.reconnectionDelayMax(),
        jitter: _this.randomizationFactor()
      });
      _this.timeout(null == opts.timeout ? 20000 : opts.timeout);
      _this._readyState = "closed";
      _this.uri = uri;
      var _parser = opts.parser || parser;
      _this.encoder = new _parser.Encoder();
      _this.decoder = new _parser.Decoder();
      _this._autoConnect = opts.autoConnect !== false;
      if (_this._autoConnect) _this.open();
      return _this;
    }
    _inheritsLoose(Manager, _Emitter);
    var _proto = Manager.prototype;
    _proto.reconnection = function reconnection(v) {
      if (!arguments.length) return this._reconnection;
      this._reconnection = !!v;
      if (!v) {
        this.skipReconnect = true;
      }
      return this;
    };
    _proto.reconnectionAttempts = function reconnectionAttempts(v) {
      if (v === undefined) return this._reconnectionAttempts;
      this._reconnectionAttempts = v;
      return this;
    };
    _proto.reconnectionDelay = function reconnectionDelay(v) {
      var _a;
      if (v === undefined) return this._reconnectionDelay;
      this._reconnectionDelay = v;
      (_a = this.backoff) === null || _a === void 0 ? void 0 : _a.setMin(v);
      return this;
    };
    _proto.randomizationFactor = function randomizationFactor(v) {
      var _a;
      if (v === undefined) return this._randomizationFactor;
      this._randomizationFactor = v;
      (_a = this.backoff) === null || _a === void 0 ? void 0 : _a.setJitter(v);
      return this;
    };
    _proto.reconnectionDelayMax = function reconnectionDelayMax(v) {
      var _a;
      if (v === undefined) return this._reconnectionDelayMax;
      this._reconnectionDelayMax = v;
      (_a = this.backoff) === null || _a === void 0 ? void 0 : _a.setMax(v);
      return this;
    };
    _proto.timeout = function timeout(v) {
      if (!arguments.length) return this._timeout;
      this._timeout = v;
      return this;
    }
    /**
     * Starts trying to reconnect if reconnection is enabled and we have not
     * started reconnecting yet
     *
     * @private
     */;
    _proto.maybeReconnectOnOpen = function maybeReconnectOnOpen() {
      // Only try to reconnect if it's the first time we're connecting
      if (!this._reconnecting && this._reconnection && this.backoff.attempts === 0) {
        // keeps reconnection from firing twice for the same reconnection loop
        this.reconnect();
      }
    }
    /**
     * Sets the current transport `socket`.
     *
     * @param {Function} fn - optional, callback
     * @return self
     * @public
     */;
    _proto.open = function open(fn) {
      var _this2 = this;
      debug$1("readyState %s", this._readyState);
      if (~this._readyState.indexOf("open")) return this;
      debug$1("opening %s", this.uri);
      this.engine = new Socket$1(this.uri, this.opts);
      var socket = this.engine;
      var self = this;
      this._readyState = "opening";
      this.skipReconnect = false;
      // emit `open`
      var openSubDestroy = on(socket, "open", function () {
        self.onopen();
        fn && fn();
      });
      var onError = function onError(err) {
        debug$1("error");
        _this2.cleanup();
        _this2._readyState = "closed";
        _this2.emitReserved("error", err);
        if (fn) {
          fn(err);
        } else {
          // Only do this if there is no fn to handle the error
          _this2.maybeReconnectOnOpen();
        }
      };
      // emit `error`
      var errorSub = on(socket, "error", onError);
      if (false !== this._timeout) {
        var timeout = this._timeout;
        debug$1("connect attempt will timeout after %d", timeout);
        // set timer
        var timer = this.setTimeoutFn(function () {
          debug$1("connect attempt timed out after %d", timeout);
          openSubDestroy();
          onError(new Error("timeout"));
          socket.close();
        }, timeout);
        if (this.opts.autoUnref) {
          timer.unref();
        }
        this.subs.push(function () {
          _this2.clearTimeoutFn(timer);
        });
      }
      this.subs.push(openSubDestroy);
      this.subs.push(errorSub);
      return this;
    }
    /**
     * Alias for open()
     *
     * @return self
     * @public
     */;
    _proto.connect = function connect(fn) {
      return this.open(fn);
    }
    /**
     * Called upon transport open.
     *
     * @private
     */;
    _proto.onopen = function onopen() {
      debug$1("open");
      // clear old subs
      this.cleanup();
      // mark as open
      this._readyState = "open";
      this.emitReserved("open");
      // add new subs
      var socket = this.engine;
      this.subs.push(on(socket, "ping", this.onping.bind(this)), on(socket, "data", this.ondata.bind(this)), on(socket, "error", this.onerror.bind(this)), on(socket, "close", this.onclose.bind(this)),
      // @ts-ignore
      on(this.decoder, "decoded", this.ondecoded.bind(this)));
    }
    /**
     * Called upon a ping.
     *
     * @private
     */;
    _proto.onping = function onping() {
      this.emitReserved("ping");
    }
    /**
     * Called with data.
     *
     * @private
     */;
    _proto.ondata = function ondata(data) {
      try {
        this.decoder.add(data);
      } catch (e) {
        this.onclose("parse error", e);
      }
    }
    /**
     * Called when parser fully decodes a packet.
     *
     * @private
     */;
    _proto.ondecoded = function ondecoded(packet) {
      var _this3 = this;
      // the nextTick call prevents an exception in a user-provided event listener from triggering a disconnection due to a "parse error"
      nextTick(function () {
        _this3.emitReserved("packet", packet);
      }, this.setTimeoutFn);
    }
    /**
     * Called upon socket error.
     *
     * @private
     */;
    _proto.onerror = function onerror(err) {
      debug$1("error", err);
      this.emitReserved("error", err);
    }
    /**
     * Creates a new socket for the given `nsp`.
     *
     * @return {Socket}
     * @public
     */;
    _proto.socket = function socket(nsp, opts) {
      var socket = this.nsps[nsp];
      if (!socket) {
        socket = new Socket(this, nsp, opts);
        this.nsps[nsp] = socket;
      } else if (this._autoConnect && !socket.active) {
        socket.connect();
      }
      return socket;
    }
    /**
     * Called upon a socket close.
     *
     * @param socket
     * @private
     */;
    _proto._destroy = function _destroy(socket) {
      var nsps = Object.keys(this.nsps);
      for (var _i = 0, _nsps = nsps; _i < _nsps.length; _i++) {
        var nsp = _nsps[_i];
        var _socket = this.nsps[nsp];
        if (_socket.active) {
          debug$1("socket %s is still active, skipping close", nsp);
          return;
        }
      }
      this._close();
    }
    /**
     * Writes a packet.
     *
     * @param packet
     * @private
     */;
    _proto._packet = function _packet(packet) {
      debug$1("writing packet %j", packet);
      var encodedPackets = this.encoder.encode(packet);
      for (var i = 0; i < encodedPackets.length; i++) {
        this.engine.write(encodedPackets[i], packet.options);
      }
    }
    /**
     * Clean up transport subscriptions and packet buffer.
     *
     * @private
     */;
    _proto.cleanup = function cleanup() {
      debug$1("cleanup");
      this.subs.forEach(function (subDestroy) {
        return subDestroy();
      });
      this.subs.length = 0;
      this.decoder.destroy();
    }
    /**
     * Close the current socket.
     *
     * @private
     */;
    _proto._close = function _close() {
      debug$1("disconnect");
      this.skipReconnect = true;
      this._reconnecting = false;
      this.onclose("forced close");
    }
    /**
     * Alias for close()
     *
     * @private
     */;
    _proto.disconnect = function disconnect() {
      return this._close();
    }
    /**
     * Called when:
     *
     * - the low-level engine is closed
     * - the parser encountered a badly formatted packet
     * - all sockets are disconnected
     *
     * @private
     */;
    _proto.onclose = function onclose(reason, description) {
      var _a;
      debug$1("closed due to %s", reason);
      this.cleanup();
      (_a = this.engine) === null || _a === void 0 ? void 0 : _a.close();
      this.backoff.reset();
      this._readyState = "closed";
      this.emitReserved("close", reason, description);
      if (this._reconnection && !this.skipReconnect) {
        this.reconnect();
      }
    }
    /**
     * Attempt a reconnection.
     *
     * @private
     */;
    _proto.reconnect = function reconnect() {
      var _this4 = this;
      if (this._reconnecting || this.skipReconnect) return this;
      var self = this;
      if (this.backoff.attempts >= this._reconnectionAttempts) {
        debug$1("reconnect failed");
        this.backoff.reset();
        this.emitReserved("reconnect_failed");
        this._reconnecting = false;
      } else {
        var delay = this.backoff.duration();
        debug$1("will wait %dms before reconnect attempt", delay);
        this._reconnecting = true;
        var timer = this.setTimeoutFn(function () {
          if (self.skipReconnect) return;
          debug$1("attempting reconnect");
          _this4.emitReserved("reconnect_attempt", self.backoff.attempts);
          // check again for the case socket closed in above events
          if (self.skipReconnect) return;
          self.open(function (err) {
            if (err) {
              debug$1("reconnect attempt error");
              self._reconnecting = false;
              self.reconnect();
              _this4.emitReserved("reconnect_error", err);
            } else {
              debug$1("reconnect success");
              self.onreconnect();
            }
          });
        }, delay);
        if (this.opts.autoUnref) {
          timer.unref();
        }
        this.subs.push(function () {
          _this4.clearTimeoutFn(timer);
        });
      }
    }
    /**
     * Called upon successful reconnect.
     *
     * @private
     */;
    _proto.onreconnect = function onreconnect() {
      var attempt = this.backoff.attempts;
      this._reconnecting = false;
      this.backoff.reset();
      this.emitReserved("reconnect", attempt);
    };
    return Manager;
  }(Emitter);

  var debug = debugModule("socket.io-client"); // debug()
  /**
   * Managers cache.
   */
  var cache = {};
  function lookup(uri, opts) {
    if (_typeof(uri) === "object") {
      opts = uri;
      uri = undefined;
    }
    opts = opts || {};
    var parsed = url(uri, opts.path || "/socket.io");
    var source = parsed.source;
    var id = parsed.id;
    var path = parsed.path;
    var sameNamespace = cache[id] && path in cache[id]["nsps"];
    var newConnection = opts.forceNew || opts["force new connection"] || false === opts.multiplex || sameNamespace;
    var io;
    if (newConnection) {
      debug("ignoring socket cache for %s", source);
      io = new Manager(source, opts);
    } else {
      if (!cache[id]) {
        debug("new io instance for %s", source);
        cache[id] = new Manager(source, opts);
      }
      io = cache[id];
    }
    if (parsed.query && !opts.query) {
      opts.query = parsed.queryKey;
    }
    return io.socket(parsed.path, opts);
  }
  // so that "lookup" can be used both as a function (e.g. `io(...)`) and as a
  // namespace (e.g. `io.connect(...)`), for backward compatibility
  _extends(lookup, {
    Manager: Manager,
    Socket: Socket,
    io: lookup,
    connect: lookup
  });

  return lookup;

}));
//# sourceMappingURL=socket.io.js.map

/*!
 * Signature Pad v4.1.7 | https://github.com/szimek/signature_pad
 * (c) 2023 Szymon Nowak | Released under the MIT license
 */
!function(t,e){"object"==typeof exports&&"undefined"!=typeof module?module.exports=e():"function"==typeof define&&define.amd?define(e):(t="undefined"!=typeof globalThis?globalThis:t||self).SignaturePad=e()}(this,(function(){"use strict";class t{constructor(t,e,i,s){if(isNaN(t)||isNaN(e))throw new Error(`Point is invalid: (${t}, ${e})`);this.x=+t,this.y=+e,this.pressure=i||0,this.time=s||Date.now()}distanceTo(t){return Math.sqrt(Math.pow(this.x-t.x,2)+Math.pow(this.y-t.y,2))}equals(t){return this.x===t.x&&this.y===t.y&&this.pressure===t.pressure&&this.time===t.time}velocityFrom(t){return this.time!==t.time?this.distanceTo(t)/(this.time-t.time):0}}class e{static fromPoints(t,i){const s=this.calculateControlPoints(t[0],t[1],t[2]).c2,n=this.calculateControlPoints(t[1],t[2],t[3]).c1;return new e(t[1],s,n,t[2],i.start,i.end)}static calculateControlPoints(e,i,s){const n=e.x-i.x,o=e.y-i.y,h=i.x-s.x,r=i.y-s.y,a=(e.x+i.x)/2,c=(e.y+i.y)/2,d=(i.x+s.x)/2,l=(i.y+s.y)/2,u=Math.sqrt(n*n+o*o),v=Math.sqrt(h*h+r*r),_=v/(u+v),p=d+(a-d)*_,m=l+(c-l)*_,g=i.x-p,w=i.y-m;return{c1:new t(a+g,c+w),c2:new t(d+g,l+w)}}constructor(t,e,i,s,n,o){this.startPoint=t,this.control2=e,this.control1=i,this.endPoint=s,this.startWidth=n,this.endWidth=o}length(){let t,e,i=0;for(let s=0;s<=10;s+=1){const n=s/10,o=this.point(n,this.startPoint.x,this.control1.x,this.control2.x,this.endPoint.x),h=this.point(n,this.startPoint.y,this.control1.y,this.control2.y,this.endPoint.y);if(s>0){const s=o-t,n=h-e;i+=Math.sqrt(s*s+n*n)}t=o,e=h}return i}point(t,e,i,s,n){return e*(1-t)*(1-t)*(1-t)+3*i*(1-t)*(1-t)*t+3*s*(1-t)*t*t+n*t*t*t}}class i{constructor(){try{this._et=new EventTarget}catch(t){this._et=document}}addEventListener(t,e,i){this._et.addEventListener(t,e,i)}dispatchEvent(t){return this._et.dispatchEvent(t)}removeEventListener(t,e,i){this._et.removeEventListener(t,e,i)}}class s extends i{constructor(t,e={}){super(),this.canvas=t,this._drawingStroke=!1,this._isEmpty=!0,this._lastPoints=[],this._data=[],this._lastVelocity=0,this._lastWidth=0,this._handleMouseDown=t=>{1===t.buttons&&this._strokeBegin(t)},this._handleMouseMove=t=>{this._strokeMoveUpdate(t)},this._handleMouseUp=t=>{1===t.buttons&&this._strokeEnd(t)},this._handleTouchStart=t=>{if(t.cancelable&&t.preventDefault(),1===t.targetTouches.length){const e=t.changedTouches[0];this._strokeBegin(e)}},this._handleTouchMove=t=>{t.cancelable&&t.preventDefault();const e=t.targetTouches[0];this._strokeMoveUpdate(e)},this._handleTouchEnd=t=>{if(t.target===this.canvas){t.cancelable&&t.preventDefault();const e=t.changedTouches[0];this._strokeEnd(e)}},this._handlePointerStart=t=>{t.preventDefault(),this._strokeBegin(t)},this._handlePointerMove=t=>{this._strokeMoveUpdate(t)},this._handlePointerEnd=t=>{this._drawingStroke&&(t.preventDefault(),this._strokeEnd(t))},this.velocityFilterWeight=e.velocityFilterWeight||.7,this.minWidth=e.minWidth||.5,this.maxWidth=e.maxWidth||2.5,this.throttle="throttle"in e?e.throttle:16,this.minDistance="minDistance"in e?e.minDistance:5,this.dotSize=e.dotSize||0,this.penColor=e.penColor||"black",this.backgroundColor=e.backgroundColor||"rgba(0,0,0,0)",this.compositeOperation=e.compositeOperation||"source-over",this._strokeMoveUpdate=this.throttle?function(t,e=250){let i,s,n,o=0,h=null;const r=()=>{o=Date.now(),h=null,i=t.apply(s,n),h||(s=null,n=[])};return function(...a){const c=Date.now(),d=e-(c-o);return s=this,n=a,d<=0||d>e?(h&&(clearTimeout(h),h=null),o=c,i=t.apply(s,n),h||(s=null,n=[])):h||(h=window.setTimeout(r,d)),i}}(s.prototype._strokeUpdate,this.throttle):s.prototype._strokeUpdate,this._ctx=t.getContext("2d"),this.clear(),this.on()}clear(){const{_ctx:t,canvas:e}=this;t.fillStyle=this.backgroundColor,t.clearRect(0,0,e.width,e.height),t.fillRect(0,0,e.width,e.height),this._data=[],this._reset(this._getPointGroupOptions()),this._isEmpty=!0}fromDataURL(t,e={}){return new Promise(((i,s)=>{const n=new Image,o=e.ratio||window.devicePixelRatio||1,h=e.width||this.canvas.width/o,r=e.height||this.canvas.height/o,a=e.xOffset||0,c=e.yOffset||0;this._reset(this._getPointGroupOptions()),n.onload=()=>{this._ctx.drawImage(n,a,c,h,r),i()},n.onerror=t=>{s(t)},n.crossOrigin="anonymous",n.src=t,this._isEmpty=!1}))}toDataURL(t="image/png",e){return"image/svg+xml"===t?("object"!=typeof e&&(e=void 0),`data:image/svg+xml;base64,${btoa(this.toSVG(e))}`):("number"!=typeof e&&(e=void 0),this.canvas.toDataURL(t,e))}on(){this.canvas.style.touchAction="none",this.canvas.style.msTouchAction="none",this.canvas.style.userSelect="none";const t=/Macintosh/.test(navigator.userAgent)&&"ontouchstart"in document;window.PointerEvent&&!t?this._handlePointerEvents():(this._handleMouseEvents(),"ontouchstart"in window&&this._handleTouchEvents())}off(){this.canvas.style.touchAction="auto",this.canvas.style.msTouchAction="auto",this.canvas.style.userSelect="auto",this.canvas.removeEventListener("pointerdown",this._handlePointerStart),this.canvas.removeEventListener("pointermove",this._handlePointerMove),this.canvas.ownerDocument.removeEventListener("pointerup",this._handlePointerEnd),this.canvas.removeEventListener("mousedown",this._handleMouseDown),this.canvas.removeEventListener("mousemove",this._handleMouseMove),this.canvas.ownerDocument.removeEventListener("mouseup",this._handleMouseUp),this.canvas.removeEventListener("touchstart",this._handleTouchStart),this.canvas.removeEventListener("touchmove",this._handleTouchMove),this.canvas.removeEventListener("touchend",this._handleTouchEnd)}isEmpty(){return this._isEmpty}fromData(t,{clear:e=!0}={}){e&&this.clear(),this._fromData(t,this._drawCurve.bind(this),this._drawDot.bind(this)),this._data=this._data.concat(t)}toData(){return this._data}_getPointGroupOptions(t){return{penColor:t&&"penColor"in t?t.penColor:this.penColor,dotSize:t&&"dotSize"in t?t.dotSize:this.dotSize,minWidth:t&&"minWidth"in t?t.minWidth:this.minWidth,maxWidth:t&&"maxWidth"in t?t.maxWidth:this.maxWidth,velocityFilterWeight:t&&"velocityFilterWeight"in t?t.velocityFilterWeight:this.velocityFilterWeight,compositeOperation:t&&"compositeOperation"in t?t.compositeOperation:this.compositeOperation}}_strokeBegin(t){if(!this.dispatchEvent(new CustomEvent("beginStroke",{detail:t,cancelable:!0})))return;this._drawingStroke=!0;const e=this._getPointGroupOptions(),i=Object.assign(Object.assign({},e),{points:[]});this._data.push(i),this._reset(e),this._strokeUpdate(t)}_strokeUpdate(t){if(!this._drawingStroke)return;if(0===this._data.length)return void this._strokeBegin(t);this.dispatchEvent(new CustomEvent("beforeUpdateStroke",{detail:t}));const e=t.clientX,i=t.clientY,s=void 0!==t.pressure?t.pressure:void 0!==t.force?t.force:0,n=this._createPoint(e,i,s),o=this._data[this._data.length-1],h=o.points,r=h.length>0&&h[h.length-1],a=!!r&&n.distanceTo(r)<=this.minDistance,c=this._getPointGroupOptions(o);if(!r||!r||!a){const t=this._addPoint(n,c);r?t&&this._drawCurve(t,c):this._drawDot(n,c),h.push({time:n.time,x:n.x,y:n.y,pressure:n.pressure})}this.dispatchEvent(new CustomEvent("afterUpdateStroke",{detail:t}))}_strokeEnd(t){this._drawingStroke&&(this._strokeUpdate(t),this._drawingStroke=!1,this.dispatchEvent(new CustomEvent("endStroke",{detail:t})))}_handlePointerEvents(){this._drawingStroke=!1,this.canvas.addEventListener("pointerdown",this._handlePointerStart),this.canvas.addEventListener("pointermove",this._handlePointerMove),this.canvas.ownerDocument.addEventListener("pointerup",this._handlePointerEnd)}_handleMouseEvents(){this._drawingStroke=!1,this.canvas.addEventListener("mousedown",this._handleMouseDown),this.canvas.addEventListener("mousemove",this._handleMouseMove),this.canvas.ownerDocument.addEventListener("mouseup",this._handleMouseUp)}_handleTouchEvents(){this.canvas.addEventListener("touchstart",this._handleTouchStart),this.canvas.addEventListener("touchmove",this._handleTouchMove),this.canvas.addEventListener("touchend",this._handleTouchEnd)}_reset(t){this._lastPoints=[],this._lastVelocity=0,this._lastWidth=(t.minWidth+t.maxWidth)/2,this._ctx.fillStyle=t.penColor,this._ctx.globalCompositeOperation=t.compositeOperation}_createPoint(e,i,s){const n=this.canvas.getBoundingClientRect();return new t(e-n.left,i-n.top,s,(new Date).getTime())}_addPoint(t,i){const{_lastPoints:s}=this;if(s.push(t),s.length>2){3===s.length&&s.unshift(s[0]);const t=this._calculateCurveWidths(s[1],s[2],i),n=e.fromPoints(s,t);return s.shift(),n}return null}_calculateCurveWidths(t,e,i){const s=i.velocityFilterWeight*e.velocityFrom(t)+(1-i.velocityFilterWeight)*this._lastVelocity,n=this._strokeWidth(s,i),o={end:n,start:this._lastWidth};return this._lastVelocity=s,this._lastWidth=n,o}_strokeWidth(t,e){return Math.max(e.maxWidth/(t+1),e.minWidth)}_drawCurveSegment(t,e,i){const s=this._ctx;s.moveTo(t,e),s.arc(t,e,i,0,2*Math.PI,!1),this._isEmpty=!1}_drawCurve(t,e){const i=this._ctx,s=t.endWidth-t.startWidth,n=2*Math.ceil(t.length());i.beginPath(),i.fillStyle=e.penColor;for(let i=0;i<n;i+=1){const o=i/n,h=o*o,r=h*o,a=1-o,c=a*a,d=c*a;let l=d*t.startPoint.x;l+=3*c*o*t.control1.x,l+=3*a*h*t.control2.x,l+=r*t.endPoint.x;let u=d*t.startPoint.y;u+=3*c*o*t.control1.y,u+=3*a*h*t.control2.y,u+=r*t.endPoint.y;const v=Math.min(t.startWidth+r*s,e.maxWidth);this._drawCurveSegment(l,u,v)}i.closePath(),i.fill()}_drawDot(t,e){const i=this._ctx,s=e.dotSize>0?e.dotSize:(e.minWidth+e.maxWidth)/2;i.beginPath(),this._drawCurveSegment(t.x,t.y,s),i.closePath(),i.fillStyle=e.penColor,i.fill()}_fromData(e,i,s){for(const n of e){const{points:e}=n,o=this._getPointGroupOptions(n);if(e.length>1)for(let s=0;s<e.length;s+=1){const n=e[s],h=new t(n.x,n.y,n.pressure,n.time);0===s&&this._reset(o);const r=this._addPoint(h,o);r&&i(r,o)}else this._reset(o),s(e[0],o)}}toSVG({includeBackgroundColor:t=!1}={}){const e=this._data,i=Math.max(window.devicePixelRatio||1,1),s=this.canvas.width/i,n=this.canvas.height/i,o=document.createElementNS("http://www.w3.org/2000/svg","svg");if(o.setAttribute("xmlns","http://www.w3.org/2000/svg"),o.setAttribute("xmlns:xlink","http://www.w3.org/1999/xlink"),o.setAttribute("viewBox",`0 0 ${s} ${n}`),o.setAttribute("width",s.toString()),o.setAttribute("height",n.toString()),t&&this.backgroundColor){const t=document.createElement("rect");t.setAttribute("width","100%"),t.setAttribute("height","100%"),t.setAttribute("fill",this.backgroundColor),o.appendChild(t)}return this._fromData(e,((t,{penColor:e})=>{const i=document.createElement("path");if(!(isNaN(t.control1.x)||isNaN(t.control1.y)||isNaN(t.control2.x)||isNaN(t.control2.y))){const s=`M ${t.startPoint.x.toFixed(3)},${t.startPoint.y.toFixed(3)} C ${t.control1.x.toFixed(3)},${t.control1.y.toFixed(3)} ${t.control2.x.toFixed(3)},${t.control2.y.toFixed(3)} ${t.endPoint.x.toFixed(3)},${t.endPoint.y.toFixed(3)}`;i.setAttribute("d",s),i.setAttribute("stroke-width",(2.25*t.endWidth).toFixed(3)),i.setAttribute("stroke",e),i.setAttribute("fill","none"),i.setAttribute("stroke-linecap","round"),o.appendChild(i)}}),((t,{penColor:e,dotSize:i,minWidth:s,maxWidth:n})=>{const h=document.createElement("circle"),r=i>0?i:(s+n)/2;h.setAttribute("r",r.toString()),h.setAttribute("cx",t.x.toString()),h.setAttribute("cy",t.y.toString()),h.setAttribute("fill",e),o.appendChild(h)})),o.outerHTML}}return s}));
//# sourceMappingURL=signature_pad.umd.min.js.map

